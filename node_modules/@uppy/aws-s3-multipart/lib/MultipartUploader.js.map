{"version":3,"names":["AbortController","createAbortError","delay","MB","defaultOptions","limit","retryDelays","getChunkSize","file","Math","ceil","size","onStart","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","MultipartUploader","constructor","options","abortController","key","uploadId","parts","createdPromise","Promise","reject","isPaused","partsInProgress","chunks","chunkState","catch","start","pause","abort","opts","undefined","really","signal","aborted","desiredChunkSize","minChunkSize","max","chunkSize","push","i","end","min","slice","map","uploaded","busy","done","resolve","then","createMultipartUpload","result","valid","listParts","forEach","part","PartNumber","Size","etag","ETag","some","p","every","state","getChunkIndexes","need","completeChunks","filter","length","remainingChunks","minNeeded","chunkIndexes","presignedUrls","headers","index","partNumber","prePreparedPart","url","before","attempt","after","shouldRetry","source","status","doAttempt","retryAttempt","prepareUploadParts","number","chunk","sent","totalUploaded","reduce","n","c","body","defer","promise","xhr","XMLHttpRequest","open","Object","keys","setRequestHeader","responseType","cleanup","removeEventListener","onabort","addEventListener","upload","ev","lengthComputable","loaded","total","target","error","Error","getResponseHeader","send","sort","a","b","completeMultipartUpload","abortMultipartUpload","name"],"sources":["MultipartUploader.js"],"sourcesContent":["import { AbortController, createAbortError } from '@uppy/utils/lib/AbortController'\nimport delay from '@uppy/utils/lib/delay'\n\nconst MB = 1024 * 1024\n\nconst defaultOptions = {\n  limit: 1,\n  retryDelays: [0, 1000, 3000, 5000],\n  getChunkSize (file) {\n    return Math.ceil(file.size / 10000)\n  },\n  onStart () {},\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  },\n}\n\nfunction ensureInt (value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nclass MultipartUploader {\n  constructor (file, options) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    if (!this.options.getChunkSize) {\n      this.options.getChunkSize = defaultOptions.getChunkSize\n    }\n\n    this.file = file\n    this.abortController = new AbortController()\n\n    this.key = this.options.key || null\n    this.uploadId = this.options.uploadId || null\n    this.parts = []\n\n    // Do `this.createdPromise.then(OP)` to execute an operation `OP` _only_ if the\n    // upload was created already. That also ensures that the sequencing is right\n    // (so the `OP` definitely happens if the upload is created).\n    //\n    // This mostly exists to make `#abortUpload` work well: only sending the abort request if\n    // the upload was already created, and if the createMultipartUpload request is still in flight,\n    // aborting it immediately after it finishes.\n    this.createdPromise = Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n    this.isPaused = false\n    this.partsInProgress = 0\n    this.chunks = null\n    this.chunkState = null\n\n    this.#initChunks()\n\n    this.createdPromise.catch(() => {}) // silence uncaught rejection warning\n  }\n\n  /**\n   * Was this upload aborted?\n   *\n   * If yes, we may need to throw an AbortError.\n   *\n   * @returns {boolean}\n   */\n  #aborted () {\n    return this.abortController.signal.aborted\n  }\n\n  #initChunks () {\n    const chunks = []\n    const desiredChunkSize = this.options.getChunkSize(this.file)\n    // at least 5MB per request, at most 10k requests\n    const minChunkSize = Math.max(5 * MB, Math.ceil(this.file.size / 10000))\n    const chunkSize = Math.max(desiredChunkSize, minChunkSize)\n\n    // Upload zero-sized files in one zero-sized chunk\n    if (this.file.size === 0) {\n      chunks.push(this.file)\n    } else {\n      for (let i = 0; i < this.file.size; i += chunkSize) {\n        const end = Math.min(this.file.size, i + chunkSize)\n        chunks.push(this.file.slice(i, end))\n      }\n    }\n\n    this.chunks = chunks\n    this.chunkState = chunks.map(() => ({\n      uploaded: 0,\n      busy: false,\n      done: false,\n    }))\n  }\n\n  #createUpload () {\n    this.createdPromise = Promise.resolve().then(() => this.options.createMultipartUpload())\n    return this.createdPromise.then((result) => {\n      if (this.#aborted()) throw createAbortError()\n\n      const valid = typeof result === 'object' && result\n        && typeof result.uploadId === 'string'\n        && typeof result.key === 'string'\n      if (!valid) {\n        throw new TypeError('AwsS3/Multipart: Got incorrect result from `createMultipartUpload()`, expected an object `{ uploadId, key }`.')\n      }\n\n      this.key = result.key\n      this.uploadId = result.uploadId\n\n      this.options.onStart(result)\n      this.#uploadParts()\n    }).catch((err) => {\n      this.#onError(err)\n    })\n  }\n\n  async #resumeUpload () {\n    try {\n      const parts = await this.options.listParts({\n        uploadId: this.uploadId,\n        key: this.key,\n      })\n      if (this.#aborted()) throw createAbortError()\n\n      parts.forEach((part) => {\n        const i = part.PartNumber - 1\n\n        this.chunkState[i] = {\n          uploaded: ensureInt(part.Size),\n          etag: part.ETag,\n          done: true,\n        }\n\n        // Only add if we did not yet know about this part.\n        if (!this.parts.some((p) => p.PartNumber === part.PartNumber)) {\n          this.parts.push({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n          })\n        }\n      })\n      this.#uploadParts()\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  #uploadParts () {\n    if (this.isPaused) return\n\n    // All parts are uploaded.\n    if (this.chunkState.every((state) => state.done)) {\n      this.#completeUpload()\n      return\n    }\n\n    const getChunkIndexes = () => {\n      // For a 100MB file, with the default min chunk size of 5MB and a limit of 10:\n      //\n      // Total 20 parts\n      // ---------\n      // Need 1 is 10\n      // Need 2 is 5\n      // Need 3 is 5\n      const need = this.options.limit - this.partsInProgress\n      const completeChunks = this.chunkState.filter((state) => state.done).length\n      const remainingChunks = this.chunks.length - completeChunks\n      let minNeeded = Math.ceil(this.options.limit / 2)\n      if (minNeeded > remainingChunks) {\n        minNeeded = remainingChunks\n      }\n      if (need < minNeeded) return []\n\n      const chunkIndexes = []\n      for (let i = 0; i < this.chunkState.length; i++) {\n        const state = this.chunkState[i]\n        // eslint-disable-next-line no-continue\n        if (state.done || state.busy) continue\n\n        chunkIndexes.push(i)\n        if (chunkIndexes.length >= need) {\n          break\n        }\n      }\n\n      return chunkIndexes\n    }\n\n    const chunkIndexes = getChunkIndexes()\n\n    if (chunkIndexes.length === 0) return\n\n    this.#prepareUploadPartsRetryable(chunkIndexes).then(\n      ({ presignedUrls, headers }) => {\n        for (const index of chunkIndexes) {\n          const partNumber = index + 1\n          const prePreparedPart = {\n            url: presignedUrls[partNumber],\n            headers: headers?.[partNumber],\n          }\n          this.#uploadPartRetryable(index, prePreparedPart).then(\n            () => this.#uploadParts(),\n            (err) => this.#onError(err),\n          )\n        }\n      },\n      (err) => this.#onError(err),\n    )\n  }\n\n  #retryable ({ before, attempt, after }) {\n    const { retryDelays } = this.options\n    const { signal } = this.abortController\n\n    if (before) before()\n\n    function shouldRetry (err) {\n      if (err.source && typeof err.source.status === 'number') {\n        const { status } = err.source\n        // 0 probably indicates network failure\n        return status === 0 || status === 409 || status === 423 || (status >= 500 && status < 600)\n      }\n      return false\n    }\n\n    const doAttempt = (retryAttempt) => attempt().catch((err) => {\n      if (this.#aborted()) throw createAbortError()\n\n      if (shouldRetry(err) && retryAttempt < retryDelays.length) {\n        return delay(retryDelays[retryAttempt], { signal })\n          .then(() => doAttempt(retryAttempt + 1))\n      }\n      throw err\n    })\n\n    return doAttempt(0).then((result) => {\n      if (after) after()\n      return result\n    }, (err) => {\n      if (after) after()\n      throw err\n    })\n  }\n\n  async #prepareUploadPartsRetryable (chunkIndexes) {\n    chunkIndexes.forEach((i) => {\n      this.chunkState[i].busy = true\n    })\n\n    const result = await this.#retryable({\n      attempt: () => this.options.prepareUploadParts({\n        key: this.key,\n        uploadId: this.uploadId,\n        parts: chunkIndexes.map((index) => ({\n          number: index + 1, // Use the part number as the index\n          chunk: this.chunks[index],\n        })),\n      }),\n    })\n\n    if (typeof result?.presignedUrls !== 'object') {\n      throw new TypeError(\n        'AwsS3/Multipart: Got incorrect result from `prepareUploadParts()`, expected an object `{ presignedUrls }`.',\n      )\n    }\n\n    return result\n  }\n\n  #uploadPartRetryable (index, prePreparedPart) {\n    return this.#retryable({\n      before: () => {\n        this.chunkState[index].busy = true\n        this.partsInProgress += 1\n      },\n      attempt: () => this.#uploadPart(index, prePreparedPart),\n      after: () => {\n        this.chunkState[index].busy = false\n        this.partsInProgress -= 1\n      },\n    })\n  }\n\n  #uploadPart (index, prePreparedPart) {\n    const valid = typeof prePreparedPart?.url === 'string'\n    if (!valid) {\n      throw new TypeError('AwsS3/Multipart: Got incorrect result for `prePreparedPart`, expected an object `{ url }`.')\n    }\n\n    const { url, headers } = prePreparedPart\n    if (this.#aborted()) {\n      throw createAbortError()\n    }\n\n    return this.#uploadPartBytes(index, url, headers)\n  }\n\n  #onPartProgress (index, sent) {\n    this.chunkState[index].uploaded = ensureInt(sent)\n\n    const totalUploaded = this.chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.file.size)\n  }\n\n  #onPartComplete (index, etag) {\n    this.chunkState[index].etag = etag\n    this.chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.parts.push(part)\n\n    this.options.onPartComplete(part)\n  }\n\n  #uploadPartBytes (index, url, headers) {\n    const body = this.chunks[index]\n    const { signal } = this.abortController\n\n    let defer\n    const promise = new Promise((resolve, reject) => {\n      defer = { resolve, reject }\n    })\n\n    const xhr = new XMLHttpRequest()\n    xhr.open('PUT', url, true)\n    if (headers) {\n      Object.keys(headers).forEach((key) => {\n        xhr.setRequestHeader(key, headers[key])\n      })\n    }\n    xhr.responseType = 'text'\n\n    function cleanup () {\n      // eslint-disable-next-line no-use-before-define\n      signal.removeEventListener('abort', onabort)\n    }\n    function onabort () {\n      xhr.abort()\n    }\n    signal.addEventListener('abort', onabort)\n\n    xhr.upload.addEventListener('progress', (ev) => {\n      if (!ev.lengthComputable) return\n\n      this.#onPartProgress(index, ev.loaded, ev.total)\n    })\n\n    xhr.addEventListener('abort', () => {\n      cleanup()\n\n      defer.reject(createAbortError())\n    })\n\n    xhr.addEventListener('load', (ev) => {\n      cleanup()\n\n      if (ev.target.status < 200 || ev.target.status >= 300) {\n        const error = new Error('Non 2xx')\n        error.source = ev.target\n        defer.reject(error)\n        return\n      }\n\n      // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n      this.chunks[index] = null\n\n      this.#onPartProgress(index, body.size, body.size)\n\n      // NOTE This must be allowed by CORS.\n      const etag = ev.target.getResponseHeader('ETag')\n\n      if (etag === null) {\n        defer.reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'))\n        return\n      }\n\n      this.#onPartComplete(index, etag)\n      defer.resolve()\n    })\n\n    xhr.addEventListener('error', (ev) => {\n      cleanup()\n\n      const error = new Error('Unknown error')\n      error.source = ev.target\n      defer.reject(error)\n    })\n\n    xhr.send(body)\n\n    return promise\n  }\n\n  async #completeUpload () {\n    // Parts may not have completed uploading in sorted order, if limit > 1.\n    this.parts.sort((a, b) => a.PartNumber - b.PartNumber)\n\n    try {\n      const result = await this.options.completeMultipartUpload({\n        key: this.key,\n        uploadId: this.uploadId,\n        parts: this.parts,\n      })\n      this.options.onSuccess(result)\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  #abortUpload () {\n    this.abortController.abort()\n\n    this.createdPromise.then(() => this.options.abortMultipartUpload({\n      key: this.key,\n      uploadId: this.uploadId,\n    })).catch(() => {\n      // if the creation failed we do not need to abort\n    })\n  }\n\n  #onError (err) {\n    if (err && err.name === 'AbortError') {\n      return\n    }\n\n    this.options.onError(err)\n  }\n\n  start () {\n    this.isPaused = false\n    if (this.uploadId) {\n      this.#resumeUpload()\n    } else {\n      this.#createUpload()\n    }\n  }\n\n  pause () {\n    this.abortController.abort()\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.abortController = new AbortController()\n\n    this.isPaused = true\n  }\n\n  abort (opts = undefined) {\n    if (opts?.really) this.#abortUpload()\n    else this.pause()\n  }\n}\n\nexport default MultipartUploader\n"],"mappings":"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"}