{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nvar PendingChanges = /** @class */function () {\n  function PendingChanges() {\n    this._hasPending = false;\n    this._inserts = [];\n    this._changes = [];\n    this._removes = [];\n  }\n  PendingChanges.prototype.insert = function (x) {\n    this._hasPending = true;\n    this._inserts.push(x);\n  };\n  PendingChanges.prototype.change = function (x) {\n    this._hasPending = true;\n    this._changes.push(x);\n  };\n  PendingChanges.prototype.remove = function (x) {\n    this._hasPending = true;\n    this._removes.push(x);\n  };\n  PendingChanges.prototype.mustCommit = function () {\n    return this._hasPending;\n  };\n  PendingChanges.prototype.commit = function (linesLayout) {\n    if (!this._hasPending) {\n      return;\n    }\n    var inserts = this._inserts;\n    var changes = this._changes;\n    var removes = this._removes;\n    this._hasPending = false;\n    this._inserts = [];\n    this._changes = [];\n    this._removes = [];\n    linesLayout._commitPendingChanges(inserts, changes, removes);\n  };\n  return PendingChanges;\n}();\nvar EditorWhitespace = /** @class */function () {\n  function EditorWhitespace(id, afterLineNumber, ordinal, height, minWidth) {\n    this.id = id;\n    this.afterLineNumber = afterLineNumber;\n    this.ordinal = ordinal;\n    this.height = height;\n    this.minWidth = minWidth;\n    this.prefixSum = 0;\n  }\n  return EditorWhitespace;\n}();\nexport { EditorWhitespace };\n/**\r\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\r\n *\r\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\r\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\r\n */\nvar LinesLayout = /** @class */function () {\n  function LinesLayout(lineCount, lineHeight) {\n    this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n    this._pendingChanges = new PendingChanges();\n    this._lastWhitespaceId = 0;\n    this._arr = [];\n    this._prefixSumValidIndex = -1;\n    this._minWidth = -1; /* marker for not being computed */\n    this._lineCount = lineCount;\n    this._lineHeight = lineHeight;\n  }\n  /**\r\n   * Find the insertion index for a new value inside a sorted array of values.\r\n   * If the value is already present in the sorted array, the insertion index will be after the already existing value.\r\n   */\n  LinesLayout.findInsertionIndex = function (arr, afterLineNumber, ordinal) {\n    var low = 0;\n    var high = arr.length;\n    while (low < high) {\n      var mid = low + high >>> 1;\n      if (afterLineNumber === arr[mid].afterLineNumber) {\n        if (ordinal < arr[mid].ordinal) {\n          high = mid;\n        } else {\n          low = mid + 1;\n        }\n      } else if (afterLineNumber < arr[mid].afterLineNumber) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n    return low;\n  };\n  /**\r\n   * Change the height of a line in pixels.\r\n   */\n  LinesLayout.prototype.setLineHeight = function (lineHeight) {\n    this._checkPendingChanges();\n    this._lineHeight = lineHeight;\n  };\n  /**\r\n   * Set the number of lines.\r\n   *\r\n   * @param lineCount New number of lines.\r\n   */\n  LinesLayout.prototype.onFlushed = function (lineCount) {\n    this._checkPendingChanges();\n    this._lineCount = lineCount;\n  };\n  LinesLayout.prototype.changeWhitespace = function (callback) {\n    var _this = this;\n    try {\n      var accessor = {\n        insertWhitespace: function insertWhitespace(afterLineNumber, ordinal, heightInPx, minWidth) {\n          afterLineNumber = afterLineNumber | 0;\n          ordinal = ordinal | 0;\n          heightInPx = heightInPx | 0;\n          minWidth = minWidth | 0;\n          var id = _this._instanceId + ++_this._lastWhitespaceId;\n          _this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n          return id;\n        },\n        changeOneWhitespace: function changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n          newAfterLineNumber = newAfterLineNumber | 0;\n          newHeight = newHeight | 0;\n          _this._pendingChanges.change({\n            id: id,\n            newAfterLineNumber: newAfterLineNumber,\n            newHeight: newHeight\n          });\n        },\n        removeWhitespace: function removeWhitespace(id) {\n          _this._pendingChanges.remove({\n            id: id\n          });\n        }\n      };\n      return callback(accessor);\n    } finally {\n      this._pendingChanges.commit(this);\n    }\n  };\n  LinesLayout.prototype._commitPendingChanges = function (inserts, changes, removes) {\n    if (inserts.length > 0 || removes.length > 0) {\n      this._minWidth = -1; /* marker for not being computed */\n    }\n\n    if (inserts.length + changes.length + removes.length <= 1) {\n      // when only one thing happened, handle it \"delicately\"\n      for (var _i = 0, inserts_1 = inserts; _i < inserts_1.length; _i++) {\n        var insert = inserts_1[_i];\n        this._insertWhitespace(insert);\n      }\n      for (var _a = 0, changes_1 = changes; _a < changes_1.length; _a++) {\n        var change = changes_1[_a];\n        this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n      }\n      for (var _b = 0, removes_1 = removes; _b < removes_1.length; _b++) {\n        var remove = removes_1[_b];\n        var index = this._findWhitespaceIndex(remove.id);\n        if (index === -1) {\n          continue;\n        }\n        this._removeWhitespace(index);\n      }\n      return;\n    }\n    // simply rebuild the entire datastructure\n    var toRemove = new Set();\n    for (var _c = 0, removes_2 = removes; _c < removes_2.length; _c++) {\n      var remove = removes_2[_c];\n      toRemove.add(remove.id);\n    }\n    var toChange = new Map();\n    for (var _d = 0, changes_2 = changes; _d < changes_2.length; _d++) {\n      var change = changes_2[_d];\n      toChange.set(change.id, change);\n    }\n    var applyRemoveAndChange = function applyRemoveAndChange(whitespaces) {\n      var result = [];\n      for (var _i = 0, whitespaces_1 = whitespaces; _i < whitespaces_1.length; _i++) {\n        var whitespace = whitespaces_1[_i];\n        if (toRemove.has(whitespace.id)) {\n          continue;\n        }\n        if (toChange.has(whitespace.id)) {\n          var change = toChange.get(whitespace.id);\n          whitespace.afterLineNumber = change.newAfterLineNumber;\n          whitespace.height = change.newHeight;\n        }\n        result.push(whitespace);\n      }\n      return result;\n    };\n    var result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n    result.sort(function (a, b) {\n      if (a.afterLineNumber === b.afterLineNumber) {\n        return a.ordinal - b.ordinal;\n      }\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    this._arr = result;\n    this._prefixSumValidIndex = -1;\n  };\n  LinesLayout.prototype._checkPendingChanges = function () {\n    if (this._pendingChanges.mustCommit()) {\n      this._pendingChanges.commit(this);\n    }\n  };\n  LinesLayout.prototype._insertWhitespace = function (whitespace) {\n    var insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n    this._arr.splice(insertIndex, 0, whitespace);\n    this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n  };\n  LinesLayout.prototype._findWhitespaceIndex = function (id) {\n    var arr = this._arr;\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i].id === id) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  LinesLayout.prototype._changeOneWhitespace = function (id, newAfterLineNumber, newHeight) {\n    var index = this._findWhitespaceIndex(id);\n    if (index === -1) {\n      return;\n    }\n    if (this._arr[index].height !== newHeight) {\n      this._arr[index].height = newHeight;\n      this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n    }\n    if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n      // `afterLineNumber` changed for this whitespace\n      // Record old whitespace\n      var whitespace = this._arr[index];\n      // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n      this._removeWhitespace(index);\n      whitespace.afterLineNumber = newAfterLineNumber;\n      // And add it again\n      this._insertWhitespace(whitespace);\n    }\n  };\n  LinesLayout.prototype._removeWhitespace = function (removeIndex) {\n    this._arr.splice(removeIndex, 1);\n    this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n  };\n  /**\r\n   * Notify the layouter that lines have been deleted (a continuous zone of lines).\r\n   *\r\n   * @param fromLineNumber The line number at which the deletion started, inclusive\r\n   * @param toLineNumber The line number at which the deletion ended, inclusive\r\n   */\n  LinesLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\n    this._checkPendingChanges();\n    fromLineNumber = fromLineNumber | 0;\n    toLineNumber = toLineNumber | 0;\n    this._lineCount -= toLineNumber - fromLineNumber + 1;\n    for (var i = 0, len = this._arr.length; i < len; i++) {\n      var afterLineNumber = this._arr[i].afterLineNumber;\n      if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n        // The line this whitespace was after has been deleted\n        //  => move whitespace to before first deleted line\n        this._arr[i].afterLineNumber = fromLineNumber - 1;\n      } else if (afterLineNumber > toLineNumber) {\n        // The line this whitespace was after has been moved up\n        //  => move whitespace up\n        this._arr[i].afterLineNumber -= toLineNumber - fromLineNumber + 1;\n      }\n    }\n  };\n  /**\r\n   * Notify the layouter that lines have been inserted (a continuous zone of lines).\r\n   *\r\n   * @param fromLineNumber The line number at which the insertion started, inclusive\r\n   * @param toLineNumber The line number at which the insertion ended, inclusive.\r\n   */\n  LinesLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\n    this._checkPendingChanges();\n    fromLineNumber = fromLineNumber | 0;\n    toLineNumber = toLineNumber | 0;\n    this._lineCount += toLineNumber - fromLineNumber + 1;\n    for (var i = 0, len = this._arr.length; i < len; i++) {\n      var afterLineNumber = this._arr[i].afterLineNumber;\n      if (fromLineNumber <= afterLineNumber) {\n        this._arr[i].afterLineNumber += toLineNumber - fromLineNumber + 1;\n      }\n    }\n  };\n  /**\r\n   * Get the sum of all the whitespaces.\r\n   */\n  LinesLayout.prototype.getWhitespacesTotalHeight = function () {\n    this._checkPendingChanges();\n    if (this._arr.length === 0) {\n      return 0;\n    }\n    return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n  };\n  /**\r\n   * Return the sum of the heights of the whitespaces at [0..index].\r\n   * This includes the whitespace at `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\r\n   */\n  LinesLayout.prototype.getWhitespacesAccumulatedHeight = function (index) {\n    this._checkPendingChanges();\n    index = index | 0;\n    var startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n    if (startIndex === 0) {\n      this._arr[0].prefixSum = this._arr[0].height;\n      startIndex++;\n    }\n    for (var i = startIndex; i <= index; i++) {\n      this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n    }\n    this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n    return this._arr[index].prefixSum;\n  };\n  /**\r\n   * Get the sum of heights for all objects.\r\n   *\r\n   * @return The sum of heights for all objects.\r\n   */\n  LinesLayout.prototype.getLinesTotalHeight = function () {\n    this._checkPendingChanges();\n    var linesHeight = this._lineHeight * this._lineCount;\n    var whitespacesHeight = this.getWhitespacesTotalHeight();\n    return linesHeight + whitespacesHeight;\n  };\n  /**\r\n   * Returns the accumulated height of whitespaces before the given line number.\r\n   *\r\n   * @param lineNumber The line number\r\n   */\n  LinesLayout.prototype.getWhitespaceAccumulatedHeightBeforeLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n    lineNumber = lineNumber | 0;\n    var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n    if (lastWhitespaceBeforeLineNumber === -1) {\n      return 0;\n    }\n    return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n  };\n  LinesLayout.prototype._findLastWhitespaceBeforeLineNumber = function (lineNumber) {\n    lineNumber = lineNumber | 0;\n    // Find the whitespace before line number\n    var arr = this._arr;\n    var low = 0;\n    var high = arr.length - 1;\n    while (low <= high) {\n      var delta = high - low | 0;\n      var halfDelta = delta / 2 | 0;\n      var mid = low + halfDelta | 0;\n      if (arr[mid].afterLineNumber < lineNumber) {\n        if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n          return mid;\n        } else {\n          low = mid + 1 | 0;\n        }\n      } else {\n        high = mid - 1 | 0;\n      }\n    }\n    return -1;\n  };\n  LinesLayout.prototype._findFirstWhitespaceAfterLineNumber = function (lineNumber) {\n    lineNumber = lineNumber | 0;\n    var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n    var firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n    if (firstWhitespaceAfterLineNumber < this._arr.length) {\n      return firstWhitespaceAfterLineNumber;\n    }\n    return -1;\n  };\n  /**\r\n   * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\r\n   * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\r\n   */\n  LinesLayout.prototype.getFirstWhitespaceIndexAfterLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n    lineNumber = lineNumber | 0;\n    return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n  };\n  /**\r\n   * Get the vertical offset (the sum of heights for all objects above) a certain line number.\r\n   *\r\n   * @param lineNumber The line number\r\n   * @return The sum of heights for all objects above `lineNumber`.\r\n   */\n  LinesLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n    this._checkPendingChanges();\n    lineNumber = lineNumber | 0;\n    var previousLinesHeight;\n    if (lineNumber > 1) {\n      previousLinesHeight = this._lineHeight * (lineNumber - 1);\n    } else {\n      previousLinesHeight = 0;\n    }\n    var previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n  /**\r\n   * The maximum min width for all whitespaces.\r\n   */\n  LinesLayout.prototype.getWhitespaceMinWidth = function () {\n    this._checkPendingChanges();\n    if (this._minWidth === -1) {\n      var minWidth = 0;\n      for (var i = 0, len = this._arr.length; i < len; i++) {\n        minWidth = Math.max(minWidth, this._arr[i].minWidth);\n      }\n      this._minWidth = minWidth;\n    }\n    return this._minWidth;\n  };\n  /**\r\n   * Check if `verticalOffset` is below all lines.\r\n   */\n  LinesLayout.prototype.isAfterLines = function (verticalOffset) {\n    this._checkPendingChanges();\n    var totalHeight = this.getLinesTotalHeight();\n    return verticalOffset > totalHeight;\n  };\n  /**\r\n   * Find the first line number that is at or after vertical offset `verticalOffset`.\r\n   * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\r\n   * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\r\n   *\r\n   * @param verticalOffset The vertical offset to search at.\r\n   * @return The line number at or after vertical offset `verticalOffset`.\r\n   */\n  LinesLayout.prototype.getLineNumberAtOrAfterVerticalOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n    verticalOffset = verticalOffset | 0;\n    if (verticalOffset < 0) {\n      return 1;\n    }\n    var linesCount = this._lineCount | 0;\n    var lineHeight = this._lineHeight;\n    var minLineNumber = 1;\n    var maxLineNumber = linesCount;\n    while (minLineNumber < maxLineNumber) {\n      var midLineNumber = (minLineNumber + maxLineNumber) / 2 | 0;\n      var midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n      if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n        // vertical offset is after mid line number\n        minLineNumber = midLineNumber + 1;\n      } else if (verticalOffset >= midLineNumberVerticalOffset) {\n        // Hit\n        return midLineNumber;\n      } else {\n        // vertical offset is before mid line number, but mid line number could still be what we're searching for\n        maxLineNumber = midLineNumber;\n      }\n    }\n    if (minLineNumber > linesCount) {\n      return linesCount;\n    }\n    return minLineNumber;\n  };\n  /**\r\n   * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n   *\r\n   * @param verticalOffset1 The beginning of the viewport.\r\n   * @param verticalOffset2 The end of the viewport.\r\n   * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\r\n   */\n  LinesLayout.prototype.getLinesViewportData = function (verticalOffset1, verticalOffset2) {\n    this._checkPendingChanges();\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var lineHeight = this._lineHeight;\n    // Find first line number\n    // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n    var startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n    var startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n    var endLineNumber = this._lineCount | 0;\n    // Also keep track of what whitespace we've got\n    var whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n    var whitespaceCount = this.getWhitespacesCount() | 0;\n    var currentWhitespaceHeight;\n    var currentWhitespaceAfterLineNumber;\n    if (whitespaceIndex === -1) {\n      whitespaceIndex = whitespaceCount;\n      currentWhitespaceAfterLineNumber = endLineNumber + 1;\n      currentWhitespaceHeight = 0;\n    } else {\n      currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n      currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n    }\n    var currentVerticalOffset = startLineNumberVerticalOffset;\n    var currentLineRelativeOffset = currentVerticalOffset;\n    // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n    var STEP_SIZE = 500000;\n    var bigNumbersDelta = 0;\n    if (startLineNumberVerticalOffset >= STEP_SIZE) {\n      // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n      bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n      bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n      currentLineRelativeOffset -= bigNumbersDelta;\n    }\n    var linesOffsets = [];\n    var verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n    var centeredLineNumber = -1;\n    // Figure out how far the lines go\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      if (centeredLineNumber === -1) {\n        var currentLineTop = currentVerticalOffset;\n        var currentLineBottom = currentVerticalOffset + lineHeight;\n        if (currentLineTop <= verticalCenter && verticalCenter < currentLineBottom || currentLineTop > verticalCenter) {\n          centeredLineNumber = lineNumber;\n        }\n      }\n      // Count current line height in the vertical offsets\n      currentVerticalOffset += lineHeight;\n      linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n      // Next line starts immediately after this one\n      currentLineRelativeOffset += lineHeight;\n      while (currentWhitespaceAfterLineNumber === lineNumber) {\n        // Push down next line with the height of the current whitespace\n        currentLineRelativeOffset += currentWhitespaceHeight;\n        // Count current whitespace in the vertical offsets\n        currentVerticalOffset += currentWhitespaceHeight;\n        whitespaceIndex++;\n        if (whitespaceIndex >= whitespaceCount) {\n          currentWhitespaceAfterLineNumber = endLineNumber + 1;\n        } else {\n          currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n          currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n      }\n      if (currentVerticalOffset >= verticalOffset2) {\n        // We have covered the entire viewport area, time to stop\n        endLineNumber = lineNumber;\n        break;\n      }\n    }\n    if (centeredLineNumber === -1) {\n      centeredLineNumber = endLineNumber;\n    }\n    var endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n    var completelyVisibleStartLineNumber = startLineNumber;\n    var completelyVisibleEndLineNumber = endLineNumber;\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (startLineNumberVerticalOffset < verticalOffset1) {\n        completelyVisibleStartLineNumber++;\n      }\n    }\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n        completelyVisibleEndLineNumber--;\n      }\n    }\n    return {\n      bigNumbersDelta: bigNumbersDelta,\n      startLineNumber: startLineNumber,\n      endLineNumber: endLineNumber,\n      relativeVerticalOffset: linesOffsets,\n      centeredLineNumber: centeredLineNumber,\n      completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n      completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n    };\n  };\n  LinesLayout.prototype.getVerticalOffsetForWhitespaceIndex = function (whitespaceIndex) {\n    this._checkPendingChanges();\n    whitespaceIndex = whitespaceIndex | 0;\n    var afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n    var previousLinesHeight;\n    if (afterLineNumber >= 1) {\n      previousLinesHeight = this._lineHeight * afterLineNumber;\n    } else {\n      previousLinesHeight = 0;\n    }\n    var previousWhitespacesHeight;\n    if (whitespaceIndex > 0) {\n      previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n    } else {\n      previousWhitespacesHeight = 0;\n    }\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n  LinesLayout.prototype.getWhitespaceIndexAtOrAfterVerticallOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n    verticalOffset = verticalOffset | 0;\n    var minWhitespaceIndex = 0;\n    var maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n    if (maxWhitespaceIndex < 0) {\n      return -1;\n    }\n    // Special case: nothing to be found\n    var maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n    var maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n    if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n      return -1;\n    }\n    while (minWhitespaceIndex < maxWhitespaceIndex) {\n      var midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n      var midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n      var midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n      if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n        // vertical offset is after whitespace\n        minWhitespaceIndex = midWhitespaceIndex + 1;\n      } else if (verticalOffset >= midWhitespaceVerticalOffset) {\n        // Hit\n        return midWhitespaceIndex;\n      } else {\n        // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n        maxWhitespaceIndex = midWhitespaceIndex;\n      }\n    }\n    return minWhitespaceIndex;\n  };\n  /**\r\n   * Get exactly the whitespace that is layouted at `verticalOffset`.\r\n   *\r\n   * @param verticalOffset The vertical offset.\r\n   * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\r\n   */\n  LinesLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\n    this._checkPendingChanges();\n    verticalOffset = verticalOffset | 0;\n    var candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n    if (candidateIndex < 0) {\n      return null;\n    }\n    if (candidateIndex >= this.getWhitespacesCount()) {\n      return null;\n    }\n    var candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n    if (candidateTop > verticalOffset) {\n      return null;\n    }\n    var candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n    var candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n    var candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n    return {\n      id: candidateId,\n      afterLineNumber: candidateAfterLineNumber,\n      verticalOffset: candidateTop,\n      height: candidateHeight\n    };\n  };\n  /**\r\n   * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n   *\r\n   * @param verticalOffset1 The beginning of the viewport.\r\n   * @param verticalOffset2 The end of the viewport.\r\n   * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\r\n   */\n  LinesLayout.prototype.getWhitespaceViewportData = function (verticalOffset1, verticalOffset2) {\n    this._checkPendingChanges();\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n    var endIndex = this.getWhitespacesCount() - 1;\n    if (startIndex < 0) {\n      return [];\n    }\n    var result = [];\n    for (var i = startIndex; i <= endIndex; i++) {\n      var top_1 = this.getVerticalOffsetForWhitespaceIndex(i);\n      var height = this.getHeightForWhitespaceIndex(i);\n      if (top_1 >= verticalOffset2) {\n        break;\n      }\n      result.push({\n        id: this.getIdForWhitespaceIndex(i),\n        afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n        verticalOffset: top_1,\n        height: height\n      });\n    }\n    return result;\n  };\n  /**\r\n   * Get all whitespaces.\r\n   */\n  LinesLayout.prototype.getWhitespaces = function () {\n    this._checkPendingChanges();\n    return this._arr.slice(0);\n  };\n  /**\r\n   * The number of whitespaces.\r\n   */\n  LinesLayout.prototype.getWhitespacesCount = function () {\n    this._checkPendingChanges();\n    return this._arr.length;\n  };\n  /**\r\n   * Get the `id` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `id` of whitespace at `index`.\r\n   */\n  LinesLayout.prototype.getIdForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n    index = index | 0;\n    return this._arr[index].id;\n  };\n  /**\r\n   * Get the `afterLineNumber` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `afterLineNumber` of whitespace at `index`.\r\n   */\n  LinesLayout.prototype.getAfterLineNumberForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n    index = index | 0;\n    return this._arr[index].afterLineNumber;\n  };\n  /**\r\n   * Get the `height` for whitespace at index `index`.\r\n   *\r\n   * @param index The index of the whitespace.\r\n   * @return `height` of whitespace at `index`.\r\n   */\n  LinesLayout.prototype.getHeightForWhitespaceIndex = function (index) {\n    this._checkPendingChanges();\n    index = index | 0;\n    return this._arr[index].height;\n  };\n  LinesLayout.INSTANCE_COUNT = 0;\n  return LinesLayout;\n}();\nexport { LinesLayout };","map":{"version":3,"names":["strings","PendingChanges","_hasPending","_inserts","_changes","_removes","prototype","insert","x","push","change","remove","mustCommit","commit","linesLayout","inserts","changes","removes","_commitPendingChanges","EditorWhitespace","id","afterLineNumber","ordinal","height","minWidth","prefixSum","LinesLayout","lineCount","lineHeight","_instanceId","singleLetterHash","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_lineHeight","findInsertionIndex","arr","low","high","length","mid","setLineHeight","_checkPendingChanges","onFlushed","changeWhitespace","callback","_this","accessor","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","removeWhitespace","_i","inserts_1","_insertWhitespace","_a","changes_1","_changeOneWhitespace","_b","removes_1","index","_findWhitespaceIndex","_removeWhitespace","toRemove","Set","_c","removes_2","add","toChange","Map","_d","changes_2","set","applyRemoveAndChange","whitespaces","result","whitespaces_1","whitespace","has","get","concat","sort","a","b","insertIndex","splice","Math","min","i","len","removeIndex","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","getWhitespacesTotalHeight","getWhitespacesAccumulatedHeight","startIndex","max","getLinesTotalHeight","linesHeight","whitespacesHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","lineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","delta","halfDelta","_findFirstWhitespaceAfterLineNumber","firstWhitespaceAfterLineNumber","getFirstWhitespaceIndexAfterLineNumber","getVerticalOffsetForLineNumber","previousLinesHeight","previousWhitespacesHeight","getWhitespaceMinWidth","isAfterLines","verticalOffset","totalHeight","getLineNumberAtOrAfterVerticalOffset","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getLinesViewportData","verticalOffset1","verticalOffset2","startLineNumber","startLineNumberVerticalOffset","endLineNumber","whitespaceIndex","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","bigNumbersDelta","floor","linesOffsets","verticalCenter","centeredLineNumber","currentLineTop","currentLineBottom","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","relativeVerticalOffset","getVerticalOffsetForWhitespaceIndex","getWhitespaceIndexAtOrAfterVerticallOffset","minWhitespaceIndex","maxWhitespaceIndex","maxWhitespaceVerticalOffset","maxWhitespaceHeight","midWhitespaceIndex","midWhitespaceVerticalOffset","midWhitespaceHeight","getWhitespaceAtVerticalOffset","candidateIndex","candidateTop","candidateHeight","candidateId","getIdForWhitespaceIndex","candidateAfterLineNumber","getWhitespaceViewportData","endIndex","top_1","getWhitespaces","slice"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar PendingChanges = /** @class */ (function () {\r\n    function PendingChanges() {\r\n        this._hasPending = false;\r\n        this._inserts = [];\r\n        this._changes = [];\r\n        this._removes = [];\r\n    }\r\n    PendingChanges.prototype.insert = function (x) {\r\n        this._hasPending = true;\r\n        this._inserts.push(x);\r\n    };\r\n    PendingChanges.prototype.change = function (x) {\r\n        this._hasPending = true;\r\n        this._changes.push(x);\r\n    };\r\n    PendingChanges.prototype.remove = function (x) {\r\n        this._hasPending = true;\r\n        this._removes.push(x);\r\n    };\r\n    PendingChanges.prototype.mustCommit = function () {\r\n        return this._hasPending;\r\n    };\r\n    PendingChanges.prototype.commit = function (linesLayout) {\r\n        if (!this._hasPending) {\r\n            return;\r\n        }\r\n        var inserts = this._inserts;\r\n        var changes = this._changes;\r\n        var removes = this._removes;\r\n        this._hasPending = false;\r\n        this._inserts = [];\r\n        this._changes = [];\r\n        this._removes = [];\r\n        linesLayout._commitPendingChanges(inserts, changes, removes);\r\n    };\r\n    return PendingChanges;\r\n}());\r\nvar EditorWhitespace = /** @class */ (function () {\r\n    function EditorWhitespace(id, afterLineNumber, ordinal, height, minWidth) {\r\n        this.id = id;\r\n        this.afterLineNumber = afterLineNumber;\r\n        this.ordinal = ordinal;\r\n        this.height = height;\r\n        this.minWidth = minWidth;\r\n        this.prefixSum = 0;\r\n    }\r\n    return EditorWhitespace;\r\n}());\r\nexport { EditorWhitespace };\r\n/**\r\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\r\n *\r\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\r\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\r\n */\r\nvar LinesLayout = /** @class */ (function () {\r\n    function LinesLayout(lineCount, lineHeight) {\r\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\r\n        this._pendingChanges = new PendingChanges();\r\n        this._lastWhitespaceId = 0;\r\n        this._arr = [];\r\n        this._prefixSumValidIndex = -1;\r\n        this._minWidth = -1; /* marker for not being computed */\r\n        this._lineCount = lineCount;\r\n        this._lineHeight = lineHeight;\r\n    }\r\n    /**\r\n     * Find the insertion index for a new value inside a sorted array of values.\r\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\r\n     */\r\n    LinesLayout.findInsertionIndex = function (arr, afterLineNumber, ordinal) {\r\n        var low = 0;\r\n        var high = arr.length;\r\n        while (low < high) {\r\n            var mid = ((low + high) >>> 1);\r\n            if (afterLineNumber === arr[mid].afterLineNumber) {\r\n                if (ordinal < arr[mid].ordinal) {\r\n                    high = mid;\r\n                }\r\n                else {\r\n                    low = mid + 1;\r\n                }\r\n            }\r\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\r\n                high = mid;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        return low;\r\n    };\r\n    /**\r\n     * Change the height of a line in pixels.\r\n     */\r\n    LinesLayout.prototype.setLineHeight = function (lineHeight) {\r\n        this._checkPendingChanges();\r\n        this._lineHeight = lineHeight;\r\n    };\r\n    /**\r\n     * Set the number of lines.\r\n     *\r\n     * @param lineCount New number of lines.\r\n     */\r\n    LinesLayout.prototype.onFlushed = function (lineCount) {\r\n        this._checkPendingChanges();\r\n        this._lineCount = lineCount;\r\n    };\r\n    LinesLayout.prototype.changeWhitespace = function (callback) {\r\n        var _this = this;\r\n        try {\r\n            var accessor = {\r\n                insertWhitespace: function (afterLineNumber, ordinal, heightInPx, minWidth) {\r\n                    afterLineNumber = afterLineNumber | 0;\r\n                    ordinal = ordinal | 0;\r\n                    heightInPx = heightInPx | 0;\r\n                    minWidth = minWidth | 0;\r\n                    var id = _this._instanceId + (++_this._lastWhitespaceId);\r\n                    _this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\r\n                    return id;\r\n                },\r\n                changeOneWhitespace: function (id, newAfterLineNumber, newHeight) {\r\n                    newAfterLineNumber = newAfterLineNumber | 0;\r\n                    newHeight = newHeight | 0;\r\n                    _this._pendingChanges.change({ id: id, newAfterLineNumber: newAfterLineNumber, newHeight: newHeight });\r\n                },\r\n                removeWhitespace: function (id) {\r\n                    _this._pendingChanges.remove({ id: id });\r\n                }\r\n            };\r\n            return callback(accessor);\r\n        }\r\n        finally {\r\n            this._pendingChanges.commit(this);\r\n        }\r\n    };\r\n    LinesLayout.prototype._commitPendingChanges = function (inserts, changes, removes) {\r\n        if (inserts.length > 0 || removes.length > 0) {\r\n            this._minWidth = -1; /* marker for not being computed */\r\n        }\r\n        if (inserts.length + changes.length + removes.length <= 1) {\r\n            // when only one thing happened, handle it \"delicately\"\r\n            for (var _i = 0, inserts_1 = inserts; _i < inserts_1.length; _i++) {\r\n                var insert = inserts_1[_i];\r\n                this._insertWhitespace(insert);\r\n            }\r\n            for (var _a = 0, changes_1 = changes; _a < changes_1.length; _a++) {\r\n                var change = changes_1[_a];\r\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\r\n            }\r\n            for (var _b = 0, removes_1 = removes; _b < removes_1.length; _b++) {\r\n                var remove = removes_1[_b];\r\n                var index = this._findWhitespaceIndex(remove.id);\r\n                if (index === -1) {\r\n                    continue;\r\n                }\r\n                this._removeWhitespace(index);\r\n            }\r\n            return;\r\n        }\r\n        // simply rebuild the entire datastructure\r\n        var toRemove = new Set();\r\n        for (var _c = 0, removes_2 = removes; _c < removes_2.length; _c++) {\r\n            var remove = removes_2[_c];\r\n            toRemove.add(remove.id);\r\n        }\r\n        var toChange = new Map();\r\n        for (var _d = 0, changes_2 = changes; _d < changes_2.length; _d++) {\r\n            var change = changes_2[_d];\r\n            toChange.set(change.id, change);\r\n        }\r\n        var applyRemoveAndChange = function (whitespaces) {\r\n            var result = [];\r\n            for (var _i = 0, whitespaces_1 = whitespaces; _i < whitespaces_1.length; _i++) {\r\n                var whitespace = whitespaces_1[_i];\r\n                if (toRemove.has(whitespace.id)) {\r\n                    continue;\r\n                }\r\n                if (toChange.has(whitespace.id)) {\r\n                    var change = toChange.get(whitespace.id);\r\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\r\n                    whitespace.height = change.newHeight;\r\n                }\r\n                result.push(whitespace);\r\n            }\r\n            return result;\r\n        };\r\n        var result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\r\n        result.sort(function (a, b) {\r\n            if (a.afterLineNumber === b.afterLineNumber) {\r\n                return a.ordinal - b.ordinal;\r\n            }\r\n            return a.afterLineNumber - b.afterLineNumber;\r\n        });\r\n        this._arr = result;\r\n        this._prefixSumValidIndex = -1;\r\n    };\r\n    LinesLayout.prototype._checkPendingChanges = function () {\r\n        if (this._pendingChanges.mustCommit()) {\r\n            this._pendingChanges.commit(this);\r\n        }\r\n    };\r\n    LinesLayout.prototype._insertWhitespace = function (whitespace) {\r\n        var insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\r\n        this._arr.splice(insertIndex, 0, whitespace);\r\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\r\n    };\r\n    LinesLayout.prototype._findWhitespaceIndex = function (id) {\r\n        var arr = this._arr;\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (arr[i].id === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    LinesLayout.prototype._changeOneWhitespace = function (id, newAfterLineNumber, newHeight) {\r\n        var index = this._findWhitespaceIndex(id);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        if (this._arr[index].height !== newHeight) {\r\n            this._arr[index].height = newHeight;\r\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\r\n        }\r\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\r\n            // `afterLineNumber` changed for this whitespace\r\n            // Record old whitespace\r\n            var whitespace = this._arr[index];\r\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\r\n            this._removeWhitespace(index);\r\n            whitespace.afterLineNumber = newAfterLineNumber;\r\n            // And add it again\r\n            this._insertWhitespace(whitespace);\r\n        }\r\n    };\r\n    LinesLayout.prototype._removeWhitespace = function (removeIndex) {\r\n        this._arr.splice(removeIndex, 1);\r\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\r\n    };\r\n    /**\r\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\r\n     *\r\n     * @param fromLineNumber The line number at which the deletion started, inclusive\r\n     * @param toLineNumber The line number at which the deletion ended, inclusive\r\n     */\r\n    LinesLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\r\n        this._checkPendingChanges();\r\n        fromLineNumber = fromLineNumber | 0;\r\n        toLineNumber = toLineNumber | 0;\r\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\r\n        for (var i = 0, len = this._arr.length; i < len; i++) {\r\n            var afterLineNumber = this._arr[i].afterLineNumber;\r\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\r\n                // The line this whitespace was after has been deleted\r\n                //  => move whitespace to before first deleted line\r\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\r\n            }\r\n            else if (afterLineNumber > toLineNumber) {\r\n                // The line this whitespace was after has been moved up\r\n                //  => move whitespace up\r\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\r\n     *\r\n     * @param fromLineNumber The line number at which the insertion started, inclusive\r\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\r\n     */\r\n    LinesLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\r\n        this._checkPendingChanges();\r\n        fromLineNumber = fromLineNumber | 0;\r\n        toLineNumber = toLineNumber | 0;\r\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\r\n        for (var i = 0, len = this._arr.length; i < len; i++) {\r\n            var afterLineNumber = this._arr[i].afterLineNumber;\r\n            if (fromLineNumber <= afterLineNumber) {\r\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get the sum of all the whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesTotalHeight = function () {\r\n        this._checkPendingChanges();\r\n        if (this._arr.length === 0) {\r\n            return 0;\r\n        }\r\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\r\n    };\r\n    /**\r\n     * Return the sum of the heights of the whitespaces at [0..index].\r\n     * This includes the whitespace at `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesAccumulatedHeight = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        var startIndex = Math.max(0, this._prefixSumValidIndex + 1);\r\n        if (startIndex === 0) {\r\n            this._arr[0].prefixSum = this._arr[0].height;\r\n            startIndex++;\r\n        }\r\n        for (var i = startIndex; i <= index; i++) {\r\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\r\n        }\r\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\r\n        return this._arr[index].prefixSum;\r\n    };\r\n    /**\r\n     * Get the sum of heights for all objects.\r\n     *\r\n     * @return The sum of heights for all objects.\r\n     */\r\n    LinesLayout.prototype.getLinesTotalHeight = function () {\r\n        this._checkPendingChanges();\r\n        var linesHeight = this._lineHeight * this._lineCount;\r\n        var whitespacesHeight = this.getWhitespacesTotalHeight();\r\n        return linesHeight + whitespacesHeight;\r\n    };\r\n    /**\r\n     * Returns the accumulated height of whitespaces before the given line number.\r\n     *\r\n     * @param lineNumber The line number\r\n     */\r\n    LinesLayout.prototype.getWhitespaceAccumulatedHeightBeforeLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\r\n        if (lastWhitespaceBeforeLineNumber === -1) {\r\n            return 0;\r\n        }\r\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\r\n    };\r\n    LinesLayout.prototype._findLastWhitespaceBeforeLineNumber = function (lineNumber) {\r\n        lineNumber = lineNumber | 0;\r\n        // Find the whitespace before line number\r\n        var arr = this._arr;\r\n        var low = 0;\r\n        var high = arr.length - 1;\r\n        while (low <= high) {\r\n            var delta = (high - low) | 0;\r\n            var halfDelta = (delta / 2) | 0;\r\n            var mid = (low + halfDelta) | 0;\r\n            if (arr[mid].afterLineNumber < lineNumber) {\r\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\r\n                    return mid;\r\n                }\r\n                else {\r\n                    low = (mid + 1) | 0;\r\n                }\r\n            }\r\n            else {\r\n                high = (mid - 1) | 0;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    LinesLayout.prototype._findFirstWhitespaceAfterLineNumber = function (lineNumber) {\r\n        lineNumber = lineNumber | 0;\r\n        var lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\r\n        var firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\r\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\r\n            return firstWhitespaceAfterLineNumber;\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\r\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\r\n     */\r\n    LinesLayout.prototype.getFirstWhitespaceIndexAfterLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\r\n    };\r\n    /**\r\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\r\n     *\r\n     * @param lineNumber The line number\r\n     * @return The sum of heights for all objects above `lineNumber`.\r\n     */\r\n    LinesLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\r\n        this._checkPendingChanges();\r\n        lineNumber = lineNumber | 0;\r\n        var previousLinesHeight;\r\n        if (lineNumber > 1) {\r\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\r\n        }\r\n        else {\r\n            previousLinesHeight = 0;\r\n        }\r\n        var previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber);\r\n        return previousLinesHeight + previousWhitespacesHeight;\r\n    };\r\n    /**\r\n     * The maximum min width for all whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceMinWidth = function () {\r\n        this._checkPendingChanges();\r\n        if (this._minWidth === -1) {\r\n            var minWidth = 0;\r\n            for (var i = 0, len = this._arr.length; i < len; i++) {\r\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\r\n            }\r\n            this._minWidth = minWidth;\r\n        }\r\n        return this._minWidth;\r\n    };\r\n    /**\r\n     * Check if `verticalOffset` is below all lines.\r\n     */\r\n    LinesLayout.prototype.isAfterLines = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        var totalHeight = this.getLinesTotalHeight();\r\n        return verticalOffset > totalHeight;\r\n    };\r\n    /**\r\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\r\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\r\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\r\n     *\r\n     * @param verticalOffset The vertical offset to search at.\r\n     * @return The line number at or after vertical offset `verticalOffset`.\r\n     */\r\n    LinesLayout.prototype.getLineNumberAtOrAfterVerticalOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        if (verticalOffset < 0) {\r\n            return 1;\r\n        }\r\n        var linesCount = this._lineCount | 0;\r\n        var lineHeight = this._lineHeight;\r\n        var minLineNumber = 1;\r\n        var maxLineNumber = linesCount;\r\n        while (minLineNumber < maxLineNumber) {\r\n            var midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\r\n            var midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\r\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\r\n                // vertical offset is after mid line number\r\n                minLineNumber = midLineNumber + 1;\r\n            }\r\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\r\n                // Hit\r\n                return midLineNumber;\r\n            }\r\n            else {\r\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\r\n                maxLineNumber = midLineNumber;\r\n            }\r\n        }\r\n        if (minLineNumber > linesCount) {\r\n            return linesCount;\r\n        }\r\n        return minLineNumber;\r\n    };\r\n    /**\r\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n     *\r\n     * @param verticalOffset1 The beginning of the viewport.\r\n     * @param verticalOffset2 The end of the viewport.\r\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\r\n     */\r\n    LinesLayout.prototype.getLinesViewportData = function (verticalOffset1, verticalOffset2) {\r\n        this._checkPendingChanges();\r\n        verticalOffset1 = verticalOffset1 | 0;\r\n        verticalOffset2 = verticalOffset2 | 0;\r\n        var lineHeight = this._lineHeight;\r\n        // Find first line number\r\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\r\n        var startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\r\n        var startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\r\n        var endLineNumber = this._lineCount | 0;\r\n        // Also keep track of what whitespace we've got\r\n        var whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\r\n        var whitespaceCount = this.getWhitespacesCount() | 0;\r\n        var currentWhitespaceHeight;\r\n        var currentWhitespaceAfterLineNumber;\r\n        if (whitespaceIndex === -1) {\r\n            whitespaceIndex = whitespaceCount;\r\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\r\n            currentWhitespaceHeight = 0;\r\n        }\r\n        else {\r\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\r\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\r\n        }\r\n        var currentVerticalOffset = startLineNumberVerticalOffset;\r\n        var currentLineRelativeOffset = currentVerticalOffset;\r\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\r\n        var STEP_SIZE = 500000;\r\n        var bigNumbersDelta = 0;\r\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\r\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\r\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\r\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\r\n            currentLineRelativeOffset -= bigNumbersDelta;\r\n        }\r\n        var linesOffsets = [];\r\n        var verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\r\n        var centeredLineNumber = -1;\r\n        // Figure out how far the lines go\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            if (centeredLineNumber === -1) {\r\n                var currentLineTop = currentVerticalOffset;\r\n                var currentLineBottom = currentVerticalOffset + lineHeight;\r\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\r\n                    centeredLineNumber = lineNumber;\r\n                }\r\n            }\r\n            // Count current line height in the vertical offsets\r\n            currentVerticalOffset += lineHeight;\r\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\r\n            // Next line starts immediately after this one\r\n            currentLineRelativeOffset += lineHeight;\r\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\r\n                // Push down next line with the height of the current whitespace\r\n                currentLineRelativeOffset += currentWhitespaceHeight;\r\n                // Count current whitespace in the vertical offsets\r\n                currentVerticalOffset += currentWhitespaceHeight;\r\n                whitespaceIndex++;\r\n                if (whitespaceIndex >= whitespaceCount) {\r\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\r\n                }\r\n                else {\r\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\r\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\r\n                }\r\n            }\r\n            if (currentVerticalOffset >= verticalOffset2) {\r\n                // We have covered the entire viewport area, time to stop\r\n                endLineNumber = lineNumber;\r\n                break;\r\n            }\r\n        }\r\n        if (centeredLineNumber === -1) {\r\n            centeredLineNumber = endLineNumber;\r\n        }\r\n        var endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\r\n        var completelyVisibleStartLineNumber = startLineNumber;\r\n        var completelyVisibleEndLineNumber = endLineNumber;\r\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\r\n            if (startLineNumberVerticalOffset < verticalOffset1) {\r\n                completelyVisibleStartLineNumber++;\r\n            }\r\n        }\r\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\r\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\r\n                completelyVisibleEndLineNumber--;\r\n            }\r\n        }\r\n        return {\r\n            bigNumbersDelta: bigNumbersDelta,\r\n            startLineNumber: startLineNumber,\r\n            endLineNumber: endLineNumber,\r\n            relativeVerticalOffset: linesOffsets,\r\n            centeredLineNumber: centeredLineNumber,\r\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\r\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\r\n        };\r\n    };\r\n    LinesLayout.prototype.getVerticalOffsetForWhitespaceIndex = function (whitespaceIndex) {\r\n        this._checkPendingChanges();\r\n        whitespaceIndex = whitespaceIndex | 0;\r\n        var afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\r\n        var previousLinesHeight;\r\n        if (afterLineNumber >= 1) {\r\n            previousLinesHeight = this._lineHeight * afterLineNumber;\r\n        }\r\n        else {\r\n            previousLinesHeight = 0;\r\n        }\r\n        var previousWhitespacesHeight;\r\n        if (whitespaceIndex > 0) {\r\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\r\n        }\r\n        else {\r\n            previousWhitespacesHeight = 0;\r\n        }\r\n        return previousLinesHeight + previousWhitespacesHeight;\r\n    };\r\n    LinesLayout.prototype.getWhitespaceIndexAtOrAfterVerticallOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        var minWhitespaceIndex = 0;\r\n        var maxWhitespaceIndex = this.getWhitespacesCount() - 1;\r\n        if (maxWhitespaceIndex < 0) {\r\n            return -1;\r\n        }\r\n        // Special case: nothing to be found\r\n        var maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\r\n        var maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\r\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\r\n            return -1;\r\n        }\r\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\r\n            var midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\r\n            var midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\r\n            var midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\r\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\r\n                // vertical offset is after whitespace\r\n                minWhitespaceIndex = midWhitespaceIndex + 1;\r\n            }\r\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\r\n                // Hit\r\n                return midWhitespaceIndex;\r\n            }\r\n            else {\r\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\r\n                maxWhitespaceIndex = midWhitespaceIndex;\r\n            }\r\n        }\r\n        return minWhitespaceIndex;\r\n    };\r\n    /**\r\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\r\n     *\r\n     * @param verticalOffset The vertical offset.\r\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\r\n        this._checkPendingChanges();\r\n        verticalOffset = verticalOffset | 0;\r\n        var candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\r\n        if (candidateIndex < 0) {\r\n            return null;\r\n        }\r\n        if (candidateIndex >= this.getWhitespacesCount()) {\r\n            return null;\r\n        }\r\n        var candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\r\n        if (candidateTop > verticalOffset) {\r\n            return null;\r\n        }\r\n        var candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\r\n        var candidateId = this.getIdForWhitespaceIndex(candidateIndex);\r\n        var candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\r\n        return {\r\n            id: candidateId,\r\n            afterLineNumber: candidateAfterLineNumber,\r\n            verticalOffset: candidateTop,\r\n            height: candidateHeight\r\n        };\r\n    };\r\n    /**\r\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\r\n     *\r\n     * @param verticalOffset1 The beginning of the viewport.\r\n     * @param verticalOffset2 The end of the viewport.\r\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\r\n     */\r\n    LinesLayout.prototype.getWhitespaceViewportData = function (verticalOffset1, verticalOffset2) {\r\n        this._checkPendingChanges();\r\n        verticalOffset1 = verticalOffset1 | 0;\r\n        verticalOffset2 = verticalOffset2 | 0;\r\n        var startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\r\n        var endIndex = this.getWhitespacesCount() - 1;\r\n        if (startIndex < 0) {\r\n            return [];\r\n        }\r\n        var result = [];\r\n        for (var i = startIndex; i <= endIndex; i++) {\r\n            var top_1 = this.getVerticalOffsetForWhitespaceIndex(i);\r\n            var height = this.getHeightForWhitespaceIndex(i);\r\n            if (top_1 >= verticalOffset2) {\r\n                break;\r\n            }\r\n            result.push({\r\n                id: this.getIdForWhitespaceIndex(i),\r\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\r\n                verticalOffset: top_1,\r\n                height: height\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Get all whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespaces = function () {\r\n        this._checkPendingChanges();\r\n        return this._arr.slice(0);\r\n    };\r\n    /**\r\n     * The number of whitespaces.\r\n     */\r\n    LinesLayout.prototype.getWhitespacesCount = function () {\r\n        this._checkPendingChanges();\r\n        return this._arr.length;\r\n    };\r\n    /**\r\n     * Get the `id` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `id` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getIdForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].id;\r\n    };\r\n    /**\r\n     * Get the `afterLineNumber` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `afterLineNumber` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getAfterLineNumberForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].afterLineNumber;\r\n    };\r\n    /**\r\n     * Get the `height` for whitespace at index `index`.\r\n     *\r\n     * @param index The index of the whitespace.\r\n     * @return `height` of whitespace at `index`.\r\n     */\r\n    LinesLayout.prototype.getHeightForWhitespaceIndex = function (index) {\r\n        this._checkPendingChanges();\r\n        index = index | 0;\r\n        return this._arr[index].height;\r\n    };\r\n    LinesLayout.INSTANCE_COUNT = 0;\r\n    return LinesLayout;\r\n}());\r\nexport { LinesLayout };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAc,GAAG;IACtB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;EACtB;EACAJ,cAAc,CAACK,SAAS,CAACC,MAAM,GAAG,UAAUC,CAAC,EAAE;IAC3C,IAAI,CAACN,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,QAAQ,CAACM,IAAI,CAACD,CAAC,CAAC;EACzB,CAAC;EACDP,cAAc,CAACK,SAAS,CAACI,MAAM,GAAG,UAAUF,CAAC,EAAE;IAC3C,IAAI,CAACN,WAAW,GAAG,IAAI;IACvB,IAAI,CAACE,QAAQ,CAACK,IAAI,CAACD,CAAC,CAAC;EACzB,CAAC;EACDP,cAAc,CAACK,SAAS,CAACK,MAAM,GAAG,UAAUH,CAAC,EAAE;IAC3C,IAAI,CAACN,WAAW,GAAG,IAAI;IACvB,IAAI,CAACG,QAAQ,CAACI,IAAI,CAACD,CAAC,CAAC;EACzB,CAAC;EACDP,cAAc,CAACK,SAAS,CAACM,UAAU,GAAG,YAAY;IAC9C,OAAO,IAAI,CAACV,WAAW;EAC3B,CAAC;EACDD,cAAc,CAACK,SAAS,CAACO,MAAM,GAAG,UAAUC,WAAW,EAAE;IACrD,IAAI,CAAC,IAAI,CAACZ,WAAW,EAAE;MACnB;IACJ;IACA,IAAIa,OAAO,GAAG,IAAI,CAACZ,QAAQ;IAC3B,IAAIa,OAAO,GAAG,IAAI,CAACZ,QAAQ;IAC3B,IAAIa,OAAO,GAAG,IAAI,CAACZ,QAAQ;IAC3B,IAAI,CAACH,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClBS,WAAW,CAACI,qBAAqB,CAACH,OAAO,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAChE,CAAC;EACD,OAAOhB,cAAc;AACzB,CAAC,EAAG;AACJ,IAAIkB,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgB,CAACC,EAAE,EAAEC,eAAe,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IACtE,IAAI,CAACJ,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;EACA,OAAON,gBAAgB;AAC3B,CAAC,EAAG;AACJ,SAASA,gBAAgB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,IAAIO,WAAW,GAAG,aAAe,YAAY;EACzC,SAASA,WAAW,CAACC,SAAS,EAAEC,UAAU,EAAE;IACxC,IAAI,CAACC,WAAW,GAAG7B,OAAO,CAAC8B,gBAAgB,CAAC,EAAEJ,WAAW,CAACK,cAAc,CAAC;IACzE,IAAI,CAACC,eAAe,GAAG,IAAI/B,cAAc,EAAE;IAC3C,IAAI,CAACgC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,oBAAoB,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IACrB,IAAI,CAACC,UAAU,GAAGV,SAAS;IAC3B,IAAI,CAACW,WAAW,GAAGV,UAAU;EACjC;EACA;AACJ;AACA;AACA;EACIF,WAAW,CAACa,kBAAkB,GAAG,UAAUC,GAAG,EAAEnB,eAAe,EAAEC,OAAO,EAAE;IACtE,IAAImB,GAAG,GAAG,CAAC;IACX,IAAIC,IAAI,GAAGF,GAAG,CAACG,MAAM;IACrB,OAAOF,GAAG,GAAGC,IAAI,EAAE;MACf,IAAIE,GAAG,GAAKH,GAAG,GAAGC,IAAI,KAAM,CAAE;MAC9B,IAAIrB,eAAe,KAAKmB,GAAG,CAACI,GAAG,CAAC,CAACvB,eAAe,EAAE;QAC9C,IAAIC,OAAO,GAAGkB,GAAG,CAACI,GAAG,CAAC,CAACtB,OAAO,EAAE;UAC5BoB,IAAI,GAAGE,GAAG;QACd,CAAC,MACI;UACDH,GAAG,GAAGG,GAAG,GAAG,CAAC;QACjB;MACJ,CAAC,MACI,IAAIvB,eAAe,GAAGmB,GAAG,CAACI,GAAG,CAAC,CAACvB,eAAe,EAAE;QACjDqB,IAAI,GAAGE,GAAG;MACd,CAAC,MACI;QACDH,GAAG,GAAGG,GAAG,GAAG,CAAC;MACjB;IACJ;IACA,OAAOH,GAAG;EACd,CAAC;EACD;AACJ;AACA;EACIf,WAAW,CAACpB,SAAS,CAACuC,aAAa,GAAG,UAAUjB,UAAU,EAAE;IACxD,IAAI,CAACkB,oBAAoB,EAAE;IAC3B,IAAI,CAACR,WAAW,GAAGV,UAAU;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIF,WAAW,CAACpB,SAAS,CAACyC,SAAS,GAAG,UAAUpB,SAAS,EAAE;IACnD,IAAI,CAACmB,oBAAoB,EAAE;IAC3B,IAAI,CAACT,UAAU,GAAGV,SAAS;EAC/B,CAAC;EACDD,WAAW,CAACpB,SAAS,CAAC0C,gBAAgB,GAAG,UAAUC,QAAQ,EAAE;IACzD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI;MACA,IAAIC,QAAQ,GAAG;QACXC,gBAAgB,EAAE,0BAAU/B,eAAe,EAAEC,OAAO,EAAE+B,UAAU,EAAE7B,QAAQ,EAAE;UACxEH,eAAe,GAAGA,eAAe,GAAG,CAAC;UACrCC,OAAO,GAAGA,OAAO,GAAG,CAAC;UACrB+B,UAAU,GAAGA,UAAU,GAAG,CAAC;UAC3B7B,QAAQ,GAAGA,QAAQ,GAAG,CAAC;UACvB,IAAIJ,EAAE,GAAG8B,KAAK,CAACrB,WAAW,GAAI,EAAEqB,KAAK,CAACjB,iBAAkB;UACxDiB,KAAK,CAAClB,eAAe,CAACzB,MAAM,CAAC,IAAIY,gBAAgB,CAACC,EAAE,EAAEC,eAAe,EAAEC,OAAO,EAAE+B,UAAU,EAAE7B,QAAQ,CAAC,CAAC;UACtG,OAAOJ,EAAE;QACb,CAAC;QACDkC,mBAAmB,EAAE,6BAAUlC,EAAE,EAAEmC,kBAAkB,EAAEC,SAAS,EAAE;UAC9DD,kBAAkB,GAAGA,kBAAkB,GAAG,CAAC;UAC3CC,SAAS,GAAGA,SAAS,GAAG,CAAC;UACzBN,KAAK,CAAClB,eAAe,CAACtB,MAAM,CAAC;YAAEU,EAAE,EAAEA,EAAE;YAAEmC,kBAAkB,EAAEA,kBAAkB;YAAEC,SAAS,EAAEA;UAAU,CAAC,CAAC;QAC1G,CAAC;QACDC,gBAAgB,EAAE,0BAAUrC,EAAE,EAAE;UAC5B8B,KAAK,CAAClB,eAAe,CAACrB,MAAM,CAAC;YAAES,EAAE,EAAEA;UAAG,CAAC,CAAC;QAC5C;MACJ,CAAC;MACD,OAAO6B,QAAQ,CAACE,QAAQ,CAAC;IAC7B,CAAC,SACO;MACJ,IAAI,CAACnB,eAAe,CAACnB,MAAM,CAAC,IAAI,CAAC;IACrC;EACJ,CAAC;EACDa,WAAW,CAACpB,SAAS,CAACY,qBAAqB,GAAG,UAAUH,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC/E,IAAIF,OAAO,CAAC4B,MAAM,GAAG,CAAC,IAAI1B,OAAO,CAAC0B,MAAM,GAAG,CAAC,EAAE;MAC1C,IAAI,CAACP,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB;;IACA,IAAIrB,OAAO,CAAC4B,MAAM,GAAG3B,OAAO,CAAC2B,MAAM,GAAG1B,OAAO,CAAC0B,MAAM,IAAI,CAAC,EAAE;MACvD;MACA,KAAK,IAAIe,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAG5C,OAAO,EAAE2C,EAAE,GAAGC,SAAS,CAAChB,MAAM,EAAEe,EAAE,EAAE,EAAE;QAC/D,IAAInD,MAAM,GAAGoD,SAAS,CAACD,EAAE,CAAC;QAC1B,IAAI,CAACE,iBAAiB,CAACrD,MAAM,CAAC;MAClC;MACA,KAAK,IAAIsD,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAG9C,OAAO,EAAE6C,EAAE,GAAGC,SAAS,CAACnB,MAAM,EAAEkB,EAAE,EAAE,EAAE;QAC/D,IAAInD,MAAM,GAAGoD,SAAS,CAACD,EAAE,CAAC;QAC1B,IAAI,CAACE,oBAAoB,CAACrD,MAAM,CAACU,EAAE,EAAEV,MAAM,CAAC6C,kBAAkB,EAAE7C,MAAM,CAAC8C,SAAS,CAAC;MACrF;MACA,KAAK,IAAIQ,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAGhD,OAAO,EAAE+C,EAAE,GAAGC,SAAS,CAACtB,MAAM,EAAEqB,EAAE,EAAE,EAAE;QAC/D,IAAIrD,MAAM,GAAGsD,SAAS,CAACD,EAAE,CAAC;QAC1B,IAAIE,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAACxD,MAAM,CAACS,EAAE,CAAC;QAChD,IAAI8C,KAAK,KAAK,CAAC,CAAC,EAAE;UACd;QACJ;QACA,IAAI,CAACE,iBAAiB,CAACF,KAAK,CAAC;MACjC;MACA;IACJ;IACA;IACA,IAAIG,QAAQ,GAAG,IAAIC,GAAG,EAAE;IACxB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAGvD,OAAO,EAAEsD,EAAE,GAAGC,SAAS,CAAC7B,MAAM,EAAE4B,EAAE,EAAE,EAAE;MAC/D,IAAI5D,MAAM,GAAG6D,SAAS,CAACD,EAAE,CAAC;MAC1BF,QAAQ,CAACI,GAAG,CAAC9D,MAAM,CAACS,EAAE,CAAC;IAC3B;IACA,IAAIsD,QAAQ,GAAG,IAAIC,GAAG,EAAE;IACxB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAG7D,OAAO,EAAE4D,EAAE,GAAGC,SAAS,CAAClC,MAAM,EAAEiC,EAAE,EAAE,EAAE;MAC/D,IAAIlE,MAAM,GAAGmE,SAAS,CAACD,EAAE,CAAC;MAC1BF,QAAQ,CAACI,GAAG,CAACpE,MAAM,CAACU,EAAE,EAAEV,MAAM,CAAC;IACnC;IACA,IAAIqE,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAaC,WAAW,EAAE;MAC9C,IAAIC,MAAM,GAAG,EAAE;MACf,KAAK,IAAIvB,EAAE,GAAG,CAAC,EAAEwB,aAAa,GAAGF,WAAW,EAAEtB,EAAE,GAAGwB,aAAa,CAACvC,MAAM,EAAEe,EAAE,EAAE,EAAE;QAC3E,IAAIyB,UAAU,GAAGD,aAAa,CAACxB,EAAE,CAAC;QAClC,IAAIW,QAAQ,CAACe,GAAG,CAACD,UAAU,CAAC/D,EAAE,CAAC,EAAE;UAC7B;QACJ;QACA,IAAIsD,QAAQ,CAACU,GAAG,CAACD,UAAU,CAAC/D,EAAE,CAAC,EAAE;UAC7B,IAAIV,MAAM,GAAGgE,QAAQ,CAACW,GAAG,CAACF,UAAU,CAAC/D,EAAE,CAAC;UACxC+D,UAAU,CAAC9D,eAAe,GAAGX,MAAM,CAAC6C,kBAAkB;UACtD4B,UAAU,CAAC5D,MAAM,GAAGb,MAAM,CAAC8C,SAAS;QACxC;QACAyB,MAAM,CAACxE,IAAI,CAAC0E,UAAU,CAAC;MAC3B;MACA,OAAOF,MAAM;IACjB,CAAC;IACD,IAAIA,MAAM,GAAGF,oBAAoB,CAAC,IAAI,CAAC7C,IAAI,CAAC,CAACoD,MAAM,CAACP,oBAAoB,CAAChE,OAAO,CAAC,CAAC;IAClFkE,MAAM,CAACM,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACxB,IAAID,CAAC,CAACnE,eAAe,KAAKoE,CAAC,CAACpE,eAAe,EAAE;QACzC,OAAOmE,CAAC,CAAClE,OAAO,GAAGmE,CAAC,CAACnE,OAAO;MAChC;MACA,OAAOkE,CAAC,CAACnE,eAAe,GAAGoE,CAAC,CAACpE,eAAe;IAChD,CAAC,CAAC;IACF,IAAI,CAACa,IAAI,GAAG+C,MAAM;IAClB,IAAI,CAAC9C,oBAAoB,GAAG,CAAC,CAAC;EAClC,CAAC;EACDT,WAAW,CAACpB,SAAS,CAACwC,oBAAoB,GAAG,YAAY;IACrD,IAAI,IAAI,CAACd,eAAe,CAACpB,UAAU,EAAE,EAAE;MACnC,IAAI,CAACoB,eAAe,CAACnB,MAAM,CAAC,IAAI,CAAC;IACrC;EACJ,CAAC;EACDa,WAAW,CAACpB,SAAS,CAACsD,iBAAiB,GAAG,UAAUuB,UAAU,EAAE;IAC5D,IAAIO,WAAW,GAAGhE,WAAW,CAACa,kBAAkB,CAAC,IAAI,CAACL,IAAI,EAAEiD,UAAU,CAAC9D,eAAe,EAAE8D,UAAU,CAAC7D,OAAO,CAAC;IAC3G,IAAI,CAACY,IAAI,CAACyD,MAAM,CAACD,WAAW,EAAE,CAAC,EAAEP,UAAU,CAAC;IAC5C,IAAI,CAAChD,oBAAoB,GAAGyD,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC1D,oBAAoB,EAAEuD,WAAW,GAAG,CAAC,CAAC;EACpF,CAAC;EACDhE,WAAW,CAACpB,SAAS,CAAC6D,oBAAoB,GAAG,UAAU/C,EAAE,EAAE;IACvD,IAAIoB,GAAG,GAAG,IAAI,CAACN,IAAI;IACnB,KAAK,IAAI4D,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGvD,GAAG,CAACG,MAAM,EAAEmD,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAItD,GAAG,CAACsD,CAAC,CAAC,CAAC1E,EAAE,KAAKA,EAAE,EAAE;QAClB,OAAO0E,CAAC;MACZ;IACJ;IACA,OAAO,CAAC,CAAC;EACb,CAAC;EACDpE,WAAW,CAACpB,SAAS,CAACyD,oBAAoB,GAAG,UAAU3C,EAAE,EAAEmC,kBAAkB,EAAEC,SAAS,EAAE;IACtF,IAAIU,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAAC/C,EAAE,CAAC;IACzC,IAAI8C,KAAK,KAAK,CAAC,CAAC,EAAE;MACd;IACJ;IACA,IAAI,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAAC3C,MAAM,KAAKiC,SAAS,EAAE;MACvC,IAAI,CAACtB,IAAI,CAACgC,KAAK,CAAC,CAAC3C,MAAM,GAAGiC,SAAS;MACnC,IAAI,CAACrB,oBAAoB,GAAGyD,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC1D,oBAAoB,EAAE+B,KAAK,GAAG,CAAC,CAAC;IAC9E;IACA,IAAI,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAAC7C,eAAe,KAAKkC,kBAAkB,EAAE;MACzD;MACA;MACA,IAAI4B,UAAU,GAAG,IAAI,CAACjD,IAAI,CAACgC,KAAK,CAAC;MACjC;MACA,IAAI,CAACE,iBAAiB,CAACF,KAAK,CAAC;MAC7BiB,UAAU,CAAC9D,eAAe,GAAGkC,kBAAkB;MAC/C;MACA,IAAI,CAACK,iBAAiB,CAACuB,UAAU,CAAC;IACtC;EACJ,CAAC;EACDzD,WAAW,CAACpB,SAAS,CAAC8D,iBAAiB,GAAG,UAAU4B,WAAW,EAAE;IAC7D,IAAI,CAAC9D,IAAI,CAACyD,MAAM,CAACK,WAAW,EAAE,CAAC,CAAC;IAChC,IAAI,CAAC7D,oBAAoB,GAAGyD,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC1D,oBAAoB,EAAE6D,WAAW,GAAG,CAAC,CAAC;EACpF,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItE,WAAW,CAACpB,SAAS,CAAC2F,cAAc,GAAG,UAAUC,cAAc,EAAEC,YAAY,EAAE;IAC3E,IAAI,CAACrD,oBAAoB,EAAE;IAC3BoD,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnCC,YAAY,GAAGA,YAAY,GAAG,CAAC;IAC/B,IAAI,CAAC9D,UAAU,IAAK8D,YAAY,GAAGD,cAAc,GAAG,CAAE;IACtD,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAC7D,IAAI,CAACS,MAAM,EAAEmD,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAClD,IAAIzE,eAAe,GAAG,IAAI,CAACa,IAAI,CAAC4D,CAAC,CAAC,CAACzE,eAAe;MAClD,IAAI6E,cAAc,IAAI7E,eAAe,IAAIA,eAAe,IAAI8E,YAAY,EAAE;QACtE;QACA;QACA,IAAI,CAACjE,IAAI,CAAC4D,CAAC,CAAC,CAACzE,eAAe,GAAG6E,cAAc,GAAG,CAAC;MACrD,CAAC,MACI,IAAI7E,eAAe,GAAG8E,YAAY,EAAE;QACrC;QACA;QACA,IAAI,CAACjE,IAAI,CAAC4D,CAAC,CAAC,CAACzE,eAAe,IAAK8E,YAAY,GAAGD,cAAc,GAAG,CAAE;MACvE;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIxE,WAAW,CAACpB,SAAS,CAAC8F,eAAe,GAAG,UAAUF,cAAc,EAAEC,YAAY,EAAE;IAC5E,IAAI,CAACrD,oBAAoB,EAAE;IAC3BoD,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnCC,YAAY,GAAGA,YAAY,GAAG,CAAC;IAC/B,IAAI,CAAC9D,UAAU,IAAK8D,YAAY,GAAGD,cAAc,GAAG,CAAE;IACtD,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAC7D,IAAI,CAACS,MAAM,EAAEmD,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAClD,IAAIzE,eAAe,GAAG,IAAI,CAACa,IAAI,CAAC4D,CAAC,CAAC,CAACzE,eAAe;MAClD,IAAI6E,cAAc,IAAI7E,eAAe,EAAE;QACnC,IAAI,CAACa,IAAI,CAAC4D,CAAC,CAAC,CAACzE,eAAe,IAAK8E,YAAY,GAAGD,cAAc,GAAG,CAAE;MACvE;IACJ;EACJ,CAAC;EACD;AACJ;AACA;EACIxE,WAAW,CAACpB,SAAS,CAAC+F,yBAAyB,GAAG,YAAY;IAC1D,IAAI,CAACvD,oBAAoB,EAAE;IAC3B,IAAI,IAAI,CAACZ,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE;MACxB,OAAO,CAAC;IACZ;IACA,OAAO,IAAI,CAAC2D,+BAA+B,CAAC,IAAI,CAACpE,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;EACrE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIjB,WAAW,CAACpB,SAAS,CAACgG,+BAA+B,GAAG,UAAUpC,KAAK,EAAE;IACrE,IAAI,CAACpB,oBAAoB,EAAE;IAC3BoB,KAAK,GAAGA,KAAK,GAAG,CAAC;IACjB,IAAIqC,UAAU,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,EAAE,IAAI,CAACrE,oBAAoB,GAAG,CAAC,CAAC;IAC3D,IAAIoE,UAAU,KAAK,CAAC,EAAE;MAClB,IAAI,CAACrE,IAAI,CAAC,CAAC,CAAC,CAACT,SAAS,GAAG,IAAI,CAACS,IAAI,CAAC,CAAC,CAAC,CAACX,MAAM;MAC5CgF,UAAU,EAAE;IAChB;IACA,KAAK,IAAIT,CAAC,GAAGS,UAAU,EAAET,CAAC,IAAI5B,KAAK,EAAE4B,CAAC,EAAE,EAAE;MACtC,IAAI,CAAC5D,IAAI,CAAC4D,CAAC,CAAC,CAACrE,SAAS,GAAG,IAAI,CAACS,IAAI,CAAC4D,CAAC,GAAG,CAAC,CAAC,CAACrE,SAAS,GAAG,IAAI,CAACS,IAAI,CAAC4D,CAAC,CAAC,CAACvE,MAAM;IAC7E;IACA,IAAI,CAACY,oBAAoB,GAAGyD,IAAI,CAACY,GAAG,CAAC,IAAI,CAACrE,oBAAoB,EAAE+B,KAAK,CAAC;IACtE,OAAO,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAACzC,SAAS;EACrC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACpB,SAAS,CAACmG,mBAAmB,GAAG,YAAY;IACpD,IAAI,CAAC3D,oBAAoB,EAAE;IAC3B,IAAI4D,WAAW,GAAG,IAAI,CAACpE,WAAW,GAAG,IAAI,CAACD,UAAU;IACpD,IAAIsE,iBAAiB,GAAG,IAAI,CAACN,yBAAyB,EAAE;IACxD,OAAOK,WAAW,GAAGC,iBAAiB;EAC1C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjF,WAAW,CAACpB,SAAS,CAACsG,8CAA8C,GAAG,UAAUC,UAAU,EAAE;IACzF,IAAI,CAAC/D,oBAAoB,EAAE;IAC3B+D,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC3B,IAAIC,8BAA8B,GAAG,IAAI,CAACC,mCAAmC,CAACF,UAAU,CAAC;IACzF,IAAIC,8BAA8B,KAAK,CAAC,CAAC,EAAE;MACvC,OAAO,CAAC;IACZ;IACA,OAAO,IAAI,CAACR,+BAA+B,CAACQ,8BAA8B,CAAC;EAC/E,CAAC;EACDpF,WAAW,CAACpB,SAAS,CAACyG,mCAAmC,GAAG,UAAUF,UAAU,EAAE;IAC9EA,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC3B;IACA,IAAIrE,GAAG,GAAG,IAAI,CAACN,IAAI;IACnB,IAAIO,GAAG,GAAG,CAAC;IACX,IAAIC,IAAI,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC;IACzB,OAAOF,GAAG,IAAIC,IAAI,EAAE;MAChB,IAAIsE,KAAK,GAAItE,IAAI,GAAGD,GAAG,GAAI,CAAC;MAC5B,IAAIwE,SAAS,GAAID,KAAK,GAAG,CAAC,GAAI,CAAC;MAC/B,IAAIpE,GAAG,GAAIH,GAAG,GAAGwE,SAAS,GAAI,CAAC;MAC/B,IAAIzE,GAAG,CAACI,GAAG,CAAC,CAACvB,eAAe,GAAGwF,UAAU,EAAE;QACvC,IAAIjE,GAAG,GAAG,CAAC,IAAIJ,GAAG,CAACG,MAAM,IAAIH,GAAG,CAACI,GAAG,GAAG,CAAC,CAAC,CAACvB,eAAe,IAAIwF,UAAU,EAAE;UACrE,OAAOjE,GAAG;QACd,CAAC,MACI;UACDH,GAAG,GAAIG,GAAG,GAAG,CAAC,GAAI,CAAC;QACvB;MACJ,CAAC,MACI;QACDF,IAAI,GAAIE,GAAG,GAAG,CAAC,GAAI,CAAC;MACxB;IACJ;IACA,OAAO,CAAC,CAAC;EACb,CAAC;EACDlB,WAAW,CAACpB,SAAS,CAAC4G,mCAAmC,GAAG,UAAUL,UAAU,EAAE;IAC9EA,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC3B,IAAIC,8BAA8B,GAAG,IAAI,CAACC,mCAAmC,CAACF,UAAU,CAAC;IACzF,IAAIM,8BAA8B,GAAGL,8BAA8B,GAAG,CAAC;IACvE,IAAIK,8BAA8B,GAAG,IAAI,CAACjF,IAAI,CAACS,MAAM,EAAE;MACnD,OAAOwE,8BAA8B;IACzC;IACA,OAAO,CAAC,CAAC;EACb,CAAC;EACD;AACJ;AACA;AACA;EACIzF,WAAW,CAACpB,SAAS,CAAC8G,sCAAsC,GAAG,UAAUP,UAAU,EAAE;IACjF,IAAI,CAAC/D,oBAAoB,EAAE;IAC3B+D,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC3B,OAAO,IAAI,CAACK,mCAAmC,CAACL,UAAU,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInF,WAAW,CAACpB,SAAS,CAAC+G,8BAA8B,GAAG,UAAUR,UAAU,EAAE;IACzE,IAAI,CAAC/D,oBAAoB,EAAE;IAC3B+D,UAAU,GAAGA,UAAU,GAAG,CAAC;IAC3B,IAAIS,mBAAmB;IACvB,IAAIT,UAAU,GAAG,CAAC,EAAE;MAChBS,mBAAmB,GAAG,IAAI,CAAChF,WAAW,IAAIuE,UAAU,GAAG,CAAC,CAAC;IAC7D,CAAC,MACI;MACDS,mBAAmB,GAAG,CAAC;IAC3B;IACA,IAAIC,yBAAyB,GAAG,IAAI,CAACX,8CAA8C,CAACC,UAAU,CAAC;IAC/F,OAAOS,mBAAmB,GAAGC,yBAAyB;EAC1D,CAAC;EACD;AACJ;AACA;EACI7F,WAAW,CAACpB,SAAS,CAACkH,qBAAqB,GAAG,YAAY;IACtD,IAAI,CAAC1E,oBAAoB,EAAE;IAC3B,IAAI,IAAI,CAACV,SAAS,KAAK,CAAC,CAAC,EAAE;MACvB,IAAIZ,QAAQ,GAAG,CAAC;MAChB,KAAK,IAAIsE,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAC7D,IAAI,CAACS,MAAM,EAAEmD,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAClDtE,QAAQ,GAAGoE,IAAI,CAACY,GAAG,CAAChF,QAAQ,EAAE,IAAI,CAACU,IAAI,CAAC4D,CAAC,CAAC,CAACtE,QAAQ,CAAC;MACxD;MACA,IAAI,CAACY,SAAS,GAAGZ,QAAQ;IAC7B;IACA,OAAO,IAAI,CAACY,SAAS;EACzB,CAAC;EACD;AACJ;AACA;EACIV,WAAW,CAACpB,SAAS,CAACmH,YAAY,GAAG,UAAUC,cAAc,EAAE;IAC3D,IAAI,CAAC5E,oBAAoB,EAAE;IAC3B,IAAI6E,WAAW,GAAG,IAAI,CAAClB,mBAAmB,EAAE;IAC5C,OAAOiB,cAAc,GAAGC,WAAW;EACvC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIjG,WAAW,CAACpB,SAAS,CAACsH,oCAAoC,GAAG,UAAUF,cAAc,EAAE;IACnF,IAAI,CAAC5E,oBAAoB,EAAE;IAC3B4E,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnC,IAAIA,cAAc,GAAG,CAAC,EAAE;MACpB,OAAO,CAAC;IACZ;IACA,IAAIG,UAAU,GAAG,IAAI,CAACxF,UAAU,GAAG,CAAC;IACpC,IAAIT,UAAU,GAAG,IAAI,CAACU,WAAW;IACjC,IAAIwF,aAAa,GAAG,CAAC;IACrB,IAAIC,aAAa,GAAGF,UAAU;IAC9B,OAAOC,aAAa,GAAGC,aAAa,EAAE;MAClC,IAAIC,aAAa,GAAI,CAACF,aAAa,GAAGC,aAAa,IAAI,CAAC,GAAI,CAAC;MAC7D,IAAIE,2BAA2B,GAAG,IAAI,CAACZ,8BAA8B,CAACW,aAAa,CAAC,GAAG,CAAC;MACxF,IAAIN,cAAc,IAAIO,2BAA2B,GAAGrG,UAAU,EAAE;QAC5D;QACAkG,aAAa,GAAGE,aAAa,GAAG,CAAC;MACrC,CAAC,MACI,IAAIN,cAAc,IAAIO,2BAA2B,EAAE;QACpD;QACA,OAAOD,aAAa;MACxB,CAAC,MACI;QACD;QACAD,aAAa,GAAGC,aAAa;MACjC;IACJ;IACA,IAAIF,aAAa,GAAGD,UAAU,EAAE;MAC5B,OAAOA,UAAU;IACrB;IACA,OAAOC,aAAa;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpG,WAAW,CAACpB,SAAS,CAAC4H,oBAAoB,GAAG,UAAUC,eAAe,EAAEC,eAAe,EAAE;IACrF,IAAI,CAACtF,oBAAoB,EAAE;IAC3BqF,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrCC,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrC,IAAIxG,UAAU,GAAG,IAAI,CAACU,WAAW;IACjC;IACA;IACA,IAAI+F,eAAe,GAAG,IAAI,CAACT,oCAAoC,CAACO,eAAe,CAAC,GAAG,CAAC;IACpF,IAAIG,6BAA6B,GAAG,IAAI,CAACjB,8BAA8B,CAACgB,eAAe,CAAC,GAAG,CAAC;IAC5F,IAAIE,aAAa,GAAG,IAAI,CAAClG,UAAU,GAAG,CAAC;IACvC;IACA,IAAImG,eAAe,GAAG,IAAI,CAACpB,sCAAsC,CAACiB,eAAe,CAAC,GAAG,CAAC;IACtF,IAAII,eAAe,GAAG,IAAI,CAACC,mBAAmB,EAAE,GAAG,CAAC;IACpD,IAAIC,uBAAuB;IAC3B,IAAIC,gCAAgC;IACpC,IAAIJ,eAAe,KAAK,CAAC,CAAC,EAAE;MACxBA,eAAe,GAAGC,eAAe;MACjCG,gCAAgC,GAAGL,aAAa,GAAG,CAAC;MACpDI,uBAAuB,GAAG,CAAC;IAC/B,CAAC,MACI;MACDC,gCAAgC,GAAG,IAAI,CAACC,oCAAoC,CAACL,eAAe,CAAC,GAAG,CAAC;MACjGG,uBAAuB,GAAG,IAAI,CAACG,2BAA2B,CAACN,eAAe,CAAC,GAAG,CAAC;IACnF;IACA,IAAIO,qBAAqB,GAAGT,6BAA6B;IACzD,IAAIU,yBAAyB,GAAGD,qBAAqB;IACrD;IACA,IAAIE,SAAS,GAAG,MAAM;IACtB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIZ,6BAA6B,IAAIW,SAAS,EAAE;MAC5C;MACAC,eAAe,GAAGtD,IAAI,CAACuD,KAAK,CAACb,6BAA6B,GAAGW,SAAS,CAAC,GAAGA,SAAS;MACnFC,eAAe,GAAGtD,IAAI,CAACuD,KAAK,CAACD,eAAe,GAAGtH,UAAU,CAAC,GAAGA,UAAU;MACvEoH,yBAAyB,IAAIE,eAAe;IAChD;IACA,IAAIE,YAAY,GAAG,EAAE;IACrB,IAAIC,cAAc,GAAGlB,eAAe,GAAG,CAACC,eAAe,GAAGD,eAAe,IAAI,CAAC;IAC9E,IAAImB,kBAAkB,GAAG,CAAC,CAAC;IAC3B;IACA,KAAK,IAAIzC,UAAU,GAAGwB,eAAe,EAAExB,UAAU,IAAI0B,aAAa,EAAE1B,UAAU,EAAE,EAAE;MAC9E,IAAIyC,kBAAkB,KAAK,CAAC,CAAC,EAAE;QAC3B,IAAIC,cAAc,GAAGR,qBAAqB;QAC1C,IAAIS,iBAAiB,GAAGT,qBAAqB,GAAGnH,UAAU;QAC1D,IAAK2H,cAAc,IAAIF,cAAc,IAAIA,cAAc,GAAGG,iBAAiB,IAAKD,cAAc,GAAGF,cAAc,EAAE;UAC7GC,kBAAkB,GAAGzC,UAAU;QACnC;MACJ;MACA;MACAkC,qBAAqB,IAAInH,UAAU;MACnCwH,YAAY,CAACvC,UAAU,GAAGwB,eAAe,CAAC,GAAGW,yBAAyB;MACtE;MACAA,yBAAyB,IAAIpH,UAAU;MACvC,OAAOgH,gCAAgC,KAAK/B,UAAU,EAAE;QACpD;QACAmC,yBAAyB,IAAIL,uBAAuB;QACpD;QACAI,qBAAqB,IAAIJ,uBAAuB;QAChDH,eAAe,EAAE;QACjB,IAAIA,eAAe,IAAIC,eAAe,EAAE;UACpCG,gCAAgC,GAAGL,aAAa,GAAG,CAAC;QACxD,CAAC,MACI;UACDK,gCAAgC,GAAG,IAAI,CAACC,oCAAoC,CAACL,eAAe,CAAC,GAAG,CAAC;UACjGG,uBAAuB,GAAG,IAAI,CAACG,2BAA2B,CAACN,eAAe,CAAC,GAAG,CAAC;QACnF;MACJ;MACA,IAAIO,qBAAqB,IAAIX,eAAe,EAAE;QAC1C;QACAG,aAAa,GAAG1B,UAAU;QAC1B;MACJ;IACJ;IACA,IAAIyC,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC3BA,kBAAkB,GAAGf,aAAa;IACtC;IACA,IAAIkB,2BAA2B,GAAG,IAAI,CAACpC,8BAA8B,CAACkB,aAAa,CAAC,GAAG,CAAC;IACxF,IAAImB,gCAAgC,GAAGrB,eAAe;IACtD,IAAIsB,8BAA8B,GAAGpB,aAAa;IAClD,IAAImB,gCAAgC,GAAGC,8BAA8B,EAAE;MACnE,IAAIrB,6BAA6B,GAAGH,eAAe,EAAE;QACjDuB,gCAAgC,EAAE;MACtC;IACJ;IACA,IAAIA,gCAAgC,GAAGC,8BAA8B,EAAE;MACnE,IAAIF,2BAA2B,GAAG7H,UAAU,GAAGwG,eAAe,EAAE;QAC5DuB,8BAA8B,EAAE;MACpC;IACJ;IACA,OAAO;MACHT,eAAe,EAAEA,eAAe;MAChCb,eAAe,EAAEA,eAAe;MAChCE,aAAa,EAAEA,aAAa;MAC5BqB,sBAAsB,EAAER,YAAY;MACpCE,kBAAkB,EAAEA,kBAAkB;MACtCI,gCAAgC,EAAEA,gCAAgC;MAClEC,8BAA8B,EAAEA;IACpC,CAAC;EACL,CAAC;EACDjI,WAAW,CAACpB,SAAS,CAACuJ,mCAAmC,GAAG,UAAUrB,eAAe,EAAE;IACnF,IAAI,CAAC1F,oBAAoB,EAAE;IAC3B0F,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrC,IAAInH,eAAe,GAAG,IAAI,CAACwH,oCAAoC,CAACL,eAAe,CAAC;IAChF,IAAIlB,mBAAmB;IACvB,IAAIjG,eAAe,IAAI,CAAC,EAAE;MACtBiG,mBAAmB,GAAG,IAAI,CAAChF,WAAW,GAAGjB,eAAe;IAC5D,CAAC,MACI;MACDiG,mBAAmB,GAAG,CAAC;IAC3B;IACA,IAAIC,yBAAyB;IAC7B,IAAIiB,eAAe,GAAG,CAAC,EAAE;MACrBjB,yBAAyB,GAAG,IAAI,CAACjB,+BAA+B,CAACkC,eAAe,GAAG,CAAC,CAAC;IACzF,CAAC,MACI;MACDjB,yBAAyB,GAAG,CAAC;IACjC;IACA,OAAOD,mBAAmB,GAAGC,yBAAyB;EAC1D,CAAC;EACD7F,WAAW,CAACpB,SAAS,CAACwJ,0CAA0C,GAAG,UAAUpC,cAAc,EAAE;IACzF,IAAI,CAAC5E,oBAAoB,EAAE;IAC3B4E,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnC,IAAIqC,kBAAkB,GAAG,CAAC;IAC1B,IAAIC,kBAAkB,GAAG,IAAI,CAACtB,mBAAmB,EAAE,GAAG,CAAC;IACvD,IAAIsB,kBAAkB,GAAG,CAAC,EAAE;MACxB,OAAO,CAAC,CAAC;IACb;IACA;IACA,IAAIC,2BAA2B,GAAG,IAAI,CAACJ,mCAAmC,CAACG,kBAAkB,CAAC;IAC9F,IAAIE,mBAAmB,GAAG,IAAI,CAACpB,2BAA2B,CAACkB,kBAAkB,CAAC;IAC9E,IAAItC,cAAc,IAAIuC,2BAA2B,GAAGC,mBAAmB,EAAE;MACrE,OAAO,CAAC,CAAC;IACb;IACA,OAAOH,kBAAkB,GAAGC,kBAAkB,EAAE;MAC5C,IAAIG,kBAAkB,GAAGvE,IAAI,CAACuD,KAAK,CAAC,CAACY,kBAAkB,GAAGC,kBAAkB,IAAI,CAAC,CAAC;MAClF,IAAII,2BAA2B,GAAG,IAAI,CAACP,mCAAmC,CAACM,kBAAkB,CAAC;MAC9F,IAAIE,mBAAmB,GAAG,IAAI,CAACvB,2BAA2B,CAACqB,kBAAkB,CAAC;MAC9E,IAAIzC,cAAc,IAAI0C,2BAA2B,GAAGC,mBAAmB,EAAE;QACrE;QACAN,kBAAkB,GAAGI,kBAAkB,GAAG,CAAC;MAC/C,CAAC,MACI,IAAIzC,cAAc,IAAI0C,2BAA2B,EAAE;QACpD;QACA,OAAOD,kBAAkB;MAC7B,CAAC,MACI;QACD;QACAH,kBAAkB,GAAGG,kBAAkB;MAC3C;IACJ;IACA,OAAOJ,kBAAkB;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIrI,WAAW,CAACpB,SAAS,CAACgK,6BAA6B,GAAG,UAAU5C,cAAc,EAAE;IAC5E,IAAI,CAAC5E,oBAAoB,EAAE;IAC3B4E,cAAc,GAAGA,cAAc,GAAG,CAAC;IACnC,IAAI6C,cAAc,GAAG,IAAI,CAACT,0CAA0C,CAACpC,cAAc,CAAC;IACpF,IAAI6C,cAAc,GAAG,CAAC,EAAE;MACpB,OAAO,IAAI;IACf;IACA,IAAIA,cAAc,IAAI,IAAI,CAAC7B,mBAAmB,EAAE,EAAE;MAC9C,OAAO,IAAI;IACf;IACA,IAAI8B,YAAY,GAAG,IAAI,CAACX,mCAAmC,CAACU,cAAc,CAAC;IAC3E,IAAIC,YAAY,GAAG9C,cAAc,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,IAAI+C,eAAe,GAAG,IAAI,CAAC3B,2BAA2B,CAACyB,cAAc,CAAC;IACtE,IAAIG,WAAW,GAAG,IAAI,CAACC,uBAAuB,CAACJ,cAAc,CAAC;IAC9D,IAAIK,wBAAwB,GAAG,IAAI,CAAC/B,oCAAoC,CAAC0B,cAAc,CAAC;IACxF,OAAO;MACHnJ,EAAE,EAAEsJ,WAAW;MACfrJ,eAAe,EAAEuJ,wBAAwB;MACzClD,cAAc,EAAE8C,YAAY;MAC5BjJ,MAAM,EAAEkJ;IACZ,CAAC;EACL,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI/I,WAAW,CAACpB,SAAS,CAACuK,yBAAyB,GAAG,UAAU1C,eAAe,EAAEC,eAAe,EAAE;IAC1F,IAAI,CAACtF,oBAAoB,EAAE;IAC3BqF,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrCC,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrC,IAAI7B,UAAU,GAAG,IAAI,CAACuD,0CAA0C,CAAC3B,eAAe,CAAC;IACjF,IAAI2C,QAAQ,GAAG,IAAI,CAACpC,mBAAmB,EAAE,GAAG,CAAC;IAC7C,IAAInC,UAAU,GAAG,CAAC,EAAE;MAChB,OAAO,EAAE;IACb;IACA,IAAItB,MAAM,GAAG,EAAE;IACf,KAAK,IAAIa,CAAC,GAAGS,UAAU,EAAET,CAAC,IAAIgF,QAAQ,EAAEhF,CAAC,EAAE,EAAE;MACzC,IAAIiF,KAAK,GAAG,IAAI,CAAClB,mCAAmC,CAAC/D,CAAC,CAAC;MACvD,IAAIvE,MAAM,GAAG,IAAI,CAACuH,2BAA2B,CAAChD,CAAC,CAAC;MAChD,IAAIiF,KAAK,IAAI3C,eAAe,EAAE;QAC1B;MACJ;MACAnD,MAAM,CAACxE,IAAI,CAAC;QACRW,EAAE,EAAE,IAAI,CAACuJ,uBAAuB,CAAC7E,CAAC,CAAC;QACnCzE,eAAe,EAAE,IAAI,CAACwH,oCAAoC,CAAC/C,CAAC,CAAC;QAC7D4B,cAAc,EAAEqD,KAAK;QACrBxJ,MAAM,EAAEA;MACZ,CAAC,CAAC;IACN;IACA,OAAO0D,MAAM;EACjB,CAAC;EACD;AACJ;AACA;EACIvD,WAAW,CAACpB,SAAS,CAAC0K,cAAc,GAAG,YAAY;IAC/C,IAAI,CAAClI,oBAAoB,EAAE;IAC3B,OAAO,IAAI,CAACZ,IAAI,CAAC+I,KAAK,CAAC,CAAC,CAAC;EAC7B,CAAC;EACD;AACJ;AACA;EACIvJ,WAAW,CAACpB,SAAS,CAACoI,mBAAmB,GAAG,YAAY;IACpD,IAAI,CAAC5F,oBAAoB,EAAE;IAC3B,OAAO,IAAI,CAACZ,IAAI,CAACS,MAAM;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIjB,WAAW,CAACpB,SAAS,CAACqK,uBAAuB,GAAG,UAAUzG,KAAK,EAAE;IAC7D,IAAI,CAACpB,oBAAoB,EAAE;IAC3BoB,KAAK,GAAGA,KAAK,GAAG,CAAC;IACjB,OAAO,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAAC9C,EAAE;EAC9B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIM,WAAW,CAACpB,SAAS,CAACuI,oCAAoC,GAAG,UAAU3E,KAAK,EAAE;IAC1E,IAAI,CAACpB,oBAAoB,EAAE;IAC3BoB,KAAK,GAAGA,KAAK,GAAG,CAAC;IACjB,OAAO,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAAC7C,eAAe;EAC3C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACpB,SAAS,CAACwI,2BAA2B,GAAG,UAAU5E,KAAK,EAAE;IACjE,IAAI,CAACpB,oBAAoB,EAAE;IAC3BoB,KAAK,GAAGA,KAAK,GAAG,CAAC;IACjB,OAAO,IAAI,CAAChC,IAAI,CAACgC,KAAK,CAAC,CAAC3C,MAAM;EAClC,CAAC;EACDG,WAAW,CAACK,cAAc,GAAG,CAAC;EAC9B,OAAOL,WAAW;AACtB,CAAC,EAAG;AACJ,SAASA,WAAW"},"metadata":{},"sourceType":"module"}