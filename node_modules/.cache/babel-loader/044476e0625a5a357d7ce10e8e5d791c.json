{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { IndentAction } from '../modes/languageConfiguration.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nvar TypeOperations = /** @class */function () {\n  function TypeOperations() {}\n  TypeOperations.indent = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: false,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      });\n    }\n    return commands;\n  };\n  TypeOperations.outdent = function (config, model, selections) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: true,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      });\n    }\n    return commands;\n  };\n  TypeOperations.shiftIndent = function (config, indentation, count) {\n    count = count || 1;\n    return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n  };\n  TypeOperations.unshiftIndent = function (config, indentation, count) {\n    count = count || 1;\n    return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n  };\n  TypeOperations._distributedPaste = function (config, model, selections, text) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], text[i]);\n    }\n    return new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n  TypeOperations._simplePaste = function (config, model, selections, text, pasteOnNewLine) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n      if (pasteOnNewLine && !selection.isEmpty()) {\n        pasteOnNewLine = false;\n      }\n      if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\n        pasteOnNewLine = false;\n      }\n      if (pasteOnNewLine) {\n        // Paste entire line at the beginning of line\n        var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\n        commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\n      } else {\n        commands[i] = new ReplaceCommand(selection, text);\n      }\n    }\n    return new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n  TypeOperations._distributePasteToCursors = function (config, selections, text, pasteOnNewLine, multicursorText) {\n    if (pasteOnNewLine) {\n      return null;\n    }\n    if (selections.length === 1) {\n      return null;\n    }\n    if (multicursorText && multicursorText.length === selections.length) {\n      return multicursorText;\n    }\n    if (config.multiCursorPaste === 'spread') {\n      // Try to spread the pasted text in case the line count matches the cursor count\n      // Remove trailing \\n if present\n      if (text.charCodeAt(text.length - 1) === 10 /* LineFeed */) {\n        text = text.substr(0, text.length - 1);\n      }\n      // Remove trailing \\r if present\n      if (text.charCodeAt(text.length - 1) === 13 /* CarriageReturn */) {\n        text = text.substr(0, text.length - 1);\n      }\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      if (lines.length === selections.length) {\n        return lines;\n      }\n    }\n    return null;\n  };\n  TypeOperations.paste = function (config, model, selections, text, pasteOnNewLine, multicursorText) {\n    var distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\n    if (distributedPaste) {\n      selections = selections.sort(Range.compareRangesUsingStarts);\n      return this._distributedPaste(config, model, selections, distributedPaste);\n    } else {\n      return this._simplePaste(config, model, selections, text, pasteOnNewLine);\n    }\n  };\n  TypeOperations._goodIndentForLine = function (config, model, lineNumber) {\n    var action = null;\n    var indentation = '';\n    var expectedIndentAction = LanguageConfigurationRegistry.getInheritIndentForLine(config.autoIndent, model, lineNumber, false);\n    if (expectedIndentAction) {\n      action = expectedIndentAction.action;\n      indentation = expectedIndentAction.indentation;\n    } else if (lineNumber > 1) {\n      var lastLineNumber = void 0;\n      for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n        var lineText = model.getLineContent(lastLineNumber);\n        var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\n        if (nonWhitespaceIdx >= 0) {\n          break;\n        }\n      }\n      if (lastLineNumber < 1) {\n        // No previous line with content found\n        return null;\n      }\n      var maxColumn = model.getLineMaxColumn(lastLineNumber);\n      var expectedEnterAction = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn));\n      if (expectedEnterAction) {\n        indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\n      }\n    }\n    if (action) {\n      if (action === IndentAction.Indent) {\n        indentation = TypeOperations.shiftIndent(config, indentation);\n      }\n      if (action === IndentAction.Outdent) {\n        indentation = TypeOperations.unshiftIndent(config, indentation);\n      }\n      indentation = config.normalizeIndentation(indentation);\n    }\n    if (!indentation) {\n      return null;\n    }\n    return indentation;\n  };\n  TypeOperations._replaceJumpToNextIndent = function (config, model, selection, insertsAutoWhitespace) {\n    var typeText = '';\n    var position = selection.getStartPosition();\n    if (config.insertSpaces) {\n      var visibleColumnFromColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n      var indentSize = config.indentSize;\n      var spacesCnt = indentSize - visibleColumnFromColumn % indentSize;\n      for (var i = 0; i < spacesCnt; i++) {\n        typeText += ' ';\n      }\n    } else {\n      typeText = '\\t';\n    }\n    return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\n  };\n  TypeOperations.tab = function (config, model, selections) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (selection.isEmpty()) {\n        var lineText = model.getLineContent(selection.startLineNumber);\n        if (/^\\s*$/.test(lineText) && model.isCheapToTokenize(selection.startLineNumber)) {\n          var goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\n          goodIndent = goodIndent || '\\t';\n          var possibleTypeText = config.normalizeIndentation(goodIndent);\n          if (!strings.startsWith(lineText, possibleTypeText)) {\n            commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\n            continue;\n          }\n        }\n        commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\n      } else {\n        if (selection.startLineNumber === selection.endLineNumber) {\n          var lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\n          if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\n            // This is a single line selection that is not the entire line\n            commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\n            continue;\n          }\n        }\n        commands[i] = new ShiftCommand(selection, {\n          isUnshift: false,\n          tabSize: config.tabSize,\n          indentSize: config.indentSize,\n          insertSpaces: config.insertSpaces,\n          useTabStops: config.useTabStops,\n          autoIndent: config.autoIndent\n        });\n      }\n    }\n    return commands;\n  };\n  TypeOperations.replacePreviousChar = function (prevEditOperationType, config, model, selections, txt, replaceCharCnt) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (!selection.isEmpty()) {\n        // looks like https://github.com/Microsoft/vscode/issues/2773\n        // where a cursor operation occurred before a canceled composition\n        // => ignore composition\n        commands[i] = null;\n        continue;\n      }\n      var pos = selection.getPosition();\n      var startColumn = Math.max(1, pos.column - replaceCharCnt);\n      var range = new Range(pos.lineNumber, startColumn, pos.lineNumber, pos.column);\n      commands[i] = new ReplaceCommand(range, txt);\n    }\n    return new EditOperationResult(1 /* Typing */, commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1 /* Typing */,\n      shouldPushStackElementAfter: false\n    });\n  };\n  TypeOperations._typeCommand = function (range, text, keepPosition) {\n    if (keepPosition) {\n      return new ReplaceCommandWithoutChangingPosition(range, text, true);\n    } else {\n      return new ReplaceCommand(range, text, true);\n    }\n  };\n  TypeOperations._enter = function (config, model, keepPosition, range) {\n    if (config.autoIndent === 0 /* None */) {\n      return TypeOperations._typeCommand(range, '\\n', keepPosition);\n    }\n    if (!model.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* Keep */) {\n      var lineText_1 = model.getLineContent(range.startLineNumber);\n      var indentation_1 = strings.getLeadingWhitespace(lineText_1).substring(0, range.startColumn - 1);\n      return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation_1), keepPosition);\n    }\n    var r = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, range);\n    if (r) {\n      if (r.indentAction === IndentAction.None) {\n        // Nothing special\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n      } else if (r.indentAction === IndentAction.Indent) {\n        // Indent once\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n      } else if (r.indentAction === IndentAction.IndentOutdent) {\n        // Ultra special\n        var normalIndent = config.normalizeIndentation(r.indentation);\n        var increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\n        var typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\n        if (keepPosition) {\n          return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\n        } else {\n          return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\n        }\n      } else if (r.indentAction === IndentAction.Outdent) {\n        var actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\n      }\n    }\n    var lineText = model.getLineContent(range.startLineNumber);\n    var indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n    if (config.autoIndent >= 4 /* Full */) {\n      var ir = LanguageConfigurationRegistry.getIndentForEnter(config.autoIndent, model, range, {\n        unshiftIndent: function unshiftIndent(indent) {\n          return TypeOperations.unshiftIndent(config, indent);\n        },\n        shiftIndent: function shiftIndent(indent) {\n          return TypeOperations.shiftIndent(config, indent);\n        },\n        normalizeIndentation: function normalizeIndentation(indent) {\n          return config.normalizeIndentation(indent);\n        }\n      });\n      if (ir) {\n        var oldEndViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, range.getEndPosition());\n        var oldEndColumn = range.endColumn;\n        var beforeText = '\\n';\n        if (indentation !== config.normalizeIndentation(ir.beforeEnter)) {\n          beforeText = config.normalizeIndentation(ir.beforeEnter) + lineText.substring(indentation.length, range.startColumn - 1) + '\\n';\n          range = new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn);\n        }\n        var newLineContent = model.getLineContent(range.endLineNumber);\n        var firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\n        if (firstNonWhitespace >= 0) {\n          range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\n        } else {\n          range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\n        }\n        if (keepPosition) {\n          return new ReplaceCommandWithoutChangingPosition(range, beforeText + config.normalizeIndentation(ir.afterEnter), true);\n        } else {\n          var offset = 0;\n          if (oldEndColumn <= firstNonWhitespace + 1) {\n            if (!config.insertSpaces) {\n              oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\n            }\n            offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\n          }\n          return new ReplaceCommandWithOffsetCursorState(range, beforeText + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\n        }\n      }\n    }\n    return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n  };\n  TypeOperations._isAutoIndentType = function (config, model, selections) {\n    if (config.autoIndent < 4 /* Full */) {\n      return false;\n    }\n    for (var i = 0, len = selections.length; i < len; i++) {\n      if (!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  TypeOperations._runAutoIndentType = function (config, model, range, ch) {\n    var currentIndentation = LanguageConfigurationRegistry.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    var actualIndentation = LanguageConfigurationRegistry.getIndentActionForType(config.autoIndent, model, range, ch, {\n      shiftIndent: function shiftIndent(indentation) {\n        return TypeOperations.shiftIndent(config, indentation);\n      },\n      unshiftIndent: function unshiftIndent(indentation) {\n        return TypeOperations.unshiftIndent(config, indentation);\n      }\n    });\n    if (actualIndentation === null) {\n      return null;\n    }\n    if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\n      var firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\n      if (firstNonWhitespace === 0) {\n        return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\n      } else {\n        return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\n      }\n    }\n    return null;\n  };\n  TypeOperations._isAutoClosingOvertype = function (config, model, selections, autoClosedCharacters, ch) {\n    if (config.autoClosingOvertype === 'never') {\n      return false;\n    }\n    if (!config.autoClosingPairsClose2.has(ch)) {\n      return false;\n    }\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (!selection.isEmpty()) {\n        return false;\n      }\n      var position = selection.getPosition();\n      var lineText = model.getLineContent(position.lineNumber);\n      var afterCharacter = lineText.charAt(position.column - 1);\n      if (afterCharacter !== ch) {\n        return false;\n      }\n      // Do not over-type quotes after a backslash\n      var chIsQuote = isQuote(ch);\n      var beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* Null */;\n      if (beforeCharacter === 92 /* Backslash */ && chIsQuote) {\n        return false;\n      }\n      // Must over-type a closing character typed by the editor\n      if (config.autoClosingOvertype === 'auto') {\n        var found = false;\n        for (var j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n          var autoClosedCharacter = autoClosedCharacters[j];\n          if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  TypeOperations._runAutoClosingOvertype = function (prevEditOperationType, config, model, selections, ch) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n      var typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\n      commands[i] = new ReplaceCommand(typeSelection, ch);\n    }\n    return new EditOperationResult(1 /* Typing */, commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1 /* Typing */,\n      shouldPushStackElementAfter: false\n    });\n  };\n  TypeOperations._autoClosingPairIsSymmetric = function (autoClosingPair) {\n    var open = autoClosingPair.open,\n      close = autoClosingPair.close;\n    return open.indexOf(close) >= 0 || close.indexOf(open) >= 0;\n  };\n  TypeOperations._isBeforeClosingBrace = function (config, autoClosingPair, characterAfter) {\n    var otherAutoClosingPairs = config.autoClosingPairsClose2.get(characterAfter);\n    if (!otherAutoClosingPairs) {\n      return false;\n    }\n    var thisBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(autoClosingPair);\n    for (var _i = 0, otherAutoClosingPairs_1 = otherAutoClosingPairs; _i < otherAutoClosingPairs_1.length; _i++) {\n      var otherAutoClosingPair = otherAutoClosingPairs_1[_i];\n      var otherBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(otherAutoClosingPair);\n      if (!thisBraceIsSymmetric && otherBraceIsSymmetric) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  };\n  TypeOperations._findAutoClosingPairOpen = function (config, model, positions, ch) {\n    var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(ch);\n    if (!autoClosingPairCandidates) {\n      return null;\n    }\n    // Determine which auto-closing pair it is\n    var autoClosingPair = null;\n    for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\n      var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\n      if (autoClosingPair === null || autoClosingPairCandidate.open.length > autoClosingPair.open.length) {\n        var candidateIsMatch = true;\n        for (var _a = 0, positions_1 = positions; _a < positions_1.length; _a++) {\n          var position = positions_1[_a];\n          var relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - autoClosingPairCandidate.open.length + 1, position.lineNumber, position.column));\n          if (relevantText + ch !== autoClosingPairCandidate.open) {\n            candidateIsMatch = false;\n            break;\n          }\n        }\n        if (candidateIsMatch) {\n          autoClosingPair = autoClosingPairCandidate;\n        }\n      }\n    }\n    return autoClosingPair;\n  };\n  TypeOperations._isAutoClosingOpenCharType = function (config, model, selections, ch, insertOpenCharacter) {\n    var chIsQuote = isQuote(ch);\n    var autoCloseConfig = chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets;\n    if (autoCloseConfig === 'never') {\n      return null;\n    }\n    var autoClosingPair = this._findAutoClosingPairOpen(config, model, selections.map(function (s) {\n      return s.getPosition();\n    }), ch);\n    if (!autoClosingPair) {\n      return null;\n    }\n    var shouldAutoCloseBefore = chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket;\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (!selection.isEmpty()) {\n        return null;\n      }\n      var position = selection.getPosition();\n      var lineText = model.getLineContent(position.lineNumber);\n      // Only consider auto closing the pair if a space follows or if another autoclosed pair follows\n      if (lineText.length > position.column - 1) {\n        var characterAfter = lineText.charAt(position.column - 1);\n        var isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, autoClosingPair, characterAfter);\n        if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\n          return null;\n        }\n      }\n      if (!model.isCheapToTokenize(position.lineNumber)) {\n        // Do not force tokenization\n        return null;\n      }\n      // Do not auto-close ' or \" after a word character\n      if (autoClosingPair.open.length === 1 && chIsQuote && autoCloseConfig !== 'always') {\n        var wordSeparators = getMapForWordSeparators(config.wordSeparators);\n        if (insertOpenCharacter && position.column > 1 && wordSeparators.get(lineText.charCodeAt(position.column - 2)) === 0 /* Regular */) {\n          return null;\n        }\n        if (!insertOpenCharacter && position.column > 2 && wordSeparators.get(lineText.charCodeAt(position.column - 3)) === 0 /* Regular */) {\n          return null;\n        }\n      }\n      model.forceTokenization(position.lineNumber);\n      var lineTokens = model.getLineTokens(position.lineNumber);\n      var shouldAutoClosePair = false;\n      try {\n        shouldAutoClosePair = LanguageConfigurationRegistry.shouldAutoClosePair(autoClosingPair, lineTokens, insertOpenCharacter ? position.column : position.column - 1);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n      if (!shouldAutoClosePair) {\n        return null;\n      }\n    }\n    return autoClosingPair;\n  };\n  TypeOperations._runAutoClosingOpenCharType = function (prevEditOperationType, config, model, selections, ch, insertOpenCharacter, autoClosingPair) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      commands[i] = new TypeWithAutoClosingCommand(selection, ch, insertOpenCharacter, autoClosingPair.close);\n    }\n    return new EditOperationResult(1 /* Typing */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: false\n    });\n  };\n  TypeOperations._shouldSurroundChar = function (config, ch) {\n    if (isQuote(ch)) {\n      return config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined';\n    } else {\n      // Character is a bracket\n      return config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined';\n    }\n  };\n  TypeOperations._isSurroundSelectionType = function (config, model, selections, ch) {\n    if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n      return false;\n    }\n    var isTypingAQuoteCharacter = isQuote(ch);\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (selection.isEmpty()) {\n        return false;\n      }\n      var selectionContainsOnlyWhitespace = true;\n      for (var lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\n        var lineText = model.getLineContent(lineNumber);\n        var startIndex = lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0;\n        var endIndex = lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length;\n        var selectedText = lineText.substring(startIndex, endIndex);\n        if (/[^ \\t]/.test(selectedText)) {\n          // this selected text contains something other than whitespace\n          selectionContainsOnlyWhitespace = false;\n          break;\n        }\n      }\n      if (selectionContainsOnlyWhitespace) {\n        return false;\n      }\n      if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\n        var selectionText = model.getValueInRange(selection);\n        if (isQuote(selectionText)) {\n          // Typing a quote character on top of another quote character\n          // => disable surround selection type\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  TypeOperations._runSurroundSelectionType = function (prevEditOperationType, config, model, selections, ch) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var closeCharacter = config.surroundingPairs[ch];\n      commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\n    }\n    return new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n  TypeOperations._isTypeInterceptorElectricChar = function (config, model, selections) {\n    if (selections.length === 1 && model.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\n      return true;\n    }\n    return false;\n  };\n  TypeOperations._typeInterceptorElectricChar = function (prevEditOperationType, config, model, selection, ch) {\n    if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\n      return null;\n    }\n    var position = selection.getPosition();\n    model.forceTokenization(position.lineNumber);\n    var lineTokens = model.getLineTokens(position.lineNumber);\n    var electricAction;\n    try {\n      electricAction = LanguageConfigurationRegistry.onElectricCharacter(ch, lineTokens, position.column);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n    if (!electricAction) {\n      return null;\n    }\n    if (electricAction.matchOpenBracket) {\n      var endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\n      var match = model.findMatchingBracketUp(electricAction.matchOpenBracket, {\n        lineNumber: position.lineNumber,\n        column: endColumn\n      });\n      if (match) {\n        if (match.startLineNumber === position.lineNumber) {\n          // matched something on the same line => no change in indentation\n          return null;\n        }\n        var matchLine = model.getLineContent(match.startLineNumber);\n        var matchLineIndentation = strings.getLeadingWhitespace(matchLine);\n        var newIndentation = config.normalizeIndentation(matchLineIndentation);\n        var lineText = model.getLineContent(position.lineNumber);\n        var lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\n        var prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\n        var typeText = newIndentation + prefix + ch;\n        var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\n        var command = new ReplaceCommand(typeSelection, typeText);\n        return new EditOperationResult(1 /* Typing */, [command], {\n          shouldPushStackElementBefore: false,\n          shouldPushStackElementAfter: true\n        });\n      }\n    }\n    return null;\n  };\n  /**\r\n   * This is very similar with typing, but the character is already in the text buffer!\r\n   */\n  TypeOperations.compositionEndWithInterceptors = function (prevEditOperationType, config, model, selectionsWhenCompositionStarted, selections, autoClosedCharacters) {\n    if (!selectionsWhenCompositionStarted || Selection.selectionsArrEqual(selectionsWhenCompositionStarted, selections)) {\n      // no content was typed\n      return null;\n    }\n    var ch = null;\n    // extract last typed character\n    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n      var selection = selections_1[_i];\n      if (!selection.isEmpty()) {\n        return null;\n      }\n      var position = selection.getPosition();\n      var currentChar = model.getValueInRange(new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column));\n      if (ch === null) {\n        ch = currentChar;\n      } else if (ch !== currentChar) {\n        return null;\n      }\n    }\n    if (!ch) {\n      return null;\n    }\n    if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n      // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\n      var commands = selections.map(function (s) {\n        return new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false);\n      });\n      return new EditOperationResult(1 /* Typing */, commands, {\n        shouldPushStackElementBefore: true,\n        shouldPushStackElementAfter: false\n      });\n    }\n    var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, false);\n    if (autoClosingPairOpenCharType) {\n      return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairOpenCharType);\n    }\n    return null;\n  };\n  TypeOperations.typeWithInterceptors = function (prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n    if (ch === '\\n') {\n      var commands_1 = [];\n      for (var i = 0, len = selections.length; i < len; i++) {\n        commands_1[i] = TypeOperations._enter(config, model, false, selections[i]);\n      }\n      return new EditOperationResult(1 /* Typing */, commands_1, {\n        shouldPushStackElementBefore: true,\n        shouldPushStackElementAfter: false\n      });\n    }\n    if (this._isAutoIndentType(config, model, selections)) {\n      var commands_2 = [];\n      var autoIndentFails = false;\n      for (var i = 0, len = selections.length; i < len; i++) {\n        commands_2[i] = this._runAutoIndentType(config, model, selections[i], ch);\n        if (!commands_2[i]) {\n          autoIndentFails = true;\n          break;\n        }\n      }\n      if (!autoIndentFails) {\n        return new EditOperationResult(1 /* Typing */, commands_2, {\n          shouldPushStackElementBefore: true,\n          shouldPushStackElementAfter: false\n        });\n      }\n    }\n    if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n      return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\n    }\n    var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, true);\n    if (autoClosingPairOpenCharType) {\n      return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairOpenCharType);\n    }\n    if (this._isSurroundSelectionType(config, model, selections, ch)) {\n      return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\n    }\n    // Electric characters make sense only when dealing with a single cursor,\n    // as multiple cursors typing brackets for example would interfer with bracket matching\n    if (this._isTypeInterceptorElectricChar(config, model, selections)) {\n      var r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\n      if (r) {\n        return r;\n      }\n    }\n    // A simple character type\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], ch);\n    }\n    var shouldPushStackElementBefore = prevEditOperationType !== 1 /* Typing */;\n    if (ch === ' ') {\n      shouldPushStackElementBefore = true;\n    }\n    return new EditOperationResult(1 /* Typing */, commands, {\n      shouldPushStackElementBefore: shouldPushStackElementBefore,\n      shouldPushStackElementAfter: false\n    });\n  };\n  TypeOperations.typeWithoutInterceptors = function (prevEditOperationType, config, model, selections, str) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ReplaceCommand(selections[i], str);\n    }\n    return new EditOperationResult(1 /* Typing */, commands, {\n      shouldPushStackElementBefore: prevEditOperationType !== 1 /* Typing */,\n      shouldPushStackElementAfter: false\n    });\n  };\n  TypeOperations.lineInsertBefore = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var lineNumber = selections[i].positionLineNumber;\n      if (lineNumber === 1) {\n        commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\n      } else {\n        lineNumber--;\n        var column = model.getLineMaxColumn(lineNumber);\n        commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n      }\n    }\n    return commands;\n  };\n  TypeOperations.lineInsertAfter = function (config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var lineNumber = selections[i].positionLineNumber;\n      var column = model.getLineMaxColumn(lineNumber);\n      commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n    }\n    return commands;\n  };\n  TypeOperations.lineBreakInsert = function (config, model, selections) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      commands[i] = this._enter(config, model, true, selections[i]);\n    }\n    return commands;\n  };\n  return TypeOperations;\n}();\nexport { TypeOperations };\nvar TypeWithAutoClosingCommand = /** @class */function (_super) {\n  __extends(TypeWithAutoClosingCommand, _super);\n  function TypeWithAutoClosingCommand(selection, openCharacter, insertOpenCharacter, closeCharacter) {\n    var _this = _super.call(this, selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length) || this;\n    _this._openCharacter = openCharacter;\n    _this._closeCharacter = closeCharacter;\n    _this.closeCharacterRange = null;\n    _this.enclosingRange = null;\n    return _this;\n  }\n  TypeWithAutoClosingCommand.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    var range = inverseEditOperations[0].range;\n    this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n    this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n    return _super.prototype.computeCursorState.call(this, model, helper);\n  };\n  return TypeWithAutoClosingCommand;\n}(ReplaceCommandWithOffsetCursorState);\nexport { TypeWithAutoClosingCommand };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","strings","ReplaceCommand","ReplaceCommandWithOffsetCursorState","ReplaceCommandWithoutChangingPosition","ReplaceCommandThatPreservesSelection","ShiftCommand","SurroundSelectionCommand","CursorColumns","EditOperationResult","isQuote","getMapForWordSeparators","Range","Selection","IndentAction","LanguageConfigurationRegistry","TypeOperations","indent","config","model","selections","commands","i","len","length","isUnshift","tabSize","indentSize","insertSpaces","useTabStops","autoIndent","outdent","shiftIndent","indentation","count","unshiftIndent","_distributedPaste","text","shouldPushStackElementBefore","shouldPushStackElementAfter","_simplePaste","pasteOnNewLine","selection","position","getPosition","isEmpty","indexOf","typeSelection","lineNumber","_distributePasteToCursors","multicursorText","multiCursorPaste","charCodeAt","substr","lines","split","paste","distributedPaste","sort","compareRangesUsingStarts","_goodIndentForLine","action","expectedIndentAction","getInheritIndentForLine","lastLineNumber","lineText","getLineContent","nonWhitespaceIdx","lastNonWhitespaceIndex","maxColumn","getLineMaxColumn","expectedEnterAction","getEnterAction","appendText","Indent","Outdent","normalizeIndentation","_replaceJumpToNextIndent","insertsAutoWhitespace","typeText","getStartPosition","visibleColumnFromColumn","visibleColumnFromColumn2","spacesCnt","tab","startLineNumber","test","isCheapToTokenize","goodIndent","possibleTypeText","startsWith","endLineNumber","lineMaxColumn","startColumn","endColumn","replacePreviousChar","prevEditOperationType","txt","replaceCharCnt","pos","Math","max","column","range","_typeCommand","keepPosition","_enter","lineText_1","indentation_1","getLeadingWhitespace","substring","r","indentAction","None","IndentOutdent","normalIndent","increasedIndent","actualIndentation","ir","getIndentForEnter","oldEndViewColumn","getEndPosition","oldEndColumn","beforeText","beforeEnter","newLineContent","firstNonWhitespace","firstNonWhitespaceIndex","setEndPosition","afterEnter","offset","ceil","min","_isAutoIndentType","_runAutoIndentType","ch","currentIndentation","getIndentationAtPosition","getIndentActionForType","getLineFirstNonWhitespaceColumn","_isAutoClosingOvertype","autoClosedCharacters","autoClosingOvertype","autoClosingPairsClose2","has","afterCharacter","charAt","chIsQuote","beforeCharacter","found","j","lenJ","autoClosedCharacter","_runAutoClosingOvertype","_autoClosingPairIsSymmetric","autoClosingPair","open","close","_isBeforeClosingBrace","characterAfter","otherAutoClosingPairs","get","thisBraceIsSymmetric","_i","otherAutoClosingPairs_1","otherAutoClosingPair","otherBraceIsSymmetric","_findAutoClosingPairOpen","positions","autoClosingPairCandidates","autoClosingPairsOpen2","autoClosingPairCandidates_1","autoClosingPairCandidate","candidateIsMatch","_a","positions_1","relevantText","getValueInRange","_isAutoClosingOpenCharType","insertOpenCharacter","autoCloseConfig","autoClosingQuotes","autoClosingBrackets","map","s","shouldAutoCloseBefore","quote","bracket","isBeforeCloseBrace","wordSeparators","forceTokenization","lineTokens","getLineTokens","shouldAutoClosePair","e","_runAutoClosingOpenCharType","TypeWithAutoClosingCommand","_shouldSurroundChar","autoSurround","_isSurroundSelectionType","surroundingPairs","isTypingAQuoteCharacter","selectionContainsOnlyWhitespace","startIndex","endIndex","selectedText","selectionText","_runSurroundSelectionType","closeCharacter","_isTypeInterceptorElectricChar","_typeInterceptorElectricChar","electricChars","electricAction","onElectricCharacter","matchOpenBracket","lastIndexOf","match","findMatchingBracketUp","matchLine","matchLineIndentation","newIndentation","lineFirstNonBlankColumn","prefix","command","compositionEndWithInterceptors","selectionsWhenCompositionStarted","selectionsArrEqual","selections_1","currentChar","positionLineNumber","positionColumn","autoClosingPairOpenCharType","typeWithInterceptors","commands_1","commands_2","autoIndentFails","typeWithoutInterceptors","str","lineInsertBefore","lineInsertAfter","lineBreakInsert","_super","openCharacter","_this","call","_openCharacter","_closeCharacter","closeCharacterRange","enclosingRange","computeCursorState","helper","inverseEditOperations","getInverseEditOperations"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\r\nimport { ShiftCommand } from '../commands/shiftCommand.js';\r\nimport { SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { IndentAction } from '../modes/languageConfiguration.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar TypeOperations = /** @class */ (function () {\r\n    function TypeOperations() {\r\n    }\r\n    TypeOperations.indent = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: false,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.outdent = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: true,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.shiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations.unshiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations._distributedPaste = function (config, model, selections, text) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._simplePaste = function (config, model, selections, text, pasteOnNewLine) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (pasteOnNewLine && !selection.isEmpty()) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine) {\r\n                // Paste entire line at the beginning of line\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\r\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, text);\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._distributePasteToCursors = function (config, selections, text, pasteOnNewLine, multicursorText) {\r\n        if (pasteOnNewLine) {\r\n            return null;\r\n        }\r\n        if (selections.length === 1) {\r\n            return null;\r\n        }\r\n        if (multicursorText && multicursorText.length === selections.length) {\r\n            return multicursorText;\r\n        }\r\n        if (config.multiCursorPaste === 'spread') {\r\n            // Try to spread the pasted text in case the line count matches the cursor count\r\n            // Remove trailing \\n if present\r\n            if (text.charCodeAt(text.length - 1) === 10 /* LineFeed */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            // Remove trailing \\r if present\r\n            if (text.charCodeAt(text.length - 1) === 13 /* CarriageReturn */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            var lines = text.split(/\\r\\n|\\r|\\n/);\r\n            if (lines.length === selections.length) {\r\n                return lines;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.paste = function (config, model, selections, text, pasteOnNewLine, multicursorText) {\r\n        var distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\r\n        if (distributedPaste) {\r\n            selections = selections.sort(Range.compareRangesUsingStarts);\r\n            return this._distributedPaste(config, model, selections, distributedPaste);\r\n        }\r\n        else {\r\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\r\n        }\r\n    };\r\n    TypeOperations._goodIndentForLine = function (config, model, lineNumber) {\r\n        var action = null;\r\n        var indentation = '';\r\n        var expectedIndentAction = LanguageConfigurationRegistry.getInheritIndentForLine(config.autoIndent, model, lineNumber, false);\r\n        if (expectedIndentAction) {\r\n            action = expectedIndentAction.action;\r\n            indentation = expectedIndentAction.indentation;\r\n        }\r\n        else if (lineNumber > 1) {\r\n            var lastLineNumber = void 0;\r\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\r\n                var lineText = model.getLineContent(lastLineNumber);\r\n                var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\r\n                if (nonWhitespaceIdx >= 0) {\r\n                    break;\r\n                }\r\n            }\r\n            if (lastLineNumber < 1) {\r\n                // No previous line with content found\r\n                return null;\r\n            }\r\n            var maxColumn = model.getLineMaxColumn(lastLineNumber);\r\n            var expectedEnterAction = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn));\r\n            if (expectedEnterAction) {\r\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\r\n            }\r\n        }\r\n        if (action) {\r\n            if (action === IndentAction.Indent) {\r\n                indentation = TypeOperations.shiftIndent(config, indentation);\r\n            }\r\n            if (action === IndentAction.Outdent) {\r\n                indentation = TypeOperations.unshiftIndent(config, indentation);\r\n            }\r\n            indentation = config.normalizeIndentation(indentation);\r\n        }\r\n        if (!indentation) {\r\n            return null;\r\n        }\r\n        return indentation;\r\n    };\r\n    TypeOperations._replaceJumpToNextIndent = function (config, model, selection, insertsAutoWhitespace) {\r\n        var typeText = '';\r\n        var position = selection.getStartPosition();\r\n        if (config.insertSpaces) {\r\n            var visibleColumnFromColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n            var indentSize = config.indentSize;\r\n            var spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\r\n            for (var i = 0; i < spacesCnt; i++) {\r\n                typeText += ' ';\r\n            }\r\n        }\r\n        else {\r\n            typeText = '\\t';\r\n        }\r\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\r\n    };\r\n    TypeOperations.tab = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                var lineText = model.getLineContent(selection.startLineNumber);\r\n                if (/^\\s*$/.test(lineText) && model.isCheapToTokenize(selection.startLineNumber)) {\r\n                    var goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\r\n                    goodIndent = goodIndent || '\\t';\r\n                    var possibleTypeText = config.normalizeIndentation(goodIndent);\r\n                    if (!strings.startsWith(lineText, possibleTypeText)) {\r\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\r\n            }\r\n            else {\r\n                if (selection.startLineNumber === selection.endLineNumber) {\r\n                    var lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\r\n                        // This is a single line selection that is not the entire line\r\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = new ShiftCommand(selection, {\r\n                    isUnshift: false,\r\n                    tabSize: config.tabSize,\r\n                    indentSize: config.indentSize,\r\n                    insertSpaces: config.insertSpaces,\r\n                    useTabStops: config.useTabStops,\r\n                    autoIndent: config.autoIndent\r\n                });\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.replacePreviousChar = function (prevEditOperationType, config, model, selections, txt, replaceCharCnt) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                // looks like https://github.com/Microsoft/vscode/issues/2773\r\n                // where a cursor operation occurred before a canceled composition\r\n                // => ignore composition\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            var pos = selection.getPosition();\r\n            var startColumn = Math.max(1, pos.column - replaceCharCnt);\r\n            var range = new Range(pos.lineNumber, startColumn, pos.lineNumber, pos.column);\r\n            commands[i] = new ReplaceCommand(range, txt);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._typeCommand = function (range, text, keepPosition) {\r\n        if (keepPosition) {\r\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\r\n        }\r\n        else {\r\n            return new ReplaceCommand(range, text, true);\r\n        }\r\n    };\r\n    TypeOperations._enter = function (config, model, keepPosition, range) {\r\n        if (config.autoIndent === 0 /* None */) {\r\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\r\n        }\r\n        if (!model.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* Keep */) {\r\n            var lineText_1 = model.getLineContent(range.startLineNumber);\r\n            var indentation_1 = strings.getLeadingWhitespace(lineText_1).substring(0, range.startColumn - 1);\r\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation_1), keepPosition);\r\n        }\r\n        var r = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, range);\r\n        if (r) {\r\n            if (r.indentAction === IndentAction.None) {\r\n                // Nothing special\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.Indent) {\r\n                // Indent once\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.IndentOutdent) {\r\n                // Ultra special\r\n                var normalIndent = config.normalizeIndentation(r.indentation);\r\n                var increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\r\n                var typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\r\n                }\r\n                else {\r\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\r\n                }\r\n            }\r\n            else if (r.indentAction === IndentAction.Outdent) {\r\n                var actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\r\n            }\r\n        }\r\n        var lineText = model.getLineContent(range.startLineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\r\n        if (config.autoIndent >= 4 /* Full */) {\r\n            var ir = LanguageConfigurationRegistry.getIndentForEnter(config.autoIndent, model, range, {\r\n                unshiftIndent: function (indent) {\r\n                    return TypeOperations.unshiftIndent(config, indent);\r\n                },\r\n                shiftIndent: function (indent) {\r\n                    return TypeOperations.shiftIndent(config, indent);\r\n                },\r\n                normalizeIndentation: function (indent) {\r\n                    return config.normalizeIndentation(indent);\r\n                }\r\n            });\r\n            if (ir) {\r\n                var oldEndViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, range.getEndPosition());\r\n                var oldEndColumn = range.endColumn;\r\n                var beforeText = '\\n';\r\n                if (indentation !== config.normalizeIndentation(ir.beforeEnter)) {\r\n                    beforeText = config.normalizeIndentation(ir.beforeEnter) + lineText.substring(indentation.length, range.startColumn - 1) + '\\n';\r\n                    range = new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn);\r\n                }\r\n                var newLineContent = model.getLineContent(range.endLineNumber);\r\n                var firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\r\n                if (firstNonWhitespace >= 0) {\r\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\r\n                }\r\n                else {\r\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\r\n                }\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, beforeText + config.normalizeIndentation(ir.afterEnter), true);\r\n                }\r\n                else {\r\n                    var offset = 0;\r\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\r\n                        if (!config.insertSpaces) {\r\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\r\n                        }\r\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\r\n                    }\r\n                    return new ReplaceCommandWithOffsetCursorState(range, beforeText + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\r\n                }\r\n            }\r\n        }\r\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\r\n    };\r\n    TypeOperations._isAutoIndentType = function (config, model, selections) {\r\n        if (config.autoIndent < 4 /* Full */) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            if (!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoIndentType = function (config, model, range, ch) {\r\n        var currentIndentation = LanguageConfigurationRegistry.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\r\n        var actualIndentation = LanguageConfigurationRegistry.getIndentActionForType(config.autoIndent, model, range, ch, {\r\n            shiftIndent: function (indentation) {\r\n                return TypeOperations.shiftIndent(config, indentation);\r\n            },\r\n            unshiftIndent: function (indentation) {\r\n                return TypeOperations.unshiftIndent(config, indentation);\r\n            },\r\n        });\r\n        if (actualIndentation === null) {\r\n            return null;\r\n        }\r\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\r\n            var firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\r\n            if (firstNonWhitespace === 0) {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\r\n            }\r\n            else {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\r\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations._isAutoClosingOvertype = function (config, model, selections, autoClosedCharacters, ch) {\r\n        if (config.autoClosingOvertype === 'never') {\r\n            return false;\r\n        }\r\n        if (!config.autoClosingPairsClose2.has(ch)) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var afterCharacter = lineText.charAt(position.column - 1);\r\n            if (afterCharacter !== ch) {\r\n                return false;\r\n            }\r\n            // Do not over-type quotes after a backslash\r\n            var chIsQuote = isQuote(ch);\r\n            var beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* Null */;\r\n            if (beforeCharacter === 92 /* Backslash */ && chIsQuote) {\r\n                return false;\r\n            }\r\n            // Must over-type a closing character typed by the editor\r\n            if (config.autoClosingOvertype === 'auto') {\r\n                var found = false;\r\n                for (var j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\r\n                    var autoClosedCharacter = autoClosedCharacters[j];\r\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoClosingOvertype = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            var typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(typeSelection, ch);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._autoClosingPairIsSymmetric = function (autoClosingPair) {\r\n        var open = autoClosingPair.open, close = autoClosingPair.close;\r\n        return (open.indexOf(close) >= 0 || close.indexOf(open) >= 0);\r\n    };\r\n    TypeOperations._isBeforeClosingBrace = function (config, autoClosingPair, characterAfter) {\r\n        var otherAutoClosingPairs = config.autoClosingPairsClose2.get(characterAfter);\r\n        if (!otherAutoClosingPairs) {\r\n            return false;\r\n        }\r\n        var thisBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(autoClosingPair);\r\n        for (var _i = 0, otherAutoClosingPairs_1 = otherAutoClosingPairs; _i < otherAutoClosingPairs_1.length; _i++) {\r\n            var otherAutoClosingPair = otherAutoClosingPairs_1[_i];\r\n            var otherBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(otherAutoClosingPair);\r\n            if (!thisBraceIsSymmetric && otherBraceIsSymmetric) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._findAutoClosingPairOpen = function (config, model, positions, ch) {\r\n        var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(ch);\r\n        if (!autoClosingPairCandidates) {\r\n            return null;\r\n        }\r\n        // Determine which auto-closing pair it is\r\n        var autoClosingPair = null;\r\n        for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n            var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n            if (autoClosingPair === null || autoClosingPairCandidate.open.length > autoClosingPair.open.length) {\r\n                var candidateIsMatch = true;\r\n                for (var _a = 0, positions_1 = positions; _a < positions_1.length; _a++) {\r\n                    var position = positions_1[_a];\r\n                    var relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - autoClosingPairCandidate.open.length + 1, position.lineNumber, position.column));\r\n                    if (relevantText + ch !== autoClosingPairCandidate.open) {\r\n                        candidateIsMatch = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (candidateIsMatch) {\r\n                    autoClosingPair = autoClosingPairCandidate;\r\n                }\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._isAutoClosingOpenCharType = function (config, model, selections, ch, insertOpenCharacter) {\r\n        var chIsQuote = isQuote(ch);\r\n        var autoCloseConfig = chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets;\r\n        if (autoCloseConfig === 'never') {\r\n            return null;\r\n        }\r\n        var autoClosingPair = this._findAutoClosingPairOpen(config, model, selections.map(function (s) { return s.getPosition(); }), ch);\r\n        if (!autoClosingPair) {\r\n            return null;\r\n        }\r\n        var shouldAutoCloseBefore = chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket;\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            // Only consider auto closing the pair if a space follows or if another autoclosed pair follows\r\n            if (lineText.length > position.column - 1) {\r\n                var characterAfter = lineText.charAt(position.column - 1);\r\n                var isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, autoClosingPair, characterAfter);\r\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\r\n                    return null;\r\n                }\r\n            }\r\n            if (!model.isCheapToTokenize(position.lineNumber)) {\r\n                // Do not force tokenization\r\n                return null;\r\n            }\r\n            // Do not auto-close ' or \" after a word character\r\n            if (autoClosingPair.open.length === 1 && chIsQuote && autoCloseConfig !== 'always') {\r\n                var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n                if (insertOpenCharacter && position.column > 1 && wordSeparators.get(lineText.charCodeAt(position.column - 2)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n                if (!insertOpenCharacter && position.column > 2 && wordSeparators.get(lineText.charCodeAt(position.column - 3)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n            }\r\n            model.forceTokenization(position.lineNumber);\r\n            var lineTokens = model.getLineTokens(position.lineNumber);\r\n            var shouldAutoClosePair = false;\r\n            try {\r\n                shouldAutoClosePair = LanguageConfigurationRegistry.shouldAutoClosePair(autoClosingPair, lineTokens, insertOpenCharacter ? position.column : position.column - 1);\r\n            }\r\n            catch (e) {\r\n                onUnexpectedError(e);\r\n            }\r\n            if (!shouldAutoClosePair) {\r\n                return null;\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._runAutoClosingOpenCharType = function (prevEditOperationType, config, model, selections, ch, insertOpenCharacter, autoClosingPair) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, insertOpenCharacter, autoClosingPair.close);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._shouldSurroundChar = function (config, ch) {\r\n        if (isQuote(ch)) {\r\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\r\n        }\r\n        else {\r\n            // Character is a bracket\r\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\r\n        }\r\n    };\r\n    TypeOperations._isSurroundSelectionType = function (config, model, selections, ch) {\r\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\r\n            return false;\r\n        }\r\n        var isTypingAQuoteCharacter = isQuote(ch);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var selectionContainsOnlyWhitespace = true;\r\n            for (var lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\r\n                var lineText = model.getLineContent(lineNumber);\r\n                var startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\r\n                var endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\r\n                var selectedText = lineText.substring(startIndex, endIndex);\r\n                if (/[^ \\t]/.test(selectedText)) {\r\n                    // this selected text contains something other than whitespace\r\n                    selectionContainsOnlyWhitespace = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (selectionContainsOnlyWhitespace) {\r\n                return false;\r\n            }\r\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\r\n                var selectionText = model.getValueInRange(selection);\r\n                if (isQuote(selectionText)) {\r\n                    // Typing a quote character on top of another quote character\r\n                    // => disable surround selection type\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runSurroundSelectionType = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var closeCharacter = config.surroundingPairs[ch];\r\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._isTypeInterceptorElectricChar = function (config, model, selections) {\r\n        if (selections.length === 1 && model.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._typeInterceptorElectricChar = function (prevEditOperationType, config, model, selection, ch) {\r\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\r\n            return null;\r\n        }\r\n        var position = selection.getPosition();\r\n        model.forceTokenization(position.lineNumber);\r\n        var lineTokens = model.getLineTokens(position.lineNumber);\r\n        var electricAction;\r\n        try {\r\n            electricAction = LanguageConfigurationRegistry.onElectricCharacter(ch, lineTokens, position.column);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n        if (!electricAction) {\r\n            return null;\r\n        }\r\n        if (electricAction.matchOpenBracket) {\r\n            var endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\r\n            var match = model.findMatchingBracketUp(electricAction.matchOpenBracket, {\r\n                lineNumber: position.lineNumber,\r\n                column: endColumn\r\n            });\r\n            if (match) {\r\n                if (match.startLineNumber === position.lineNumber) {\r\n                    // matched something on the same line => no change in indentation\r\n                    return null;\r\n                }\r\n                var matchLine = model.getLineContent(match.startLineNumber);\r\n                var matchLineIndentation = strings.getLeadingWhitespace(matchLine);\r\n                var newIndentation = config.normalizeIndentation(matchLineIndentation);\r\n                var lineText = model.getLineContent(position.lineNumber);\r\n                var lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\r\n                var prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\r\n                var typeText = newIndentation + prefix + ch;\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\r\n                var command = new ReplaceCommand(typeSelection, typeText);\r\n                return new EditOperationResult(1 /* Typing */, [command], {\r\n                    shouldPushStackElementBefore: false,\r\n                    shouldPushStackElementAfter: true\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * This is very similar with typing, but the character is already in the text buffer!\r\n     */\r\n    TypeOperations.compositionEndWithInterceptors = function (prevEditOperationType, config, model, selectionsWhenCompositionStarted, selections, autoClosedCharacters) {\r\n        if (!selectionsWhenCompositionStarted || Selection.selectionsArrEqual(selectionsWhenCompositionStarted, selections)) {\r\n            // no content was typed\r\n            return null;\r\n        }\r\n        var ch = null;\r\n        // extract last typed character\r\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n            var selection = selections_1[_i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var currentChar = model.getValueInRange(new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column));\r\n            if (ch === null) {\r\n                ch = currentChar;\r\n            }\r\n            else if (ch !== currentChar) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!ch) {\r\n            return null;\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\r\n            var commands = selections.map(function (s) { return new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false); });\r\n            return new EditOperationResult(1 /* Typing */, commands, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false\r\n            });\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, false);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairOpenCharType);\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.typeWithInterceptors = function (prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\r\n        if (ch === '\\n') {\r\n            var commands_1 = [];\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_1[i] = TypeOperations._enter(config, model, false, selections[i]);\r\n            }\r\n            return new EditOperationResult(1 /* Typing */, commands_1, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false,\r\n            });\r\n        }\r\n        if (this._isAutoIndentType(config, model, selections)) {\r\n            var commands_2 = [];\r\n            var autoIndentFails = false;\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_2[i] = this._runAutoIndentType(config, model, selections[i], ch);\r\n                if (!commands_2[i]) {\r\n                    autoIndentFails = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!autoIndentFails) {\r\n                return new EditOperationResult(1 /* Typing */, commands_2, {\r\n                    shouldPushStackElementBefore: true,\r\n                    shouldPushStackElementAfter: false,\r\n                });\r\n            }\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, true);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairOpenCharType);\r\n        }\r\n        if (this._isSurroundSelectionType(config, model, selections, ch)) {\r\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        // Electric characters make sense only when dealing with a single cursor,\r\n        // as multiple cursors typing brackets for example would interfer with bracket matching\r\n        if (this._isTypeInterceptorElectricChar(config, model, selections)) {\r\n            var r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        // A simple character type\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], ch);\r\n        }\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 1 /* Typing */);\r\n        if (ch === ' ') {\r\n            shouldPushStackElementBefore = true;\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: shouldPushStackElementBefore,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.typeWithoutInterceptors = function (prevEditOperationType, config, model, selections, str) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], str);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.lineInsertBefore = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            if (lineNumber === 1) {\r\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\r\n            }\r\n            else {\r\n                lineNumber--;\r\n                var column = model.getLineMaxColumn(lineNumber);\r\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineInsertAfter = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            var column = model.getLineMaxColumn(lineNumber);\r\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineBreakInsert = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = this._enter(config, model, true, selections[i]);\r\n        }\r\n        return commands;\r\n    };\r\n    return TypeOperations;\r\n}());\r\nexport { TypeOperations };\r\nvar TypeWithAutoClosingCommand = /** @class */ (function (_super) {\r\n    __extends(TypeWithAutoClosingCommand, _super);\r\n    function TypeWithAutoClosingCommand(selection, openCharacter, insertOpenCharacter, closeCharacter) {\r\n        var _this = _super.call(this, selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length) || this;\r\n        _this._openCharacter = openCharacter;\r\n        _this._closeCharacter = closeCharacter;\r\n        _this.closeCharacterRange = null;\r\n        _this.enclosingRange = null;\r\n        return _this;\r\n    }\r\n    TypeWithAutoClosingCommand.prototype.computeCursorState = function (model, helper) {\r\n        var inverseEditOperations = helper.getInverseEditOperations();\r\n        var range = inverseEditOperations[0].range;\r\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        return _super.prototype.computeCursorState.call(this, model, helper);\r\n    };\r\n    return TypeWithAutoClosingCommand;\r\n}(ReplaceCommandWithOffsetCursorState));\r\nexport { TypeWithAutoClosingCommand };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}