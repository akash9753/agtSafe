{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\Program\\\\Workspace.js\";\nimport React, { Component } from 'react';\nimport Blockly from 'blockly/core';\nimport { hideProgress, showProgress, mappingPermission, CallServerPost, PostCallWithZone, validJSON, successModalCallback, errorModal } from \"../Utility/sharedUtility\";\nimport BlocklyComponent, { Block, Field, Category } from './Blockly';\nimport { Row, Button } from \"antd\";\nvar thisObj = {};\n\n//following line for open flyout while drag from flyout\nvar SelectedCategory = {};\nvar ProgramWorkSpace = /*#__PURE__*/function (_Component) {\n  _inherits(ProgramWorkSpace, _Component);\n  var _super = _createSuper(ProgramWorkSpace);\n  function ProgramWorkSpace(props) {\n    var _this;\n    _classCallCheck(this, ProgramWorkSpace);\n    _this = _super.call(this, props);\n    _this.initialXml = function (targetVariables, selectedDomain) {\n      //sort by order key\n      var variableForSelDomain = targetVariables.filter(function (v) {\n        return v.TargetDataSet === selectedDomain;\n      });\n      var getInt = function getInt(inval) {\n        return inval && inval != \"\" ? parseInt(inval) : 0;\n      };\n      var variablesList = variableForSelDomain.sort(function (v2, v1) {\n        return getInt(v2.Order) < getInt(v1.Order) ? -1 : getInt(v2.Order) > getInt(v1.Order) ? 1 : 0;\n      });\n      //console.log(variablesList)\n      var order_xml = \"<xml>\\n                    <block deletable=\\\"false\\\" type=\\\"exec_order_of_execution\\\" id=\\\"order_of_execution\\\" x=\\\"287\\\" y=\\\"130\\\">\\n                        <field name=\\\"Order_of_Execution_name\\\">Order of Execution</field>\\n                        <statement name=\\\"order_of_execution_statement\\\">\\n                        </statement>\\n                    </block>\\n                </xml>\";\n      var finDom = Blockly.Xml.textToDom(order_xml);\n      var allBlocks = null;\n      var firstChild = null;\n      variablesList.map(function (variable, index) {\n        variable[\"blockType\"] = \"TargetVar\";\n        var text = \"\".concat(selectedDomain, \".\").concat(variable.TargetVariableName);\n        var blockxml = \"\";\n        if (index === 0) {\n          variable[\"blockType\"] = \"TargetVar\";\n          var _text = \"\".concat(selectedDomain, \".\").concat(variable.TargetVariableName);\n          var byvar_blk_xml = _this.form_by_var_block(variable);\n          var nextel = variablesList.length > 0 ? \"<next></next>\" : \"\";\n          blockxml = byvar_blk_xml ? \"<block editable=\\\"false\\\" id=\\\"\" + _text + \"\\\" type=\\\"variable_type_target_multi\\\" >\\n                                                    <field name = \\\"var_name\\\"><![CDATA[\" + _text + \"]]></field>\\n                                                    <data><![CDATA[\" + JSON.stringify(variable) + \"]]></data>\\n                                                    <value name=\\\"value_input\\\">\\n                                                    <block type=\\\"exec_by_variables\\\" id=\\\"exec_by_variables\" + _text + \"\\\" >\\n                                                        <field name=\\\"NAME\\\">By Variables</field>\\n                                                            <statement name=\\\"by_var_statement\\\">\\n                                                            \" + byvar_blk_xml + \"   \\n                                                            </statement>            \\n                                                    </block>\\n                                                    </value>\\n                                                    \" + nextel + \"\\n                                                 </block>\" : \"<block editable=\\\"false\\\" id=\\\"\" + _text + \"\\\" type=\\\"variable_type_target_multi\\\" >\\n                                                      <field name = \\\"var_name\\\"><![CDATA[\" + _text + \"]]></field>\\n                                                      <data><![CDATA[\" + JSON.stringify(variable) + \"]]></data>\\n                                                    <value name=\\\"value_input\\\">\\n                                                    <block type=\\\"exec_by_variables\\\" id=\\\"exec_by_variables\" + _text + \"\\\" >\\n                                                        <field name=\\\"NAME\\\">By Variables</field>\\n                                                            <statement name=\\\"by_var_statement\\\">\\n                                                            </statement>\\n                                                    </block>\\n                                                    </value>\\n                                                    \" + nextel + \"\\n                                                </block>\";\n          allBlocks = Blockly.Xml.textToDom(blockxml);\n        } else {\n          var _byvar_blk_xml = _this.form_by_var_block(variable);\n          var _nextel = index < variablesList.length - 1 ? \"<next></next>\" : \"\";\n          variable[\"blockType\"] = \"TargetVar\";\n          var _text2 = \"\".concat(selectedDomain, \".\").concat(variable.TargetVariableName);\n          var blockxmlin = _byvar_blk_xml ? \"\\n                                                    <block editable=\\\"false\\\" id=\\\"\" + _text2 + \"\\\" type=\\\"variable_type_target_multi\\\" >\\n                                                    <field name = \\\"var_name\\\"><![CDATA[\" + _text2 + \"]]></field>\\n                                                    <data><![CDATA[\" + JSON.stringify(variable) + \"]]></data>\\n                                                    <value name=\\\"value_input\\\">\\n                                                      <block type=\\\"exec_by_variables\\\" id=\\\"exec_by_variables\" + _text2 + \"\\\" >\\n                                                        <field name=\\\"NAME\\\">By Variables</field>\\n                                                            <statement name=\\\"by_var_statement\\\">\\n                                                            \" + _byvar_blk_xml + \"   \\n                                                            </statement>\\n                                                      </block>\\n                                                    </value>\\n                                                    \" + _nextel + \"\\n                                                    </block>\" : \"<block editable=\\\"false\\\" id=\\\"\" + _text2 + \"\\\" type=\\\"variable_type_target_multi\\\" >\\n                                                    <field name = \\\"var_name\\\"><![CDATA[\" + _text2 + \"]]></field>\\n                                                    <data><![CDATA[\" + JSON.stringify(variable) + \"]]></data>\\n                                                    <value name=\\\"value_input\\\">\\n                                                    <block type=\\\"exec_by_variables\\\" id=\\\"exec_by_variables\" + _text2 + \"\\\" >\\n                                                        <field name=\\\"NAME\\\">By Variables</field>\\n                                                            <statement name=\\\"by_var_statement\\\">\\n                                                            </statement>\\n                                                    </block>\\n                                                    </value>\\n                                                    \" + _nextel + \"\\n                                                </block>\";\n          var blockdomin = Blockly.Xml.textToDom(blockxmlin);\n          var nodes = allBlocks.querySelectorAll('next');\n          nodes[nodes.length - 1].appendChild(blockdomin);\n        }\n        finDom.querySelector(\"[name='order_of_execution_statement']\").appendChild(allBlocks);\n      });\n      return finDom;\n    };\n    _this.form_by_var_block = function (variable, selectedDomain) {\n      var Extra1 = variable.Extra1;\n      if (Extra1) {\n        var category_text = variable.TargetDataSet + \".\" + variable.TargetVariableName;\n        var blockObj = {};\n        blockObj[\"type\"] = category_text;\n        blockObj[\"colour\"] = 120;\n        blockObj[\"args0\"] = [{\n          \"type\": \"field_label_serializable\",\n          \"name\": \"var_name\"\n        }, {\n          \"type\": \"input_value\",\n          \"name\": \"value_input\"\n        }];\n        blockObj[\"message0\"] = \"%1 %2\";\n        blockObj[\"previousStatement\"] = [category_text];\n        blockObj[\"nextStatement\"] = [category_text];\n        blockObj[\"inputsInline\"] = false;\n        Blockly.Blocks[category_text] = {\n          init: function init() {\n            //for to enable if it is not used in workspace except step block\n            this.highPriority = \"\";\n            this.jsonInit(blockObj);\n          }\n        };\n        try {\n          //get the used block in by_variable block \n          var Used_Variables_In_ByVar = validJSON(Extra1);\n          var usedblk_in_byvar_xml = \"\";\n          if (Used_Variables_In_ByVar && Used_Variables_In_ByVar.length > 0) {\n            Used_Variables_In_ByVar.reverse().map(function (usedblk_in_byvar, index) {\n              if (index === 0) {\n                var text = usedblk_in_byvar.COLUMN_NAME;\n                usedblk_in_byvar_xml = \"<block editable=\\\"false\\\" id=\\\"\" + text + \"\\\" type=\\\"\" + category_text + \"\\\" >\\n                                          <field name = \\\"var_name\\\"><![CDATA[\" + text + \"]]></field>\\n                                          <data><![CDATA[\" + JSON.stringify(usedblk_in_byvar) + \"]]></data>\\n                                    </block>\";\n              } else {\n                var _text3 = usedblk_in_byvar.COLUMN_NAME;\n                usedblk_in_byvar_xml += \"<block editable=\\\"false\\\" id=\\\"\" + _text3 + \"\\\" type=\\\"\" + category_text + \"\\\"  >\\n                                                            <field name = \\\"var_name\\\"><![CDATA[\" + _text3 + \"]]></field>\\n                                                            <data><![CDATA[\" + JSON.stringify(usedblk_in_byvar) + \"]]></data>\\n                                                            <next>\\n                                                            \" + usedblk_in_byvar_xml + \"\\n                                                            </next>\\n                                                         </block>\";\n              }\n            });\n          }\n          return usedblk_in_byvar_xml;\n        } catch (e) {\n          //console.log(e);\n        }\n      }\n    };\n    _this.getAllTheUsedBlockFromMappingXML = function (block, data) {\n      var mapping_category = thisObj.state.mapping_category;\n      var category_text = block.getFieldValue(\"var_name\");\n      if (mapping_category && typeof mapping_category === \"object\" && Object.keys(mapping_category).findIndex(function (vari) {\n        return vari === category_text;\n      }) === -1) {\n        //Demo_update\n        //TransBot1.0.1\n        //    when we use var from category not working as expected\n\n        if (data.Extra2) {\n          var _category_text = block.getFieldValue(\"var_name\");\n          var blockObj = {};\n          blockObj[\"type\"] = _category_text;\n          blockObj[\"colour\"] = 120;\n          blockObj[\"args0\"] = [{\n            \"type\": \"field_label_serializable\",\n            \"name\": \"var_name\"\n          }, {\n            \"type\": \"input_value\",\n            \"name\": \"value_input\"\n          }];\n          blockObj[\"message0\"] = \"%1 %2\";\n          blockObj[\"previousStatement\"] = [_category_text];\n          blockObj[\"nextStatement\"] = [_category_text];\n          blockObj[\"inputsInline\"] = false;\n          Blockly.Blocks[_category_text] = {\n            init: function init() {\n              //for to enable if it is not used in workspace except step block\n              this.highPriority = \"\";\n              this.jsonInit(blockObj);\n            }\n          };\n          try {\n            var Used_Variables = validJSON(data.Extra2);\n            var htmlBlk = Used_Variables.map(function (va) {\n              return /*#__PURE__*/React.createElement(\"block\", {\n                type: _category_text,\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 32\n                }\n              }, /*#__PURE__*/React.createElement(\"field\", {\n                name: \"var_name\",\n                editable_: false,\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 29\n                }\n              }, va.variableName), /*#__PURE__*/React.createElement(\"data\", {\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 29\n                }\n              }, JSON.stringify(_objectSpread(_objectSpread({}, va), {}, {\n                COLUMN_NAME: va.variableName,\n                TABLE_NAME: va.dataset\n              }))));\n            });\n            if (htmlBlk.length > 0) {\n              var temp_mapping_category = mapping_category;\n              temp_mapping_category[_category_text] = htmlBlk;\n              _this.setState({\n                mapping_category: temp_mapping_category\n              });\n            }\n          } catch (e) {\n            //console.log(e);\n          }\n        }\n      } else {\n        var _temp_mapping_category = mapping_category;\n        delete _temp_mapping_category[category_text];\n        _this.setState({\n          mapping_category: _temp_mapping_category\n        });\n      }\n    };\n    _this.hideToolBox = function () {\n      var workspace = Blockly.getMainWorkspace();\n      // For now the trashcan flyout always autocloses because it overlays the\n      // trashcan UI (no trashcan to click to close it).\n\n      if (workspace.trashcan && workspace.trashcan.flyout) {\n        workspace.trashcan.flyout.hide();\n      }\n      var toolbox = workspace.getToolbox();\n      if (toolbox && toolbox.getFlyout() && toolbox.getFlyout().autoClose) {\n        toolbox.getFlyout().hide();\n        toolbox.clearSelection();\n      }\n    };\n    _this.FetchBlocks = function (mappingBlocks) {\n      var thisOb = _assertThisInitialized(_this);\n      mappingBlocks.map(function (mappingBlock, index) {\n        var validateJSON = function validateJSON(json) {\n          var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n          try {\n            return JSON.parse(json);\n          } catch (e) {\n            return v === 0 ? json : [];\n          }\n        };\n        var blockObj = {};\n        blockObj[\"type\"] = mappingBlock[\"type\"];\n        blockObj[\"colour\"] = mappingBlock[\"color\"];\n        blockObj[\"args0\"] = validateJSON(mappingBlock[\"args\"]);\n        blockObj[\"message0\"] = mappingBlock[\"message\"];\n        if (mappingBlock[\"previousStatement\"]) {\n          blockObj[\"previousStatement\"] = validateJSON(mappingBlock.previousStatement, 0);\n        }\n        if (mappingBlock[\"nextStatement\"]) {\n          blockObj[\"nextStatement\"] = validateJSON(mappingBlock.nextStatement, 0);\n        }\n        if (mappingBlock[\"output\"]) {\n          blockObj[\"output\"] = validateJSON(mappingBlock.output, 0);\n        }\n        if (mappingBlock[\"inputsInline\"]) {\n          blockObj[\"inputsInline\"] = true;\n        }\n        if (mappingBlock[\"type\"] !== \"step_type\" && mappingBlock[\"type\"] !== \"step_type_variable\") {\n          Blockly.Blocks[mappingBlock.type] = {\n            init: function init() {\n              //for to enable if it is not used in workspace except step block\n              this.highPriority = mappingBlock.category === \"step\";\n              this.jsonInit(blockObj);\n              var thisBlock = this;\n              if (mappingBlock.tooltip) {\n                this.setTooltip(function () {\n                  switch (thisBlock.type) {\n                    case \"constant_type_multi\":\n                      {\n                        var data = validJSON(thisBlock.data);\n                        if (data && data.cdiscDefinition && typeof data.cdiscDefinition === \"string\") {\n                          return data.cdiscDefinition;\n                        }\n                      }\n                      break;\n                    default:\n                      break;\n                  }\n                });\n              }\n            }\n          };\n        } else if (mappingBlock[\"type\"] === \"step_type\" || mappingBlock[\"type\"] === \"step_type_variable\") {\n          Blockly.Blocks[mappingBlock.type] = {\n            init: function init() {\n              //for to enable if it is not used in workspace except step block\n              this.highPriority = mappingBlock.category === \"step\";\n              this.jsonInit(blockObj);\n            },\n            customContextMenu: function customContextMenu(options) {\n              var option = {};\n              option.enabled = true;\n              option.text = 'Run Step';\n              option.callback = function (block_selected) {\n                thisOb.executeStep(block_selected);\n              };\n              options.unshift(option);\n              return options;\n            }\n          };\n        }\n      });\n    };\n    _this.targetDatasetBlocks = function (targetVar) {\n      //console.log(\"Target\");\n      //console.log(targetVar);\n      return targetVar.map(function (target, index) {\n        var dataTarget = _objectSpread(_objectSpread({}, target), {}, {\n          blockType: \"Target\"\n        });\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: target.Id + \"_key\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Block, {\n          editable: false,\n          type: \"dataset_type_multi_target\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"ds_name\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 21\n          }\n        }, target.Id), /*#__PURE__*/React.createElement(\"data\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 21\n          }\n        }, \" \", JSON.stringify(_objectSpread(_objectSpread({}, dataTarget), {}, {\n          category: \"dataset\"\n        })))));\n      });\n    };\n    _this.TargetVariableBlocks = function (obj) {\n      var TargetObj = thisObj.props.TargetObj;\n\n      //following line to open flyout while drag from flyout\n      SelectedCategory = {\n        Category: 1\n      };\n\n      //Filter the varible for selected block(Target)\n      var tarObj = TargetObj.find(function (x) {\n        return x.Id === obj.Id;\n      });\n      var variablesList = tarObj ? tarObj.Children : [];\n      thisObj.setState({\n        TARGETVARIABLE: _this.TargetVarBlockForSelectedTarget(variablesList, obj.Id),\n        selected_targetDS: obj.Id\n      });\n    };\n    _this.TargetVarBlockForSelectedTarget = function (variablesList, selectedDomain) {\n      var HTML = [];\n      //sort by order key\n      variablesList = variablesList.sort(function (v2, v1) {\n        return v2.Order < v1.Order ? -1 : v2.Order > v1.Order ? 1 : 0;\n      });\n      //Demo_update\n      //TransBot1.0.1\n      //when we use var from category not working as expected\n      variablesList.map(function (variable) {\n        variable[\"blockType\"] = \"TargetVar\";\n        var data = JSON.parse(variable.data);\n        var text = \"\".concat(selectedDomain, \".\").concat(variable.Key);\n        var blockText = \"<block editable=\\\"false\\\" type=\\\"variable_type_target_multi\\\" >\\n                                          <field name = \\\"var_name\\\"><![CDATA[\" + text + \"]]></field>\\n                                          <data><![CDATA[\" + JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n          blockType: \"TargetVar\"\n        })) + \"]]></data>\\n                                    </block>\";\n        var block = Blockly.Xml.textToDom(blockText);\n        HTML.push(block);\n      });\n      return HTML;\n    };\n    _this.fnTargetVariable = function () {\n      return thisObj.state.TARGETVARIABLE;\n    };\n    _this.RemoveVariables = function (obj) {\n      if (obj.blockType === \"Target\") {\n        thisObj.setState({\n          TARGETVARIABLE: []\n        });\n      }\n    };\n    _this.save = function () {\n      var thisObj = _assertThisInitialized(_this);\n      var xml = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\n      var StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\n      var domain = thisObj.props.domain;\n      var slectedTargetObj = thisObj.state.slectedTargetObj;\n      //Filter the varible for selected block(Target)\n      var targetvariable = slectedTargetObj && typeof slectedTargetObj === \"object\" ? slectedTargetObj.Children : [];\n      var domainID = targetvariable.length > 0 ? targetvariable[0].CDISCDataStdDomainMetadataID : 0;\n\n      //get ordered block\n      var result = _this.validation(\"Save\");\n      if (!result.error) {\n        //Get Sort Seq Block\n        var exec_xml = new XMLSerializer().serializeToString(xml);\n        var values = {\n          StudyID: StudyID,\n          domainName: domain,\n          domainID: domainID,\n          execution: result.out,\n          exec_xml: exec_xml\n        };\n        showProgress();\n        PostCallWithZone(\"MappingOperations/UpdateOrder\", values).then(function (response) {\n          //console.log(response);\n\n          if (response.status === 1) {\n            successModalCallback(\"Order updated successfully\", function () {\n              thisObj.refresh();\n            });\n          } else {\n            errorModal(response.message);\n          }\n          hideProgress();\n        });\n      } else {\n        errorModal(result.out);\n      }\n    };\n    _this.getOrderedBlocks = function () {\n      //get ordered block\n      var target_Variables = [];\n      var uniqueKey = [];\n      if (Blockly.getMainWorkspace() !== null) {\n        var order_of_execution_blk = Blockly.getMainWorkspace().getBlocksByType(\"exec_order_of_execution\");\n        if (order_of_execution_blk[0].type === \"exec_order_of_execution\") {\n          var tarVarLoop = function tarVarLoop(tar_Var_blk, index) {\n            if (tar_Var_blk && \"data\" in tar_Var_blk) {\n              var data = validJSON(tar_Var_blk.data);\n\n              //set order\n              data.Order = index;\n\n              //set byvariables to extra key\n              var getByVar_Blocks = _this.getByVariables(tar_Var_blk);\n              data.Extra1 = getByVar_Blocks ? JSON.stringify(getByVar_Blocks) : \"\";\n              target_Variables.push(data);\n\n              //Get Next Block\n              var nxtBlock = tar_Var_blk.getNextBlock();\n              return nxtBlock ? tarVarLoop(nxtBlock, index + 1) : false;\n            }\n          };\n\n          //get all the block from orderofexecution statement\n          var TargetVariables = order_of_execution_blk[0].getInputTargetBlock(\"order_of_execution_statement\");\n          tarVarLoop(TargetVariables, 1);\n          return target_Variables;\n        }\n        return target_Variables;\n      }\n      return target_Variables;\n    };\n    _this.getByVariables = function (target_blk) {\n      var getblock_val_connection = target_blk.getOnlyValueConnection_();\n      var by_variables = getblock_val_connection ? getblock_val_connection.targetBlock() : false;\n      if (by_variables && typeof by_variables === \"object\" && by_variables.type === \"exec_by_variables\") {\n        var used_var_in_xml = [];\n        var statement_blocks = by_variables.getInputTargetBlock(\"by_var_statement\");\n        var get_all_used_var = function get_all_used_var(statement_block) {\n          if (statement_block && \"data\" in statement_block) {\n            var stmt_data = validJSON(statement_block.data);\n            var nxt_blk = statement_block.getNextBlock();\n            used_var_in_xml.push({\n              \"COLUMN_NAME\": stmt_data.COLUMN_NAME,\n              \"TABLE_NAME\": stmt_data.TABLE_NAME\n            });\n            if (nxt_blk && typeof nxt_blk === \"object\") {\n              get_all_used_var(nxt_blk);\n            }\n            return;\n          }\n        };\n        get_all_used_var(statement_blocks);\n        return used_var_in_xml.length > 0 ? used_var_in_xml : \"\";\n      } else {\n        return false;\n      }\n    };\n    _this.refresh = function () {\n      return new Promise(function (resolve, reject) {\n        thisObj.props.refresh(resolve, reject);\n      }).then(function (result) {\n        var _this$props = _this.props,\n          TargetObj = _this$props.TargetObj,\n          domain = _this$props.domain;\n        var tarObj = TargetObj.find(function (x) {\n          return x.Id === domain;\n        });\n        var variable = tarObj ? tarObj.Children : [];\n        _this.setState({\n          TARGETVARIABLE: _this.TargetVarBlockForSelectedTarget(variable, domain)\n        }, hideProgress());\n      }).catch(function (e) {\n        //console.log(e);\n      });\n    };\n    _this.viewPythonTab = function () {\n      //validate by varibles should be present when generate\n\n      var usedByVar = Blockly.getMainWorkspace().getBlocksByType(\"exec_by_variables\");\n      var isvalid = _this.validation(\"Generate\");\n      if (!isvalid.error) {\n        thisObj.props.viewPythonTab(isvalid.out, thisObj.state.slectedTargetObj);\n      } else {\n        errorModal(isvalid.out);\n      }\n    };\n    _this.validation = function (action) {\n      var slectedTargetObj = _this.state.slectedTargetObj;\n      var variable_for_selected_domain = slectedTargetObj && typeof slectedTargetObj === \"object\" ? slectedTargetObj.Children : [];\n\n      // Get Order of execution block\n      var order_blk = Blockly.getMainWorkspace().getBlocksByType(\"exec_order_of_execution\");\n\n      // Get Used Variable From Order of execution block\n      var used_first_var_blk = order_blk[0].getInputTargetBlock(\"order_of_execution_statement\");\n      var index = 1;\n\n      //it will be false when if variable block have no byVar means\n      var allblk_hav_byvar = true;\n\n      //it will be false when ByVar block have no variable input\n      var byvarblk_hav_var = true;\n\n      //Unique Block Validation\n      var unique_vari_added = [];\n      var target_Variables = [];\n      var errmsg = [];\n      var loopAllUsedStmtBlk = function loopAllUsedStmtBlk(var_blk) {\n        unique_vari_added.push(var_blk.getFieldValue(\"var_name\"));\n\n        //Demo_update\n        //TransBot1.0.1\n        //Allow By Var first var\n        switch (action) {\n          case \"Generate\":\n            {\n              //get used by var\n              var val_ip = var_blk.getInput(\"value_input\");\n              var used_byvar = val_ip && val_ip.connection && val_ip.connection.targetBlock();\n              if (!var_blk.data.includes(\"custom_program_type\")) {\n                if (used_byvar) {\n                  if (!used_byvar.getInputTargetBlock(\"by_var_statement\") && byvarblk_hav_var) {\n                    byvarblk_hav_var = false;\n                    errmsg.push( /*#__PURE__*/React.createElement(\"div\", {\n                      key: errmsg.length + 1,\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 727,\n                        columnNumber: 41\n                      }\n                    }, errmsg.length + 1, \".By Variables should not be empty.\"));\n                  }\n                } else if (allblk_hav_byvar) {\n                  allblk_hav_byvar = false;\n                  errmsg.push( /*#__PURE__*/React.createElement(\"div\", {\n                    key: errmsg.length + 1,\n                    __self: _assertThisInitialized(_this),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 736,\n                      columnNumber: 37\n                    }\n                  }, errmsg.length + 1, \".By Variables should be present for all variables.\"));\n                }\n              }\n            }\n            break;\n          case \"Save\":\n            //No Validation\n            break;\n        }\n\n        //the following code to get data\n        if (\"data\" in var_blk) {\n          var data = validJSON(var_blk.data);\n\n          //set order\n          data.Order = index;\n          index++;\n\n          //set byvariables to extra key\n          var getByVar_Blocks = _this.getByVariables(var_blk);\n          data.Extra1 = getByVar_Blocks ? JSON.stringify(getByVar_Blocks) : \"\";\n          target_Variables.push(data);\n\n          //Get Next Block\n          var nxtblk = var_blk.getNextBlock();\n\n          //if any one of this following variable allblk_hav_byvar || byvarblk_hav_var  is false means no need to validate remaing blocks we can display the error message\n          if ((allblk_hav_byvar || byvarblk_hav_var) && nxtblk) {\n            return loopAllUsedStmtBlk(nxtblk);\n          } else {\n            var uniquevar_validation = _toConsumableArray(new Set(unique_vari_added));\n            if (uniquevar_validation.length !== unique_vari_added.length || action === \"Save\" && variable_for_selected_domain.length > uniquevar_validation.length) {\n              errmsg.push( /*#__PURE__*/React.createElement(\"div\", {\n                key: errmsg.length + 1,\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 29\n                }\n              }, errmsg.length + 1, \".Invalid Variables.\"));\n            }\n            return errmsg.length > 0 ? {\n              error: true,\n              out: errmsg\n            } : {\n              error: false,\n              out: target_Variables\n            };\n          }\n        }\n      };\n      return used_first_var_blk ? loopAllUsedStmtBlk(used_first_var_blk) : {\n        error: true,\n        out: \"Order of Execution should not be empty.\"\n      };\n    };\n    _this.FetchBlocks(props.mappingBlocks);\n    var _TargetObj = props.TargetObj,\n      _domain = props.domain;\n    var _tarObj = _TargetObj.find(function (x) {\n      return x.Id === _domain;\n    });\n    var _variable = _tarObj ? _tarObj.Children : [];\n    var sort_seq_var = props.AllTargetVariables && typeof props.AllTargetVariables === \"object\" ? props.AllTargetVariables.find(function (va) {\n      return va.VariableName === _domain + \"SEQ\";\n    }) : [];\n    _this.state = {\n      mapping_category: {},\n      //only for check if tree node is changed (for validation purpose in getDerivedStateFromProps)\n      selectedTarget: props.domain,\n      selected_targetDS: props.domain,\n      Sort_Seq_Variable: sort_seq_var,\n      xml: new XMLSerializer().serializeToString(_this.initialXml(props.AllTargetVariables, _domain)),\n      slectedTargetObj: props.TargetObj.find(function (x) {\n        return x.Id === props.domain;\n      }),\n      TARGETDATASET: _this.targetDatasetBlocks(props.TargetObj),\n      TARGETVARIABLE: _this.TargetVarBlockForSelectedTarget(_variable, _domain)\n    };\n    _this.simpleWorkspace = React.createRef();\n    thisObj = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  //when tree click manualy load the Target Variable Category\n  _createClass(ProgramWorkSpace, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //following function for open flyout while drag from flyout\n      var workspace = Blockly.getMainWorkspace();\n      if (workspace.toolbox_.flyout_.isVisible_) {\n        try {\n          var getCategory = workspace.getToolbox().getToolboxItems()[SelectedCategory.Category];\n          if (getCategory) {\n            getCategory.setSelected(true);\n          }\n        } catch (e) {\n          //console.log(e);\n        }\n      } else {\n        SelectedCategory = {\n          Category: -1\n        };\n      }\n    }\n\n    //InitialXMl\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state = this.state,\n        TARGETDATASET = _this$state.TARGETDATASET,\n        TARGETVARIABLE = _this$state.TARGETVARIABLE,\n        selected_targetDS = _this$state.selected_targetDS,\n        xml = _this$state.xml,\n        mapping_category = _this$state.mapping_category;\n      var _this$props2 = this.props,\n        mappingBlocks = _this$props2.mappingBlocks,\n        domain = _this$props2.domain,\n        selectedDomain = _this$props2.selectedDomain,\n        activityWrkflowStatus = _this$props2.activityWrkflowStatus;\n      var studyDetails = JSON.parse(sessionStorage.getItem(\"studyDetails\"));\n      var userDetails = JSON.parse(sessionStorage.getItem(\"userProfile\"));\n      var locked = JSON.parse(sessionStorage.projectStudyLockStatus);\n      //workflowActivityStatusID =3 means  Annotation Inprogress\n      //workflowActivityStatusID =4 means  Annotation Review\n      //adminType User admin\n      //ADMIN ,Mapping Inprogress ,Review ,Project and Study Manager only can annotate only we can annotate\n\n      var role = sessionStorage.getItem(\"role\");\n      var roleID = validJSON(role).RoleID;\n      //roleID 3 -> Project Manager\n      //roleID 4 -> Study Manager\n\n      return /*#__PURE__*/React.createElement(Row, {\n        style: {\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"100%\",\n          display: \"block\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(BlocklyComponent, {\n        style: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        fnTargetVariable: this.fnTargetVariable,\n        readOnly: false,\n        move: {\n          scrollbars: true,\n          drag: true,\n          wheel: true\n        },\n        targetVariableBlocks: this.TargetVariableBlocks,\n        RemoveVariables: this.RemoveVariables,\n        getAllTheUsedBlockFromMappingXML: this.getAllTheUsedBlockFromMappingXML,\n        initialXml: xml,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Category, {\n        name: \"DataTable Operations\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 21\n        }\n      }, mappingBlocks.filter(function (b) {\n        return b.view_category === \"datatable_ops\" && b.type.indexOf(\"exec_\") !== -1 && b.type !== \"exec_order_of_execution\";\n      }).map(function (block_loc) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block_loc.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 37\n          }\n        });\n      })), TARGETVARIABLE && /*#__PURE__*/React.createElement(Category, {\n        custom: \"fnTargetVariable\",\n        name: selected_targetDS,\n        colour: \"250\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 25\n        }\n      }), mapping_category && typeof mapping_category === \"object\" && Object.keys(mapping_category).map(function (cat) {\n        return /*#__PURE__*/React.createElement(Category, {\n          name: cat,\n          colour: \"250\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 36\n          }\n        }, mapping_category[cat]);\n      }))), /*#__PURE__*/React.createElement(Row, {\n        gutter: 2,\n        style: {\n          paddingRight: 2,\n          paddingTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          float: \"right\",\n          marginLeft: 5\n        },\n        className: \"saveBtn\",\n        disabled: !mappingPermission(activityWrkflowStatus),\n        onClick: function onClick() {\n          return _this2.save();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-save\",\n        style: {\n          paddingRight: 2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 21\n        }\n      }, \" Save \")), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          float: \"right\"\n        },\n        type: \"primary\",\n        disabled: !mappingPermission(activityWrkflowStatus),\n        onClick: function onClick() {\n          return _this2.viewPythonTab();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 17\n        }\n      }, \"Generate\")));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(currProps, oldState) {\n      if (currProps.domain && currProps.domain !== oldState.selectedTarget) {\n        //For update flyout (flyout remains open without highlighting)\n        thisObj.hideToolBox();\n        var TargetObj = currProps.TargetObj,\n          domain = currProps.domain;\n        var tarObj = TargetObj.find(function (x) {\n          return x.Id === domain;\n        });\n        var variableObj = tarObj ? tarObj.Children : [];\n        var formHTML = thisObj.TargetVarBlockForSelectedTarget(variableObj, domain);\n\n        //For Update xml when tree node onchange \n        Blockly.getMainWorkspace().clear();\n        var xml = thisObj.initialXml(currProps.AllTargetVariables, domain);\n        Blockly.Xml.domToWorkspace(xml, Blockly.getMainWorkspace());\n        //end\n        var sort_seq_var = currProps.AllTargetVariables && currProps.AllTargetVariables === \"object\" ? currProps.AllTargetVariables.find(function (va) {\n          return va.VariableName === domain.toUpperCase() + \"SEQ\";\n        }) : [];\n        thisObj.setState({\n          mapping_category: [],\n          selectedTarget: domain,\n          TARGETVARIABLE: formHTML,\n          selected_targetDS: domain,\n          Sort_Seq_Variable: sort_seq_var,\n          slectedTargetObj: TargetObj.find(function (x) {\n            return x.Id === domain;\n          })\n        });\n      }\n    }\n  }]);\n  return ProgramWorkSpace;\n}(Component);\nexport { ProgramWorkSpace as default };","map":{"version":3,"names":["React","Component","Blockly","hideProgress","showProgress","mappingPermission","CallServerPost","PostCallWithZone","validJSON","successModalCallback","errorModal","BlocklyComponent","Block","Field","Category","Row","Button","thisObj","SelectedCategory","ProgramWorkSpace","props","initialXml","targetVariables","selectedDomain","variableForSelDomain","filter","v","TargetDataSet","getInt","inval","parseInt","variablesList","sort","v2","v1","Order","order_xml","finDom","Xml","textToDom","allBlocks","firstChild","map","variable","index","text","TargetVariableName","blockxml","byvar_blk_xml","form_by_var_block","nextel","length","JSON","stringify","blockxmlin","blockdomin","nodes","querySelectorAll","appendChild","querySelector","Extra1","category_text","blockObj","Blocks","init","highPriority","jsonInit","Used_Variables_In_ByVar","usedblk_in_byvar_xml","reverse","usedblk_in_byvar","COLUMN_NAME","e","getAllTheUsedBlockFromMappingXML","block","data","mapping_category","state","getFieldValue","Object","keys","findIndex","vari","Extra2","Used_Variables","htmlBlk","va","variableName","TABLE_NAME","dataset","temp_mapping_category","setState","hideToolBox","workspace","getMainWorkspace","trashcan","flyout","hide","toolbox","getToolbox","getFlyout","autoClose","clearSelection","FetchBlocks","mappingBlocks","thisOb","mappingBlock","validateJSON","json","parse","previousStatement","nextStatement","output","type","category","thisBlock","tooltip","setTooltip","cdiscDefinition","customContextMenu","options","option","enabled","callback","block_selected","executeStep","unshift","targetDatasetBlocks","targetVar","target","dataTarget","blockType","Id","TargetVariableBlocks","obj","TargetObj","tarObj","find","x","Children","TARGETVARIABLE","TargetVarBlockForSelectedTarget","selected_targetDS","HTML","Key","blockText","push","fnTargetVariable","RemoveVariables","save","xml","workspaceToDom","StudyID","sessionStorage","getItem","studyID","domain","slectedTargetObj","targetvariable","domainID","CDISCDataStdDomainMetadataID","result","validation","error","exec_xml","XMLSerializer","serializeToString","values","domainName","execution","out","then","response","status","refresh","message","getOrderedBlocks","target_Variables","uniqueKey","order_of_execution_blk","getBlocksByType","tarVarLoop","tar_Var_blk","getByVar_Blocks","getByVariables","nxtBlock","getNextBlock","TargetVariables","getInputTargetBlock","target_blk","getblock_val_connection","getOnlyValueConnection_","by_variables","targetBlock","used_var_in_xml","statement_blocks","get_all_used_var","statement_block","stmt_data","nxt_blk","Promise","resolve","reject","catch","viewPythonTab","usedByVar","isvalid","action","variable_for_selected_domain","order_blk","used_first_var_blk","allblk_hav_byvar","byvarblk_hav_var","unique_vari_added","errmsg","loopAllUsedStmtBlk","var_blk","val_ip","getInput","used_byvar","connection","includes","nxtblk","uniquevar_validation","Set","sort_seq_var","AllTargetVariables","VariableName","selectedTarget","Sort_Seq_Variable","TARGETDATASET","simpleWorkspace","createRef","toolbox_","flyout_","isVisible_","getCategory","getToolboxItems","setSelected","activityWrkflowStatus","studyDetails","userDetails","locked","projectStudyLockStatus","role","roleID","RoleID","height","display","flexDirection","width","scrollbars","drag","wheel","b","view_category","indexOf","block_loc","cat","paddingRight","paddingTop","float","marginLeft","currProps","oldState","variableObj","formHTML","clear","domToWorkspace","toUpperCase"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/Program/Workspace.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Blockly from 'blockly/core';\r\nimport { hideProgress, showProgress, mappingPermission, CallServerPost, PostCallWithZone, validJSON, successModalCallback, errorModal } from \"../Utility/sharedUtility\";\r\nimport BlocklyComponent, { Block, Field, Category } from './Blockly';\r\nimport {\r\n    Row,\r\n    Button,\r\n} from \"antd\";\r\n\r\nlet thisObj = {};\r\n\r\n//following line for open flyout while drag from flyout\r\nlet SelectedCategory = {};\r\n\r\nexport default class ProgramWorkSpace extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.FetchBlocks(props.mappingBlocks);\r\n\r\n        let { TargetObj, domain } = props;\r\n        let tarObj = TargetObj.find(x => x.Id === domain);\r\n        let variable = tarObj ? tarObj.Children : [];\r\n\r\n        let sort_seq_var = (props.AllTargetVariables && typeof props.AllTargetVariables === \"object\") ?\r\n            props.AllTargetVariables.find(va => va.VariableName === domain + \"SEQ\")\r\n            : [];\r\n\r\n\r\n        this.state = {\r\n\r\n            mapping_category: {},\r\n            //only for check if tree node is changed (for validation purpose in getDerivedStateFromProps)\r\n            selectedTarget: props.domain,\r\n            selected_targetDS: props.domain,\r\n            Sort_Seq_Variable: sort_seq_var,\r\n            xml: new XMLSerializer().serializeToString(this.initialXml(props.AllTargetVariables, domain)),\r\n            slectedTargetObj: props.TargetObj.find(x => x.Id === props.domain),\r\n            TARGETDATASET: this.targetDatasetBlocks(props.TargetObj),\r\n            TARGETVARIABLE: this.TargetVarBlockForSelectedTarget(variable, domain),\r\n\r\n        };\r\n\r\n        this.simpleWorkspace = React.createRef();\r\n        thisObj = this;\r\n\r\n    }\r\n\r\n    //when tree click manualy load the Target Variable Category\r\n    static getDerivedStateFromProps(currProps, oldState) {\r\n\r\n        if (currProps.domain && currProps.domain !== oldState.selectedTarget) {\r\n\r\n            //For update flyout (flyout remains open without highlighting)\r\n            thisObj.hideToolBox();\r\n            let { TargetObj, domain } = currProps;\r\n            let tarObj = TargetObj.find(x => x.Id === domain);\r\n            let variableObj = tarObj ? tarObj.Children : [];\r\n            let formHTML = thisObj.TargetVarBlockForSelectedTarget(variableObj, domain);\r\n\r\n            //For Update xml when tree node onchange \r\n            Blockly.getMainWorkspace().clear();\r\n            let xml = thisObj.initialXml(currProps.AllTargetVariables, domain);\r\n            Blockly.Xml.domToWorkspace(xml, Blockly.getMainWorkspace());\r\n            //end\r\n            let sort_seq_var = (currProps.AllTargetVariables && currProps.AllTargetVariables === \"object\") ?\r\n                currProps.AllTargetVariables.find(va => va.VariableName === domain.toUpperCase() + \"SEQ\")\r\n                : [];\r\n\r\n            thisObj.setState({\r\n                mapping_category: [],\r\n                selectedTarget: domain,\r\n                TARGETVARIABLE: formHTML,\r\n                selected_targetDS: domain,\r\n                Sort_Seq_Variable: sort_seq_var,\r\n                slectedTargetObj: TargetObj.find(x => x.Id === domain)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //following function for open flyout while drag from flyout\r\n        let workspace = Blockly.getMainWorkspace();\r\n\r\n        if (workspace.toolbox_.flyout_.isVisible_) {\r\n            try {\r\n                let getCategory = workspace.getToolbox().getToolboxItems()[SelectedCategory.Category]\r\n                if (getCategory) {\r\n                    getCategory.setSelected(true);\r\n                }\r\n            } catch (e) {\r\n                //console.log(e);\r\n            }\r\n\r\n        } else {\r\n            SelectedCategory = { Category: -1 };\r\n\r\n        }\r\n    }\r\n    \r\n    //InitialXMl\r\n    initialXml = (targetVariables, selectedDomain) => {\r\n        \r\n        //sort by order key\r\n        let variableForSelDomain = targetVariables.filter(v => v.TargetDataSet === selectedDomain);\r\n        const getInt = (inval) => {\r\n            return inval && inval != \"\" ? parseInt(inval) : 0;\r\n        }\r\n        let variablesList = variableForSelDomain.sort((v2, v1) => getInt(v2.Order) < getInt(v1.Order) ? -1 : getInt(v2.Order) > getInt(v1.Order) ? 1 : 0)\r\n        //console.log(variablesList)\r\n        let order_xml = `<xml>\r\n                    <block deletable=\"false\" type=\"exec_order_of_execution\" id=\"order_of_execution\" x=\"287\" y=\"130\">\r\n                        <field name=\"Order_of_Execution_name\">Order of Execution</field>\r\n                        <statement name=\"order_of_execution_statement\">\r\n                        </statement>\r\n                    </block>\r\n                </xml>`;\r\n        let finDom = Blockly.Xml.textToDom(order_xml);\r\n        let allBlocks = null;\r\n        let firstChild = null;\r\n\r\n        variablesList.map((variable, index) => {\r\n\r\n            variable[\"blockType\"] = \"TargetVar\";\r\n\r\n            let text = `${selectedDomain}.${variable.TargetVariableName}`;\r\n            let blockxml = \"\";\r\n\r\n            if (index === 0) {\r\n                variable[\"blockType\"] = \"TargetVar\";\r\n\r\n                let text = `${selectedDomain}.${variable.TargetVariableName}`;\r\n                let byvar_blk_xml = this.form_by_var_block(variable);\r\n\r\n                const nextel = variablesList.length > 0 ? \"<next></next>\" : \"\";\r\n                blockxml = byvar_blk_xml ? `<block editable=\"false\" id=\"` + text + `\" type=\"variable_type_target_multi\" >\r\n                                                    <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                                    <data><![CDATA[`+ JSON.stringify(variable) + `]]></data>\r\n                                                    <value name=\"value_input\">\r\n                                                    <block type=\"exec_by_variables\" id=\"exec_by_variables`+ text + `\" >\r\n                                                        <field name=\"NAME\">By Variables</field>\r\n                                                            <statement name=\"by_var_statement\">\r\n                                                            `+ byvar_blk_xml + `   \r\n                                                            </statement>            \r\n                                                    </block>\r\n                                                    </value>\r\n                                                    `+ nextel + `\r\n                                                 </block>` :\r\n                    `<block editable=\"false\" id=\"` + text + `\" type=\"variable_type_target_multi\" >\r\n                                                      <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                                      <data><![CDATA[`+ JSON.stringify(variable) + `]]></data>\r\n                                                    <value name=\"value_input\">\r\n                                                    <block type=\"exec_by_variables\" id=\"exec_by_variables`+ text + `\" >\r\n                                                        <field name=\"NAME\">By Variables</field>\r\n                                                            <statement name=\"by_var_statement\">\r\n                                                            </statement>\r\n                                                    </block>\r\n                                                    </value>\r\n                                                    `+ nextel + `\r\n                                                </block>` ;\r\n                allBlocks = Blockly.Xml.textToDom(blockxml);\r\n            }\r\n            else {\r\n\r\n                let byvar_blk_xml = this.form_by_var_block(variable);\r\n                const nextel = index < variablesList.length - 1 ? \"<next></next>\" : \"\";\r\n                variable[\"blockType\"] = \"TargetVar\";\r\n                let text = `${selectedDomain}.${variable.TargetVariableName}`;\r\n                const blockxmlin = byvar_blk_xml ? `\r\n                                                    <block editable=\"false\" id=\"` + text + `\" type=\"variable_type_target_multi\" >\r\n                                                    <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                                    <data><![CDATA[`+ JSON.stringify(variable) + `]]></data>\r\n                                                    <value name=\"value_input\">\r\n                                                      <block type=\"exec_by_variables\" id=\"exec_by_variables`+ text + `\" >\r\n                                                        <field name=\"NAME\">By Variables</field>\r\n                                                            <statement name=\"by_var_statement\">\r\n                                                            `+ byvar_blk_xml + `   \r\n                                                            </statement>\r\n                                                      </block>\r\n                                                    </value>\r\n                                                    `+ nextel + `\r\n                                                    </block>` :\r\n                    `<block editable=\"false\" id=\"` + text + `\" type=\"variable_type_target_multi\" >\r\n                                                    <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                                    <data><![CDATA[`+ JSON.stringify(variable) + `]]></data>\r\n                                                    <value name=\"value_input\">\r\n                                                    <block type=\"exec_by_variables\" id=\"exec_by_variables`+ text + `\" >\r\n                                                        <field name=\"NAME\">By Variables</field>\r\n                                                            <statement name=\"by_var_statement\">\r\n                                                            </statement>\r\n                                                    </block>\r\n                                                    </value>\r\n                                                    `+ nextel + `\r\n                                                </block>`;\r\n                let blockdomin = Blockly.Xml.textToDom(blockxmlin);\r\n                var nodes = allBlocks.querySelectorAll('next');\r\n                nodes[nodes.length - 1].appendChild(blockdomin);\r\n\r\n            }\r\n\r\n\r\n            finDom.querySelector(\"[name='order_of_execution_statement']\").appendChild(allBlocks);\r\n        });\r\n\r\n\r\n        return finDom;\r\n    }\r\n\r\n    //form_by_var_block \r\n    form_by_var_block = (variable, selectedDomain) => {\r\n        var Extra1 = variable.Extra1;\r\n        if (Extra1) {\r\n\r\n            let category_text = variable.TargetDataSet + \".\" + variable.TargetVariableName;\r\n\r\n            var blockObj = {};\r\n            blockObj[\"type\"] = category_text;\r\n            blockObj[\"colour\"] = 120;\r\n            blockObj[\"args0\"] = [{ \"type\": \"field_label_serializable\", \"name\": \"var_name\" }, { \"type\": \"input_value\", \"name\": \"value_input\" }];\r\n            blockObj[\"message0\"] = \"%1 %2\";\r\n            blockObj[\"previousStatement\"] = [category_text];\r\n            blockObj[\"nextStatement\"] = [category_text];\r\n            blockObj[\"inputsInline\"] = false;\r\n\r\n\r\n            Blockly.Blocks[category_text] = {\r\n\r\n                init: function () {\r\n                    //for to enable if it is not used in workspace except step block\r\n                    this.highPriority = \"\";\r\n                    this.jsonInit(blockObj);\r\n                },\r\n            }\r\n\r\n            try {\r\n\r\n\r\n                //get the used block in by_variable block \r\n                let Used_Variables_In_ByVar = validJSON(Extra1);\r\n\r\n\r\n\r\n                let usedblk_in_byvar_xml = \"\";\r\n                if (Used_Variables_In_ByVar && Used_Variables_In_ByVar.length > 0) {\r\n                    Used_Variables_In_ByVar.reverse().map((usedblk_in_byvar, index) => {\r\n\r\n                        if (index === 0) {\r\n                            let text = usedblk_in_byvar.COLUMN_NAME;\r\n\r\n                            usedblk_in_byvar_xml = `<block editable=\"false\" id=\"` + text + `\" type=\"` + category_text + `\" >\r\n                                          <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                          <data><![CDATA[`+ JSON.stringify(usedblk_in_byvar) + `]]></data>\r\n                                    </block>`;\r\n                        }\r\n                        else {\r\n                            let text = usedblk_in_byvar.COLUMN_NAME;\r\n\r\n                            usedblk_in_byvar_xml += `<block editable=\"false\" id=\"` + text + `\" type=\"` + category_text + `\"  >\r\n                                                            <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                                            <data><![CDATA[`+ JSON.stringify(usedblk_in_byvar) + `]]></data>\r\n                                                            <next>\r\n                                                            `+ usedblk_in_byvar_xml + `\r\n                                                            </next>\r\n                                                         </block>`;\r\n                        }\r\n\r\n                    })\r\n                }\r\n                return usedblk_in_byvar_xml;\r\n            }\r\n            catch (e) {\r\n                //console.log(e);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //Get All TheUsed Block From MappingXML\r\n    getAllTheUsedBlockFromMappingXML = (block, data) => {\r\n\r\n        let { mapping_category } = thisObj.state;\r\n        let category_text = block.getFieldValue(\"var_name\");\r\n        if (mapping_category && typeof mapping_category === \"object\" && Object.keys(mapping_category).findIndex(vari => vari === category_text) === -1) {\r\n            //Demo_update\r\n            //TransBot1.0.1\r\n            //    when we use var from category not working as expected\r\n\r\n            if (data.Extra2) {\r\n                let category_text = block.getFieldValue(\"var_name\");\r\n\r\n                var blockObj = {};\r\n                blockObj[\"type\"] = category_text;\r\n                blockObj[\"colour\"] = 120;\r\n                blockObj[\"args0\"] = [{ \"type\": \"field_label_serializable\", \"name\": \"var_name\" }, { \"type\": \"input_value\", \"name\": \"value_input\" }];\r\n                blockObj[\"message0\"] = \"%1 %2\";\r\n                blockObj[\"previousStatement\"] = [category_text];\r\n                blockObj[\"nextStatement\"] = [category_text];\r\n                blockObj[\"inputsInline\"] = false;\r\n\r\n\r\n                Blockly.Blocks[category_text] = {\r\n\r\n                    init: function () {\r\n                        //for to enable if it is not used in workspace except step block\r\n                        this.highPriority = \"\";\r\n                        this.jsonInit(blockObj);\r\n                    },\r\n\r\n                }\r\n                try {\r\n\r\n                    let Used_Variables = validJSON(data.Extra2);\r\n                    let htmlBlk = Used_Variables.map(va => {\r\n                        return <block type={category_text} >\r\n                            <field name={\"var_name\"} editable_={false}>{va.variableName}</field>\r\n                            <data>{JSON.stringify({ ...va, COLUMN_NAME: va.variableName, TABLE_NAME: va.dataset })}</data>\r\n                        </block>\r\n                    });\r\n\r\n\r\n                    if (htmlBlk.length > 0) {\r\n                        let temp_mapping_category = mapping_category;\r\n\r\n                        temp_mapping_category[category_text] = htmlBlk;\r\n\r\n                        this.setState({ mapping_category: temp_mapping_category });\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    //console.log(e);\r\n                }\r\n            }\r\n        } else {\r\n            let temp_mapping_category = mapping_category;\r\n\r\n            delete temp_mapping_category[category_text];\r\n\r\n            this.setState({ mapping_category: temp_mapping_category });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Hide Toolbox(Flyout) manualy \r\n    hideToolBox = () => {\r\n        var workspace = Blockly.getMainWorkspace();\r\n        // For now the trashcan flyout always autocloses because it overlays the\r\n        // trashcan UI (no trashcan to click to close it).\r\n\r\n        if (workspace.trashcan &&\r\n            workspace.trashcan.flyout) {\r\n            workspace.trashcan.flyout.hide();\r\n        }\r\n        var toolbox = workspace.getToolbox();\r\n        if (toolbox &&\r\n            toolbox.getFlyout() &&\r\n            toolbox.getFlyout().autoClose) {\r\n            toolbox.getFlyout().hide();\r\n            toolbox.clearSelection();\r\n        }\r\n    }\r\n\r\n    //Blocks Initialization\r\n    FetchBlocks = (mappingBlocks) => {\r\n        const thisOb = this;\r\n        mappingBlocks.map((mappingBlock, index) => {\r\n\r\n            let validateJSON = (json, v = 1) => {\r\n                try {\r\n                    return JSON.parse(json)\r\n                } catch (e) {\r\n                    return v === 0 ? json : [];\r\n                }\r\n\r\n            }\r\n\r\n            var blockObj = {};\r\n            blockObj[\"type\"] = mappingBlock[\"type\"];\r\n            blockObj[\"colour\"] = mappingBlock[\"color\"];\r\n            blockObj[\"args0\"] = validateJSON(mappingBlock[\"args\"]);\r\n            blockObj[\"message0\"] = mappingBlock[\"message\"];\r\n\r\n            if (mappingBlock[\"previousStatement\"]) {\r\n                blockObj[\"previousStatement\"] = validateJSON(mappingBlock.previousStatement, 0);\r\n            }\r\n            if (mappingBlock[\"nextStatement\"]) {\r\n                blockObj[\"nextStatement\"] = validateJSON(mappingBlock.nextStatement, 0);\r\n            }\r\n            if (mappingBlock[\"output\"]) {\r\n                blockObj[\"output\"] = validateJSON(mappingBlock.output, 0);\r\n            }\r\n\r\n            if (mappingBlock[\"inputsInline\"]) {\r\n                blockObj[\"inputsInline\"] = true;\r\n            }\r\n\r\n            if (mappingBlock[\"type\"] !== \"step_type\" && mappingBlock[\"type\"] !== \"step_type_variable\") {\r\n\r\n                Blockly.Blocks[mappingBlock.type] = {\r\n\r\n                    init: function () {\r\n                        //for to enable if it is not used in workspace except step block\r\n                        this.highPriority = mappingBlock.category === \"step\";\r\n                        this.jsonInit(blockObj);\r\n\r\n                        var thisBlock = this;\r\n\r\n                        if (mappingBlock.tooltip) {\r\n                            this.setTooltip(function () {\r\n                                switch (thisBlock.type) {\r\n                                    case \"constant_type_multi\":\r\n                                        {\r\n                                            let data = validJSON(thisBlock.data);\r\n                                            if (data && data.cdiscDefinition && typeof data.cdiscDefinition === \"string\") {\r\n                                                return data.cdiscDefinition;\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        break;\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n\r\n                }\r\n            } else if (mappingBlock[\"type\"] === \"step_type\" || mappingBlock[\"type\"] === \"step_type_variable\") {\r\n                Blockly.Blocks[mappingBlock.type] = {\r\n                    init: function () {\r\n                        //for to enable if it is not used in workspace except step block\r\n                        this.highPriority = mappingBlock.category === \"step\";\r\n                        this.jsonInit(blockObj);\r\n                    },\r\n                    customContextMenu: (options) => {\r\n                        var option = {};\r\n                        option.enabled = true;\r\n                        option.text = 'Run Step';\r\n                        option.callback = (block_selected) => {\r\n                            thisOb.executeStep(block_selected);\r\n                        };\r\n                        options.unshift(option);\r\n                        return options;\r\n                    },\r\n                };\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    //Target Block\r\n    targetDatasetBlocks = targetVar => {\r\n        //console.log(\"Target\");\r\n        //console.log(targetVar);\r\n        return targetVar.map((target, index) => {\r\n            let dataTarget = { ...target, blockType: \"Target\" };\r\n            return (<React.Fragment key={target.Id + \"_key\"}>\r\n                <Block editable={false} type=\"dataset_type_multi_target\" >\r\n                    <Field name=\"ds_name\">\r\n                        {target.Id}\r\n                    </Field>\r\n                    <data> {JSON.stringify({ ...dataTarget, category: \"dataset\" })}</data>\r\n                </Block>\r\n            </React.Fragment>);\r\n        })\r\n    };\r\n\r\n    //Load Target Variable based on selected Target Block\r\n    TargetVariableBlocks = (obj) => {\r\n\r\n        let { TargetObj } = thisObj.props;\r\n\r\n        //following line to open flyout while drag from flyout\r\n        SelectedCategory = { Category: 1 }\r\n\r\n        //Filter the varible for selected block(Target)\r\n        let tarObj = TargetObj.find(x => x.Id === obj.Id);\r\n\r\n        let variablesList = tarObj ? tarObj.Children : [];\r\n\r\n        thisObj.setState({ TARGETVARIABLE: this.TargetVarBlockForSelectedTarget(variablesList, obj.Id), selected_targetDS: obj.Id });\r\n    }\r\n\r\n    TargetVarBlockForSelectedTarget = (variablesList, selectedDomain) => {\r\n\r\n        let HTML = [];\r\n        //sort by order key\r\n        variablesList = variablesList.sort((v2, v1) => v2.Order < v1.Order ? -1 : v2.Order > v1.Order ? 1 : 0)\r\n        //Demo_update\r\n        //TransBot1.0.1\r\n        //when we use var from category not working as expected\r\n        variablesList.map((variable) => {\r\n\r\n            variable[\"blockType\"] = \"TargetVar\";\r\n            let data = JSON.parse(variable.data);\r\n\r\n            let text = `${selectedDomain}.${variable.Key}`;\r\n\r\n            let blockText = `<block editable=\"false\" type=\"variable_type_target_multi\" >\r\n                                          <field name = \"var_name\"><![CDATA[`+ text + `]]></field>\r\n                                          <data><![CDATA[`+ JSON.stringify({ ...data, blockType: \"TargetVar\" }) + `]]></data>\r\n                                    </block>`\r\n            var block = Blockly.Xml.textToDom(blockText);\r\n            HTML.push(block);\r\n\r\n        });\r\n\r\n        return HTML;\r\n    }\r\n    fnTargetVariable = () => {\r\n        return thisObj.state.TARGETVARIABLE;\r\n    }\r\n    //End\r\n\r\n    //when delete block followinf function will hit\r\n    RemoveVariables = (obj) => {\r\n        if (obj.blockType === \"Target\") {\r\n            thisObj.setState({ TARGETVARIABLE: [] });\r\n        }\r\n    }\r\n    //Save \r\n    save = () => {\r\n        const thisObj = this;\r\n\r\n        let xml = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\r\n\r\n        var StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\r\n\r\n        let { domain } = thisObj.props;\r\n        let { slectedTargetObj } = thisObj.state;\r\n        //Filter the varible for selected block(Target)\r\n        let targetvariable = (slectedTargetObj && typeof slectedTargetObj === \"object\") ?\r\n            slectedTargetObj.Children : [];\r\n\r\n        let domainID = targetvariable.length > 0 ? targetvariable[0].CDISCDataStdDomainMetadataID : 0;\r\n\r\n\r\n        //get ordered block\r\n        var result = this.validation(\"Save\");\r\n        if (!result.error) {\r\n            //Get Sort Seq Block\r\n            let exec_xml = new XMLSerializer().serializeToString(xml);\r\n            var values =\r\n            {\r\n                StudyID: StudyID,\r\n                domainName: domain,\r\n                domainID: domainID,\r\n                execution: result.out,\r\n                exec_xml: exec_xml,\r\n\r\n            };\r\n\r\n            showProgress();\r\n\r\n            PostCallWithZone(\"MappingOperations/UpdateOrder\", values).then((response) => {\r\n                //console.log(response);\r\n\r\n                if (response.status === 1) {\r\n                    successModalCallback(\"Order updated successfully\", () => { thisObj.refresh() });\r\n                } else {\r\n                    errorModal(response.message);\r\n\r\n                }\r\n                hideProgress();\r\n            });\r\n        }\r\n        else {\r\n            errorModal(result.out);\r\n        }\r\n    }\r\n\r\n\r\n    getOrderedBlocks = () => {\r\n        //get ordered block\r\n        let target_Variables = [];\r\n        let uniqueKey = [];\r\n\r\n        if (Blockly.getMainWorkspace() !== null) {\r\n            let order_of_execution_blk = Blockly.getMainWorkspace().getBlocksByType(\"exec_order_of_execution\");\r\n            if (order_of_execution_blk[0].type === \"exec_order_of_execution\") {\r\n                let tarVarLoop = (tar_Var_blk, index) => {\r\n\r\n                    if (tar_Var_blk && \"data\" in tar_Var_blk) {\r\n                        let data = validJSON(tar_Var_blk.data);\r\n\r\n                        //set order\r\n                        data.Order = index;\r\n\r\n                        //set byvariables to extra key\r\n                        let getByVar_Blocks = this.getByVariables(tar_Var_blk);\r\n                        data.Extra1 = getByVar_Blocks ? JSON.stringify(getByVar_Blocks) : \"\";\r\n\r\n                        target_Variables.push(data);\r\n\r\n                        //Get Next Block\r\n                        let nxtBlock = tar_Var_blk.getNextBlock();\r\n\r\n                        return nxtBlock ? tarVarLoop(nxtBlock, (index + 1)) : false;\r\n                    }\r\n                }\r\n\r\n                //get all the block from orderofexecution statement\r\n                let TargetVariables = order_of_execution_blk[0].getInputTargetBlock(\"order_of_execution_statement\");\r\n\r\n\r\n                tarVarLoop(TargetVariables, 1);\r\n\r\n                return target_Variables;\r\n            }\r\n            return target_Variables;\r\n        }\r\n        return target_Variables;\r\n    }\r\n\r\n    //when Save or Generate \r\n    getByVariables = (target_blk) => {\r\n\r\n        let getblock_val_connection = target_blk.getOnlyValueConnection_();\r\n        let by_variables = getblock_val_connection ? getblock_val_connection.targetBlock() : false;\r\n        if (by_variables && typeof by_variables === \"object\" && by_variables.type === \"exec_by_variables\") {\r\n            let used_var_in_xml = [];\r\n            let statement_blocks = by_variables.getInputTargetBlock(\"by_var_statement\");\r\n\r\n            var get_all_used_var = (statement_block) => {\r\n                if (statement_block && \"data\" in statement_block) {\r\n                    let stmt_data = validJSON(statement_block.data);\r\n                    let nxt_blk = statement_block.getNextBlock();\r\n\r\n                    used_var_in_xml.push({ \"COLUMN_NAME\": stmt_data.COLUMN_NAME, \"TABLE_NAME\": stmt_data.TABLE_NAME })\r\n\r\n                    if (nxt_blk && typeof nxt_blk === \"object\") {\r\n                        get_all_used_var(nxt_blk);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            get_all_used_var(statement_blocks)\r\n\r\n            return used_var_in_xml.length > 0 ? used_var_in_xml : \"\";\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    //Refresh \r\n    refresh = () => {\r\n        return new Promise((resolve, reject) => {\r\n            thisObj.props.refresh(resolve, reject);\r\n        }).then((result) => {\r\n            let { TargetObj, domain } = this.props;\r\n            let tarObj = TargetObj.find(x => x.Id === domain);\r\n            let variable = tarObj ? tarObj.Children : [];\r\n\r\n            this.setState({\r\n                TARGETVARIABLE: this.TargetVarBlockForSelectedTarget(variable, domain)\r\n            }, hideProgress());\r\n\r\n        }).catch(e => {\r\n            //console.log(e);\r\n        });\r\n    }\r\n\r\n    viewPythonTab = () => {\r\n        //validate by varibles should be present when generate\r\n\r\n        let usedByVar = Blockly.getMainWorkspace().getBlocksByType(\"exec_by_variables\");\r\n\r\n        let isvalid = this.validation(\"Generate\");\r\n        if (!isvalid.error) {\r\n            thisObj.props.viewPythonTab(isvalid.out, thisObj.state.slectedTargetObj);\r\n        }\r\n        else {\r\n            errorModal(isvalid.out);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //following function do following validation.\r\n    //By Variables should not be empty\r\n    //By Variables should be present except for first variable\r\n\r\n    validation = (action) => {\r\n        let { slectedTargetObj } = this.state;\r\n        let variable_for_selected_domain = slectedTargetObj && typeof slectedTargetObj === \"object\" ? slectedTargetObj.Children : [];\r\n\r\n\r\n        // Get Order of execution block\r\n        let order_blk = Blockly.getMainWorkspace().getBlocksByType(\"exec_order_of_execution\");\r\n\r\n        // Get Used Variable From Order of execution block\r\n        let used_first_var_blk = order_blk[0].getInputTargetBlock(\"order_of_execution_statement\");\r\n        let index = 1;\r\n\r\n        //it will be false when if variable block have no byVar means\r\n        let allblk_hav_byvar = true;\r\n\r\n        //it will be false when ByVar block have no variable input\r\n        let byvarblk_hav_var = true;\r\n\r\n        //Unique Block Validation\r\n        let unique_vari_added = [];\r\n\r\n        let target_Variables = [];\r\n        let errmsg = [];\r\n\r\n        let loopAllUsedStmtBlk = (var_blk) => {\r\n\r\n            unique_vari_added.push(var_blk.getFieldValue(\"var_name\"));\r\n\r\n            //Demo_update\r\n            //TransBot1.0.1\r\n            //Allow By Var first var\r\n            switch (action) {\r\n                case \"Generate\":\r\n                    {\r\n                        //get used by var\r\n                        let val_ip = var_blk.getInput(\"value_input\");\r\n                        let used_byvar = val_ip && val_ip.connection && val_ip.connection.targetBlock();\r\n                        if (!var_blk.data.includes(\"custom_program_type\")) {\r\n                            if (used_byvar) {\r\n                                if (!used_byvar.getInputTargetBlock(\"by_var_statement\") &&\r\n                                    byvarblk_hav_var) {\r\n                                    byvarblk_hav_var = false;\r\n                                    errmsg.push(\r\n                                        <div key={errmsg.length + 1}>\r\n                                            {errmsg.length + 1}.By Variables should not be empty.\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                            }\r\n                            else if (allblk_hav_byvar) {\r\n                                allblk_hav_byvar = false;\r\n                                errmsg.push(\r\n                                    <div key={errmsg.length + 1}>\r\n                                        {errmsg.length + 1}.By Variables should be present for all variables.\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case \"Save\":\r\n                    //No Validation\r\n                    break;\r\n            }\r\n\r\n\r\n            //the following code to get data\r\n            if (\"data\" in var_blk) {\r\n                let data = validJSON(var_blk.data);\r\n\r\n                //set order\r\n                data.Order = index;\r\n                index++;\r\n\r\n                //set byvariables to extra key\r\n                let getByVar_Blocks = this.getByVariables(var_blk);\r\n                data.Extra1 = getByVar_Blocks ? JSON.stringify(getByVar_Blocks) : \"\";\r\n\r\n                target_Variables.push(data);\r\n\r\n                //Get Next Block\r\n                let nxtblk = var_blk.getNextBlock();\r\n\r\n                //if any one of this following variable allblk_hav_byvar || byvarblk_hav_var  is false means no need to validate remaing blocks we can display the error message\r\n                if ((allblk_hav_byvar || byvarblk_hav_var) && nxtblk) {\r\n                    return loopAllUsedStmtBlk(nxtblk)\r\n                }\r\n                else {\r\n                    let uniquevar_validation = [...new Set(unique_vari_added)];\r\n                    if (uniquevar_validation.length !== unique_vari_added.length ||\r\n                        (action === \"Save\" && variable_for_selected_domain.length > uniquevar_validation.length)) {\r\n                        errmsg.push(\r\n                            <div key={errmsg.length + 1}>\r\n                                {errmsg.length + 1}.Invalid Variables.\r\n                            </div>);\r\n\r\n                    }\r\n\r\n\r\n                    return errmsg.length > 0 ? { error: true, out: errmsg } :\r\n                        { error: false, out: target_Variables }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return used_first_var_blk ? loopAllUsedStmtBlk(used_first_var_blk) :\r\n            { error: true, out: \"Order of Execution should not be empty.\" };\r\n    }\r\n\r\n    render() {\r\n        let { TARGETDATASET, TARGETVARIABLE, selected_targetDS, xml, mapping_category } = this.state;\r\n        let { mappingBlocks, domain, selectedDomain, activityWrkflowStatus } = this.props;\r\n        let studyDetails = JSON.parse(sessionStorage.getItem(\"studyDetails\"));\r\n        let userDetails = JSON.parse(sessionStorage.getItem(\"userProfile\"));\r\n        let locked = JSON.parse(sessionStorage.projectStudyLockStatus);\r\n        //workflowActivityStatusID =3 means  Annotation Inprogress\r\n        //workflowActivityStatusID =4 means  Annotation Review\r\n        //adminType User admin\r\n        //ADMIN ,Mapping Inprogress ,Review ,Project and Study Manager only can annotate only we can annotate\r\n\r\n\r\n        let role = sessionStorage.getItem(\"role\");\r\n        let roleID = validJSON(role).RoleID;\r\n        //roleID 3 -> Project Manager\r\n        //roleID 4 -> Study Manager\r\n\r\n        return <Row style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <div style={{ height: \"100%\", display: \"block\", flexDirection: \"column\" }}>\r\n                <BlocklyComponent\r\n                    style={{ height: \"100%\", width: \"100%\" }}\r\n                    fnTargetVariable={this.fnTargetVariable}\r\n                    readOnly={false}\r\n                    move={{\r\n                        scrollbars: true,\r\n                        drag: true,\r\n                        wheel: true\r\n                    }}\r\n                    targetVariableBlocks={this.TargetVariableBlocks}\r\n                    RemoveVariables={this.RemoveVariables}\r\n                    getAllTheUsedBlockFromMappingXML={this.getAllTheUsedBlockFromMappingXML}\r\n                    initialXml={xml}\r\n                >\r\n                    <Category name=\"DataTable Operations\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                        {\r\n                            mappingBlocks.filter(b => b.view_category === \"datatable_ops\" && b.type.indexOf(\"exec_\") !== -1 && b.type !== \"exec_order_of_execution\").map((block_loc) => {\r\n                                return (\r\n                                    <Block type={block_loc.type} />\r\n                                );\r\n\r\n                            })\r\n                        }\r\n                    </Category>\r\n\r\n                    {/*<Category name=\"Target DataTable\" colour=\"250\">*/}\r\n                    {/*    {TARGETDATASET}*/}\r\n                    {/*</Category>*/}\r\n\r\n                    {TARGETVARIABLE &&\r\n                        <Category custom=\"fnTargetVariable\" name={selected_targetDS} colour=\"250\" >\r\n                        </Category>\r\n                    }\r\n\r\n                    {mapping_category && typeof mapping_category === \"object\" &&\r\n                        Object.keys(mapping_category).map(cat => {\r\n                            return <Category name={cat} colour=\"250\" >\r\n                                {mapping_category[cat]}\r\n                            </Category>\r\n                        })\r\n                    }\r\n\r\n                </BlocklyComponent>\r\n            </div>\r\n            <Row gutter={2} style={{ paddingRight: 2, paddingTop: 10 }}>\r\n                <Button style={{ float: \"right\", marginLeft: 5 }}\r\n                    className=\"saveBtn\"\r\n                    disabled={!mappingPermission(activityWrkflowStatus)}\r\n                    onClick={() => this.save()}>\r\n                    <i className=\"fas fa-save\" style={{ paddingRight: 2 }}> Save </i>\r\n                </Button>\r\n                {/*Mapping Programmer roleid 7 */}\r\n                {/*If Underreview means not allow Mapping Programmer to Genereate*/}\r\n                <Button\r\n                    style={{ float: \"right\" }}\r\n                    type=\"primary\"\r\n                    disabled={!mappingPermission(activityWrkflowStatus)}\r\n                    onClick={() => this.viewPythonTab()}\r\n                >\r\n                    Generate\r\n                </Button>\r\n\r\n            </Row>\r\n        </Row>\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}