{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.fs',\n  keywords: ['abstract', 'and', 'atomic', 'as', 'assert', 'asr', 'base', 'begin', 'break', 'checked', 'component', 'const', 'constraint', 'constructor', 'continue', 'class', 'default', 'delegate', 'do', 'done', 'downcast', 'downto', 'elif', 'else', 'end', 'exception', 'eager', 'event', 'external', 'extern', 'false', 'finally', 'for', 'fun', 'function', 'fixed', 'functor', 'global', 'if', 'in', 'include', 'inherit', 'inline', 'interface', 'internal', 'land', 'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let', 'match', 'member', 'mod', 'module', 'mutable', 'namespace', 'method', 'mixin', 'new', 'not', 'null', 'of', 'open', 'or', 'object', 'override', 'private', 'parallel', 'process', 'protected', 'pure', 'public', 'rec', 'return', 'static', 'sealed', 'struct', 'sig', 'then', 'to', 'true', 'tailcall', 'trait', 'try', 'type', 'upcast', 'use', 'val', 'void', 'virtual', 'volatile', 'when', 'while', 'with', 'yield'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  integersuffix: /[uU]?[yslnLI]?/,\n  floatsuffix: /[fFmM]?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // [< attributes >].\n    [/\\[<.*>\\]/, 'annotation'],\n    // Preprocessor directive\n    [/^#(if|else|endif)/, 'keyword'],\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, 'delimiter'],\n    // numbers\n    [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'], [/0x[0-9a-fA-F]+LF/, 'number.float'], [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'], [/0b[0-1]+(@integersuffix)/, 'number.bin'], [/\\d+(@integersuffix)/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"\"\"/, 'string', '@string.\"\"\"'], [/\"/, 'string', '@string.\"'],\n    // literal string\n    [/\\@\"/, {\n      token: 'string.quote',\n      next: '@litstring'\n    }],\n    // characters\n    [/'[^\\\\']'B?/, 'string'], [/(')(@escapes)(')/, ['string', 'string.escape', 'string']], [/'/, 'string.invalid']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\(\\*(?!\\))/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^*(]+/, 'comment'], [/\\*\\)/, 'comment', '@pop'], [/\\*/, 'comment'], [/\\(\\*\\)/, 'comment'], [/\\(/, 'comment']],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/(\"\"\"|\"B?)/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': 'string'\n      }\n    }]],\n    litstring: [[/[^\"]+/, 'string'], [/\"\"/, 'string.escape'], [/\"/, {\n      token: 'string.quote',\n      next: '@pop'\n    }]]\n  }\n};","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.fs',\r\n    keywords: [\r\n        'abstract', 'and', 'atomic', 'as',\r\n        'assert', 'asr', 'base', 'begin',\r\n        'break', 'checked', 'component',\r\n        'const', 'constraint', 'constructor',\r\n        'continue', 'class', 'default',\r\n        'delegate', 'do', 'done', 'downcast',\r\n        'downto', 'elif', 'else', 'end',\r\n        'exception', 'eager', 'event', 'external',\r\n        'extern', 'false', 'finally', 'for',\r\n        'fun', 'function', 'fixed', 'functor',\r\n        'global', 'if', 'in', 'include', 'inherit',\r\n        'inline', 'interface', 'internal', 'land',\r\n        'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let',\r\n        'match', 'member', 'mod', 'module', 'mutable',\r\n        'namespace', 'method', 'mixin', 'new', 'not',\r\n        'null', 'of', 'open', 'or', 'object',\r\n        'override', 'private', 'parallel', 'process',\r\n        'protected', 'pure', 'public', 'rec', 'return',\r\n        'static', 'sealed', 'struct', 'sig', 'then',\r\n        'to', 'true', 'tailcall', 'trait',\r\n        'try', 'type', 'upcast', 'use',\r\n        'val', 'void', 'virtual', 'volatile',\r\n        'when', 'while', 'with', 'yield'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    integersuffix: /[uU]?[yslnLI]?/,\r\n    floatsuffix: /[fFmM]?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // [< attributes >].\r\n            [/\\[<.*>\\]/, 'annotation'],\r\n            // Preprocessor directive\r\n            [/^#(if|else|endif)/, 'keyword'],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+LF/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\r\n            [/0b[0-1]+(@integersuffix)/, 'number.bin'],\r\n            [/\\d+(@integersuffix)/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"\"\"/, 'string', '@string.\"\"\"'],\r\n            [/\"/, 'string', '@string.\"'],\r\n            // literal string\r\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\r\n            // characters\r\n            [/'[^\\\\']'B?/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\(\\*(?!\\))/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^*(]+/, 'comment'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment'],\r\n            [/\\(\\*\\)/, 'comment'],\r\n            [/\\(/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/(\"\"\"|\"B?)/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        litstring: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\"\"/, 'string.escape'],\r\n            [/\"/, { token: 'string.quote', next: '@pop' }]\r\n        ],\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}