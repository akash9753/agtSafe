{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\nvar DeleteOperations = /** @class */function () {\n  function DeleteOperations() {}\n  DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\n    var commands = [];\n    var shouldPushStackElementBefore = prevEditOperationType !== 3 /* DeletingRight */;\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var deleteSelection = selection;\n      if (deleteSelection.isEmpty()) {\n        var position = selection.getPosition();\n        var rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\n        deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n      }\n      if (deleteSelection.isEmpty()) {\n        // Probably at end of file => ignore\n        commands[i] = null;\n        continue;\n      }\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [shouldPushStackElementBefore, commands];\n  };\n  DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\n    if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\n      return false;\n    }\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var position = selection.getPosition();\n      if (!selection.isEmpty()) {\n        return false;\n      }\n      var lineText = model.getLineContent(position.lineNumber);\n      var character = lineText[position.column - 2];\n      var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(character);\n      if (!autoClosingPairCandidates) {\n        return false;\n      }\n      if (isQuote(character)) {\n        if (config.autoClosingQuotes === 'never') {\n          return false;\n        }\n      } else {\n        if (config.autoClosingBrackets === 'never') {\n          return false;\n        }\n      }\n      var afterCharacter = lineText[position.column - 1];\n      var foundAutoClosingPair = false;\n      for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\n        var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\n        if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n          foundAutoClosingPair = true;\n        }\n      }\n      if (!foundAutoClosingPair) {\n        return false;\n      }\n    }\n    return true;\n  };\n  DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var position = selections[i].getPosition();\n      var deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [true, commands];\n  };\n  DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\n    if (this._isAutoClosingPairDelete(config, model, selections)) {\n      return this._runAutoClosingPairDelete(config, model, selections);\n    }\n    var commands = [];\n    var shouldPushStackElementBefore = prevEditOperationType !== 2 /* DeletingLeft */;\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      var deleteSelection = selection;\n      if (deleteSelection.isEmpty()) {\n        var position = selection.getPosition();\n        if (config.useTabStops && position.column > 1) {\n          var lineContent = model.getLineContent(position.lineNumber);\n          var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n          var lastIndentationColumn = firstNonWhitespaceIndex === -1 ? /* entire string is whitespace */lineContent.length + 1 : firstNonWhitespaceIndex + 1;\n          if (position.column <= lastIndentationColumn) {\n            var fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n            var toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n            var toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n            deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n          } else {\n            deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n          }\n        } else {\n          var leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\n          deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\n        }\n      }\n      if (deleteSelection.isEmpty()) {\n        // Probably at beginning of file => ignore\n        commands[i] = null;\n        continue;\n      }\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [shouldPushStackElementBefore, commands];\n  };\n  DeleteOperations.cut = function (config, model, selections) {\n    var commands = [];\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      if (selection.isEmpty()) {\n        if (config.emptySelectionClipboard) {\n          // This is a full line cut\n          var position = selection.getPosition();\n          var startLineNumber = void 0,\n            startColumn = void 0,\n            endLineNumber = void 0,\n            endColumn = void 0;\n          if (position.lineNumber < model.getLineCount()) {\n            // Cutting a line in the middle of the model\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber + 1;\n            endColumn = 1;\n          } else if (position.lineNumber > 1) {\n            // Cutting the last line & there are more than 1 lines in the model\n            startLineNumber = position.lineNumber - 1;\n            startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          } else {\n            // Cutting the single line that the model contains\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          }\n          var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n          if (!deleteSelection.isEmpty()) {\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n          } else {\n            commands[i] = null;\n          }\n        } else {\n          // Cannot cut empty selection\n          commands[i] = null;\n        }\n      } else {\n        commands[i] = new ReplaceCommand(selection, '');\n      }\n    }\n    return new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  };\n  return DeleteOperations;\n}();\nexport { DeleteOperations };","map":{"version":3,"names":["strings","ReplaceCommand","CursorColumns","EditOperationResult","isQuote","MoveOperations","Range","DeleteOperations","deleteRight","prevEditOperationType","config","model","selections","commands","shouldPushStackElementBefore","i","len","length","selection","deleteSelection","isEmpty","position","getPosition","rightOfPosition","right","lineNumber","column","startLineNumber","endLineNumber","_isAutoClosingPairDelete","autoClosingBrackets","autoClosingQuotes","lineText","getLineContent","character","autoClosingPairCandidates","autoClosingPairsOpen2","get","afterCharacter","foundAutoClosingPair","_i","autoClosingPairCandidates_1","autoClosingPairCandidate","open","close","_runAutoClosingPairDelete","deleteLeft","useTabStops","lineContent","firstNonWhitespaceIndex","lastIndentationColumn","fromVisibleColumn","visibleColumnFromColumn2","toVisibleColumn","prevIndentTabStop","indentSize","toColumn","columnFromVisibleColumn2","leftOfPosition","left","cut","emptySelectionClipboard","startColumn","endColumn","getLineCount","getLineMaxColumn","shouldPushStackElementAfter"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorDeleteOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { Range } from '../core/range.js';\r\nvar DeleteOperations = /** @class */ (function () {\r\n    function DeleteOperations() {\r\n    }\r\n    DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 3 /* DeletingRight */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                var rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\r\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at end of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\r\n        if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var character = lineText[position.column - 2];\r\n            var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(character);\r\n            if (!autoClosingPairCandidates) {\r\n                return false;\r\n            }\r\n            if (isQuote(character)) {\r\n                if (config.autoClosingQuotes === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (config.autoClosingBrackets === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            var afterCharacter = lineText[position.column - 1];\r\n            var foundAutoClosingPair = false;\r\n            for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n                var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\r\n                    foundAutoClosingPair = true;\r\n                }\r\n            }\r\n            if (!foundAutoClosingPair) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var position = selections[i].getPosition();\r\n            var deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [true, commands];\r\n    };\r\n    DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\r\n        if (this._isAutoClosingPairDelete(config, model, selections)) {\r\n            return this._runAutoClosingPairDelete(config, model, selections);\r\n        }\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 2 /* DeletingLeft */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                if (config.useTabStops && position.column > 1) {\r\n                    var lineContent = model.getLineContent(position.lineNumber);\r\n                    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\r\n                    var lastIndentationColumn = (firstNonWhitespaceIndex === -1\r\n                        ? /* entire string is whitespace */ lineContent.length + 1\r\n                        : firstNonWhitespaceIndex + 1);\r\n                    if (position.column <= lastIndentationColumn) {\r\n                        var fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n                        var toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\r\n                        var toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\r\n                        deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\r\n                    }\r\n                    else {\r\n                        deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\r\n                    }\r\n                }\r\n                else {\r\n                    var leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\r\n                    deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\r\n                }\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at beginning of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations.cut = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                if (config.emptySelectionClipboard) {\r\n                    // This is a full line cut\r\n                    var position = selection.getPosition();\r\n                    var startLineNumber = void 0, startColumn = void 0, endLineNumber = void 0, endColumn = void 0;\r\n                    if (position.lineNumber < model.getLineCount()) {\r\n                        // Cutting a line in the middle of the model\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber + 1;\r\n                        endColumn = 1;\r\n                    }\r\n                    else if (position.lineNumber > 1) {\r\n                        // Cutting the last line & there are more than 1 lines in the model\r\n                        startLineNumber = position.lineNumber - 1;\r\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    else {\r\n                        // Cutting the single line that the model contains\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n                    if (!deleteSelection.isEmpty()) {\r\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\r\n                    }\r\n                    else {\r\n                        commands[i] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    // Cannot cut empty selection\r\n                    commands[i] = null;\r\n                }\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, '');\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    return DeleteOperations;\r\n}());\r\nexport { DeleteOperations };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}