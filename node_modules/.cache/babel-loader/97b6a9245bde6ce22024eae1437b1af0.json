{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\MetadataAnnotation\\\\index.js\";\nimport React, { createRef } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { Row, Col, Button, Empty, Result, Modal, Icon, Checkbox } from 'antd';\nimport 'handsontable/dist/handsontable.full.css';\nimport { MappingData, MappingDatas } from '../TreeView/getMappingDatas';\nimport { isArray, isNotNull, showProgress, hideProgress, getStudyID, getUserID, PostCallWithZoneForDomainCreate, successModal, errorModal, validJSON, successModalCallback, annotationPermission, CallServerPost, strLowerCase, FormErrorIfArray, warningModal } from '../Utility/sharedUtility';\nimport Box from '../../components/utility/box';\nimport LayoutWrapper from '../../components/utility/layoutWrapper';\nimport ContentTab from '../TreeView/contentTab';\nimport Progress from '../Utility/ProgressBar';\nimport ProgressBarFullyUI from '../Utility/ProgressBarFullyUI';\nimport ViewUpdatedRecord from './ViewUpdatedRecord';\nimport autocompleteType from 'handsontable/commonjs/cellTypes/autocompleteType';\nimport { UpCircleFill, DollarCircleFill } from '@ant-design/icons';\nvar thisObj = {};\nvar MetaDataAnnotation = /*#__PURE__*/function (_React$Component) {\n  _inherits(MetaDataAnnotation, _React$Component);\n  var _super = _createSuper(MetaDataAnnotation);\n  function MetaDataAnnotation(props) {\n    var _this;\n    _classCallCheck(this, MetaDataAnnotation);\n    _this = _super.call(this, props);\n    _this.getData = function () {\n      showProgress();\n      CallServerPost('AnnotationData/GetAnnotationDataByStudyID', {\n        studyID: getStudyID()\n      }).then(function (res) {\n        if (res.status === 1) {\n          var value = res.value;\n          thisObj.GetRawDataset(value);\n        } else {\n          thisObj.GetRawDataset([]);\n        }\n      });\n    };\n    _this.GetRawDataset = function () {\n      var UpdatedRecFromDB = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (!MappingDatas.Loaded) {\n        showProgress();\n        var MappinDatas = new MappingData();\n        MappinDatas.CallBack = function () {\n          thisObj.GetSourceAndTarget(MappingDatas, UpdatedRecFromDB);\n        };\n        MappinDatas.GetSource();\n      } else {\n        thisObj.GetSourceAndTarget(MappingDatas, UpdatedRecFromDB);\n      }\n    };\n    _this.GetSourceAndTarget = function (MappingDatas, UpdatedRecFromDB) {\n      var Standards = MappingDatas.Standards,\n        FieldProperties = MappingDatas.FieldProperties;\n      if (FieldProperties) {\n        //Stringify FieldProperties\n        //Do not override the actual FieldProperties\n        var stringifyFieldProperties = JSON.stringify(FieldProperties);\n        var fld_property = JSON.parse(stringifyFieldProperties);\n        var RowData = thisObj.FormRow(fld_property, UpdatedRecFromDB);\n        var _thisObj$FormColumn = thisObj.FormColumn(fld_property),\n          Column = _thisObj$FormColumn.Column;\n        var DataType = thisObj.FormDataType(Column, Standards);\n        thisObj.setState({\n          loading: \"loaded\",\n          RowData: RowData,\n          filteredData: RowData,\n          ColumnAndDataType: DataType,\n          orgColumnAndDataType: DataType,\n          Standards: Standards,\n          ShowUpdatedRecords: false,\n          PrimarySourceData: JSON.stringify(RowData),\n          SourceDataset: MappingDatas.SourceDataset,\n          UpdatedRecFromDB: UpdatedRecFromDB\n        }, hideProgress());\n      } else {\n        thisObj.setState({\n          loading: \"loaded\",\n          RowData: [],\n          ColumnAndDataType: [],\n          orgColumnAndDataType: [],\n          Standards: Standards,\n          ShowUpdatedRecords: false\n        }, hideProgress());\n      }\n    };\n    _this.FormColumn = function (FieldProperties) {\n      var Col = [];\n      //FOR ALL Coulmn\n      if (FieldProperties.length > 0 && typeof FieldProperties[0] === \"object\") {\n        Col = Object.keys(FieldProperties[0]);\n      }\n\n      //Remove few col in the list\n      var removecol = [\"annotationdataid\", \"update\", \"row_num\", \"rownum\", \"changeidentifier\", \"recordstatus\"];\n\n      //Sorting\n      //Below we are doing sorting => \"TargetDomain\", \"TargetVariable\",\"FORMOID\",\"FIELDOID\"\n      //So First four column should be \"TargetDomain\", \"TargetVariable\",\"FORMOID\",\"FIELDOID\"\n      var orderCol = _toConsumableArray(new Set([\"TargetDomain\", \"TargetVariable\", \"FORMOID\", \"FIELDOID\"].concat(_toConsumableArray(Col.filter(function (c) {\n        return removecol.indexOf(c.toLowerCase()) === -1;\n      })))));\n      var Column = _toConsumableArray(orderCol.map(function (c) {\n        return {\n          title: c.toUpperCase(),\n          dataIndex: c\n        };\n      }));\n      return {\n        Column: Column\n      };\n    };\n    _this.getDomain = function (domainObj) {\n      try {\n        var dm = [];\n        domainObj.map(function (d) {\n          if (!strLowerCase(d.domain).includes('_int')) {\n            dm.push(d.domain);\n          }\n        });\n        return dm;\n      } catch (e) {\n        return [];\n      }\n    };\n    _this.FormDataType = function (Column, Standards) {\n      var Domain = Standards.Domain;\n      var annotationsWorkflowStatus = _this.state.annotationsWorkflowStatus;\n      var HTMLCol = [\"TargetDomain\", \"TargetVariable\"];\n      //Output generation Used Target should not show here\n      var CustomTargetDS = MappingDatas.CustomTargetDS;\n      var dm = JSON.stringify(Domain);\n      var domainObj = validJSON(dm);\n      domainObj = domainObj.filter(function (dmn) {\n        return CustomTargetDS.indexOf(dmn.domain) === -1;\n      });\n      var dmObj = _this.getDomain(domainObj);\n      //end\n      return Column.map(function (col, i) {\n        if (HTMLCol.indexOf(col.dataIndex) !== -1) {\n          switch (col.dataIndex) {\n            case \"TargetDomain\":\n              return {\n                title: col.title,\n                data: col.dataIndex,\n                strict: true,\n                allowInvalid: false,\n                filter: true,\n                type: 'dropdown',\n                source: [\"--Select--\"].concat(_toConsumableArray(dmObj), [\"Not Mapped\"]),\n                readOnly: !annotationPermission(annotationsWorkflowStatus)\n              };\n            case \"TargetVariable\":\n              return {\n                title: col.title,\n                data: col.dataIndex,\n                strict: true,\n                filter: true,\n                allowInvalid: false,\n                type: 'autocomplete',\n                source: [\"--Select--\"],\n                readOnly: !annotationPermission(annotationsWorkflowStatus)\n              };\n          }\n        } else {\n          return {\n            title: col.title,\n            data: col.dataIndex,\n            readOnly: true\n          };\n        }\n      });\n    };\n    _this.FormRow = function (FieldProperties, UpdatedRecFromDB) {\n      var RowData = [];\n      if (FieldProperties.length > 0) {\n        var ColConfig = _this.state.ColConfig;\n        FieldProperties.map(function (Fld_Prop, i) {\n          //ColConfig -> This var contains the column configuration details that were given in the Meta Data config in the Activity configuration\n          //Match field properties to column configuration keys\n          ColConfig.map(function (ca) {\n            var Fld_Prop_keys = Object.keys(Fld_Prop);\n            //Match key with columnconfig\n            var matchKey = Fld_Prop_keys.find(function (k) {\n              return k.toLowerCase() === ca.configurationValue.toLowerCase();\n            });\n\n            //Delete after match and use our column config columns only\n            var matchKeyValue = Fld_Prop[matchKey];\n            delete Fld_Prop[matchKey];\n            Fld_Prop[ca.configurationName.toUpperCase()] = matchKeyValue;\n          });\n\n          //Table Update\n          //If the record has already been updated, the updated record must be set\n          //Update done here\n          var is_RecFromDB = UpdatedRecFromDB.find(function (rec) {\n            return rec.sourceDataSet === Fld_Prop.FORMOID && rec.sourceVariableName === Fld_Prop.FIELDOID;\n          });\n          var updated = is_RecFromDB ? true : false;\n\n          // Check is DOmain and Var from DB available for current study or not\n          var cdiscDataStdDomainMetadataID = updated ? thisObj.GetDomain(is_RecFromDB.targetDataSet) : -1;\n          //Is var aval in Current study\n          var isVarAval = updated ? thisObj.GetVariable(is_RecFromDB.targetVariableName, cdiscDataStdDomainMetadataID) : -1;\n          //END For Table Update \n\n          //Additional columns are added here(TargetDomain,TargetVariable,Update,CHANGEIDENTIFIER,RecordStatus(For view Table))\n          Fld_Prop[\"TargetDomain\"] = cdiscDataStdDomainMetadataID !== -1 ? is_RecFromDB.targetDataSet : \"--Select--\"; //Mandatory Column\n          Fld_Prop[\"TargetVariable\"] = isVarAval !== -1 ? is_RecFromDB.targetVariableName : \"--Select--\"; //Mandatory Column\n          Fld_Prop[\"AnnotationDataID\"] = updated ? is_RecFromDB.annotationDataID : 0; // for in db table this one is not null\n          Fld_Prop[\"Update\"] = updated; //The record for updating or creating can be found here\n          Fld_Prop[\"CHANGEIDENTIFIER\"] = false; //Those records that have been changed can be found here\n          Fld_Prop[\"RecordStatus\"] = updated ? \"Update\" : \"Create\";\n          RowData.push(Fld_Prop);\n        });\n      }\n      return RowData;\n    };\n    _this.GetTargetVariable = function (TargetDomainName) {\n      if (TargetDomainName) {\n        var Standards = thisObj.state.Standards;\n        var Domain = Standards.Domain,\n          Variable = Standards.Variable;\n        switch (TargetDomainName) {\n          case \"Not Mapped\":\n            return [\"Not Mapped\"];\n          default:\n            {\n              var TargetDomain = Domain.find(function (x) {\n                return x.domain.toLowerCase() === TargetDomainName.toLowerCase();\n              });\n              var sel_CDISCDataStdDomainMetadataID = typeof TargetDomain === \"object\" && \"cdiscDataStdDomainMetadataID\" in TargetDomain ? TargetDomain.cdiscDataStdDomainMetadataID : -1;\n\n              //variable based on selected domain in target domain column\n              var variable = Variable.filter(function (x) {\n                return x.cdiscDataStdDomainMetadataID === sel_CDISCDataStdDomainMetadataID;\n              });\n              return [\"--Select--\"].concat(_toConsumableArray(variable.map(function (va) {\n                return va.variableName;\n              })));\n            }\n        }\n      } else {\n        return [];\n      }\n    };\n    _this.GetTableJSON = function () {\n      try {\n        return _this.hotTableComponent.current.hotInstance.getSourceData();\n      } catch (e) {\n        return [];\n      }\n    };\n    _this.DataFormation = function (data) {\n      if (data.length > 0) {\n        return data.map(function (da) {\n          var CDISCDataStdDomainMetadataID = thisObj.GetDomain(da.TargetDomain);\n          return {\n            StudyID: getStudyID(),\n            CRFDocumentID: 3,\n            AnnotationText: \"Text\",\n            CDISCDataStdDomainMetadataID: CDISCDataStdDomainMetadataID,\n            CDISCDataStdVariableMetadataID: thisObj.GetVariable(da.TargetVariable, CDISCDataStdDomainMetadataID),\n            SourceDataSet: da.FORMOID,\n            SourceVariableName: da.FIELDOID,\n            TargetDataSet: da.TargetDomain,\n            TargetVariableName: da.TargetVariable,\n            AnnotationDataID: da.AnnotationDataID,\n            Update: da.Update,\n            VicinityText: 'test',\n            PageNumber: 0,\n            AdditionalSourceData: \"[]\",\n            TimeZone: \"IST\",\n            UpdatedBy: getUserID(),\n            UserID: getUserID(),\n            AnnotationShape: \"MetaData\",\n            BorderColor: \"MetaData\",\n            BorderWidth: 0,\n            FontSize: 0,\n            FontStyle: \"MetaData\",\n            FontColor: \"MetaData\",\n            FillColor: \"MetaData\",\n            TopCoordinate: 0,\n            LeftCoordinate: 0,\n            AnnotationHeight: 0,\n            AnnotationWidth: 0\n          };\n        });\n      }\n    };\n    _this.GetDomain = function (TargetDomainName) {\n      var Standards = MappingDatas.Standards;\n      var Domain = Standards.Domain;\n      var Sel_Domain = isNotNull(TargetDomainName) ? Domain.find(function (x) {\n        return x.domain.toLowerCase() === TargetDomainName.toLowerCase();\n      }) : {};\n      return TargetDomainName === \"Not Mapped\" ? 0 : Sel_Domain ? Sel_Domain.cdiscDataStdDomainMetadataID : -1;\n    };\n    _this.GetVariable = function (TargetVariableName, CDISCDataStdDomainMetadataID) {\n      var Standards = MappingDatas.Standards;\n      var Variable = Standards.Variable;\n      var Sel_Variable = isNotNull(TargetVariableName) ? Variable.find(function (x) {\n        return x.variableName.toLowerCase() === TargetVariableName.toLowerCase() && x.cdiscDataStdDomainMetadataID === CDISCDataStdDomainMetadataID;\n      }) : null;\n      return TargetVariableName === \"Not Mapped\" ? 0 : Sel_Variable ? Sel_Variable.cdiscDataStdVariableMetadataID : -1;\n    };\n    _this.Save = function () {\n      var tabledata = _this.GetTableJSON();\n      var UpdatedRecord = tabledata.filter(function (td) {\n        return td.CHANGEIDENTIFIER && td.TargetDataSet != '--Select--' && td.TargetVariable != \"--Select--\";\n      });\n      if (UpdatedRecord.length > 0) {\n        thisObj.setState({\n          progress: \"active\"\n        });\n        var data = _this.DataFormation(UpdatedRecord);\n        PostCallWithZoneForDomainCreate(\"AnnotationData/MetaDataAnnotationCreationUpdation\", data).then(function (response) {\n          hideProgress();\n          if (response.status == 1) {\n            thisObj.setState({\n              progress: \"success\",\n              ShowUpdatedRecord: false\n            });\n            if (response.value && response.value.length > 0) {\n              var warning = FormErrorIfArray(\"The following targets are already mapped. Please delete them from mapping page and try again.\", response.value, \"Remaining mapped successfully!\");\n              warningModal(warning, function () {\n                return thisObj.AfterSave();\n              });\n            } else {\n              successModalCallback(response.message, function () {\n                return thisObj.AfterSave();\n              });\n            }\n          } else {\n            thisObj.setState({\n              progress: \"exception\"\n            });\n            var notMappedList = response.value;\n            if (notMappedList && typeof notMappedList === \"object\" && notMappedList.length > 0) {\n              var err = FormErrorIfArray(\"The following targets have already been mapped. Please delete them from the mapping page and try again.\", response.value);\n              errorModal(err);\n            } else {\n              errorModal(response.message);\n            }\n          }\n        }).catch(function (error) {\n          return error;\n        });\n      } else {\n        errorModal(\"no updated record\");\n      }\n    };\n    _this.Cancel = function () {\n      _this.props.history.push(\"/trans/project\", {\n        openSelectedStudy: true\n      });\n    };\n    _this.AfterSave = function () {\n      var tht = _assertThisInitialized(_this);\n      _this.setState({\n        ShowUpdatedRecord: false\n      }, function () {\n        tht.getData();\n      });\n    };\n    _this.WhenDataModified = function (changes, source, table) {\n      var PrimarySourceData = thisObj.state.PrimarySourceData;\n      var _assertThisInitialize = _assertThisInitialized(_this),\n        hotTableComponent = _assertThisInitialize.hotTableComponent;\n      if (source === \"edit\") {\n        var _changes = _slicedToArray(changes, 1),\n          _changes$ = _slicedToArray(_changes[0], 4),\n          row = _changes$[0],\n          prop = _changes$[1],\n          oldVal = _changes$[2],\n          newVal = _changes$[3];\n\n        //Get Unmodified Source Data\n\n        var PrimaryData = validJSON(PrimarySourceData);\n        var t_instance = table.getInstance();\n        var tableSource = t_instance.getSourceData();\n\n        //console.log(\"row:\" + table.toPhysicalRow(row) + \"prop:\" + prop + \"oldVal:\" + oldVal + \"newVal:\" + newVal);\n\n        var phy_row = table.toPhysicalRow(row);\n        switch (prop) {\n          case \"TargetDomain\":\n            if (PrimaryData[phy_row][prop] !== newVal && newVal !== \"--Select--\") {\n              tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = true;\n            } else {\n              tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = false;\n            }\n            break;\n          case \"TargetVariable\":\n            var domain_col_num = t_instance.propToCol(\"TargetDomain\");\n            var domain_col_val = t_instance.getDataAtCell(row, domain_col_num);\n            if (PrimaryData[phy_row][prop] !== newVal && newVal !== \"--Select--\" || PrimaryData[phy_row][\"TargetDomain\"] !== domain_col_val) {\n              tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = true;\n            } else {\n              tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = false;\n            }\n            break;\n        }\n      }\n    };\n    _this.GetTableInstance = function (ht_component) {\n      try {\n        return ht_component.current.hotInstance.getSourceData();\n      } catch (e) {\n        //console.log(e);\n        return [];\n      }\n    };\n    _this.ShowUpdatedRecord = function () {\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n        hotTableComponent = _assertThisInitialize2.hotTableComponent;\n      var getUpdatedData = _this.GetTableInstance(hotTableComponent);\n      thisObj.setState({\n        ShowUpdatedRecord: true,\n        UpdatedRecord: getUpdatedData.filter(function (upd) {\n          return upd.CHANGEIDENTIFIER && upd.TargetDataSet != '--Select--' && upd.TargetVariable != \"--Select--\";\n        })\n      });\n    };\n    _this.FnToPredictTarFrSingleSrc = function (rownum, sel_rec) {\n      var _thisObj = thisObj,\n        hotTableComponent = _thisObj.hotTableComponent;\n      var hTable = hotTableComponent.current.hotInstance;\n      showProgress();\n      CallServerPost('Py/GetPrediction', {\n        text: sel_rec.PRETEXT,\n        variable: sel_rec.FORMOID + \".\" + sel_rec.FIELDOID\n      }).then(function (res) {\n        hideProgress();\n        var status = res.status,\n          value = res.value;\n        if (status === 1) {\n          //value from controller is like {0:\"DOMIAN.Vraiable\"} from this get only \"DOMIAN.Vraiable\"\n          //IF controller return value is  {0:\"DROP\"} ? no prediction : show the prdicted value\n          // following check for above two condn \n          if (value && typeof value === \"object\" && Object.keys(value).length > 0 && value[0] && typeof value[0] === \"string\" && value[0].toLowerCase() !== \"drop\") {\n            //split control return {0:\"DOMIAN.Vraiable\"}\n            var target = value[0].split(\".\");\n            var domain = target[0];\n            var variable = target[1];\n            var isDomainID = thisObj.GetDomain(domain);\n            var isDomainVariableID = thisObj.GetVariable(variable, isDomainID);\n            if (isDomainID !== -1 && isDomainVariableID !== -1) {\n              var data = hTable.getSourceDataAtRow(rownum);\n              var PrimarySourceData = thisObj.state.PrimarySourceData;\n              var PrimaryData = validJSON(PrimarySourceData);\n              if (PrimaryData[rownum][\"TargetDomain\"] !== target[0] || PrimaryData[rownum][\"TargetVariable\"] !== target[1]) {\n                data.CHANGEIDENTIFIER = true;\n              } else {\n                data.CHANGEIDENTIFIER = false;\n              }\n              data.TargetDomain = target[0];\n              hTable.setCellMeta(hTable.toVisualRow(rownum), hTable.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(target[0]));\n              data.TargetVariable = target[1];\n              ////Set the predicted target\n              //hTable.setDataAtRowProp(hTable.toVisualRow(rownum), \"TargetDomain\", target[0]);\n              //hTable.setCellMeta(hTable.toVisualRow(rownum), hTable.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(target[0]));\n\n              hTable.render();\n              return;\n            }\n          }\n        }\n        errorModal(\"No Prediction available for \" + sel_rec.FORMOID + \".\" + sel_rec.FIELDOID);\n      });\n    };\n    _this.FnToPredictTarFrMulSrc = function () {\n      //for err identification\n      var err = true;\n      var _thisObj2 = thisObj,\n        hotTableComponent = _thisObj2.hotTableComponent;\n      var filteredData = thisObj.state.filteredData;\n      var hTable = hotTableComponent.current.hotInstance;\n\n      //Form DATA FOR CONTROLLER\n      //GET ALL THE RECORD ONLY IF TARGET DOMAIN , VARIABLE AND PRETEXT IS EMPTY\n      var record = [];\n      filteredData.map(function (rec, rownum) {\n        if (rec.TargetDomain === \"--Select--\" && rec.TargetVariable === \"--Select--\" && isNotNull(rec.PRETEXT)) {\n          record.push({\n            text: rec.PRETEXT,\n            variable: rec.FORMOID + \".\" + rec.FIELDOID,\n            rownum: rownum\n          });\n        }\n      });\n\n      //FOR PROGRESS BAR\n      //HERE THE RECORD IS NOW SPLIT BY \"@TIME\" Variable\n      //CALCULATION EX 'time' VAR IS 50 & TOTLA RECORD = 1080 ? 1080 / 50 = 22 TIMES WE HAVE TO LOOP AND SEND TO CONTROLLER \n      var time = 50;\n      var rec_count = record.length;\n\n      //LOOP VAR USED TO LOOP \n      //CALCULATION EX 'time' VAR IS 50 & TOTLA RECORD = 1080 ? 1080 / 50 = 22 TIMES WE HAVE TO LOOP AND SEND TO CONTROLLER \n      var loop = rec_count / time;\n      loop = Math.ceil(loop);\n      //END LOOP CALCULATION\n\n      // @'i' VARIABLE USED TO STORE CURRENT LOOP NUM\n      var loopNum = 0;\n\n      //Progress start\n      thisObj.setState({\n        progressBarfullyUI: {\n          percent: 0,\n          status: \"active\",\n          progress: true\n        }\n      });\n      MultiplePrediction(loopNum);\n      function MultiplePrediction(loopNum) {\n        var filter_next_set_of_record_by_num_of_times = [];\n        new Promise(function (resolve, reject) {\n          //here times is 50\n\n          var fltr_rec_from = loopNum * time;\n          var fltr_rec_to = time * (loopNum + 1);\n          filter_next_set_of_record_by_num_of_times = record.slice(fltr_rec_from, fltr_rec_to);\n          if (filter_next_set_of_record_by_num_of_times.length > 0) {\n            GetPredictionFromController(filter_next_set_of_record_by_num_of_times, resolve);\n          } else {\n            reject();\n          }\n        }).then(function () {\n          //Scroll to the upcoming prediction column\n          var hTable = hotTableComponent.current.hotInstance;\n          filter_next_set_of_record_by_num_of_times.length > 0 && hTable.scrollViewportTo(filter_next_set_of_record_by_num_of_times[0].rownum, 0);\n          //END\n\n          //count the loop\n          loopNum++;\n          var percentage = rec_count < time ? 100 : time * loopNum / rec_count * 100;\n          if (loopNum < loop) {\n            thisObj.setState({\n              progressBarfullyUI: {\n                percent: Math.ceil(percentage),\n                status: \"active\",\n                progress: true\n              }\n            });\n            MultiplePrediction(loopNum);\n          } else {\n            thisObj.setState({\n              progressBarfullyUI: {\n                percent: Math.ceil(percentage),\n                status: \"active\",\n                progress: true\n              }\n            });\n            setTimeout(function () {\n              thisObj.setState({\n                progressBarfullyUI: {\n                  progress: false\n                }\n              });\n            }, 300);\n            err && errorModal(\"No Prediction's are available\");\n          }\n        }).catch(function () {\n          thisObj.setState({\n            progressBarfullyUI: {\n              progress: false\n            }\n          });\n          err && errorModal(\"No Prediction's are available\");\n        });\n      }\n      function GetPredictionFromController(records, resolve) {\n        CallServerPost('Py/GetMultiplePrediction', {\n          predict: records\n        }).then(function (res) {\n          var status = res.status,\n            value = res.value;\n          if (status === 1 && isArray(value)) {\n            value.map(function (va) {\n              //Predicted obj\n              var pred = va.pred,\n                rownum = va.rownum;\n              var target = isNotNull(pred) ? pred.split(\".\") : [];\n              var domain = target[0];\n              var variable = target[1];\n\n              //Check predicted target Domain and variable's from controller are available for current study or not\n              var isDomainID = thisObj.GetDomain(domain);\n              var isDomainVariableID = thisObj.GetVariable(variable, isDomainID);\n\n              //Check predicted target Domain and variable's from controller are available or not\n              if (isDomainID !== -1 && isDomainVariableID !== -1) {\n                rownum = hTable.toPhysicalRow(rownum);\n                var data = hTable.getSourceDataAtRow(rownum);\n                var PrimarySourceData = thisObj.state.PrimarySourceData;\n                var PrimaryData = validJSON(PrimarySourceData);\n                if (PrimaryData[rownum][\"TargetDomain\"] !== target[0] || PrimaryData[rownum][\"TargetVariable\"] !== target[1]) {\n                  data.CHANGEIDENTIFIER = true;\n                } else {\n                  data.CHANGEIDENTIFIER = false;\n                }\n                data.TargetDomain = target[0];\n                data.TargetVariable = target[1];\n                ////Set the predicted target\n                //hTable.setDataAtRowProp(rownum, \"TargetDomain\", target[0]);\n                //hTable.setDataAtRowProp(rownum, \"TargetVariable\", target[1]);\n                err = false;\n              }\n            });\n            resolve();\n          } else {\n            resolve();\n          }\n        });\n      }\n    };\n    _this.onKeep = function (event, colindex) {\n      var _this$state = _this.state,\n        selColumn = _this$state.selColumn,\n        orgColumnAndDataType = _this$state.orgColumnAndDataType;\n      if (!event.target.checked && selColumn.length === orgColumnAndDataType.length - 1) {\n        errorModal(\"Please select any one column\");\n      } else if (event.target.checked) {\n        _this.setState(function (state) {\n          var selColumn = state.selColumn.filter(function (x) {\n            return x !== colindex;\n          });\n          return {\n            selColumn: selColumn\n          };\n        });\n      } else {\n        _this.setState(function (state) {\n          return {\n            selColumn: [].concat(_toConsumableArray(state.selColumn), [colindex])\n          };\n        });\n      }\n    };\n    _this.fnModalOnOk = function () {\n      var _this$state2 = _this.state,\n        selColumn = _this$state2.selColumn,\n        hiddenColumn = _this$state2.hiddenColumn,\n        ColumnAndDataType = _this$state2.ColumnAndDataType,\n        orgColumnAndDataType = _this$state2.orgColumnAndDataType;\n      if (selColumn.length === orgColumnAndDataType.length) {\n        errorModal(\"Please select any one column\");\n        return;\n      }\n      var columnAndDataType = orgColumnAndDataType.filter(function (x, index) {\n        return selColumn.indexOf(index) === -1;\n      });\n      _this.setState({\n        hiddenColumn: selColumn,\n        showColKeepResetModal: false,\n        ColumnAndDataType: columnAndDataType\n      });\n    };\n    _this.getHeight = function () {\n      var _this$state3 = _this.state,\n        RowData = _this$state3.RowData,\n        showHeader = _this$state3.showHeader;\n      return RowData.length !== 0 && showHeader ? \"calc(100vh - 213px)\" : RowData.length !== 0 && !showHeader ? \"calc(100vh - 168px)\" : 0;\n    };\n    var locationState = props.location && props.location.state ? props.location.state : {};\n    var _ColConfig = ['DataType', 'PreText', 'FieldOID', 'FormOID', 'FormName'];\n    _this.state = {\n      SourceDataset: MappingDatas.SourceDataset,\n      Column: [],\n      RowData: [],\n      loading: \"loading\",\n      ColumnAndDataType: [],\n      showHeader: false,\n      Progress: false,\n      PrimarySourceData: \"\",\n      filteredData: [],\n      annotationsWorkflowStatus: locationState.wrkFlowStatus,\n      ColConfig: locationState.AnnotActvtyList.filter(function (activi) {\n        return _ColConfig.indexOf(activi.configurationName) !== -1;\n      }),\n      activityDetails: locationState.allActivityDetails,\n      //For Prediction\n      //we are handling progress bar in  ui\n      progressBarfullyUI: {\n        percent: 0,\n        status: \"active\",\n        show: false\n      },\n      //Show & hide Columns pop\n      showColKeepResetModal: false,\n      hiddenColumn: [],\n      selColumn: []\n    };\n    thisObj = _assertThisInitialized(_this);\n\n    //create ref to access the table \n    _this.hotTableComponent = createRef();\n    return _this;\n  }\n\n  //Get Raw data(Source) and standards here\n  _createClass(MetaDataAnnotation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state4 = this.state,\n        Column = _this$state4.Column,\n        showHeader = _this$state4.showHeader,\n        selColumn = _this$state4.selColumn,\n        hiddenColumn = _this$state4.hiddenColumn,\n        progressBarfullyUI = _this$state4.progressBarfullyUI,\n        activityDetails = _this$state4.activityDetails,\n        RowData = _this$state4.RowData,\n        ColumnAndDataType = _this$state4.ColumnAndDataType,\n        UpdatedRecord = _this$state4.UpdatedRecord,\n        progress = _this$state4.progress,\n        annotationsWorkflowStatus = _this$state4.annotationsWorkflowStatus,\n        orgColumnAndDataType = _this$state4.orgColumnAndDataType,\n        ShowUpdatedRecord = _this$state4.ShowUpdatedRecord,\n        loading = _this$state4.loading;\n      return /*#__PURE__*/React.createElement(LayoutWrapper, {\n        id: \"treeview_layout\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        className: \"metadataAnnotBox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 17\n        }\n      }, showHeader && /*#__PURE__*/React.createElement(Row, {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"site-layout-background\",\n        span: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(ContentTab, {\n        backBtn: false,\n        projectInActive: this.props.projectInActive,\n        history: this.props.history,\n        projectStudyLockStatus: this.props.projectStudyLockStatus,\n        fromDashboard: this.props.fromDashboard,\n        actidetails: activityDetails,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 29\n        }\n      }))), RowData.length !== 0 && /*#__PURE__*/React.createElement(Row, {\n        className: \"site-layout-background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 46\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"site-layout-background\",\n        style: {\n          padding: \"5px 10px 10px 10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        name: \"TableAdd\",\n        type: \"default\",\n        style: {\n          height: \"27px\",\n          margin: \"0px 5px 0px 0px\"\n        },\n        onClick: function onClick() {\n          return _this2.setState({\n            showColKeepResetModal: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 33\n        }\n      }, \"Keep\"), /*#__PURE__*/React.createElement(Button, {\n        name: \"Reset\",\n        className: \"resetbtn\",\n        onClick: function onClick() {\n          return _this2.setState({\n            selColumn: [],\n            hiddenColumn: [],\n            ColumnAndDataType: orgColumnAndDataType\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 33\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(Icon, {\n        className: \"metaAnnotArrow\",\n        theme: \"filled\",\n        type: showHeader ? \"up-circle\" : \"down-circle\",\n        onClick: function onClick() {\n          return _this2.setState({\n            showHeader: !showHeader\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 33\n        }\n      })))), /*#__PURE__*/React.createElement(Row, {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: RowData.length !== 0 ? '100%' : 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"AnnotStyle site-layout-background\",\n        style: {\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          padding: \"0px 10px 10px 10px\",\n          height: this.getHeight()\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(HotTable, {\n        id: \"MetaDataAnnotation_Table\",\n        className: \"MetaDataAnnotation_Table_TD\",\n        height: RowData.length > 0 ? \"100%\" : \"50px\",\n        licenseKey: \"non-commercial-and-evaluation\",\n        viewportRowRenderingOffsetnumber: 10,\n        ref: this.hotTableComponent,\n        settings: {\n          wordWrap: true,\n          stretchH: 'all',\n          data: RowData,\n          columns: ColumnAndDataType,\n          height: 400,\n          fillHandle: false,\n          filters: true,\n          hiddenColumns: {\n            // specify columns hidden by default\n            columns: hiddenColumn\n          },\n          colWidths: function colWidths(index) {\n            var instance = thisObj.hotTableComponent.current.hotInstance;\n            var allHeader = instance.getColHeader();\n            if (allHeader.indexOf(\"SECTION\") === index || allHeader.indexOf(\"PRETEXT\") === index || allHeader.indexOf(\"FORMNAME\") === index) {\n              return 300;\n            } else {\n              return 200;\n            }\n          },\n          afterFilter: function afterFilter(filter) {\n            var _this3 = this;\n            var filteredVal = this.getPlugin('trimRows').rowsMapper._arrayMap.map(function (r) {\n              return _this3.getSourceDataAtRow(r);\n            });\n            thisObj.setState({\n              filteredData: filteredVal\n            });\n          },\n          beforeKeyDown: function beforeKeyDown(e) {\n            e.stopPropagation();\n            var cell = this.getSelected();\n            if (cell && cell.length > 0) {\n              var _ref = _toConsumableArray(cell[0]),\n                row = _ref[0],\n                col = _ref[1];\n              if (this.propToCol(\"TargetDomain\") === col || this.propToCol(\"TargetVariable\") === col) {\n                this.setCellMeta(row, col, \"type\", \"autocomplete\");\n                this.setCellMeta(row, col, \"filter\", true);\n                this.setCellMeta(row, col, \"strict\", true);\n              }\n            }\n          },\n          beforeOnCellMouseDown: function beforeOnCellMouseDown(e, coords) {\n            e.preventDefault();\n            if (coords && coords.row != undefined && coords.col != undefined) {\n              var row = coords.row,\n                col = coords.col;\n              if (this.propToCol(\"TargetDomain\") === col || this.propToCol(\"TargetVariable\") === col) {\n                this.setCellMeta(row, col, \"type\", \"dropdown\");\n                this.setCellMeta(row, col, \"filter\", false);\n              }\n            }\n          },\n          dropdownMenu: ['filter_by_condition', 'filter_by_value', 'filter_action_bar'],\n          contextMenu: {\n            items: {\n              \"Predict_Text\": {\n                name: 'Predict Text',\n                callback: function callback(action, rowArray, b, c) {\n                  var sel_row = this.getSelectedLast();\n                  var _ref2 = _toConsumableArray(sel_row),\n                    row = _ref2[0];\n                  row = this.toPhysicalRow(row);\n\n                  //get row data\n                  var rowData = this.getSourceDataAtRow(row);\n                  //Call Predict_Text Fn\n                  thisObj.FnToPredictTarFrSingleSrc(row, rowData);\n                },\n                hidden: function hidden() {\n                  //Hidden Predict text option while Multiple row selection\n                  var getSelectedRange = this.getSelectedRangeLast();\n                  if (getSelectedRange) {\n                    var getSelectedRows = getSelectedRange;\n                    var from = getSelectedRows.from,\n                      to = getSelectedRows.to;\n                    if (from.row !== to.row) {\n                      //if row selection mismatch hidden menu\n                      return true;\n                    } else {\n                      //select whole row when we right click\n                      this.selectRows(to.row);\n                    }\n                  }\n                  if (!this.getSelected() || !annotationPermission(annotationsWorkflowStatus)) {\n                    return true;\n                  }\n                }\n              }\n            }\n          },\n          afterChange: function afterChange(changes, source) {\n            if (changes) {\n              //console.log(changes)\n              var _changes2 = _slicedToArray(changes, 1),\n                _changes2$ = _slicedToArray(_changes2[0], 4),\n                row = _changes2$[0],\n                prop = _changes2$[1],\n                oldVal = _changes2$[2],\n                newVal = _changes2$[3];\n              if (prop === \"TargetDomain\" && oldVal !== newVal) {\n                this.setCellMeta(row, this.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(newVal));\n                if (newVal === \"Not Mapped\") {\n                  this.setDataAtRowProp(row, \"TargetVariable\", \"Not Mapped\");\n                }\n              }\n            }\n            //Track change identifier\n            thisObj.WhenDataModified(changes, source, this);\n          },\n          beforeChange: function beforeChange(changes, source) {\n            var _changes3 = _slicedToArray(changes, 1),\n              _changes3$ = _slicedToArray(_changes3[0], 4),\n              row = _changes3$[0],\n              prop = _changes3$[1],\n              oldVal = _changes3$[2],\n              newVal = _changes3$[3];\n            var instance = this.getInstance();\n            if (prop === \"TargetDomain\" && oldVal !== newVal) {\n              //set dropdown data based on Targetdomain\n              this.setCellMeta(row, this.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(newVal));\n              if (newVal !== \"Not Mapped\") {\n                var data = this.getSourceDataAtRow(this.toPhysicalRow(row));\n                data.TargetVariable = \"--Select--\";\n                this.render();\n                //this.setDataAtRowProp(row, \"TargetVariable\", \"--Select--\");\n              }\n            }\n          },\n\n          cells: function cells(physicalRow, physicalcolumn, prop) {\n            if (prop === \"TargetVariable\") {\n              var ht = thisObj.hotTableComponent.current.hotInstance;\n              var cellProperties = {};\n              //visualRowIndex\n              var row = this.instance.toVisualRow(physicalRow);\n              //visualColIndex\n              var col = this.instance.toVisualColumn(physicalcolumn);\n\n              //IF No Prediction ? make variable readonly\n              if (ht.getDataAtCell(row, ht.propToCol(\"TargetDomain\")) === \"Not Mapped\" || ht.getDataAtCell(row, col) === \"Not Mapped\") {\n                cellProperties.className = \"ht_readonly\";\n                cellProperties.readOnly = true;\n              } else {\n                //Load dependency dropdown\n                //This is usefull for reload\n                var TargetDomainOfTheRow = ht.getDataAtCell(row, ht.propToCol(\"TargetDomain\"));\n                ht.setCellMeta(row, ht.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(TargetDomainOfTheRow));\n                cellProperties.readOnly = annotationPermission(annotationsWorkflowStatus) ? false : true;\n                cellProperties.className = \"ht_not_readonly\";\n              }\n              return cellProperties;\n            }\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 33\n        }\n      })))), RowData.length === 0 && /*#__PURE__*/React.createElement(Empty, {\n        description: loading === \"loading\" ? \"Progressing\" : \"No Data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 49\n        }\n      }), RowData.length > 0 && /*#__PURE__*/React.createElement(Row, {\n        className: \"site-layout-background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 44\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"site-layout-background\",\n        style: {\n          padding: \"0px 10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        name: \"Cancel\",\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.Cancel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 29\n        }\n      }, \"Cancel\"), annotationPermission(annotationsWorkflowStatus) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        name: \"Add\",\n        style: {\n          float: \"right\"\n        },\n        className: \"saveBtn\",\n        onClick: function onClick() {\n          return _this2.ShowUpdatedRecord();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 35\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n        name: \"Predict\",\n        style: {\n          float: \"right\",\n          marginRight: 5\n        },\n        type: \"primary\",\n        onClick: this.FnToPredictTarFrMulSrc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 37\n        }\n      }, \"Predict All\"))))), ShowUpdatedRecord && /*#__PURE__*/React.createElement(ViewUpdatedRecord, {\n        Column: Column,\n        DataType: orgColumnAndDataType,\n        Row: UpdatedRecord,\n        Show: ShowUpdatedRecord,\n        Ok: function Ok() {\n          return _this2.Save();\n        },\n        Cancel: function Cancel() {\n          return _this2.setState({\n            ShowUpdatedRecord: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Progress, {\n        progress: progress,\n        NoInitialPercent: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133,\n          columnNumber: 18\n        }\n      }), /*#__PURE__*/React.createElement(ProgressBarFullyUI, Object.assign({}, progressBarfullyUI, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Modal, {\n        title: \"Keep\",\n        visible: this.state.showColKeepResetModal,\n        width: 300,\n        style: {\n          top: 10\n        },\n        onCancel: this.fnModalOnOk,\n        footer: [/*#__PURE__*/React.createElement(Row, {\n          justify: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1143,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          name: \"ok\",\n          key: \"ok\",\n          className: \"saveBtn\",\n          onClick: this.fnModalOnOk,\n          style: {\n            width: 80\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1145,\n            columnNumber: 29\n          }\n        }, \"OK\"))],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1135,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        className: \"aTagInMetaAnnot\",\n        onClick: function onClick() {\n          return _this2.setState({\n            selColumn: []\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 21\n        }\n      }, \"Select All\"), /*#__PURE__*/React.createElement(\"a\", {\n        className: \"aTagInMetaAnnot\",\n        onClick: function onClick() {\n          return _this2.setState({\n            selColumn: (orgColumnAndDataType || []).map(function (_ref3, index) {\n              var title = _ref3.title;\n              return index;\n            })\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 21\n        }\n      }, \"Clear\"), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 21\n        }\n      }, (orgColumnAndDataType || []).map(function (_ref4, index) {\n        var title = _ref4.title;\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Checkbox, {\n          type: \"checkbox\",\n          name: title,\n          style: {\n            pointerEvents: \"auto\"\n          },\n          checked: selColumn.indexOf(index) === -1,\n          onChange: function onChange(e) {\n            _this2.onKeep(e, index);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 37\n          }\n        }, title)));\n      }))));\n    }\n  }]);\n  return MetaDataAnnotation;\n}(React.Component);\nexport { MetaDataAnnotation as default };","map":{"version":3,"names":["React","createRef","HotTable","Row","Col","Button","Empty","Result","Modal","Icon","Checkbox","MappingData","MappingDatas","isArray","isNotNull","showProgress","hideProgress","getStudyID","getUserID","PostCallWithZoneForDomainCreate","successModal","errorModal","validJSON","successModalCallback","annotationPermission","CallServerPost","strLowerCase","FormErrorIfArray","warningModal","Box","LayoutWrapper","ContentTab","Progress","ProgressBarFullyUI","ViewUpdatedRecord","autocompleteType","UpCircleFill","DollarCircleFill","thisObj","MetaDataAnnotation","props","getData","studyID","then","res","status","value","GetRawDataset","UpdatedRecFromDB","Loaded","MappinDatas","CallBack","GetSourceAndTarget","GetSource","Standards","FieldProperties","stringifyFieldProperties","JSON","stringify","fld_property","parse","RowData","FormRow","FormColumn","Column","DataType","FormDataType","setState","loading","filteredData","ColumnAndDataType","orgColumnAndDataType","ShowUpdatedRecords","PrimarySourceData","SourceDataset","length","Object","keys","removecol","orderCol","Set","filter","c","indexOf","toLowerCase","map","title","toUpperCase","dataIndex","getDomain","domainObj","dm","d","domain","includes","push","e","Domain","annotationsWorkflowStatus","state","HTMLCol","CustomTargetDS","dmn","dmObj","col","i","data","strict","allowInvalid","type","source","readOnly","ColConfig","Fld_Prop","ca","Fld_Prop_keys","matchKey","find","k","configurationValue","matchKeyValue","configurationName","is_RecFromDB","rec","sourceDataSet","FORMOID","sourceVariableName","FIELDOID","updated","cdiscDataStdDomainMetadataID","GetDomain","targetDataSet","isVarAval","GetVariable","targetVariableName","annotationDataID","GetTargetVariable","TargetDomainName","Variable","TargetDomain","x","sel_CDISCDataStdDomainMetadataID","variable","va","variableName","GetTableJSON","hotTableComponent","current","hotInstance","getSourceData","DataFormation","da","CDISCDataStdDomainMetadataID","StudyID","CRFDocumentID","AnnotationText","CDISCDataStdVariableMetadataID","TargetVariable","SourceDataSet","SourceVariableName","TargetDataSet","TargetVariableName","AnnotationDataID","Update","VicinityText","PageNumber","AdditionalSourceData","TimeZone","UpdatedBy","UserID","AnnotationShape","BorderColor","BorderWidth","FontSize","FontStyle","FontColor","FillColor","TopCoordinate","LeftCoordinate","AnnotationHeight","AnnotationWidth","Sel_Domain","Sel_Variable","cdiscDataStdVariableMetadataID","Save","tabledata","UpdatedRecord","td","CHANGEIDENTIFIER","progress","response","ShowUpdatedRecord","warning","AfterSave","message","notMappedList","err","catch","error","Cancel","history","openSelectedStudy","tht","WhenDataModified","changes","table","row","prop","oldVal","newVal","PrimaryData","t_instance","getInstance","tableSource","phy_row","toPhysicalRow","domain_col_num","propToCol","domain_col_val","getDataAtCell","GetTableInstance","ht_component","getUpdatedData","upd","FnToPredictTarFrSingleSrc","rownum","sel_rec","hTable","text","PRETEXT","target","split","isDomainID","isDomainVariableID","getSourceDataAtRow","setCellMeta","toVisualRow","render","FnToPredictTarFrMulSrc","record","time","rec_count","loop","Math","ceil","loopNum","progressBarfullyUI","percent","MultiplePrediction","filter_next_set_of_record_by_num_of_times","Promise","resolve","reject","fltr_rec_from","fltr_rec_to","slice","GetPredictionFromController","scrollViewportTo","percentage","setTimeout","records","predict","pred","onKeep","event","colindex","selColumn","checked","fnModalOnOk","hiddenColumn","columnAndDataType","index","showColKeepResetModal","getHeight","showHeader","locationState","location","wrkFlowStatus","AnnotActvtyList","activi","activityDetails","allActivityDetails","show","display","flexDirection","projectInActive","projectStudyLockStatus","fromDashboard","padding","height","margin","wordWrap","stretchH","columns","fillHandle","filters","hiddenColumns","colWidths","instance","allHeader","getColHeader","afterFilter","filteredVal","getPlugin","rowsMapper","_arrayMap","r","beforeKeyDown","stopPropagation","cell","getSelected","beforeOnCellMouseDown","coords","preventDefault","undefined","dropdownMenu","contextMenu","items","name","callback","action","rowArray","b","sel_row","getSelectedLast","rowData","hidden","getSelectedRange","getSelectedRangeLast","getSelectedRows","from","to","selectRows","afterChange","setDataAtRowProp","beforeChange","cells","physicalRow","physicalcolumn","ht","cellProperties","toVisualColumn","className","TargetDomainOfTheRow","float","marginRight","top","width","pointerEvents","Component"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/MetadataAnnotation/index.js"],"sourcesContent":["import React, { createRef } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { Row, Col, Button, Empty, Result, Modal, Icon,Checkbox } from 'antd';\nimport 'handsontable/dist/handsontable.full.css';\nimport { MappingData, MappingDatas } from '../TreeView/getMappingDatas';\nimport {\n    isArray,\n    isNotNull,\n    showProgress,\n    hideProgress,\n    getStudyID,\n    getUserID,\n    PostCallWithZoneForDomainCreate,\n    successModal,\n    errorModal,\n    validJSON,\n    successModalCallback,\n    annotationPermission,\n    CallServerPost,\n    strLowerCase,\n    FormErrorIfArray,\n    warningModal\n} from '../Utility/sharedUtility';\nimport Box from '../../components/utility/box';\nimport LayoutWrapper from '../../components/utility/layoutWrapper';\nimport ContentTab from '../TreeView/contentTab';\nimport Progress from '../Utility/ProgressBar';\nimport ProgressBarFullyUI from '../Utility/ProgressBarFullyUI';\nimport ViewUpdatedRecord from './ViewUpdatedRecord';\nimport autocompleteType from 'handsontable/commonjs/cellTypes/autocompleteType';\nimport { UpCircleFill, DollarCircleFill } from '@ant-design/icons';\n\nlet thisObj = {};\n\nexport default class MetaDataAnnotation extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        let locationState = (props.location && props.location.state) ? props.location.state : {};\n        let ColConfig = ['DataType', 'PreText', 'FieldOID', 'FormOID', 'FormName'];\n\n        this.state = {\n            SourceDataset: MappingDatas.SourceDataset,\n            Column: [],\n            RowData: [],\n            loading:\"loading\",\n            ColumnAndDataType: [],\n            showHeader: false,\n            Progress: false,\n            PrimarySourceData: \"\",\n            filteredData:[],\n            annotationsWorkflowStatus: locationState.wrkFlowStatus,\n            ColConfig: locationState.AnnotActvtyList.filter(activi => {\n                return ColConfig.indexOf(activi.configurationName) !== -1;\n\n            }),\n            activityDetails: locationState.allActivityDetails,\n            //For Prediction\n            //we are handling progress bar in  ui\n            progressBarfullyUI: { percent: 0, status: \"active\", show: false },\n            //Show & hide Columns pop\n            showColKeepResetModal: false,\n            hiddenColumn: [],\n            selColumn: [],\n           \n        }\n        thisObj = this;\n\n        //create ref to access the table \n        this.hotTableComponent = createRef();\n\n    }\n\n    //Get Raw data(Source) and standards here\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    getData = () => {\n\r\n        showProgress();\n        CallServerPost('AnnotationData/GetAnnotationDataByStudyID', { studyID: getStudyID() }).then(function (res) {\n\n            if (res.status === 1) {\n                let value = res.value;\n                thisObj.GetRawDataset(value);\n            }\n            else {\n                thisObj.GetRawDataset([]);\n            }\n        })\r\n    }\n\n    //GetSourceAndTarget Datasets\n    GetRawDataset = (UpdatedRecFromDB = []) => {\n        if (!MappingDatas.Loaded) {\n            showProgress();\n            let MappinDatas = new MappingData();\n            MappinDatas.CallBack = () => {\n                thisObj.GetSourceAndTarget(MappingDatas, UpdatedRecFromDB);\n            }\n            MappinDatas.GetSource();\n        }\n        else {\n            thisObj.GetSourceAndTarget(MappingDatas, UpdatedRecFromDB);\n        }\n    }\n\n    //Here forming rows & columns according to source and standards\n    GetSourceAndTarget = (MappingDatas, UpdatedRecFromDB) => {\n        const { Standards, FieldProperties } = MappingDatas;\n        if (FieldProperties) {\n\n            //Stringify FieldProperties\n            //Do not override the actual FieldProperties\n            let stringifyFieldProperties = JSON.stringify(FieldProperties);\n            let fld_property = JSON.parse(stringifyFieldProperties);\n\n            let RowData = thisObj.FormRow(fld_property, UpdatedRecFromDB);\n\n            let { Column } = thisObj.FormColumn(fld_property);\n            let DataType = thisObj.FormDataType(Column, Standards);\n\n            thisObj.setState({\n                loading:\"loaded\",\n                RowData: RowData,\n                filteredData: RowData,\n                ColumnAndDataType: DataType,\n                orgColumnAndDataType: DataType,\n                Standards: Standards,\n                ShowUpdatedRecords: false,\n                PrimarySourceData: JSON.stringify(RowData),\n                SourceDataset: MappingDatas.SourceDataset,\n                UpdatedRecFromDB: UpdatedRecFromDB\n            }, hideProgress());\n\n        } else {\n            thisObj.setState({\n                loading: \"loaded\",\n                RowData: [],\n                ColumnAndDataType: [],\n                orgColumnAndDataType: [],\n                Standards: Standards,\n                ShowUpdatedRecords: false,\n            }, hideProgress());\n        }\n    }\n\n    //Column Formation\n    FormColumn = (FieldProperties) => {\n\n        let Col = [];\n        //FOR ALL Coulmn\n        if (FieldProperties.length > 0 && typeof FieldProperties[0] === \"object\") {\n            Col = Object.keys(FieldProperties[0]);\n        }\n\n        //Remove few col in the list\n        let removecol = [\"annotationdataid\", \"update\",\"row_num\",\"rownum\", \"changeidentifier\", \"recordstatus\"];\n\n        //Sorting\n        //Below we are doing sorting => \"TargetDomain\", \"TargetVariable\",\"FORMOID\",\"FIELDOID\"\n        //So First four column should be \"TargetDomain\", \"TargetVariable\",\"FORMOID\",\"FIELDOID\"\n        let orderCol = [...new Set([\"TargetDomain\", \"TargetVariable\", \"FORMOID\", \"FIELDOID\", ...Col.filter(c => removecol.indexOf(c.toLowerCase()) === -1)])]\n\n        let Column = [\n\n            ...orderCol.map(c => {\n                return {\n                    title: c.toUpperCase(),\n                    dataIndex: c,\n                }\n            })\n        ]\n\n\n        return { Column: Column }\n    }\n\n    getDomain = (domainObj) =>\n    {\n        try {\n            let dm = [];\n            domainObj.map(d => {\n                if (!strLowerCase(d.domain).includes('_int'))\n                {\n                    dm.push(d.domain);\n                }\n            });\n            return dm;\n        }\n        catch (e) {\n            return [];\n        }\n    }\n    //Column DataType Formation\n    //Here we deciding Type of input for Columns\n    FormDataType = (Column, Standards) => {\n        const { Domain } = Standards;\n        let { annotationsWorkflowStatus } = this.state;\n        let HTMLCol = [\"TargetDomain\", \"TargetVariable\"];\n        //Output generation Used Target should not show here\n        let { CustomTargetDS } = MappingDatas;\n\n        let dm = JSON.stringify(Domain);\n        let domainObj = validJSON(dm);\n        domainObj = domainObj.filter(dmn => CustomTargetDS.indexOf(dmn.domain) === -1);\n        let dmObj = this.getDomain(domainObj);\n        //end\n        return Column.map((col, i) => {\n            if (HTMLCol.indexOf(col.dataIndex) !== -1) {\n                switch (col.dataIndex) {\n                    case \"TargetDomain\":\n                        return {\n                            title: col.title,\n                            data: col.dataIndex,\n                            strict: true,\n                            allowInvalid: false,\n                            filter: true,\n                            type: 'dropdown',\n                            source: [\"--Select--\", ...dmObj, \"Not Mapped\"],\n                            readOnly: !annotationPermission(annotationsWorkflowStatus)\n\n                        }\n                    case \"TargetVariable\":\n                        return {\n\n                            title: col.title,\n                            data: col.dataIndex,\n                            strict: true,\n                            filter:true,\n                            allowInvalid: false,\n                            type: 'autocomplete',\n                            source: [\"--Select--\"],\n                            readOnly: !annotationPermission(annotationsWorkflowStatus)\n                        }\n                }\n            }\n            else {\n                return {\n                    title: col.title,\n                    data: col.dataIndex,\n                    readOnly: true\n                };\n            }\n\n        });\n    }\n\n    //Form Row Data\n    FormRow = (FieldProperties, UpdatedRecFromDB) =>\n    {\n        let RowData = [];\n\n        if (FieldProperties.length > 0) {\n            let { ColConfig } = this.state;\n\n            FieldProperties.map((Fld_Prop, i) =>\n            {\n\n                //ColConfig -> This var contains the column configuration details that were given in the Meta Data config in the Activity configuration\n                //Match field properties to column configuration keys\n                ColConfig.map(ca =>\n                {\n                    let Fld_Prop_keys = Object.keys(Fld_Prop);\n                    //Match key with columnconfig\n                    let matchKey = Fld_Prop_keys.find(k => k.toLowerCase() === ca.configurationValue.toLowerCase());\n\n                    //Delete after match and use our column config columns only\n                    let matchKeyValue = Fld_Prop[matchKey];\n                    delete Fld_Prop[matchKey];\n\n                    Fld_Prop[ca.configurationName.toUpperCase()] = matchKeyValue;\n                });\n\n                //Table Update\n                    //If the record has already been updated, the updated record must be set\n                    //Update done here\n                    let is_RecFromDB = UpdatedRecFromDB.find(rec => rec.sourceDataSet === Fld_Prop.FORMOID && rec.sourceVariableName === Fld_Prop.FIELDOID);\n                    let updated = is_RecFromDB ? true : false;\n\n                    // Check is DOmain and Var from DB available for current study or not\n                    let cdiscDataStdDomainMetadataID = updated ? thisObj.GetDomain(is_RecFromDB.targetDataSet) : -1;\n                    //Is var aval in Current study\n                    let isVarAval = updated ? thisObj.GetVariable(is_RecFromDB.targetVariableName, cdiscDataStdDomainMetadataID) : -1;\n                //END For Table Update \n\n                //Additional columns are added here(TargetDomain,TargetVariable,Update,CHANGEIDENTIFIER,RecordStatus(For view Table))\n                Fld_Prop[\"TargetDomain\"] = cdiscDataStdDomainMetadataID !== -1 ? is_RecFromDB.targetDataSet : \"--Select--\" //Mandatory Column\n                Fld_Prop[\"TargetVariable\"] = isVarAval !== -1 ? is_RecFromDB.targetVariableName : \"--Select--\"; //Mandatory Column\n                Fld_Prop[\"AnnotationDataID\"] = updated ? is_RecFromDB.annotationDataID : 0; // for in db table this one is not null\n                Fld_Prop[\"Update\"] = updated; //The record for updating or creating can be found here\n                Fld_Prop[\"CHANGEIDENTIFIER\"] = false; //Those records that have been changed can be found here\n                Fld_Prop[\"RecordStatus\"] = updated ? \"Update\" : \"Create\"; \n\n                RowData.push(Fld_Prop);\n\n            });\n        }\n        return RowData;\n    }\n\n    //When TargetDomain Drop down onchange  will come here\n    //Filter TargetVariable based on domain\n    GetTargetVariable = (TargetDomainName) =>\n    {\n        if (TargetDomainName)\n        {\n            const { Standards } = thisObj.state;\n            const { Domain, Variable } = Standards;\n\n            switch (TargetDomainName)\n            {\n                case \"Not Mapped\":\n                    return [\"Not Mapped\"];\n                default:\n                {\n                    const TargetDomain = Domain.find(x => x.domain.toLowerCase() === TargetDomainName.toLowerCase());\n                    const sel_CDISCDataStdDomainMetadataID = (typeof TargetDomain === \"object\" && \"cdiscDataStdDomainMetadataID\" in TargetDomain) ? TargetDomain.cdiscDataStdDomainMetadataID :\n                            -1;\n\n   \n                    //variable based on selected domain in target domain column\n                    let variable = Variable.filter(x => x.cdiscDataStdDomainMetadataID === sel_CDISCDataStdDomainMetadataID);\n                    return [\"--Select--\", ...variable.map(va => va.variableName)];\n                }\n            }\n        }\n        else\n        {\n            return [];\n        }\n    }\n\n    //GetTableJSON\n    GetTableJSON = () =>\n    {\n        try\n        {\n            return this.hotTableComponent.current.hotInstance.getSourceData();\n        }\n        catch (e)\n        {\n            return [];\n        }\n    }\n\n    //Data Formation\n    //For Create\n    DataFormation = (data) =>\n    {\n        if (data.length > 0)\n        {\n            return data.map(da =>\n            {\n                let CDISCDataStdDomainMetadataID = thisObj.GetDomain(da.TargetDomain);\n\n                return {\n                    StudyID: getStudyID(),\n                    CRFDocumentID: 3,\n                    AnnotationText: \"Text\",\n                    CDISCDataStdDomainMetadataID: CDISCDataStdDomainMetadataID,\n                    CDISCDataStdVariableMetadataID: thisObj.GetVariable(da.TargetVariable, CDISCDataStdDomainMetadataID),\n                    SourceDataSet: da.FORMOID,\n                    SourceVariableName: da.FIELDOID,\n                    TargetDataSet: da.TargetDomain,\n                    TargetVariableName: da.TargetVariable,\n                    AnnotationDataID: da.AnnotationDataID,\n                    Update: da.Update,\n                    VicinityText: 'test',\n                    PageNumber: 0,\n                    AdditionalSourceData: \"[]\",\n                    TimeZone: \"IST\",\n                    UpdatedBy: getUserID(),\n                    UserID: getUserID(),\n                    AnnotationShape: \"MetaData\",\n                    BorderColor: \"MetaData\",\n                    BorderWidth: 0,\n                    FontSize: 0,\n                    FontStyle: \"MetaData\",\n                    FontColor: \"MetaData\",\n                    FillColor: \"MetaData\",\n                    TopCoordinate: 0,\n                    LeftCoordinate: 0,\n                    AnnotationHeight: 0,\n                    AnnotationWidth: 0\n                }\n            })\n        }\n    }\n\n    //Get Target Domain Aval\n    GetDomain = (TargetDomainName) =>\n    {\n        const { Standards } = MappingDatas;\n        const { Domain } = Standards\n\n        let Sel_Domain = isNotNull(TargetDomainName) ?\n            Domain.find(x => x.domain.toLowerCase() === TargetDomainName.toLowerCase()) : {};\n\n        return TargetDomainName === \"Not Mapped\" ? 0 : Sel_Domain ? Sel_Domain.cdiscDataStdDomainMetadataID : -1;\n    }\n\n    //is Target Variable Aval\n    GetVariable = (TargetVariableName, CDISCDataStdDomainMetadataID) =>\n    {\n        const { Standards } = MappingDatas;\n        const { Variable } = Standards\n\n        let Sel_Variable = isNotNull(TargetVariableName) ?\n            Variable.find(x => {\n                return (x.variableName.toLowerCase() === TargetVariableName.toLowerCase() &&\n                    x.cdiscDataStdDomainMetadataID === CDISCDataStdDomainMetadataID);\n            }) : null;\n\n        return TargetVariableName === \"Not Mapped\" ? 0 :\n               Sel_Variable ? Sel_Variable.cdiscDataStdVariableMetadataID : -1;\n    }\n\n    //Save\n    Save = () =>\n    {\n        let tabledata = this.GetTableJSON();\n        let UpdatedRecord = tabledata.filter(td => (td.CHANGEIDENTIFIER && td.TargetDataSet != '--Select--' && td.TargetVariable != \"--Select--\"));\n\n        if (UpdatedRecord.length > 0) {\n            thisObj.setState({ progress: \"active\" });\n\n            let data = this.DataFormation(UpdatedRecord);\n\n            PostCallWithZoneForDomainCreate(\"AnnotationData/MetaDataAnnotationCreationUpdation\", data)\n                .then(\n                    function (response)\n                    {\n                        hideProgress();\n                        if (response.status == 1)\n                        {\n                            thisObj.setState({ progress: \"success\", ShowUpdatedRecord: false });\n\n                            if (response.value && response.value.length > 0)\n                            {\n                                let warning = FormErrorIfArray(\"The following targets are already mapped. Please delete them from mapping page and try again.\", response.value, \"Remaining mapped successfully!\")\n                                warningModal(warning, () => thisObj.AfterSave());\r\n                            }\n                            else\n                            {\n                                successModalCallback(response.message, () => thisObj.AfterSave());\n                            }\n                        }\n                        else\n                        {\n                            thisObj.setState({ progress: \"exception\" });\n\n                            let notMappedList = response.value;\n                            if (notMappedList && typeof notMappedList === \"object\" && notMappedList.length > 0) {\n                                let err = FormErrorIfArray(\"The following targets have already been mapped. Please delete them from the mapping page and try again.\", response.value)\n                                errorModal(err);\r\n                            }\n                            else\n                            {\n                                errorModal(response.message);\r\n                            }\n                        }\n                    }).catch(error => error);\n        }\n        else\n        {\n            errorModal(\"no updated record\");\n        }\n    }\n\n    //Cancel\n    Cancel = () => {\n        this.props.history.push(\"/trans/project\", { openSelectedStudy: true });\n    }\n\n    AfterSave = () => {\n        const tht = this;\n        this.setState({ ShowUpdatedRecord: false }, () => {\r\n            tht.getData();\r\n        });\r\n    }\n\n    WhenDataModified = (changes, source, table) => {\n        let { PrimarySourceData } = thisObj.state;\n        let { hotTableComponent } = this;\n\n        if (source === \"edit\") {\n            const [[row, prop, oldVal, newVal]] = changes;\n\n            //Get Unmodified Source Data\n\n            let PrimaryData = validJSON(PrimarySourceData);\n\n            let t_instance = table.getInstance();\n            let tableSource = t_instance.getSourceData();\n\n            //console.log(\"row:\" + table.toPhysicalRow(row) + \"prop:\" + prop + \"oldVal:\" + oldVal + \"newVal:\" + newVal);\n\n            let phy_row = table.toPhysicalRow(row);\n            switch (prop)\n            {\n                case \"TargetDomain\":\n\n                    if (PrimaryData[phy_row][prop] !== newVal && newVal !== \"--Select--\")\n                    {\n                        tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = true;\n                    }\n                    else\n                    {\n                        tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = false;\n                    }\n                    break;\n\n                case \"TargetVariable\":\n                    let domain_col_num = t_instance.propToCol(\"TargetDomain\");\n                    let domain_col_val = t_instance.getDataAtCell(row, domain_col_num);\n                    if ((PrimaryData[phy_row][prop] !== newVal && newVal !== \"--Select--\") ||\n                        PrimaryData[phy_row][\"TargetDomain\"] !== domain_col_val)\n                    {\n                        tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = true;\n                    }\n                    else\n                    {\n                        tableSource[table.toPhysicalRow(row)][\"CHANGEIDENTIFIER\"] = false;\n                    }\n                    break;\n            }\n            \n        }\n    }\n\n    GetTableInstance = (ht_component) =>\n    {\n        try\n        {\n            return ht_component.current.hotInstance.getSourceData()\n        }\n        catch (e)\n        {\n            //console.log(e);\n            return [];\n        }\n    }\n\n    ShowUpdatedRecord = () =>\n    {\n\n        let { hotTableComponent } = this;\n\n        let getUpdatedData = this.GetTableInstance(hotTableComponent);\n\n        thisObj.setState({ ShowUpdatedRecord: true, UpdatedRecord: getUpdatedData.filter(upd => (upd.CHANGEIDENTIFIER && upd.TargetDataSet != '--Select--' && upd.TargetVariable != \"--Select--\")) });\n    }\n\n    //Fn Prediction \n    //Single Prediction\n    //Row right click and then click Predict text\n    //Function To Predict Target For Single Source\n    FnToPredictTarFrSingleSrc = (rownum, sel_rec) => {\n        let { hotTableComponent } = thisObj;\n        let hTable = hotTableComponent.current.hotInstance;\n\n        showProgress();\n        CallServerPost('Py/GetPrediction',\n            {\n                text: sel_rec.PRETEXT, variable: sel_rec.FORMOID + \".\" + sel_rec.FIELDOID\n            }).then(function (res) {\n                hideProgress();\n\n                let { status, value } = res;\n                if (status === 1) {\n                    //value from controller is like {0:\"DOMIAN.Vraiable\"} from this get only \"DOMIAN.Vraiable\"\n                    //IF controller return value is  {0:\"DROP\"} ? no prediction : show the prdicted value\n                    // following check for above two condn \n                    if (value &&\n                        typeof value === \"object\" &&\n                        Object.keys(value).length > 0 &&\n                        value[0] && typeof value[0] === \"string\" &&\n                        value[0].toLowerCase() !== \"drop\") {\n                        //split control return {0:\"DOMIAN.Vraiable\"}\n                        let target = value[0].split(\".\");\n                        let domain = target[0];\n                        let variable = target[1];\n\n                        let isDomainID = thisObj.GetDomain(domain);\n                        let isDomainVariableID = thisObj.GetVariable(variable, isDomainID);\n\n\n                        if (isDomainID !== -1 && isDomainVariableID !== -1)\n                        {\n\n                            let data = hTable.getSourceDataAtRow(rownum);\n                            let { PrimarySourceData } = thisObj.state;\n\n                            let PrimaryData = validJSON(PrimarySourceData);\n\n                            if (PrimaryData[rownum][\"TargetDomain\"] !== target[0] || PrimaryData[rownum][\"TargetVariable\"] !== target[1]) {\n                                data.CHANGEIDENTIFIER = true;\n                            }\n                            else\n                            {\n                                data.CHANGEIDENTIFIER = false;\n                            }\n\n                            data.TargetDomain = target[0]\n                            hTable.setCellMeta(hTable.toVisualRow(rownum), hTable.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(target[0]));\n\n                            data.TargetVariable = target[1]\n                            ////Set the predicted target\n                            //hTable.setDataAtRowProp(hTable.toVisualRow(rownum), \"TargetDomain\", target[0]);\n                            //hTable.setCellMeta(hTable.toVisualRow(rownum), hTable.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(target[0]));\n\n                            hTable.render();\n\n                            return;\n                        }\n                    }\n                }\n\n                errorModal(\"No Prediction available for \" + sel_rec.FORMOID + \".\" + sel_rec.FIELDOID);\n            });\n    }\n\n    //Multiple Prediction \n    FnToPredictTarFrMulSrc = () => {\n        //for err identification\n        let err = true;\n\n        let { hotTableComponent } = thisObj;\n        let { filteredData } = thisObj.state;\n        let hTable = hotTableComponent.current.hotInstance;\n\n        //Form DATA FOR CONTROLLER\n        //GET ALL THE RECORD ONLY IF TARGET DOMAIN , VARIABLE AND PRETEXT IS EMPTY\n        let record = [];\n        filteredData.map((rec, rownum) => {\n            if (rec.TargetDomain === \"--Select--\" && rec.TargetVariable === \"--Select--\" && isNotNull(rec.PRETEXT)) {\n\n                 record.push({\n                    text: rec.PRETEXT,\n                    variable: rec.FORMOID + \".\" + rec.FIELDOID,\n                    rownum: rownum\n                });\n            }\n        });\n\n        //FOR PROGRESS BAR\n        //HERE THE RECORD IS NOW SPLIT BY \"@TIME\" Variable\n        //CALCULATION EX 'time' VAR IS 50 & TOTLA RECORD = 1080 ? 1080 / 50 = 22 TIMES WE HAVE TO LOOP AND SEND TO CONTROLLER \n        let time = 50;\n        let rec_count = record.length;\n\n        //LOOP VAR USED TO LOOP \n        //CALCULATION EX 'time' VAR IS 50 & TOTLA RECORD = 1080 ? 1080 / 50 = 22 TIMES WE HAVE TO LOOP AND SEND TO CONTROLLER \n        let loop = rec_count / time;\n        loop = Math.ceil(loop);\n        //END LOOP CALCULATION\n\n        // @'i' VARIABLE USED TO STORE CURRENT LOOP NUM\n        let loopNum = 0;\n\n        //Progress start\n        thisObj.setState({ progressBarfullyUI: { percent: 0, status: \"active\", progress: true } });\n\n        MultiplePrediction(loopNum);\n\n        function MultiplePrediction(loopNum)\n        {\n            let filter_next_set_of_record_by_num_of_times = [];\n\n            new Promise((resolve, reject) =>\n            {\n                //here times is 50\n\n                let fltr_rec_from = (loopNum * time);\n                let fltr_rec_to = time * (loopNum + 1);\n\n                filter_next_set_of_record_by_num_of_times = record.slice(fltr_rec_from, fltr_rec_to);\n\n                if (filter_next_set_of_record_by_num_of_times.length > 0) {\n\n                    GetPredictionFromController(filter_next_set_of_record_by_num_of_times, resolve);\n                }\n                else\n                {\n                    reject();\n                }\n            }).then(() =>\n            {\n                //Scroll to the upcoming prediction column\n                let hTable = hotTableComponent.current.hotInstance;\n                filter_next_set_of_record_by_num_of_times.length > 0 && hTable.scrollViewportTo(filter_next_set_of_record_by_num_of_times[0].rownum, 0);\n                //END\n\n                //count the loop\n                loopNum++;\n\n                let percentage = rec_count < time ? 100 : ((time * loopNum) / rec_count) * 100;\n\n                if (loopNum < loop) {\n                    thisObj.setState({ progressBarfullyUI: { percent: Math.ceil(percentage), status: \"active\", progress: true } })\n                    MultiplePrediction(loopNum);\n                }\n                else {\n\n                    thisObj.setState({ progressBarfullyUI: { percent: Math.ceil(percentage), status: \"active\", progress: true } });\n                    setTimeout(() => {\n                        thisObj.setState({ progressBarfullyUI: { progress: false } })\n\n                    }, 300);\n\n                    err && errorModal(\"No Prediction's are available\");\n\n                }\n\n            }).catch(() =>\n            {\n                thisObj.setState({ progressBarfullyUI: { progress: false } })\n\n                err && errorModal(\"No Prediction's are available\");\n\n            });\n        }\n\n        function GetPredictionFromController(records, resolve) {\n            CallServerPost('Py/GetMultiplePrediction', { predict: records }).then(function (res)\n            {\n                let { status, value } = res;\n\n\n                if (status === 1 && isArray(value))\n                {\n                    value.map(va => {\n                        //Predicted obj\n                        let { pred, rownum } = va;\n\n                        let target = isNotNull(pred) ? pred.split(\".\") : [];\n\n                        let domain = target[0];\n                        let variable = target[1];\n\n                        //Check predicted target Domain and variable's from controller are available for current study or not\n                        let isDomainID = thisObj.GetDomain(domain);\n                        let isDomainVariableID = thisObj.GetVariable(variable, isDomainID);\n\n                        //Check predicted target Domain and variable's from controller are available or not\n                        if (isDomainID !== -1 && isDomainVariableID !== -1) {\n\n                            rownum = hTable.toPhysicalRow(rownum)\n                            let data = hTable.getSourceDataAtRow(rownum);\n\n                            let { PrimarySourceData } = thisObj.state;\n\n                            let PrimaryData = validJSON(PrimarySourceData);\n\n                            if (PrimaryData[rownum][\"TargetDomain\"] !== target[0] || PrimaryData[rownum][\"TargetVariable\"] !== target[1])\n                            {\n                                data.CHANGEIDENTIFIER = true;\n                            }\n                            else {\n                                data.CHANGEIDENTIFIER = false;\n                            }\n                            data.TargetDomain = target[0]\n                            data.TargetVariable = target[1]\n                            ////Set the predicted target\n                            //hTable.setDataAtRowProp(rownum, \"TargetDomain\", target[0]);\n                            //hTable.setDataAtRowProp(rownum, \"TargetVariable\", target[1]);\n                            err = false;\n                        }\n                    });\n\n                    resolve();\n                }\n                else {\n                    resolve();\n                }\n            });\n        }\n    }\n\n    //keep modal\n\n    onKeep = (event, colindex) => {\n\n        let { selColumn, orgColumnAndDataType} = this.state;\n\n        if (!event.target.checked && selColumn.length === orgColumnAndDataType.length - 1)\n        {\n            errorModal(\"Please select any one column\");\n        }\n        else if (event.target.checked)\n        {\n            this.setState((state) => {\n                let selColumn = state.selColumn.filter(x => x !== colindex);\n                return ({\n                    selColumn: selColumn\n                })\n            });\n\n        }\n        else\n        {\n            this.setState((state) => {\n                return ({\n                    selColumn: [...state.selColumn, colindex]\n                })\n            });\n           \n\n        }\n      \n    }\n    //keep modal\n    fnModalOnOk = () =>\n    {\n        let { selColumn, hiddenColumn, ColumnAndDataType, orgColumnAndDataType } = this.state;\n        if (selColumn.length === orgColumnAndDataType.length)\n        {\n            errorModal(\"Please select any one column\");\n            return;\n        }\n        let columnAndDataType = orgColumnAndDataType.filter((x, index) => selColumn.indexOf(index) === -1);\n        this.setState({ hiddenColumn: selColumn, showColKeepResetModal: false, ColumnAndDataType: columnAndDataType})\n    }\n\n    /*height*/\n    getHeight = () =>\n    {\n        let { RowData, showHeader} = this.state;\n        return RowData.length !== 0 && showHeader ? \"calc(100vh - 213px)\" :\n               RowData.length !== 0 && !showHeader ? \"calc(100vh - 168px)\" :\n               0 \n    }\n    render()\n    {\n        const {\n                Column,\n                showHeader,\n                selColumn,\n                hiddenColumn,\n                progressBarfullyUI,\n                activityDetails,\n                RowData,\n                ColumnAndDataType,\n                UpdatedRecord,\n                progress,\n            annotationsWorkflowStatus,\n            orgColumnAndDataType,\n            ShowUpdatedRecord,\n            loading\n\n        } = this.state;\n        return (\n            <LayoutWrapper id=\"treeview_layout\" >\n\n                <Box className={\"metadataAnnotBox\"}>\n\n                    {showHeader &&\n                        <Row style={{ display: \"flex\", flexDirection: \"column\" }}>\n                            <Col className=\"site-layout-background\" span={24} >\n                            <ContentTab\n                                    backBtn={ false}\n                                    projectInActive={this.props.projectInActive}\n                                    history={this.props.history}\n                                    projectStudyLockStatus={this.props.projectStudyLockStatus}\n                                    fromDashboard={this.props.fromDashboard}\n                                    actidetails={activityDetails}\n                                />\n                            </Col>\n                        </Row>\n                    }\n                    {RowData.length !== 0 && <Row className=\"site-layout-background\">\n                        <Col className={\"site-layout-background\"} style={{ padding: \"5px 10px 10px 10px\" }}>\n                            <>\n                                <Button name=\"TableAdd\" type={\"default\"} style={{ height: \"27px\", margin: \"0px 5px 0px 0px\" }} onClick={() => this.setState({ showColKeepResetModal: true })} >\n                                    Keep\n                                </Button>\n                                <Button name=\"Reset\" className=\"resetbtn\" onClick={() => this.setState({ selColumn: [], hiddenColumn: [], ColumnAndDataType: orgColumnAndDataType })} >\n                                    Reset\n                                </Button>\n                                <Icon\n                                    className=\"metaAnnotArrow\"\n                                    theme=\"filled\"\n                                    type={showHeader ? \"up-circle\" : \"down-circle\"}\n                                    onClick={() => this.setState({ showHeader: !showHeader })}\n                                />\n\n                            </>\n                        </Col>\n                    </Row>\n                    }\n                    <Row style={{ display: \"flex\", flexDirection: \"column\", height: RowData.length !== 0 ? '100%' : 0 }}>\n                        <Col className={\"AnnotStyle site-layout-background\"} style={{ height: \"100%\" }}>\n                            <div style={{ padding: \"0px 10px 10px 10px\", height: this.getHeight()}}>\n                                <HotTable\n                                    id=\"MetaDataAnnotation_Table\"\n                                    className={\"MetaDataAnnotation_Table_TD\"}\n                                    height={RowData.length > 0 ? \"100%\" : \"50px\"}\n                                    licenseKey=\"non-commercial-and-evaluation\"\n                                    viewportRowRenderingOffsetnumber={10}\n                                    ref={this.hotTableComponent}\n                                    settings=\n                                    {\n                                        {\n                                            wordWrap: true,\n                                            stretchH: 'all',\n                                            data: RowData,\n                                            columns: ColumnAndDataType,\n                                            height: 400,\n                                            fillHandle: false,\n                                            filters: true,\n                                            hiddenColumns:\n                                            {\n                                                // specify columns hidden by default\n                                                columns: hiddenColumn\n                                            },\n                                            colWidths: function (index) {\n                                                let instance = thisObj.hotTableComponent.current.hotInstance;\n                                                let allHeader = instance.getColHeader();\n                                                if (allHeader.indexOf(\"SECTION\") === index ||\n                                                    allHeader.indexOf(\"PRETEXT\") === index ||\n                                                    allHeader.indexOf(\"FORMNAME\") === index) {\n                                                    return 300;\n                                                } else {\n                                                    return 200;\n                                                }\n                                            },\n                                            afterFilter: function (filter)\n                                            {\n                                                let filteredVal = this.getPlugin('trimRows').rowsMapper._arrayMap.map(r => this.getSourceDataAtRow(r))\n\n                                                thisObj.setState({ filteredData: filteredVal})\n                                            },\n                                            beforeKeyDown: function (e)\n                                            {\n                                                e.stopPropagation();\n                                                let cell = this.getSelected();\n                                                if (cell && cell.length > 0)\n                                                {\n                                                    let [row, col] = [...cell[0]];\n\n                                                    if (this.propToCol(\"TargetDomain\") === col ||\n                                                        this.propToCol(\"TargetVariable\") === col)\n                                                    {\n                                                        this.setCellMeta(row, col, \"type\", \"autocomplete\")\n                                                        this.setCellMeta(row, col, \"filter\", true);\n                                                        this.setCellMeta(row, col, \"strict\", true);\n                                                    }\n                                                }\n                                            },\n                                            beforeOnCellMouseDown: function (e, coords) {\n                                                e.preventDefault();\n\n                                                if (coords && coords.row != undefined && coords.col != undefined) {\n                                                    let {row, col\n                                                        }= coords;\n\n                                                    if (this.propToCol(\"TargetDomain\") === col ||\n                                                        this.propToCol(\"TargetVariable\") === col)\n                                                    {\n                                                        this.setCellMeta(row, col, \"type\", \"dropdown\");\n                                                        this.setCellMeta(row, col, \"filter\", false);\n                                                    }\n                                                }\n                                            },\n                                            dropdownMenu: ['filter_by_condition', 'filter_by_value', 'filter_action_bar'],\n                                            contextMenu: {\n                                                items: {\n                                                    \"Predict_Text\": {\n\n                                                        name: 'Predict Text',\n                                                        callback: function (action, rowArray, b, c) {\n                                                            let sel_row = this.getSelectedLast();\n\n                                                            let [row] = [...sel_row];\n                                                            row = this.toPhysicalRow(row);\n\n                                                            //get row data\n                                                            let rowData = this.getSourceDataAtRow(row);\n                                                            //Call Predict_Text Fn\n                                                            thisObj.FnToPredictTarFrSingleSrc(row, rowData);\n                                                        },\n                                                        hidden: function () {\n\n                                                            //Hidden Predict text option while Multiple row selection\n                                                            let getSelectedRange = this.getSelectedRangeLast();\n                                                            if (getSelectedRange) {\n                                                                let getSelectedRows = getSelectedRange;\n                                                                let { from, to } = getSelectedRows;\n\n                                                                if (from.row !== to.row) {\n                                                                    //if row selection mismatch hidden menu\n                                                                    return true;\n                                                                } else {\n\n\n                                                                    //select whole row when we right click\n                                                                    this.selectRows(to.row);\n                                                                }\n                                                            }\n\n                                                            if (!this.getSelected() || !annotationPermission(annotationsWorkflowStatus)) {\n                                                                return true;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            afterChange: function (changes, source)\n                                            {\n                                                if (changes) {\n                                                    //console.log(changes)\n                                                    const [[row, prop, oldVal, newVal]] = changes;\n                                                    if (prop === \"TargetDomain\" && oldVal !== newVal)\n                                                    {\n\n                                                        this.setCellMeta(row, this.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(newVal));\n\n                                                        if (newVal === \"Not Mapped\")\n                                                        {\n                                                            this.setDataAtRowProp(row, \"TargetVariable\", \"Not Mapped\");\n                                                        }\n\n                                                    }\n                                                \n                                                }\n                                                //Track change identifier\n                                                thisObj.WhenDataModified(changes, source, this);\n                                            },\n                                            beforeChange: function (changes, source)\n                                            {\n                                                const [[row, prop, oldVal, newVal]] = changes;\n\n                                                let instance = this.getInstance();\n\n                                                if (prop === \"TargetDomain\" && oldVal !== newVal)\n                                                {\n                                                    //set dropdown data based on Targetdomain\n                                                    this.setCellMeta(row, this.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(newVal));\n\n                                                    if (newVal !== \"Not Mapped\")\n                                                    {\n\n                                                        let data = this.getSourceDataAtRow(this.toPhysicalRow(row));\n\n\n                                                        data.TargetVariable = \"--Select--\"\n                                                        this.render();\n                                                        //this.setDataAtRowProp(row, \"TargetVariable\", \"--Select--\");\n                                                    }\n                                    \n                                                }\n\n                                            },\n                                            cells: function (physicalRow, physicalcolumn, prop)\n                                            {\n                                                if (prop === \"TargetVariable\")\n                                                {\n                                                    let ht = thisObj.hotTableComponent.current.hotInstance;\n                                                    const cellProperties = {};\n                                                    //visualRowIndex\n                                                    const row = this.instance.toVisualRow(physicalRow);\n                                                    //visualColIndex\n                                                    const col = this.instance.toVisualColumn(physicalcolumn);\n\n                                                    //IF No Prediction ? make variable readonly\n                                                    if (ht.getDataAtCell(row, ht.propToCol(\"TargetDomain\")) === \"Not Mapped\" ||\n                                                        ht.getDataAtCell(row, col) === \"Not Mapped\")\n                                                    {\n                                                        cellProperties.className = \"ht_readonly\";\n                                                        cellProperties.readOnly = true;\n                                                    }\n                                                    else\n                                                    {\n                                                        //Load dependency dropdown\n                                                        //This is usefull for reload\n                                                        let TargetDomainOfTheRow = ht.getDataAtCell(row, ht.propToCol(\"TargetDomain\"))\n\n                                                        ht.setCellMeta(row, ht.propToCol(\"TargetVariable\"), 'source', thisObj.GetTargetVariable(TargetDomainOfTheRow));\n\n                                                        cellProperties.readOnly = annotationPermission(annotationsWorkflowStatus) ? false : true;\n                                                        cellProperties.className = \"ht_not_readonly\";\n\n                                                    }\n\n                                                    return cellProperties;\n                                                }\n\n                                            }\n                                        }\n                                    }\n                                />\n                                {/*<div id=\"MetaDataNoFilter\" style={{ display: RowData.length > 0 ? \"none\" : \"block\" }}>No data available</div>*/}\n                            </div>\n                        </Col>\n                    </Row>\n                    {\n                        RowData.length === 0 && <Empty description={loading === \"loading\" ? \"Progressing\" : \"No Data\"} />\n                    }\n                    {RowData.length > 0 && <Row className=\"site-layout-background\">\n                        <Col className={\"site-layout-background\"} style={{ padding: \"0px 10px\" }}>\n                            <Button name=\"Cancel\" type=\"danger\" onClick={() => this.Cancel()}>\n                                Cancel\n                            </Button>\n\n                            {\n                                annotationPermission(annotationsWorkflowStatus) &&\n                                <>\n                                  <Button name=\"Add\" style={{ float: \"right\" }} className=\"saveBtn\" onClick={() => this.ShowUpdatedRecord()} >\n                                        Save\n                                  </Button>\n                                    <Button name=\"Predict\" style={{ float: \"right\", marginRight: 5 }} type=\"primary\" onClick={this.FnToPredictTarFrMulSrc} >\n                                        Predict All\n                                  </Button>\n                                </>\n                            }\n\n                        </Col>\n                    </Row>}\n                </Box>\n                {ShowUpdatedRecord &&\n                    <ViewUpdatedRecord\n                        Column={Column}\n                        DataType={orgColumnAndDataType}\n                        Row={UpdatedRecord}\n                        Show={ShowUpdatedRecord}\n                        Ok={() => this.Save()}\n                        Cancel={() => this.setState({ ShowUpdatedRecord: false })}\n                    />}\n                {<Progress progress={progress} NoInitialPercent={true} />}\n                { <ProgressBarFullyUI {...progressBarfullyUI} />}\n                <Modal\n                    title=\"Keep\"\n                    visible={this.state.showColKeepResetModal}\n                    width={300}\n                    style={{top:10}}\n                    onCancel={this.fnModalOnOk}\n                    footer={[\n\n                        <Row justify=\"end\">\n\n                            <Button name=\"ok\"\n                                key=\"ok\"\n                                className=\"saveBtn\"\n                                onClick={this.fnModalOnOk} style={{ width: 80 }}>\n                                      OK\n                            </Button>\n                        </Row>,\n                    ]}\n                >\n                    <a className={\"aTagInMetaAnnot\"} onClick={() => this.setState({ selColumn: [] })}>Select All</a>\n                    <a className={\"aTagInMetaAnnot\"} onClick={() => this.setState({ selColumn: (orgColumnAndDataType || []).map(({ title }, index) => index) })}>Clear</a>\n                    <ul>\n\n                        {(orgColumnAndDataType || []).map(({ title }, index) => (\n                            <li>\n                                <label>\n                                    <Checkbox\n                                        type=\"checkbox\"\n                                        name={title}\n                                        style={{ pointerEvents: \"auto\" }}\n                                        checked={selColumn.indexOf(index) === -1}\n                                        onChange={(e) => {  this.onKeep(e, index) }}\n                                    >\n                                        {title}\n                                    </Checkbox>\n                                </label>\n                            </li>\n                        ))}\n                    </ul>\n\n                </Modal>\n            </LayoutWrapper>\n\n        )\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}