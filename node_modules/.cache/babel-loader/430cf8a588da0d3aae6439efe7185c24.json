{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n/*\r\n * This module only exports 'compile' which compiles a JSON language definition\r\n * into a typed and checked ILexer definition.\r\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\r\n * Type helpers\r\n *\r\n * Note: this is just for sanity checks on the JSON description which is\r\n * helpful for the programmer. No checks are done anymore once the lexer is\r\n * already 'compiled and checked'.\r\n *\r\n */\nfunction isArrayOf(elemType, obj) {\n  if (!obj) {\n    return false;\n  }\n  if (!Array.isArray(obj)) {\n    return false;\n  }\n  for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {\n    var el = obj_1[_i];\n    if (!elemType(el)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction bool(prop, defValue) {\n  if (typeof prop === 'boolean') {\n    return prop;\n  }\n  return defValue;\n}\nfunction string(prop, defValue) {\n  if (typeof prop === 'string') {\n    return prop;\n  }\n  return defValue;\n}\nfunction arrayToHash(array) {\n  var result = {};\n  for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n    var e = array_1[_i];\n    result[e] = true;\n  }\n  return result;\n}\nfunction createKeywordMatcher(arr, caseInsensitive) {\n  if (caseInsensitive === void 0) {\n    caseInsensitive = false;\n  }\n  if (caseInsensitive) {\n    arr = arr.map(function (x) {\n      return x.toLowerCase();\n    });\n  }\n  var hash = arrayToHash(arr);\n  if (caseInsensitive) {\n    return function (word) {\n      return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n    };\n  } else {\n    return function (word) {\n      return hash[word] !== undefined && hash.hasOwnProperty(word);\n    };\n  }\n}\n// Lexer helpers\n/**\r\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\r\n * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n */\nfunction compileRegExp(lexer, str) {\n  var n = 0;\n  while (str.indexOf('@') >= 0 && n < 5) {\n    // at most 5 expansions\n    n++;\n    str = str.replace(/@(\\w+)/g, function (s, attr) {\n      var sub = '';\n      if (typeof lexer[attr] === 'string') {\n        sub = lexer[attr];\n      } else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n        sub = lexer[attr].source;\n      } else {\n        if (lexer[attr] === undefined) {\n          throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n        } else {\n          throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n        }\n      }\n      return monarchCommon.empty(sub) ? '' : '(?:' + sub + ')';\n    });\n  }\n  return new RegExp(str, lexer.ignoreCase ? 'i' : '');\n}\n/**\r\n * Compiles guard functions for case matches.\r\n * This compiles 'cases' attributes into efficient match functions.\r\n *\r\n */\nfunction selectScrutinee(id, matches, state, num) {\n  if (num < 0) {\n    return id;\n  }\n  if (num < matches.length) {\n    return matches[num];\n  }\n  if (num >= 100) {\n    num = num - 100;\n    var parts = state.split('.');\n    parts.unshift(state);\n    if (num < parts.length) {\n      return parts[num];\n    }\n  }\n  return null;\n}\nfunction createGuard(lexer, ruleName, tkey, val) {\n  // get the scrutinee and pattern\n  var scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n  var oppat = tkey;\n  var matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n  if (matches) {\n    if (matches[3]) {\n      // if digits\n      scrut = parseInt(matches[3]);\n      if (matches[2]) {\n        scrut = scrut + 100; // if [sS] present\n      }\n    }\n\n    oppat = matches[4];\n  }\n  // get operator\n  var op = '~';\n  var pat = oppat;\n  if (!oppat || oppat.length === 0) {\n    op = '!=';\n    pat = '';\n  } else if (/^\\w*$/.test(pat)) {\n    // just a word\n    op = '==';\n  } else {\n    matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n    if (matches) {\n      op = matches[1];\n      pat = matches[2];\n    }\n  }\n  // set the tester function\n  var tester;\n  // special case a regexp that matches just words\n  if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n    var inWords_1 = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n    tester = function tester(s) {\n      return op === '~' ? inWords_1(s) : !inWords_1(s);\n    };\n  } else if (op === '@' || op === '!@') {\n    var words = lexer[pat];\n    if (!words) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n    }\n    if (!isArrayOf(function (elem) {\n      return typeof elem === 'string';\n    }, words)) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n    }\n    var inWords_2 = createKeywordMatcher(words, lexer.ignoreCase);\n    tester = function tester(s) {\n      return op === '@' ? inWords_2(s) : !inWords_2(s);\n    };\n  } else if (op === '~' || op === '!~') {\n    if (pat.indexOf('$') < 0) {\n      // precompile regular expression\n      var re_1 = compileRegExp(lexer, '^' + pat + '$');\n      tester = function tester(s) {\n        return op === '~' ? re_1.test(s) : !re_1.test(s);\n      };\n    } else {\n      tester = function tester(s, id, matches, state) {\n        var re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n        return re.test(s);\n      };\n    }\n  } else {\n    // if (op==='==' || op==='!=') {\n    if (pat.indexOf('$') < 0) {\n      var patx_1 = monarchCommon.fixCase(lexer, pat);\n      tester = function tester(s) {\n        return op === '==' ? s === patx_1 : s !== patx_1;\n      };\n    } else {\n      var patx_2 = monarchCommon.fixCase(lexer, pat);\n      tester = function tester(s, id, matches, state, eos) {\n        var patexp = monarchCommon.substituteMatches(lexer, patx_2, id, matches, state);\n        return op === '==' ? s === patexp : s !== patexp;\n      };\n    }\n  }\n  // return the branch object\n  if (scrut === -1) {\n    return {\n      name: tkey,\n      value: val,\n      test: function test(id, matches, state, eos) {\n        return tester(id, id, matches, state, eos);\n      }\n    };\n  } else {\n    return {\n      name: tkey,\n      value: val,\n      test: function test(id, matches, state, eos) {\n        var scrutinee = selectScrutinee(id, matches, state, scrut);\n        return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n      }\n    };\n  }\n}\n/**\r\n * Compiles an action: i.e. optimize regular expressions and case matches\r\n * and do many sanity checks.\r\n *\r\n * This is called only during compilation but if the lexer definition\r\n * contains user functions as actions (which is usually not allowed), then this\r\n * may be called during lexing. It is important therefore to compile common cases efficiently\r\n */\nfunction compileAction(lexer, ruleName, action) {\n  if (!action) {\n    return {\n      token: ''\n    };\n  } else if (typeof action === 'string') {\n    return action; // { token: action };\n  } else if (action.token || action.token === '') {\n    if (typeof action.token !== 'string') {\n      throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n    } else {\n      // only copy specific typed fields (only happens once during compile Lexer)\n      var newAction = {\n        token: action.token\n      };\n      if (action.token.indexOf('$') >= 0) {\n        newAction.tokenSubst = true;\n      }\n      if (typeof action.bracket === 'string') {\n        if (action.bracket === '@open') {\n          newAction.bracket = 1 /* Open */;\n        } else if (action.bracket === '@close') {\n          newAction.bracket = -1 /* Close */;\n        } else {\n          throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n        }\n      }\n      if (action.next) {\n        if (typeof action.next !== 'string') {\n          throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n        } else {\n          var next = action.next;\n          if (!/^(@pop|@push|@popall)$/.test(next)) {\n            if (next[0] === '@') {\n              next = next.substr(1); // peel off starting @ sign\n            }\n\n            if (next.indexOf('$') < 0) {\n              // no dollar substitution, we can check if the state exists\n              if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n              }\n            }\n          }\n          newAction.next = next;\n        }\n      }\n      if (typeof action.goBack === 'number') {\n        newAction.goBack = action.goBack;\n      }\n      if (typeof action.switchTo === 'string') {\n        newAction.switchTo = action.switchTo;\n      }\n      if (typeof action.log === 'string') {\n        newAction.log = action.log;\n      }\n      if (typeof action.nextEmbedded === 'string') {\n        newAction.nextEmbedded = action.nextEmbedded;\n        lexer.usesEmbedded = true;\n      }\n      return newAction;\n    }\n  } else if (Array.isArray(action)) {\n    var results = [];\n    for (var i = 0, len = action.length; i < len; i++) {\n      results[i] = compileAction(lexer, ruleName, action[i]);\n    }\n    return {\n      group: results\n    };\n  } else if (action.cases) {\n    // build an array of test cases\n    var cases_1 = [];\n    // for each case, push a test function and result value\n    for (var tkey in action.cases) {\n      if (action.cases.hasOwnProperty(tkey)) {\n        var val = compileAction(lexer, ruleName, action.cases[tkey]);\n        // what kind of case\n        if (tkey === '@default' || tkey === '@' || tkey === '') {\n          cases_1.push({\n            test: undefined,\n            value: val,\n            name: tkey\n          });\n        } else if (tkey === '@eos') {\n          cases_1.push({\n            test: function test(id, matches, state, eos) {\n              return eos;\n            },\n            value: val,\n            name: tkey\n          });\n        } else {\n          cases_1.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n        }\n      }\n    }\n    // create a matching function\n    var def_1 = lexer.defaultToken;\n    return {\n      test: function test(id, matches, state, eos) {\n        for (var _i = 0, cases_2 = cases_1; _i < cases_2.length; _i++) {\n          var _case = cases_2[_i];\n          var didmatch = !_case.test || _case.test(id, matches, state, eos);\n          if (didmatch) {\n            return _case.value;\n          }\n        }\n        return def_1;\n      }\n    };\n  } else {\n    throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n  }\n}\n/**\r\n * Helper class for creating matching rules\r\n */\nvar Rule = /** @class */function () {\n  function Rule(name) {\n    this.regex = new RegExp('');\n    this.action = {\n      token: ''\n    };\n    this.matchOnlyAtLineStart = false;\n    this.name = '';\n    this.name = name;\n  }\n  Rule.prototype.setRegex = function (lexer, re) {\n    var sregex;\n    if (typeof re === 'string') {\n      sregex = re;\n    } else if (re instanceof RegExp) {\n      sregex = re.source;\n    } else {\n      throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n    }\n    this.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === '^';\n    this.name = this.name + ': ' + sregex;\n    this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n  };\n  Rule.prototype.setAction = function (lexer, act) {\n    this.action = compileAction(lexer, this.name, act);\n  };\n  return Rule;\n}();\n/**\r\n * Compiles a json description function into json where all regular expressions,\r\n * case matches etc, are compiled and all include rules are expanded.\r\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n * regular expression objects and functions that get called during lexing.\r\n * (Currently we have no samples that need this so perhaps we should always have\r\n * jsonStrict to true).\r\n */\nexport function compile(languageId, json) {\n  if (!json || typeof json !== 'object') {\n    throw new Error('Monarch: expecting a language definition object');\n  }\n  // Create our lexer\n  var lexer = {};\n  lexer.languageId = languageId;\n  lexer.noThrow = false; // raise exceptions during compilation\n  lexer.maxStack = 100;\n  // Set standard fields: be defensive about types\n  lexer.start = typeof json.start === 'string' ? json.start : null;\n  lexer.ignoreCase = bool(json.ignoreCase, false);\n  lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n  lexer.defaultToken = string(json.defaultToken, 'source');\n  lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n  // For calling compileAction later on\n  var lexerMin = json;\n  lexerMin.languageId = languageId;\n  lexerMin.ignoreCase = lexer.ignoreCase;\n  lexerMin.noThrow = lexer.noThrow;\n  lexerMin.usesEmbedded = lexer.usesEmbedded;\n  lexerMin.stateNames = json.tokenizer;\n  lexerMin.defaultToken = lexer.defaultToken;\n  // Compile an array of rules into newrules where RegExp objects are created.\n  function addRules(state, newrules, rules) {\n    for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\n      var rule = rules_1[_i];\n      var include = rule.include;\n      if (include) {\n        if (typeof include !== 'string') {\n          throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n        }\n        if (include[0] === '@') {\n          include = include.substr(1); // peel off starting @\n        }\n\n        if (!json.tokenizer[include]) {\n          throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n        }\n        addRules(state + '.' + include, newrules, json.tokenizer[include]);\n      } else {\n        var newrule = new Rule(state);\n        // Set up new rule attributes\n        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n          newrule.setRegex(lexerMin, rule[0]);\n          if (rule.length >= 3) {\n            if (typeof rule[1] === 'string') {\n              newrule.setAction(lexerMin, {\n                token: rule[1],\n                next: rule[2]\n              });\n            } else if (typeof rule[1] === 'object') {\n              var rule1 = rule[1];\n              rule1.next = rule[2];\n              newrule.setAction(lexerMin, rule1);\n            } else {\n              throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n            }\n          } else {\n            newrule.setAction(lexerMin, rule[1]);\n          }\n        } else {\n          if (!rule.regex) {\n            throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n          }\n          if (rule.name) {\n            if (typeof rule.name === 'string') {\n              newrule.name = rule.name;\n            }\n          }\n          if (rule.matchOnlyAtStart) {\n            newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n          }\n          newrule.setRegex(lexerMin, rule.regex);\n          newrule.setAction(lexerMin, rule.action);\n        }\n        newrules.push(newrule);\n      }\n    }\n  }\n  // compile the tokenizer rules\n  if (!json.tokenizer || typeof json.tokenizer !== 'object') {\n    throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n  }\n  lexer.tokenizer = [];\n  for (var key in json.tokenizer) {\n    if (json.tokenizer.hasOwnProperty(key)) {\n      if (!lexer.start) {\n        lexer.start = key;\n      }\n      var rules = json.tokenizer[key];\n      lexer.tokenizer[key] = new Array();\n      addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n    }\n  }\n  lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n  // Set simple brackets\n  if (json.brackets) {\n    if (!Array.isArray(json.brackets)) {\n      throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n    }\n  } else {\n    json.brackets = [{\n      open: '{',\n      close: '}',\n      token: 'delimiter.curly'\n    }, {\n      open: '[',\n      close: ']',\n      token: 'delimiter.square'\n    }, {\n      open: '(',\n      close: ')',\n      token: 'delimiter.parenthesis'\n    }, {\n      open: '<',\n      close: '>',\n      token: 'delimiter.angle'\n    }];\n  }\n  var brackets = [];\n  for (var _i = 0, _a = json.brackets; _i < _a.length; _i++) {\n    var el = _a[_i];\n    var desc = el;\n    if (desc && Array.isArray(desc) && desc.length === 3) {\n      desc = {\n        token: desc[2],\n        open: desc[0],\n        close: desc[1]\n      };\n    }\n    if (desc.open === desc.close) {\n      throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open + '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n    }\n    if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n      brackets.push({\n        token: desc.token + lexer.tokenPostfix,\n        open: monarchCommon.fixCase(lexer, desc.open),\n        close: monarchCommon.fixCase(lexer, desc.close)\n      });\n    } else {\n      throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n    }\n  }\n  lexer.brackets = brackets;\n  // Disable throw so the syntax highlighter goes, no matter what\n  lexer.noThrow = true;\n  return lexer;\n}","map":{"version":3,"names":["monarchCommon","isArrayOf","elemType","obj","Array","isArray","_i","obj_1","length","el","bool","prop","defValue","string","arrayToHash","array","result","array_1","e","createKeywordMatcher","arr","caseInsensitive","map","x","toLowerCase","hash","word","undefined","hasOwnProperty","compileRegExp","lexer","str","n","indexOf","replace","s","attr","sub","RegExp","source","createError","empty","ignoreCase","selectScrutinee","id","matches","state","num","parts","split","unshift","createGuard","ruleName","tkey","val","scrut","oppat","match","parseInt","op","pat","test","tester","inWords_1","words","elem","inWords_2","re_1","re","substituteMatches","patx_1","fixCase","patx_2","eos","patexp","name","value","scrutinee","compileAction","action","token","newAction","tokenSubst","bracket","next","substr","stateExists","goBack","switchTo","log","nextEmbedded","usesEmbedded","results","i","len","group","cases","cases_1","push","def_1","defaultToken","cases_2","_case","didmatch","Rule","regex","matchOnlyAtLineStart","prototype","setRegex","sregex","setAction","act","compile","languageId","json","Error","noThrow","maxStack","start","tokenPostfix","lexerMin","stateNames","tokenizer","addRules","newrules","rules","rules_1","rule","include","newrule","rule1","matchOnlyAtStart","key","brackets","open","close","_a","desc"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*\r\n * This module only exports 'compile' which compiles a JSON language definition\r\n * into a typed and checked ILexer definition.\r\n */\r\nimport * as monarchCommon from './monarchCommon.js';\r\n/*\r\n * Type helpers\r\n *\r\n * Note: this is just for sanity checks on the JSON description which is\r\n * helpful for the programmer. No checks are done anymore once the lexer is\r\n * already 'compiled and checked'.\r\n *\r\n */\r\nfunction isArrayOf(elemType, obj) {\r\n    if (!obj) {\r\n        return false;\r\n    }\r\n    if (!(Array.isArray(obj))) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {\r\n        var el = obj_1[_i];\r\n        if (!(elemType(el))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction bool(prop, defValue) {\r\n    if (typeof prop === 'boolean') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction string(prop, defValue) {\r\n    if (typeof (prop) === 'string') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction arrayToHash(array) {\r\n    var result = {};\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var e = array_1[_i];\r\n        result[e] = true;\r\n    }\r\n    return result;\r\n}\r\nfunction createKeywordMatcher(arr, caseInsensitive) {\r\n    if (caseInsensitive === void 0) { caseInsensitive = false; }\r\n    if (caseInsensitive) {\r\n        arr = arr.map(function (x) { return x.toLowerCase(); });\r\n    }\r\n    var hash = arrayToHash(arr);\r\n    if (caseInsensitive) {\r\n        return function (word) {\r\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\r\n        };\r\n    }\r\n    else {\r\n        return function (word) {\r\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\r\n        };\r\n    }\r\n}\r\n// Lexer helpers\r\n/**\r\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\r\n * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n */\r\nfunction compileRegExp(lexer, str) {\r\n    var n = 0;\r\n    while (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\r\n        n++;\r\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\r\n            var sub = '';\r\n            if (typeof (lexer[attr]) === 'string') {\r\n                sub = lexer[attr];\r\n            }\r\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\r\n                sub = lexer[attr].source;\r\n            }\r\n            else {\r\n                if (lexer[attr] === undefined) {\r\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\r\n                }\r\n            }\r\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\r\n        });\r\n    }\r\n    return new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\r\n}\r\n/**\r\n * Compiles guard functions for case matches.\r\n * This compiles 'cases' attributes into efficient match functions.\r\n *\r\n */\r\nfunction selectScrutinee(id, matches, state, num) {\r\n    if (num < 0) {\r\n        return id;\r\n    }\r\n    if (num < matches.length) {\r\n        return matches[num];\r\n    }\r\n    if (num >= 100) {\r\n        num = num - 100;\r\n        var parts = state.split('.');\r\n        parts.unshift(state);\r\n        if (num < parts.length) {\r\n            return parts[num];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction createGuard(lexer, ruleName, tkey, val) {\r\n    // get the scrutinee and pattern\r\n    var scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\r\n    var oppat = tkey;\r\n    var matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\r\n    if (matches) {\r\n        if (matches[3]) { // if digits\r\n            scrut = parseInt(matches[3]);\r\n            if (matches[2]) {\r\n                scrut = scrut + 100; // if [sS] present\r\n            }\r\n        }\r\n        oppat = matches[4];\r\n    }\r\n    // get operator\r\n    var op = '~';\r\n    var pat = oppat;\r\n    if (!oppat || oppat.length === 0) {\r\n        op = '!=';\r\n        pat = '';\r\n    }\r\n    else if (/^\\w*$/.test(pat)) { // just a word\r\n        op = '==';\r\n    }\r\n    else {\r\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\r\n        if (matches) {\r\n            op = matches[1];\r\n            pat = matches[2];\r\n        }\r\n    }\r\n    // set the tester function\r\n    var tester;\r\n    // special case a regexp that matches just words\r\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\r\n        var inWords_1 = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\r\n        tester = function (s) { return (op === '~' ? inWords_1(s) : !inWords_1(s)); };\r\n    }\r\n    else if (op === '@' || op === '!@') {\r\n        var words = lexer[pat];\r\n        if (!words) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\r\n        }\r\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\r\n        }\r\n        var inWords_2 = createKeywordMatcher(words, lexer.ignoreCase);\r\n        tester = function (s) { return (op === '@' ? inWords_2(s) : !inWords_2(s)); };\r\n    }\r\n    else if (op === '~' || op === '!~') {\r\n        if (pat.indexOf('$') < 0) {\r\n            // precompile regular expression\r\n            var re_1 = compileRegExp(lexer, '^' + pat + '$');\r\n            tester = function (s) { return (op === '~' ? re_1.test(s) : !re_1.test(s)); };\r\n        }\r\n        else {\r\n            tester = function (s, id, matches, state) {\r\n                var re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\r\n                return re.test(s);\r\n            };\r\n        }\r\n    }\r\n    else { // if (op==='==' || op==='!=') {\r\n        if (pat.indexOf('$') < 0) {\r\n            var patx_1 = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s) { return (op === '==' ? s === patx_1 : s !== patx_1); };\r\n        }\r\n        else {\r\n            var patx_2 = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s, id, matches, state, eos) {\r\n                var patexp = monarchCommon.substituteMatches(lexer, patx_2, id, matches, state);\r\n                return (op === '==' ? s === patexp : s !== patexp);\r\n            };\r\n        }\r\n    }\r\n    // return the branch object\r\n    if (scrut === -1) {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                return tester(id, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                var scrutinee = selectScrutinee(id, matches, state, scrut);\r\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n}\r\n/**\r\n * Compiles an action: i.e. optimize regular expressions and case matches\r\n * and do many sanity checks.\r\n *\r\n * This is called only during compilation but if the lexer definition\r\n * contains user functions as actions (which is usually not allowed), then this\r\n * may be called during lexing. It is important therefore to compile common cases efficiently\r\n */\r\nfunction compileAction(lexer, ruleName, action) {\r\n    if (!action) {\r\n        return { token: '' };\r\n    }\r\n    else if (typeof (action) === 'string') {\r\n        return action; // { token: action };\r\n    }\r\n    else if (action.token || action.token === '') {\r\n        if (typeof (action.token) !== 'string') {\r\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\r\n        }\r\n        else {\r\n            // only copy specific typed fields (only happens once during compile Lexer)\r\n            var newAction = { token: action.token };\r\n            if (action.token.indexOf('$') >= 0) {\r\n                newAction.tokenSubst = true;\r\n            }\r\n            if (typeof (action.bracket) === 'string') {\r\n                if (action.bracket === '@open') {\r\n                    newAction.bracket = 1 /* Open */;\r\n                }\r\n                else if (action.bracket === '@close') {\r\n                    newAction.bracket = -1 /* Close */;\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\r\n                }\r\n            }\r\n            if (action.next) {\r\n                if (typeof (action.next) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\r\n                }\r\n                else {\r\n                    var next = action.next;\r\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\r\n                        if (next[0] === '@') {\r\n                            next = next.substr(1); // peel off starting @ sign\r\n                        }\r\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\r\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\r\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\r\n                            }\r\n                        }\r\n                    }\r\n                    newAction.next = next;\r\n                }\r\n            }\r\n            if (typeof (action.goBack) === 'number') {\r\n                newAction.goBack = action.goBack;\r\n            }\r\n            if (typeof (action.switchTo) === 'string') {\r\n                newAction.switchTo = action.switchTo;\r\n            }\r\n            if (typeof (action.log) === 'string') {\r\n                newAction.log = action.log;\r\n            }\r\n            if (typeof (action.nextEmbedded) === 'string') {\r\n                newAction.nextEmbedded = action.nextEmbedded;\r\n                lexer.usesEmbedded = true;\r\n            }\r\n            return newAction;\r\n        }\r\n    }\r\n    else if (Array.isArray(action)) {\r\n        var results = [];\r\n        for (var i = 0, len = action.length; i < len; i++) {\r\n            results[i] = compileAction(lexer, ruleName, action[i]);\r\n        }\r\n        return { group: results };\r\n    }\r\n    else if (action.cases) {\r\n        // build an array of test cases\r\n        var cases_1 = [];\r\n        // for each case, push a test function and result value\r\n        for (var tkey in action.cases) {\r\n            if (action.cases.hasOwnProperty(tkey)) {\r\n                var val = compileAction(lexer, ruleName, action.cases[tkey]);\r\n                // what kind of case\r\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\r\n                    cases_1.push({ test: undefined, value: val, name: tkey });\r\n                }\r\n                else if (tkey === '@eos') {\r\n                    cases_1.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\r\n                }\r\n                else {\r\n                    cases_1.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\r\n                }\r\n            }\r\n        }\r\n        // create a matching function\r\n        var def_1 = lexer.defaultToken;\r\n        return {\r\n            test: function (id, matches, state, eos) {\r\n                for (var _i = 0, cases_2 = cases_1; _i < cases_2.length; _i++) {\r\n                    var _case = cases_2[_i];\r\n                    var didmatch = (!_case.test || _case.test(id, matches, state, eos));\r\n                    if (didmatch) {\r\n                        return _case.value;\r\n                    }\r\n                }\r\n                return def_1;\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\r\n    }\r\n}\r\n/**\r\n * Helper class for creating matching rules\r\n */\r\nvar Rule = /** @class */ (function () {\r\n    function Rule(name) {\r\n        this.regex = new RegExp('');\r\n        this.action = { token: '' };\r\n        this.matchOnlyAtLineStart = false;\r\n        this.name = '';\r\n        this.name = name;\r\n    }\r\n    Rule.prototype.setRegex = function (lexer, re) {\r\n        var sregex;\r\n        if (typeof (re) === 'string') {\r\n            sregex = re;\r\n        }\r\n        else if (re instanceof RegExp) {\r\n            sregex = re.source;\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\r\n        }\r\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\r\n        this.name = this.name + ': ' + sregex;\r\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\r\n    };\r\n    Rule.prototype.setAction = function (lexer, act) {\r\n        this.action = compileAction(lexer, this.name, act);\r\n    };\r\n    return Rule;\r\n}());\r\n/**\r\n * Compiles a json description function into json where all regular expressions,\r\n * case matches etc, are compiled and all include rules are expanded.\r\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n * regular expression objects and functions that get called during lexing.\r\n * (Currently we have no samples that need this so perhaps we should always have\r\n * jsonStrict to true).\r\n */\r\nexport function compile(languageId, json) {\r\n    if (!json || typeof (json) !== 'object') {\r\n        throw new Error('Monarch: expecting a language definition object');\r\n    }\r\n    // Create our lexer\r\n    var lexer = {};\r\n    lexer.languageId = languageId;\r\n    lexer.noThrow = false; // raise exceptions during compilation\r\n    lexer.maxStack = 100;\r\n    // Set standard fields: be defensive about types\r\n    lexer.start = (typeof json.start === 'string' ? json.start : null);\r\n    lexer.ignoreCase = bool(json.ignoreCase, false);\r\n    lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\r\n    lexer.defaultToken = string(json.defaultToken, 'source');\r\n    lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\r\n    // For calling compileAction later on\r\n    var lexerMin = json;\r\n    lexerMin.languageId = languageId;\r\n    lexerMin.ignoreCase = lexer.ignoreCase;\r\n    lexerMin.noThrow = lexer.noThrow;\r\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\r\n    lexerMin.stateNames = json.tokenizer;\r\n    lexerMin.defaultToken = lexer.defaultToken;\r\n    // Compile an array of rules into newrules where RegExp objects are created.\r\n    function addRules(state, newrules, rules) {\r\n        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\r\n            var rule = rules_1[_i];\r\n            var include = rule.include;\r\n            if (include) {\r\n                if (typeof (include) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\r\n                }\r\n                if (include[0] === '@') {\r\n                    include = include.substr(1); // peel off starting @\r\n                }\r\n                if (!json.tokenizer[include]) {\r\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\r\n                }\r\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\r\n            }\r\n            else {\r\n                var newrule = new Rule(state);\r\n                // Set up new rule attributes\r\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\r\n                    newrule.setRegex(lexerMin, rule[0]);\r\n                    if (rule.length >= 3) {\r\n                        if (typeof (rule[1]) === 'string') {\r\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\r\n                        }\r\n                        else if (typeof (rule[1]) === 'object') {\r\n                            var rule1 = rule[1];\r\n                            rule1.next = rule[2];\r\n                            newrule.setAction(lexerMin, rule1);\r\n                        }\r\n                        else {\r\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newrule.setAction(lexerMin, rule[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!rule.regex) {\r\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\r\n                    }\r\n                    if (rule.name) {\r\n                        if (typeof rule.name === 'string') {\r\n                            newrule.name = rule.name;\r\n                        }\r\n                    }\r\n                    if (rule.matchOnlyAtStart) {\r\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\r\n                    }\r\n                    newrule.setRegex(lexerMin, rule.regex);\r\n                    newrule.setAction(lexerMin, rule.action);\r\n                }\r\n                newrules.push(newrule);\r\n            }\r\n        }\r\n    }\r\n    // compile the tokenizer rules\r\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\r\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\r\n    }\r\n    lexer.tokenizer = [];\r\n    for (var key in json.tokenizer) {\r\n        if (json.tokenizer.hasOwnProperty(key)) {\r\n            if (!lexer.start) {\r\n                lexer.start = key;\r\n            }\r\n            var rules = json.tokenizer[key];\r\n            lexer.tokenizer[key] = new Array();\r\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\r\n        }\r\n    }\r\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\r\n    // Set simple brackets\r\n    if (json.brackets) {\r\n        if (!(Array.isArray(json.brackets))) {\r\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\r\n        }\r\n    }\r\n    else {\r\n        json.brackets = [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n            { open: '<', close: '>', token: 'delimiter.angle' }\r\n        ];\r\n    }\r\n    var brackets = [];\r\n    for (var _i = 0, _a = json.brackets; _i < _a.length; _i++) {\r\n        var el = _a[_i];\r\n        var desc = el;\r\n        if (desc && Array.isArray(desc) && desc.length === 3) {\r\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\r\n        }\r\n        if (desc.open === desc.close) {\r\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\r\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\r\n        }\r\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\r\n            brackets.push({\r\n                token: desc.token + lexer.tokenPostfix,\r\n                open: monarchCommon.fixCase(lexer, desc.open),\r\n                close: monarchCommon.fixCase(lexer, desc.close)\r\n            });\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\r\n        }\r\n    }\r\n    lexer.brackets = brackets;\r\n    // Disable throw so the syntax highlighter goes, no matter what\r\n    lexer.noThrow = true;\r\n    return lexer;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}