{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  onEnterRules: [{\n    // e.g. /** | */\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    afterText: /^\\s*\\*\\/$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.IndentOutdent,\n      appendText: ' * '\n    }\n  }, {\n    // e.g. /** ...|\n    beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: ' * '\n    }\n  }, {\n    // e.g.  * ...|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      appendText: '* '\n    }\n  }, {\n    // e.g.  */|\n    beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n    action: {\n      indentAction: _monaco.languages.IndentAction.None,\n      removeText: 1\n    }\n  }],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '`',\n    close: '`',\n    notIn: ['string', 'comment']\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.ts',\n  keywords: ['abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface', 'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package', 'private', 'protected', 'public', 'readonly', 'require', 'global', 'return', 'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: ['any', 'boolean', 'number', 'object', 'string', 'undefined'],\n  operators: ['<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**', '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', '@'],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, 'delimiter.bracket'], {\n      include: 'common'\n    }],\n    common: [\n    // identifiers and keywords\n    [/[a-z_$][\\w$]*/, {\n      cases: {\n        '@typeKeywords': 'keyword',\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[A-Z][\\w\\$]*/, 'type.identifier'],\n    // [/[A-Z][\\w\\$]*/, 'identifier'],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n    [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, {\n      token: 'regexp',\n      bracket: '@open',\n      next: '@regexp'\n    }],\n    // delimiters and operators\n    [/[()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/!(?=([^=]|$))/, 'delimiter'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'], [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'], [/0[xX](@hexdigits)n?/, 'number.hex'], [/0[oO]?(@octaldigits)n?/, 'number.octal'], [/0[bB](@binarydigits)n?/, 'number.binary'], [/(@digits)n?/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, 'string', '@string_double'], [/'/, 'string', '@string_single'], [/`/, 'string', '@string_backtick']],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'], [/\\/\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']],\n    comment: [[/[^\\/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[\\/*]/, 'comment']],\n    jsdoc: [[/[^\\/*]+/, 'comment.doc'], [/\\*\\//, 'comment.doc', '@pop'], [/[\\/*]/, 'comment.doc']],\n    // We match regular expression quite precisely\n    regexp: [[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']], [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', {\n      token: 'regexp.escape.control',\n      next: '@regexrange'\n    }]], [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']], [/[()]/, 'regexp.escape.control'], [/@regexpctl/, 'regexp.escape.control'], [/[^\\\\\\/]/, 'regexp'], [/@regexpesc/, 'regexp.escape'], [/\\\\\\./, 'regexp.invalid'], [/(\\/)([gimsuy]*)/, [{\n      token: 'regexp',\n      bracket: '@close',\n      next: '@pop'\n    }, 'keyword.other']]],\n    regexrange: [[/-/, 'regexp.escape.control'], [/\\^/, 'regexp.invalid'], [/@regexpesc/, 'regexp.escape'], [/[^\\]]/, 'regexp'], [/\\]/, {\n      token: 'regexp.escape.control',\n      next: '@pop',\n      bracket: '@close'\n    }]],\n    string_double: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    string_single: [[/[^\\\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']],\n    string_backtick: [[/\\$\\{/, {\n      token: 'delimiter.bracket',\n      next: '@bracketCounting'\n    }], [/[^\\\\`$]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/`/, 'string', '@pop']],\n    bracketCounting: [[/\\{/, 'delimiter.bracket', '@bracketCounting'], [/\\}/, 'delimiter.bracket', '@pop'], {\n      include: 'common'\n    }]\n  }\n};","map":{"version":3,"names":["_monaco","monaco","self","conf","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            // e.g. /** | */\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            afterText: /^\\s*\\*\\/$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g. /** ...|\r\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: ' * ' }\r\n        },\r\n        {\r\n            // e.g.  * ...|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, appendText: '* ' }\r\n        },\r\n        {\r\n            // e.g.  */|\r\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\r\n            action: { indentAction: _monaco.languages.IndentAction.None, removeText: 1 }\r\n        }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n        { open: '`', close: '`', notIn: ['string', 'comment'] },\r\n        { open: \"/**\", close: \" */\", notIn: [\"string\"] }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.ts',\r\n    keywords: [\r\n        'abstract', 'as', 'break', 'case', 'catch', 'class', 'continue', 'const',\r\n        'constructor', 'debugger', 'declare', 'default', 'delete', 'do', 'else',\r\n        'enum', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function',\r\n        'get', 'if', 'implements', 'import', 'in', 'infer', 'instanceof', 'interface',\r\n        'is', 'keyof', 'let', 'module', 'namespace', 'never', 'new', 'null', 'package',\r\n        'private', 'protected', 'public', 'readonly', 'require', 'global', 'return',\r\n        'set', 'static', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try',\r\n        'type', 'typeof', 'unique', 'var', 'void', 'while', 'with', 'yield', 'async',\r\n        'await', 'of'\r\n    ],\r\n    typeKeywords: [\r\n        'any', 'boolean', 'number', 'object', 'string', 'undefined'\r\n    ],\r\n    operators: [\r\n        '<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**',\r\n        '*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&',\r\n        '|', '^', '!', '~', '&&', '||', '??', '?', ':', '=', '+=', '-=',\r\n        '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=',\r\n        '^=', '@',\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/[{}]/, 'delimiter.bracket'],\r\n            { include: 'common' }\r\n        ],\r\n        common: [\r\n            // identifiers and keywords\r\n            [/[a-z_$][\\w$]*/, {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w\\$]*/, 'type.identifier'],\r\n            // [/[A-Z][\\w\\$]*/, 'identifier'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\r\n            [/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/, { token: 'regexp', bracket: '@open', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/!(?=([^=]|$))/, 'delimiter'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'],\r\n            [/0[xX](@hexdigits)n?/, 'number.hex'],\r\n            [/0[oO]?(@octaldigits)n?/, 'number.octal'],\r\n            [/0[bB](@binarydigits)n?/, 'number.binary'],\r\n            [/(@digits)n?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string_double'],\r\n            [/'/, 'string', '@string_single'],\r\n            [/`/, 'string', '@string_backtick'],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        jsdoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']],\r\n            [/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/, ['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\r\n            [/[()]/, 'regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/(\\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, { token: 'regexp.escape.control', next: '@pop', bracket: '@close' }]\r\n        ],\r\n        string_double: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        string_single: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, 'string', '@pop']\r\n        ],\r\n        string_backtick: [\r\n            [/\\$\\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],\r\n            [/[^\\\\`$]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/`/, 'string', '@pop']\r\n        ],\r\n        bracketCounting: [\r\n            [/\\{/, 'delimiter.bracket', '@bracketCounting'],\r\n            [/\\}/, 'delimiter.bracket', '@pop'],\r\n            { include: 'common' }\r\n        ],\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}