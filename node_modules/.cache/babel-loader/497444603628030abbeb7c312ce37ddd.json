{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['(*', '*)']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.pascaligo',\n  ignoreCase: true,\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  keywords: ['begin', 'block', 'case', 'const', 'else', 'end', 'fail', 'for', 'from', 'function', 'if', 'is', 'nil', 'of', 'remove', 'return', 'skip', 'then', 'type', 'var', 'while', 'with', 'option', 'None', 'transaction'],\n  typeKeywords: ['bool', 'int', 'list', 'map', 'nat', 'record', 'string', 'unit', 'address', 'map', 'mtz', 'xtz'],\n  operators: ['=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or', '+', '-', '*', '/', '@', '&', '^', '%'],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // identifiers and keywords\n    [/[a-zA-Z_][\\w]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': 'identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/[<>](?!@symbols)/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'delimiter',\n        '@default': ''\n      }\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'], [/\\d+/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'],\n    // strings\n    [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'/, 'string', '@string'],\n    // characters\n    [/'[^\\\\']'/, 'string'], [/'/, 'string.invalid'], [/\\#\\d+/, 'string']],\n    /* */\n    comment: [[/[^\\(\\*]+/, 'comment'],\n    //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n    [/\\*\\)/, 'comment', '@pop'], [/\\(\\*/, 'comment']],\n    string: [[/[^\\\\']+/, 'string'], [/\\\\./, 'string.escape.invalid'], [/'/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white'], [/\\(\\*/, 'comment', '@comment'], [/\\/\\/.*$/, 'comment']]\n  }\n};","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascaligo',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'begin', 'block', 'case', 'const', 'else', 'end',\r\n        'fail', 'for', 'from', 'function', 'if', 'is', 'nil',\r\n        'of', 'remove', 'return', 'skip', 'then', 'type', 'var',\r\n        'while', 'with', 'option', 'None', 'transaction'\r\n    ],\r\n    typeKeywords: [\r\n        'bool', 'int', 'list', 'map', 'nat', 'record',\r\n        'string', 'unit', 'address', 'map', 'mtz', 'xtz'\r\n    ],\r\n    operators: [\r\n        '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or',\r\n        '+', '-', '*', '/', '@', '&', '^', '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        /* */\r\n        comment: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\(\\*/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\(\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}