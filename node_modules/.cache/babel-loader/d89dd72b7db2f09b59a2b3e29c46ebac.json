{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Json from './../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { isDefined } from '../utils/objects.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind } from '../jsonLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar valueCommitCharacters = [',', '}', ']'];\nvar propertyCommitCharacters = [':'];\nvar JSONCompletion = /** @class */function () {\n  function JSONCompletion(schemaService, contributions, promiseConstructor, clientCapabilities) {\n    if (contributions === void 0) {\n      contributions = [];\n    }\n    if (promiseConstructor === void 0) {\n      promiseConstructor = Promise;\n    }\n    if (clientCapabilities === void 0) {\n      clientCapabilities = {};\n    }\n    this.schemaService = schemaService;\n    this.contributions = contributions;\n    this.promiseConstructor = promiseConstructor;\n    this.clientCapabilities = clientCapabilities;\n    this.templateVarIdCounter = 0;\n  }\n  JSONCompletion.prototype.doResolve = function (item) {\n    for (var i = this.contributions.length - 1; i >= 0; i--) {\n      if (this.contributions[i].resolveCompletion) {\n        var resolver = this.contributions[i].resolveCompletion(item);\n        if (resolver) {\n          return resolver;\n        }\n      }\n    }\n    return this.promiseConstructor.resolve(item);\n  };\n  JSONCompletion.prototype.doComplete = function (document, position, doc) {\n    var _this = this;\n    var result = {\n      items: [],\n      isIncomplete: false\n    };\n    var text = document.getText();\n    var offset = document.offsetAt(position);\n    var node = doc.getNodeFromOffset(offset, true);\n    if (this.isInComment(document, node ? node.offset : 0, offset)) {\n      return Promise.resolve(result);\n    }\n    if (node && offset === node.offset + node.length && offset > 0) {\n      var ch = text[offset - 1];\n      if (node.type === 'object' && ch === '}' || node.type === 'array' && ch === ']') {\n        // after ] or }\n        node = node.parent;\n      }\n    }\n    var currentWord = this.getCurrentWord(document, offset);\n    var overwriteRange = null;\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\n    } else {\n      var overwriteStart = offset - currentWord.length;\n      if (overwriteStart > 0 && text[overwriteStart - 1] === '\"') {\n        overwriteStart--;\n      }\n      overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n    }\n    var supportsCommitCharacters = false; //this.doesSupportsCommitCharacters(); disabled for now, waiting for new API: https://github.com/microsoft/vscode/issues/42544\n    var proposed = {};\n    var collector = {\n      add: function add(suggestion) {\n        var label = suggestion.label;\n        var existing = proposed[label];\n        if (!existing) {\n          label = label.replace(/[\\n]/g, 'â†µ');\n          if (label.length > 60) {\n            var shortendedLabel = label.substr(0, 57).trim() + '...';\n            if (!proposed[shortendedLabel]) {\n              label = shortendedLabel;\n            }\n          }\n          if (overwriteRange) {\n            suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n          }\n          if (supportsCommitCharacters) {\n            suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;\n          }\n          suggestion.label = label;\n          proposed[label] = suggestion;\n          result.items.push(suggestion);\n        } else if (!existing.documentation) {\n          existing.documentation = suggestion.documentation;\n        }\n      },\n      setAsIncomplete: function setAsIncomplete() {\n        result.isIncomplete = true;\n      },\n      error: function error(message) {\n        console.error(message);\n      },\n      log: function log(message) {\n        console.log(message);\n      },\n      getNumberOfProposals: function getNumberOfProposals() {\n        return result.items.length;\n      }\n    };\n    return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n      var collectionPromises = [];\n      var addValue = true;\n      var currentKey = '';\n      var currentProperty = null;\n      if (node) {\n        if (node.type === 'string') {\n          var parent = node.parent;\n          if (parent && parent.type === 'property' && parent.keyNode === node) {\n            addValue = !parent.valueNode;\n            currentProperty = parent;\n            currentKey = text.substr(node.offset + 1, node.length - 2);\n            if (parent) {\n              node = parent.parent;\n            }\n          }\n        }\n      }\n      // proposals for properties\n      if (node && node.type === 'object') {\n        // don't suggest keys when the cursor is just before the opening curly brace\n        if (node.offset === offset) {\n          return result;\n        }\n        // don't suggest properties that are already present\n        var properties = node.properties;\n        properties.forEach(function (p) {\n          if (!currentProperty || currentProperty !== p) {\n            proposed[p.keyNode.value] = CompletionItem.create('__');\n          }\n        });\n        var separatorAfter_1 = '';\n        if (addValue) {\n          separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n        }\n        if (schema) {\n          // property proposals with schema\n          _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n        } else {\n          // property proposals without schema\n          _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n        }\n        var location_1 = Parser.getNodePath(node);\n        _this.contributions.forEach(function (contribution) {\n          var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n          if (collectPromise) {\n            collectionPromises.push(collectPromise);\n          }\n        });\n        if (!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '\"') {\n          collector.add({\n            kind: CompletionItemKind.Property,\n            label: _this.getLabelForValue(currentWord),\n            insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n          });\n          collector.setAsIncomplete();\n        }\n      }\n      // proposals for values\n      var types = {};\n      if (schema) {\n        // value proposals with schema\n        _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n      } else {\n        // value proposals without schema\n        _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n      }\n      if (_this.contributions.length > 0) {\n        _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n      }\n      return _this.promiseConstructor.all(collectionPromises).then(function () {\n        if (collector.getNumberOfProposals() === 0) {\n          var offsetForSeparator = offset;\n          if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n          }\n          var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n          _this.addFillerValueCompletions(types, separatorAfter, collector);\n        }\n        return result;\n      });\n    });\n  };\n  JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n    var _this = this;\n    var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n    matchingSchemas.forEach(function (s) {\n      if (s.node === node && !s.inverted) {\n        var schemaProperties_1 = s.schema.properties;\n        if (schemaProperties_1) {\n          Object.keys(schemaProperties_1).forEach(function (key) {\n            var propertySchema = schemaProperties_1[key];\n            if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n              var proposal = {\n                kind: CompletionItemKind.Property,\n                label: key,\n                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                filterText: _this.getFilterTextForValue(key),\n                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ''\n              };\n              if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                proposal.command = {\n                  title: 'Suggest',\n                  command: 'editor.action.triggerSuggest'\n                };\n              }\n              collector.add(proposal);\n            }\n          });\n        }\n      }\n    });\n  };\n  JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n    var _this = this;\n    var collectCompletionsForSimilarObject = function collectCompletionsForSimilarObject(obj) {\n      obj.properties.forEach(function (p) {\n        var key = p.keyNode.value;\n        collector.add({\n          kind: CompletionItemKind.Property,\n          label: key,\n          insertText: _this.getInsertTextForValue(key, ''),\n          insertTextFormat: InsertTextFormat.Snippet,\n          filterText: _this.getFilterTextForValue(key),\n          documentation: ''\n        });\n      });\n    };\n    if (node.parent) {\n      if (node.parent.type === 'property') {\n        // if the object is a property value, check the tree for other objects that hang under a property of the same name\n        var parentKey_1 = node.parent.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === 'object') {\n            collectCompletionsForSimilarObject(n.valueNode);\n          }\n          return true;\n        });\n      } else if (node.parent.type === 'array') {\n        // if the object is in an array, use all other array elements as similar objects\n        node.parent.items.forEach(function (n) {\n          if (n.type === 'object' && n !== node) {\n            collectCompletionsForSimilarObject(n);\n          }\n        });\n      }\n    } else if (node.type === 'object') {\n      collector.add({\n        kind: CompletionItemKind.Property,\n        label: '$schema',\n        insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: '',\n        filterText: this.getFilterTextForValue(\"$schema\")\n      });\n    }\n  };\n  JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n    var _this = this;\n    var offsetForSeparator = offset;\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      offsetForSeparator = node.offset + node.length;\n      node = node.parent;\n    }\n    if (!node) {\n      collector.add({\n        kind: this.getSuggestionKind('object'),\n        label: 'Empty object',\n        insertText: this.getInsertTextForValue({}, ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n      collector.add({\n        kind: this.getSuggestionKind('array'),\n        label: 'Empty array',\n        insertText: this.getInsertTextForValue([], ''),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n      return;\n    }\n    var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n    var collectSuggestionsForValues = function collectSuggestionsForValues(value) {\n      if (!Parser.contains(value.parent, offset, true)) {\n        collector.add({\n          kind: _this.getSuggestionKind(value.type),\n          label: _this.getLabelTextForMatchingNode(value, document),\n          insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet,\n          documentation: ''\n        });\n      }\n      if (value.type === 'boolean') {\n        _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\n      }\n    };\n    if (node.type === 'property') {\n      if (offset > node.colonOffset) {\n        var valueNode = node.valueNode;\n        if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === 'object' || valueNode.type === 'array')) {\n          return;\n        }\n        // suggest values at the same key\n        var parentKey_2 = node.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n.keyNode.value === parentKey_2 && n.valueNode) {\n            collectSuggestionsForValues(n.valueNode);\n          }\n          return true;\n        });\n        if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n          this.addDollarSchemaCompletions(separatorAfter, collector);\n        }\n      }\n    }\n    if (node.type === 'array') {\n      if (node.parent && node.parent.type === 'property') {\n        // suggest items of an array at the same key\n        var parentKey_3 = node.parent.keyNode.value;\n        doc.visit(function (n) {\n          if (n.type === 'property' && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === 'array') {\n            n.valueNode.items.forEach(collectSuggestionsForValues);\n          }\n          return true;\n        });\n      } else {\n        // suggest items in the same array\n        node.items.forEach(collectSuggestionsForValues);\n      }\n    }\n  };\n  JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n    var _this = this;\n    var offsetForSeparator = offset;\n    var parentKey = null;\n    var valueNode = null;\n    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n      offsetForSeparator = node.offset + node.length;\n      valueNode = node;\n      node = node.parent;\n    }\n    if (!node) {\n      this.addSchemaValueCompletions(schema.schema, '', collector, types);\n      return;\n    }\n    if (node.type === 'property' && offset > node.colonOffset) {\n      var valueNode_1 = node.valueNode;\n      if (valueNode_1 && offset > valueNode_1.offset + valueNode_1.length) {\n        return; // we are past the value node\n      }\n\n      parentKey = node.keyNode.value;\n      node = node.parent;\n    }\n    if (node && (parentKey !== null || node.type === 'array')) {\n      var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n      var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\n      matchingSchemas.forEach(function (s) {\n        if (s.node === node && !s.inverted && s.schema) {\n          if (node.type === 'array' && s.schema.items) {\n            if (Array.isArray(s.schema.items)) {\n              var index = _this.findItemAtOffset(node, document, offset);\n              if (index < s.schema.items.length) {\n                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n              }\n            } else {\n              _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n            }\n          }\n          if (s.schema.properties) {\n            var propertySchema = s.schema.properties[parentKey];\n            if (propertySchema) {\n              _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n            }\n          }\n        }\n      });\n      if (parentKey === '$schema' && !node.parent) {\n        this.addDollarSchemaCompletions(separatorAfter_2, collector);\n      }\n      if (types['boolean']) {\n        this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n        this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n      }\n      if (types['null']) {\n        this.addNullValueCompletion(separatorAfter_2, collector);\n      }\n    }\n  };\n  JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n    if (!node) {\n      this.contributions.forEach(function (contribution) {\n        var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n        if (collectPromise) {\n          collectionPromises.push(collectPromise);\n        }\n      });\n    } else {\n      if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n        node = node.parent;\n      }\n      if (node.type === 'property' && offset > node.colonOffset) {\n        var parentKey_4 = node.keyNode.value;\n        var valueNode = node.valueNode;\n        if (!valueNode || offset <= valueNode.offset + valueNode.length) {\n          var location_2 = Parser.getNodePath(node.parent);\n          this.contributions.forEach(function (contribution) {\n            var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n            if (collectPromise) {\n              collectionPromises.push(collectPromise);\n            }\n          });\n        }\n      }\n    }\n  };\n  JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n    var _this = this;\n    if (typeof schema === 'object') {\n      this.addEnumValueCompletions(schema, separatorAfter, collector);\n      this.addDefaultValueCompletions(schema, separatorAfter, collector);\n      this.collectTypes(schema, types);\n      if (Array.isArray(schema.allOf)) {\n        schema.allOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n      if (Array.isArray(schema.anyOf)) {\n        schema.anyOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n      if (Array.isArray(schema.oneOf)) {\n        schema.oneOf.forEach(function (s) {\n          return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);\n        });\n      }\n    }\n  };\n  JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n    var _this = this;\n    if (arrayDepth === void 0) {\n      arrayDepth = 0;\n    }\n    var hasProposals = false;\n    if (isDefined(schema.default)) {\n      var type = schema.type;\n      var value = schema.default;\n      for (var i = arrayDepth; i > 0; i--) {\n        value = [value];\n        type = 'array';\n      }\n      collector.add({\n        kind: this.getSuggestionKind(type),\n        label: this.getLabelForValue(value),\n        insertText: this.getInsertTextForValue(value, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('json.suggest.default', 'Default value')\n      });\n      hasProposals = true;\n    }\n    if (Array.isArray(schema.examples)) {\n      schema.examples.forEach(function (example) {\n        var type = schema.type;\n        var value = example;\n        for (var i = arrayDepth; i > 0; i--) {\n          value = [value];\n          type = 'array';\n        }\n        collector.add({\n          kind: _this.getSuggestionKind(type),\n          label: _this.getLabelForValue(value),\n          insertText: _this.getInsertTextForValue(value, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet\n        });\n        hasProposals = true;\n      });\n    }\n    if (Array.isArray(schema.defaultSnippets)) {\n      schema.defaultSnippets.forEach(function (s) {\n        var type = schema.type;\n        var value = s.body;\n        var label = s.label;\n        var insertText;\n        var filterText;\n        if (isDefined(value)) {\n          var type_1 = schema.type;\n          for (var i = arrayDepth; i > 0; i--) {\n            value = [value];\n            type_1 = 'array';\n          }\n          insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n          filterText = _this.getFilterTextForSnippetValue(value);\n          label = label || _this.getLabelForSnippetValue(value);\n        } else if (typeof s.bodyText === 'string') {\n          var prefix = '',\n            suffix = '',\n            indent = '';\n          for (var i = arrayDepth; i > 0; i--) {\n            prefix = prefix + indent + '[\\n';\n            suffix = suffix + '\\n' + indent + ']';\n            indent += '\\t';\n            type = 'array';\n          }\n          insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n          label = label || insertText, filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n        }\n\n        collector.add({\n          kind: _this.getSuggestionKind(type),\n          label: label,\n          documentation: _this.fromMarkup(s.markdownDescription) || s.description,\n          insertText: insertText,\n          insertTextFormat: InsertTextFormat.Snippet,\n          filterText: filterText\n        });\n        hasProposals = true;\n      });\n    }\n    if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n      this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n    }\n  };\n  JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n    if (isDefined(schema.const)) {\n      collector.add({\n        kind: this.getSuggestionKind(schema.type),\n        label: this.getLabelForValue(schema.const),\n        insertText: this.getInsertTextForValue(schema.const, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: this.fromMarkup(schema.markdownDescription) || schema.description\n      });\n    }\n    if (Array.isArray(schema.enum)) {\n      for (var i = 0, length = schema.enum.length; i < length; i++) {\n        var enm = schema.enum[i];\n        var documentation = this.fromMarkup(schema.markdownDescription) || schema.description;\n        if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {\n          documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);\n        } else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n          documentation = schema.enumDescriptions[i];\n        }\n        collector.add({\n          kind: this.getSuggestionKind(schema.type),\n          label: this.getLabelForValue(enm),\n          insertText: this.getInsertTextForValue(enm, separatorAfter),\n          insertTextFormat: InsertTextFormat.Snippet,\n          documentation: documentation\n        });\n      }\n    }\n  };\n  JSONCompletion.prototype.collectTypes = function (schema, types) {\n    if (Array.isArray(schema.enum) || isDefined(schema.const)) {\n      return;\n    }\n    var type = schema.type;\n    if (Array.isArray(type)) {\n      type.forEach(function (t) {\n        return types[t] = true;\n      });\n    } else {\n      types[type] = true;\n    }\n  };\n  JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n    if (types['object']) {\n      collector.add({\n        kind: this.getSuggestionKind('object'),\n        label: '{}',\n        insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('defaults.object', 'New object'),\n        documentation: ''\n      });\n    }\n    if (types['array']) {\n      collector.add({\n        kind: this.getSuggestionKind('array'),\n        label: '[]',\n        insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        detail: localize('defaults.array', 'New array'),\n        documentation: ''\n      });\n    }\n  };\n  JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n    collector.add({\n      kind: this.getSuggestionKind('boolean'),\n      label: value ? 'true' : 'false',\n      insertText: this.getInsertTextForValue(value, separatorAfter),\n      insertTextFormat: InsertTextFormat.Snippet,\n      documentation: ''\n    });\n  };\n  JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n    collector.add({\n      kind: this.getSuggestionKind('null'),\n      label: 'null',\n      insertText: 'null' + separatorAfter,\n      insertTextFormat: InsertTextFormat.Snippet,\n      documentation: ''\n    });\n  };\n  JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n    var _this = this;\n    var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) {\n      return schema === 'http' || schema === 'https';\n    });\n    schemaIds.forEach(function (schemaId) {\n      return collector.add({\n        kind: CompletionItemKind.Module,\n        label: _this.getLabelForValue(schemaId),\n        filterText: _this.getFilterTextForValue(schemaId),\n        insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n        insertTextFormat: InsertTextFormat.Snippet,\n        documentation: ''\n      });\n    });\n  };\n  JSONCompletion.prototype.getLabelForValue = function (value) {\n    return JSON.stringify(value);\n  };\n  JSONCompletion.prototype.getFilterTextForValue = function (value) {\n    return JSON.stringify(value);\n  };\n  JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n    return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n  };\n  JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n    var label = JSON.stringify(value);\n    return label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n  };\n  JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n    return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n  };\n\n  JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n    var text = JSON.stringify(value, null, '\\t');\n    if (text === '{}') {\n      return '{$1}' + separatorAfter;\n    } else if (text === '[]') {\n      return '[$1]' + separatorAfter;\n    }\n    return this.getInsertTextForPlainText(text + separatorAfter);\n  };\n  JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n    var replacer = function replacer(value) {\n      if (typeof value === 'string') {\n        if (value[0] === '^') {\n          return value.substr(1);\n        }\n      }\n      return JSON.stringify(value);\n    };\n    return stringifyObject(value, '', replacer) + separatorAfter;\n  };\n  JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n    switch (typeof value) {\n      case 'object':\n        if (value === null) {\n          return '${1:null}' + separatorAfter;\n        }\n        return this.getInsertTextForValue(value, separatorAfter);\n      case 'string':\n        var snippetValue = JSON.stringify(value);\n        snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n        snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n        return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n      case 'number':\n      case 'boolean':\n        return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n    }\n    return this.getInsertTextForValue(value, separatorAfter);\n  };\n  JSONCompletion.prototype.getSuggestionKind = function (type) {\n    if (Array.isArray(type)) {\n      var array = type;\n      type = array.length > 0 ? array[0] : null;\n    }\n    if (!type) {\n      return CompletionItemKind.Value;\n    }\n    switch (type) {\n      case 'string':\n        return CompletionItemKind.Value;\n      case 'object':\n        return CompletionItemKind.Module;\n      case 'property':\n        return CompletionItemKind.Property;\n      default:\n        return CompletionItemKind.Value;\n    }\n  };\n  JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n    switch (node.type) {\n      case 'array':\n        return '[]';\n      case 'object':\n        return '{}';\n      default:\n        var content = document.getText().substr(node.offset, node.length);\n        return content;\n    }\n  };\n  JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n    switch (node.type) {\n      case 'array':\n        return this.getInsertTextForValue([], separatorAfter);\n      case 'object':\n        return this.getInsertTextForValue({}, separatorAfter);\n      default:\n        var content = document.getText().substr(node.offset, node.length) + separatorAfter;\n        return this.getInsertTextForPlainText(content);\n    }\n  };\n  JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n    var propertyText = this.getInsertTextForValue(key, '');\n    if (!addValue) {\n      return propertyText;\n    }\n    var resultText = propertyText + ': ';\n    var value;\n    var nValueProposals = 0;\n    if (propertySchema) {\n      if (Array.isArray(propertySchema.defaultSnippets)) {\n        if (propertySchema.defaultSnippets.length === 1) {\n          var body = propertySchema.defaultSnippets[0].body;\n          if (isDefined(body)) {\n            value = this.getInsertTextForSnippetValue(body, '');\n          }\n        }\n        nValueProposals += propertySchema.defaultSnippets.length;\n      }\n      if (propertySchema.enum) {\n        if (!value && propertySchema.enum.length === 1) {\n          value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n        }\n        nValueProposals += propertySchema.enum.length;\n      }\n      if (isDefined(propertySchema.default)) {\n        if (!value) {\n          value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n        }\n        nValueProposals++;\n      }\n      if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {\n        if (!value) {\n          value = this.getInsertTextForGuessedValue(propertySchema.examples[0], '');\n        }\n        nValueProposals += propertySchema.examples.length;\n      }\n      if (nValueProposals === 0) {\n        var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n        if (!type) {\n          if (propertySchema.properties) {\n            type = 'object';\n          } else if (propertySchema.items) {\n            type = 'array';\n          }\n        }\n        switch (type) {\n          case 'boolean':\n            value = '$1';\n            break;\n          case 'string':\n            value = '\"$1\"';\n            break;\n          case 'object':\n            value = '{$1}';\n            break;\n          case 'array':\n            value = '[$1]';\n            break;\n          case 'number':\n          case 'integer':\n            value = '${1:0}';\n            break;\n          case 'null':\n            value = '${1:null}';\n            break;\n          default:\n            return propertyText;\n        }\n      }\n    }\n    if (!value || nValueProposals > 1) {\n      value = '$1';\n    }\n    return resultText + value + separatorAfter;\n  };\n  JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n    var i = offset - 1;\n    var text = document.getText();\n    while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n      i--;\n    }\n    return text.substring(i + 1, offset);\n  };\n  JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n    var scanner = Json.createScanner(document.getText(), true);\n    scanner.setPosition(offset);\n    var token = scanner.scan();\n    switch (token) {\n      case 5 /* CommaToken */:\n      case 2 /* CloseBraceToken */:\n      case 4 /* CloseBracketToken */:\n      case 17 /* EOF */:\n        return '';\n      default:\n        return ',';\n    }\n  };\n  JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n    var scanner = Json.createScanner(document.getText(), true);\n    var children = node.items;\n    for (var i = children.length - 1; i >= 0; i--) {\n      var child = children[i];\n      if (offset > child.offset + child.length) {\n        scanner.setPosition(child.offset + child.length);\n        var token = scanner.scan();\n        if (token === 5 /* CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n          return i + 1;\n        }\n        return i;\n      } else if (offset >= child.offset) {\n        return i;\n      }\n    }\n    return 0;\n  };\n  JSONCompletion.prototype.isInComment = function (document, start, offset) {\n    var scanner = Json.createScanner(document.getText(), false);\n    scanner.setPosition(start);\n    var token = scanner.scan();\n    while (token !== 17 /* EOF */ && scanner.getTokenOffset() + scanner.getTokenLength() < offset) {\n      token = scanner.scan();\n    }\n    return (token === 12 /* LineCommentTrivia */ || token === 13 /* BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;\n  };\n  JSONCompletion.prototype.fromMarkup = function (markupString) {\n    if (markupString && this.doesSupportMarkdown()) {\n      return {\n        kind: MarkupKind.Markdown,\n        value: markupString\n      };\n    }\n    return undefined;\n  };\n  JSONCompletion.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n    return this.supportsMarkdown;\n  };\n  JSONCompletion.prototype.doesSupportsCommitCharacters = function () {\n    if (!isDefined(this.supportsCommitCharacters)) {\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;\n    }\n    return this.supportsCommitCharacters;\n  };\n  return JSONCompletion;\n}();\nexport { JSONCompletion };","map":{"version":3,"names":["Parser","Json","stringifyObject","endsWith","isDefined","CompletionItem","CompletionItemKind","Range","TextEdit","InsertTextFormat","MarkupKind","nls","localize","loadMessageBundle","valueCommitCharacters","propertyCommitCharacters","JSONCompletion","schemaService","contributions","promiseConstructor","clientCapabilities","Promise","templateVarIdCounter","prototype","doResolve","item","i","length","resolveCompletion","resolver","resolve","doComplete","document","position","doc","_this","result","items","isIncomplete","text","getText","offset","offsetAt","node","getNodeFromOffset","isInComment","ch","type","parent","currentWord","getCurrentWord","overwriteRange","create","positionAt","overwriteStart","supportsCommitCharacters","proposed","collector","add","suggestion","label","existing","replace","shortendedLabel","substr","trim","textEdit","insertText","commitCharacters","kind","Property","push","documentation","setAsIncomplete","error","message","console","log","getNumberOfProposals","getSchemaForResource","uri","then","schema","collectionPromises","addValue","currentKey","currentProperty","keyNode","valueNode","properties","forEach","p","value","separatorAfter_1","evaluateSeparatorAfter","end","getPropertyCompletions","getSchemaLessPropertyCompletions","location_1","getNodePath","contribution","collectPromise","collectPropertyCompletions","charAt","getLabelForValue","getInsertTextForProperty","insertTextFormat","Snippet","types","getValueCompletions","getSchemaLessValueCompletions","getContributedValueCompletions","all","offsetForSeparator","separatorAfter","addFillerValueCompletions","matchingSchemas","getMatchingSchemas","s","inverted","schemaProperties_1","Object","keys","key","propertySchema","deprecationMessage","doNotSuggest","proposal","filterText","getFilterTextForValue","fromMarkup","markdownDescription","description","command","title","collectCompletionsForSimilarObject","obj","getInsertTextForValue","parentKey_1","visit","n","getSuggestionKind","collectSuggestionsForValues","contains","getLabelTextForMatchingNode","getInsertTextForMatchingNode","addBooleanValueCompletion","colonOffset","parentKey_2","addDollarSchemaCompletions","parentKey_3","parentKey","addSchemaValueCompletions","valueNode_1","separatorAfter_2","Array","isArray","index","findItemAtOffset","addNullValueCompletion","collectDefaultCompletions","parentKey_4","location_2","collectValueCompletions","addEnumValueCompletions","addDefaultValueCompletions","collectTypes","allOf","anyOf","oneOf","arrayDepth","hasProposals","default","detail","examples","example","defaultSnippets","body","type_1","getInsertTextForSnippetValue","getFilterTextForSnippetValue","getLabelForSnippetValue","bodyText","prefix","suffix","indent","split","join","const","enum","enm","markdownEnumDescriptions","doesSupportMarkdown","enumDescriptions","t","getInsertTextForGuessedValue","schemaIds","getRegisteredSchemaIds","schemaId","Module","JSON","stringify","getInsertTextForPlainText","replacer","snippetValue","array","Value","content","propertyText","resultText","nValueProposals","indexOf","substring","scanner","createScanner","setPosition","token","scan","children","child","getTokenOffset","getTokenLength","start","markupString","Markdown","undefined","supportsMarkdown","completion","textDocument","completionItem","documentationFormat","doesSupportsCommitCharacters","commitCharactersSupport"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/services/jsonCompletion.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Parser from '../parser/jsonParser.js';\nimport * as Json from './../../jsonc-parser/main.js';\nimport { stringifyObject } from '../utils/json.js';\nimport { endsWith } from '../utils/strings.js';\nimport { isDefined } from '../utils/objects.js';\nimport { CompletionItem, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind } from '../jsonLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nvar valueCommitCharacters = [',', '}', ']'];\nvar propertyCommitCharacters = [':'];\nvar JSONCompletion = /** @class */ (function () {\n    function JSONCompletion(schemaService, contributions, promiseConstructor, clientCapabilities) {\n        if (contributions === void 0) { contributions = []; }\n        if (promiseConstructor === void 0) { promiseConstructor = Promise; }\n        if (clientCapabilities === void 0) { clientCapabilities = {}; }\n        this.schemaService = schemaService;\n        this.contributions = contributions;\n        this.promiseConstructor = promiseConstructor;\n        this.clientCapabilities = clientCapabilities;\n        this.templateVarIdCounter = 0;\n    }\n    JSONCompletion.prototype.doResolve = function (item) {\n        for (var i = this.contributions.length - 1; i >= 0; i--) {\n            if (this.contributions[i].resolveCompletion) {\n                var resolver = this.contributions[i].resolveCompletion(item);\n                if (resolver) {\n                    return resolver;\n                }\n            }\n        }\n        return this.promiseConstructor.resolve(item);\n    };\n    JSONCompletion.prototype.doComplete = function (document, position, doc) {\n        var _this = this;\n        var result = {\n            items: [],\n            isIncomplete: false\n        };\n        var text = document.getText();\n        var offset = document.offsetAt(position);\n        var node = doc.getNodeFromOffset(offset, true);\n        if (this.isInComment(document, node ? node.offset : 0, offset)) {\n            return Promise.resolve(result);\n        }\n        if (node && (offset === node.offset + node.length) && offset > 0) {\n            var ch = text[offset - 1];\n            if (node.type === 'object' && ch === '}' || node.type === 'array' && ch === ']') {\n                // after ] or }\n                node = node.parent;\n            }\n        }\n        var currentWord = this.getCurrentWord(document, offset);\n        var overwriteRange = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\n        }\n        else {\n            var overwriteStart = offset - currentWord.length;\n            if (overwriteStart > 0 && text[overwriteStart - 1] === '\"') {\n                overwriteStart--;\n            }\n            overwriteRange = Range.create(document.positionAt(overwriteStart), position);\n        }\n        var supportsCommitCharacters = false; //this.doesSupportsCommitCharacters(); disabled for now, waiting for new API: https://github.com/microsoft/vscode/issues/42544\n        var proposed = {};\n        var collector = {\n            add: function (suggestion) {\n                var label = suggestion.label;\n                var existing = proposed[label];\n                if (!existing) {\n                    label = label.replace(/[\\n]/g, 'â†µ');\n                    if (label.length > 60) {\n                        var shortendedLabel = label.substr(0, 57).trim() + '...';\n                        if (!proposed[shortendedLabel]) {\n                            label = shortendedLabel;\n                        }\n                    }\n                    if (overwriteRange) {\n                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\n                    }\n                    if (supportsCommitCharacters) {\n                        suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;\n                    }\n                    suggestion.label = label;\n                    proposed[label] = suggestion;\n                    result.items.push(suggestion);\n                }\n                else if (!existing.documentation) {\n                    existing.documentation = suggestion.documentation;\n                }\n            },\n            setAsIncomplete: function () {\n                result.isIncomplete = true;\n            },\n            error: function (message) {\n                console.error(message);\n            },\n            log: function (message) {\n                console.log(message);\n            },\n            getNumberOfProposals: function () {\n                return result.items.length;\n            }\n        };\n        return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n            var collectionPromises = [];\n            var addValue = true;\n            var currentKey = '';\n            var currentProperty = null;\n            if (node) {\n                if (node.type === 'string') {\n                    var parent = node.parent;\n                    if (parent && parent.type === 'property' && parent.keyNode === node) {\n                        addValue = !parent.valueNode;\n                        currentProperty = parent;\n                        currentKey = text.substr(node.offset + 1, node.length - 2);\n                        if (parent) {\n                            node = parent.parent;\n                        }\n                    }\n                }\n            }\n            // proposals for properties\n            if (node && node.type === 'object') {\n                // don't suggest keys when the cursor is just before the opening curly brace\n                if (node.offset === offset) {\n                    return result;\n                }\n                // don't suggest properties that are already present\n                var properties = node.properties;\n                properties.forEach(function (p) {\n                    if (!currentProperty || currentProperty !== p) {\n                        proposed[p.keyNode.value] = CompletionItem.create('__');\n                    }\n                });\n                var separatorAfter_1 = '';\n                if (addValue) {\n                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\n                }\n                if (schema) {\n                    // property proposals with schema\n                    _this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter_1, collector);\n                }\n                else {\n                    // property proposals without schema\n                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\n                }\n                var location_1 = Parser.getNodePath(node);\n                _this.contributions.forEach(function (contribution) {\n                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === '', collector);\n                    if (collectPromise) {\n                        collectionPromises.push(collectPromise);\n                    }\n                });\n                if ((!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '\"')) {\n                    collector.add({\n                        kind: CompletionItemKind.Property,\n                        label: _this.getLabelForValue(currentWord),\n                        insertText: _this.getInsertTextForProperty(currentWord, null, false, separatorAfter_1),\n                        insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                    });\n                    collector.setAsIncomplete();\n                }\n            }\n            // proposals for values\n            var types = {};\n            if (schema) {\n                // value proposals with schema\n                _this.getValueCompletions(schema, doc, node, offset, document, collector, types);\n            }\n            else {\n                // value proposals without schema\n                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\n            }\n            if (_this.contributions.length > 0) {\n                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\n            }\n            return _this.promiseConstructor.all(collectionPromises).then(function () {\n                if (collector.getNumberOfProposals() === 0) {\n                    var offsetForSeparator = offset;\n                    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n                        offsetForSeparator = node.offset + node.length;\n                    }\n                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);\n                    _this.addFillerValueCompletions(types, separatorAfter, collector);\n                }\n                return result;\n            });\n        });\n    };\n    JSONCompletion.prototype.getPropertyCompletions = function (schema, doc, node, addValue, separatorAfter, collector) {\n        var _this = this;\n        var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n        matchingSchemas.forEach(function (s) {\n            if (s.node === node && !s.inverted) {\n                var schemaProperties_1 = s.schema.properties;\n                if (schemaProperties_1) {\n                    Object.keys(schemaProperties_1).forEach(function (key) {\n                        var propertySchema = schemaProperties_1[key];\n                        if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\n                            var proposal = {\n                                kind: CompletionItemKind.Property,\n                                label: key,\n                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\n                                insertTextFormat: InsertTextFormat.Snippet,\n                                filterText: _this.getFilterTextForValue(key),\n                                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || '',\n                            };\n                            if (endsWith(proposal.insertText, \"$1\" + separatorAfter)) {\n                                proposal.command = {\n                                    title: 'Suggest',\n                                    command: 'editor.action.triggerSuggest'\n                                };\n                            }\n                            collector.add(proposal);\n                        }\n                    });\n                }\n            }\n        });\n    };\n    JSONCompletion.prototype.getSchemaLessPropertyCompletions = function (doc, node, currentKey, collector) {\n        var _this = this;\n        var collectCompletionsForSimilarObject = function (obj) {\n            obj.properties.forEach(function (p) {\n                var key = p.keyNode.value;\n                collector.add({\n                    kind: CompletionItemKind.Property,\n                    label: key,\n                    insertText: _this.getInsertTextForValue(key, ''),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: _this.getFilterTextForValue(key),\n                    documentation: ''\n                });\n            });\n        };\n        if (node.parent) {\n            if (node.parent.type === 'property') {\n                // if the object is a property value, check the tree for other objects that hang under a property of the same name\n                var parentKey_1 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === 'object') {\n                        collectCompletionsForSimilarObject(n.valueNode);\n                    }\n                    return true;\n                });\n            }\n            else if (node.parent.type === 'array') {\n                // if the object is in an array, use all other array elements as similar objects\n                node.parent.items.forEach(function (n) {\n                    if (n.type === 'object' && n !== node) {\n                        collectCompletionsForSimilarObject(n);\n                    }\n                });\n            }\n        }\n        else if (node.type === 'object') {\n            collector.add({\n                kind: CompletionItemKind.Property,\n                label: '$schema',\n                insertText: this.getInsertTextForProperty('$schema', null, true, ''),\n                insertTextFormat: InsertTextFormat.Snippet, documentation: '',\n                filterText: this.getFilterTextForValue(\"$schema\")\n            });\n        }\n    };\n    JSONCompletion.prototype.getSchemaLessValueCompletions = function (doc, node, offset, document, collector) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            node = node.parent;\n        }\n        if (!node) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: 'Empty object',\n                insertText: this.getInsertTextForValue({}, ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: 'Empty array',\n                insertText: this.getInsertTextForValue([], ''),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: ''\n            });\n            return;\n        }\n        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\n        var collectSuggestionsForValues = function (value) {\n            if (!Parser.contains(value.parent, offset, true)) {\n                collector.add({\n                    kind: _this.getSuggestionKind(value.type),\n                    label: _this.getLabelTextForMatchingNode(value, document),\n                    insertText: _this.getInsertTextForMatchingNode(value, document, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n                });\n            }\n            if (value.type === 'boolean') {\n                _this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\n            }\n        };\n        if (node.type === 'property') {\n            if (offset > node.colonOffset) {\n                var valueNode = node.valueNode;\n                if (valueNode && (offset > (valueNode.offset + valueNode.length) || valueNode.type === 'object' || valueNode.type === 'array')) {\n                    return;\n                }\n                // suggest values at the same key\n                var parentKey_2 = node.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n.keyNode.value === parentKey_2 && n.valueNode) {\n                        collectSuggestionsForValues(n.valueNode);\n                    }\n                    return true;\n                });\n                if (parentKey_2 === '$schema' && node.parent && !node.parent.parent) {\n                    this.addDollarSchemaCompletions(separatorAfter, collector);\n                }\n            }\n        }\n        if (node.type === 'array') {\n            if (node.parent && node.parent.type === 'property') {\n                // suggest items of an array at the same key\n                var parentKey_3 = node.parent.keyNode.value;\n                doc.visit(function (n) {\n                    if (n.type === 'property' && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === 'array') {\n                        n.valueNode.items.forEach(collectSuggestionsForValues);\n                    }\n                    return true;\n                });\n            }\n            else {\n                // suggest items in the same array\n                node.items.forEach(collectSuggestionsForValues);\n            }\n        }\n    };\n    JSONCompletion.prototype.getValueCompletions = function (schema, doc, node, offset, document, collector, types) {\n        var _this = this;\n        var offsetForSeparator = offset;\n        var parentKey = null;\n        var valueNode = null;\n        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {\n            offsetForSeparator = node.offset + node.length;\n            valueNode = node;\n            node = node.parent;\n        }\n        if (!node) {\n            this.addSchemaValueCompletions(schema.schema, '', collector, types);\n            return;\n        }\n        if ((node.type === 'property') && offset > node.colonOffset) {\n            var valueNode_1 = node.valueNode;\n            if (valueNode_1 && offset > (valueNode_1.offset + valueNode_1.length)) {\n                return; // we are past the value node\n            }\n            parentKey = node.keyNode.value;\n            node = node.parent;\n        }\n        if (node && (parentKey !== null || node.type === 'array')) {\n            var separatorAfter_2 = this.evaluateSeparatorAfter(document, offsetForSeparator);\n            var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\n            matchingSchemas.forEach(function (s) {\n                if (s.node === node && !s.inverted && s.schema) {\n                    if (node.type === 'array' && s.schema.items) {\n                        if (Array.isArray(s.schema.items)) {\n                            var index = _this.findItemAtOffset(node, document, offset);\n                            if (index < s.schema.items.length) {\n                                _this.addSchemaValueCompletions(s.schema.items[index], separatorAfter_2, collector, types);\n                            }\n                        }\n                        else {\n                            _this.addSchemaValueCompletions(s.schema.items, separatorAfter_2, collector, types);\n                        }\n                    }\n                    if (s.schema.properties) {\n                        var propertySchema = s.schema.properties[parentKey];\n                        if (propertySchema) {\n                            _this.addSchemaValueCompletions(propertySchema, separatorAfter_2, collector, types);\n                        }\n                    }\n                }\n            });\n            if (parentKey === '$schema' && !node.parent) {\n                this.addDollarSchemaCompletions(separatorAfter_2, collector);\n            }\n            if (types['boolean']) {\n                this.addBooleanValueCompletion(true, separatorAfter_2, collector);\n                this.addBooleanValueCompletion(false, separatorAfter_2, collector);\n            }\n            if (types['null']) {\n                this.addNullValueCompletion(separatorAfter_2, collector);\n            }\n        }\n    };\n    JSONCompletion.prototype.getContributedValueCompletions = function (doc, node, offset, document, collector, collectionPromises) {\n        if (!node) {\n            this.contributions.forEach(function (contribution) {\n                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\n                if (collectPromise) {\n                    collectionPromises.push(collectPromise);\n                }\n            });\n        }\n        else {\n            if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {\n                node = node.parent;\n            }\n            if ((node.type === 'property') && offset > node.colonOffset) {\n                var parentKey_4 = node.keyNode.value;\n                var valueNode = node.valueNode;\n                if (!valueNode || offset <= (valueNode.offset + valueNode.length)) {\n                    var location_2 = Parser.getNodePath(node.parent);\n                    this.contributions.forEach(function (contribution) {\n                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);\n                        if (collectPromise) {\n                            collectionPromises.push(collectPromise);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    JSONCompletion.prototype.addSchemaValueCompletions = function (schema, separatorAfter, collector, types) {\n        var _this = this;\n        if (typeof schema === 'object') {\n            this.addEnumValueCompletions(schema, separatorAfter, collector);\n            this.addDefaultValueCompletions(schema, separatorAfter, collector);\n            this.collectTypes(schema, types);\n            if (Array.isArray(schema.allOf)) {\n                schema.allOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.anyOf)) {\n                schema.anyOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n            if (Array.isArray(schema.oneOf)) {\n                schema.oneOf.forEach(function (s) { return _this.addSchemaValueCompletions(s, separatorAfter, collector, types); });\n            }\n        }\n    };\n    JSONCompletion.prototype.addDefaultValueCompletions = function (schema, separatorAfter, collector, arrayDepth) {\n        var _this = this;\n        if (arrayDepth === void 0) { arrayDepth = 0; }\n        var hasProposals = false;\n        if (isDefined(schema.default)) {\n            var type = schema.type;\n            var value = schema.default;\n            for (var i = arrayDepth; i > 0; i--) {\n                value = [value];\n                type = 'array';\n            }\n            collector.add({\n                kind: this.getSuggestionKind(type),\n                label: this.getLabelForValue(value),\n                insertText: this.getInsertTextForValue(value, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('json.suggest.default', 'Default value')\n            });\n            hasProposals = true;\n        }\n        if (Array.isArray(schema.examples)) {\n            schema.examples.forEach(function (example) {\n                var type = schema.type;\n                var value = example;\n                for (var i = arrayDepth; i > 0; i--) {\n                    value = [value];\n                    type = 'array';\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: _this.getLabelForValue(value),\n                    insertText: _this.getInsertTextForValue(value, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet\n                });\n                hasProposals = true;\n            });\n        }\n        if (Array.isArray(schema.defaultSnippets)) {\n            schema.defaultSnippets.forEach(function (s) {\n                var type = schema.type;\n                var value = s.body;\n                var label = s.label;\n                var insertText;\n                var filterText;\n                if (isDefined(value)) {\n                    var type_1 = schema.type;\n                    for (var i = arrayDepth; i > 0; i--) {\n                        value = [value];\n                        type_1 = 'array';\n                    }\n                    insertText = _this.getInsertTextForSnippetValue(value, separatorAfter);\n                    filterText = _this.getFilterTextForSnippetValue(value);\n                    label = label || _this.getLabelForSnippetValue(value);\n                }\n                else if (typeof s.bodyText === 'string') {\n                    var prefix = '', suffix = '', indent = '';\n                    for (var i = arrayDepth; i > 0; i--) {\n                        prefix = prefix + indent + '[\\n';\n                        suffix = suffix + '\\n' + indent + ']';\n                        indent += '\\t';\n                        type = 'array';\n                    }\n                    insertText = prefix + indent + s.bodyText.split('\\n').join('\\n' + indent) + suffix + separatorAfter;\n                    label = label || insertText,\n                        filterText = insertText.replace(/[\\n]/g, ''); // remove new lines\n                }\n                collector.add({\n                    kind: _this.getSuggestionKind(type),\n                    label: label,\n                    documentation: _this.fromMarkup(s.markdownDescription) || s.description,\n                    insertText: insertText,\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    filterText: filterText\n                });\n                hasProposals = true;\n            });\n        }\n        if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items)) {\n            this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\n        }\n    };\n    JSONCompletion.prototype.addEnumValueCompletions = function (schema, separatorAfter, collector) {\n        if (isDefined(schema.const)) {\n            collector.add({\n                kind: this.getSuggestionKind(schema.type),\n                label: this.getLabelForValue(schema.const),\n                insertText: this.getInsertTextForValue(schema.const, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                documentation: this.fromMarkup(schema.markdownDescription) || schema.description\n            });\n        }\n        if (Array.isArray(schema.enum)) {\n            for (var i = 0, length = schema.enum.length; i < length; i++) {\n                var enm = schema.enum[i];\n                var documentation = this.fromMarkup(schema.markdownDescription) || schema.description;\n                if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {\n                    documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);\n                }\n                else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\n                    documentation = schema.enumDescriptions[i];\n                }\n                collector.add({\n                    kind: this.getSuggestionKind(schema.type),\n                    label: this.getLabelForValue(enm),\n                    insertText: this.getInsertTextForValue(enm, separatorAfter),\n                    insertTextFormat: InsertTextFormat.Snippet,\n                    documentation: documentation\n                });\n            }\n        }\n    };\n    JSONCompletion.prototype.collectTypes = function (schema, types) {\n        if (Array.isArray(schema.enum) || isDefined(schema.const)) {\n            return;\n        }\n        var type = schema.type;\n        if (Array.isArray(type)) {\n            type.forEach(function (t) { return types[t] = true; });\n        }\n        else {\n            types[type] = true;\n        }\n    };\n    JSONCompletion.prototype.addFillerValueCompletions = function (types, separatorAfter, collector) {\n        if (types['object']) {\n            collector.add({\n                kind: this.getSuggestionKind('object'),\n                label: '{}',\n                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.object', 'New object'),\n                documentation: ''\n            });\n        }\n        if (types['array']) {\n            collector.add({\n                kind: this.getSuggestionKind('array'),\n                label: '[]',\n                insertText: this.getInsertTextForGuessedValue([], separatorAfter),\n                insertTextFormat: InsertTextFormat.Snippet,\n                detail: localize('defaults.array', 'New array'),\n                documentation: ''\n            });\n        }\n    };\n    JSONCompletion.prototype.addBooleanValueCompletion = function (value, separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('boolean'),\n            label: value ? 'true' : 'false',\n            insertText: this.getInsertTextForValue(value, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addNullValueCompletion = function (separatorAfter, collector) {\n        collector.add({\n            kind: this.getSuggestionKind('null'),\n            label: 'null',\n            insertText: 'null' + separatorAfter,\n            insertTextFormat: InsertTextFormat.Snippet,\n            documentation: ''\n        });\n    };\n    JSONCompletion.prototype.addDollarSchemaCompletions = function (separatorAfter, collector) {\n        var _this = this;\n        var schemaIds = this.schemaService.getRegisteredSchemaIds(function (schema) { return schema === 'http' || schema === 'https'; });\n        schemaIds.forEach(function (schemaId) { return collector.add({\n            kind: CompletionItemKind.Module,\n            label: _this.getLabelForValue(schemaId),\n            filterText: _this.getFilterTextForValue(schemaId),\n            insertText: _this.getInsertTextForValue(schemaId, separatorAfter),\n            insertTextFormat: InsertTextFormat.Snippet, documentation: ''\n        }); });\n    };\n    JSONCompletion.prototype.getLabelForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForValue = function (value) {\n        return JSON.stringify(value);\n    };\n    JSONCompletion.prototype.getFilterTextForSnippetValue = function (value) {\n        return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getLabelForSnippetValue = function (value) {\n        var label = JSON.stringify(value);\n        return label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, '$1');\n    };\n    JSONCompletion.prototype.getInsertTextForPlainText = function (text) {\n        return text.replace(/[\\\\\\$\\}]/g, '\\\\$&'); // escape $, \\ and } \n    };\n    JSONCompletion.prototype.getInsertTextForValue = function (value, separatorAfter) {\n        var text = JSON.stringify(value, null, '\\t');\n        if (text === '{}') {\n            return '{$1}' + separatorAfter;\n        }\n        else if (text === '[]') {\n            return '[$1]' + separatorAfter;\n        }\n        return this.getInsertTextForPlainText(text + separatorAfter);\n    };\n    JSONCompletion.prototype.getInsertTextForSnippetValue = function (value, separatorAfter) {\n        var replacer = function (value) {\n            if (typeof value === 'string') {\n                if (value[0] === '^') {\n                    return value.substr(1);\n                }\n            }\n            return JSON.stringify(value);\n        };\n        return stringifyObject(value, '', replacer) + separatorAfter;\n    };\n    JSONCompletion.prototype.getInsertTextForGuessedValue = function (value, separatorAfter) {\n        switch (typeof value) {\n            case 'object':\n                if (value === null) {\n                    return '${1:null}' + separatorAfter;\n                }\n                return this.getInsertTextForValue(value, separatorAfter);\n            case 'string':\n                var snippetValue = JSON.stringify(value);\n                snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes\n                snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \\ and }\n                return '\"${1:' + snippetValue + '}\"' + separatorAfter;\n            case 'number':\n            case 'boolean':\n                return '${1:' + JSON.stringify(value) + '}' + separatorAfter;\n        }\n        return this.getInsertTextForValue(value, separatorAfter);\n    };\n    JSONCompletion.prototype.getSuggestionKind = function (type) {\n        if (Array.isArray(type)) {\n            var array = type;\n            type = array.length > 0 ? array[0] : null;\n        }\n        if (!type) {\n            return CompletionItemKind.Value;\n        }\n        switch (type) {\n            case 'string': return CompletionItemKind.Value;\n            case 'object': return CompletionItemKind.Module;\n            case 'property': return CompletionItemKind.Property;\n            default: return CompletionItemKind.Value;\n        }\n    };\n    JSONCompletion.prototype.getLabelTextForMatchingNode = function (node, document) {\n        switch (node.type) {\n            case 'array':\n                return '[]';\n            case 'object':\n                return '{}';\n            default:\n                var content = document.getText().substr(node.offset, node.length);\n                return content;\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForMatchingNode = function (node, document, separatorAfter) {\n        switch (node.type) {\n            case 'array':\n                return this.getInsertTextForValue([], separatorAfter);\n            case 'object':\n                return this.getInsertTextForValue({}, separatorAfter);\n            default:\n                var content = document.getText().substr(node.offset, node.length) + separatorAfter;\n                return this.getInsertTextForPlainText(content);\n        }\n    };\n    JSONCompletion.prototype.getInsertTextForProperty = function (key, propertySchema, addValue, separatorAfter) {\n        var propertyText = this.getInsertTextForValue(key, '');\n        if (!addValue) {\n            return propertyText;\n        }\n        var resultText = propertyText + ': ';\n        var value;\n        var nValueProposals = 0;\n        if (propertySchema) {\n            if (Array.isArray(propertySchema.defaultSnippets)) {\n                if (propertySchema.defaultSnippets.length === 1) {\n                    var body = propertySchema.defaultSnippets[0].body;\n                    if (isDefined(body)) {\n                        value = this.getInsertTextForSnippetValue(body, '');\n                    }\n                }\n                nValueProposals += propertySchema.defaultSnippets.length;\n            }\n            if (propertySchema.enum) {\n                if (!value && propertySchema.enum.length === 1) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');\n                }\n                nValueProposals += propertySchema.enum.length;\n            }\n            if (isDefined(propertySchema.default)) {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.default, '');\n                }\n                nValueProposals++;\n            }\n            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {\n                if (!value) {\n                    value = this.getInsertTextForGuessedValue(propertySchema.examples[0], '');\n                }\n                nValueProposals += propertySchema.examples.length;\n            }\n            if (nValueProposals === 0) {\n                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\n                if (!type) {\n                    if (propertySchema.properties) {\n                        type = 'object';\n                    }\n                    else if (propertySchema.items) {\n                        type = 'array';\n                    }\n                }\n                switch (type) {\n                    case 'boolean':\n                        value = '$1';\n                        break;\n                    case 'string':\n                        value = '\"$1\"';\n                        break;\n                    case 'object':\n                        value = '{$1}';\n                        break;\n                    case 'array':\n                        value = '[$1]';\n                        break;\n                    case 'number':\n                    case 'integer':\n                        value = '${1:0}';\n                        break;\n                    case 'null':\n                        value = '${1:null}';\n                        break;\n                    default:\n                        return propertyText;\n                }\n            }\n        }\n        if (!value || nValueProposals > 1) {\n            value = '$1';\n        }\n        return resultText + value + separatorAfter;\n    };\n    JSONCompletion.prototype.getCurrentWord = function (document, offset) {\n        var i = offset - 1;\n        var text = document.getText();\n        while (i >= 0 && ' \\t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\n            i--;\n        }\n        return text.substring(i + 1, offset);\n    };\n    JSONCompletion.prototype.evaluateSeparatorAfter = function (document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        scanner.setPosition(offset);\n        var token = scanner.scan();\n        switch (token) {\n            case 5 /* CommaToken */:\n            case 2 /* CloseBraceToken */:\n            case 4 /* CloseBracketToken */:\n            case 17 /* EOF */:\n                return '';\n            default:\n                return ',';\n        }\n    };\n    JSONCompletion.prototype.findItemAtOffset = function (node, document, offset) {\n        var scanner = Json.createScanner(document.getText(), true);\n        var children = node.items;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (offset > child.offset + child.length) {\n                scanner.setPosition(child.offset + child.length);\n                var token = scanner.scan();\n                if (token === 5 /* CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\n                    return i + 1;\n                }\n                return i;\n            }\n            else if (offset >= child.offset) {\n                return i;\n            }\n        }\n        return 0;\n    };\n    JSONCompletion.prototype.isInComment = function (document, start, offset) {\n        var scanner = Json.createScanner(document.getText(), false);\n        scanner.setPosition(start);\n        var token = scanner.scan();\n        while (token !== 17 /* EOF */ && (scanner.getTokenOffset() + scanner.getTokenLength() < offset)) {\n            token = scanner.scan();\n        }\n        return (token === 12 /* LineCommentTrivia */ || token === 13 /* BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;\n    };\n    JSONCompletion.prototype.fromMarkup = function (markupString) {\n        if (markupString && this.doesSupportMarkdown()) {\n            return {\n                kind: MarkupKind.Markdown,\n                value: markupString\n            };\n        }\n        return undefined;\n    };\n    JSONCompletion.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    JSONCompletion.prototype.doesSupportsCommitCharacters = function () {\n        if (!isDefined(this.supportsCommitCharacters)) {\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;\n        }\n        return this.supportsCommitCharacters;\n    };\n    return JSONCompletion;\n}());\nexport { JSONCompletion };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}