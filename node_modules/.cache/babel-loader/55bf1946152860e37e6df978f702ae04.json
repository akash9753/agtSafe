{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\n\nvar src$utils$$ = require(\"./utils\"),\n  src$es5$$ = require(\"./es5\"),\n  src$compiler$$ = require(\"./compiler\"),\n  intl$messageformat$parser$$ = require(\"intl-messageformat-parser\");\nexports[\"default\"] = MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n  // Parse string messages into an AST.\n  var ast = typeof message === 'string' ? MessageFormat.__parse(message) : message;\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new TypeError('A message must be provided as a String or AST.');\n  }\n\n  // Creates a new object with the specified `formats` merged with the default\n  // formats.\n  formats = this._mergeFormats(MessageFormat.formats, formats);\n\n  // Defined first because it's used to build the format pattern.\n  src$es5$$.defineProperty(this, '_locale', {\n    value: this._resolveLocale(locales)\n  });\n\n  // Compile the `ast` to a pattern that is highly optimized for repeated\n  // `format()` invocations. **Note:** This passes the `locales` set provided\n  // to the constructor instead of just the resolved locale.\n  var pluralFn = this._findPluralRuleFunction(this._locale);\n  var pattern = this._compilePattern(ast, locales, formats, pluralFn);\n\n  // \"Bind\" `format()` method to `this` so it can be passed by reference like\n  // the other `Intl` APIs.\n  var messageFormat = this;\n  this.format = function (values) {\n    try {\n      return messageFormat._format(pattern, values);\n    } catch (e) {\n      if (e.variableId) {\n        throw new Error('The intl string context variable \\'' + e.variableId + '\\'' + ' was not provided to the string \\'' + message + '\\'');\n      } else {\n        throw e;\n      }\n    }\n  };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\n  enumerable: true,\n  value: {\n    number: {\n      'currency': {\n        style: 'currency'\n      },\n      'percent': {\n        style: 'percent'\n      }\n    },\n    date: {\n      'short': {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      'medium': {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'long': {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'full': {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      'short': {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      'medium': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      'long': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      'full': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  }\n});\n\n// Define internal private properties for dealing with locale data.\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {\n  value: src$es5$$.objCreate(null)\n});\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {\n  value: function value(data) {\n    if (!(data && data.locale)) {\n      throw new Error('Locale data provided to IntlMessageFormat is missing a ' + '`locale` property');\n    }\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n  }\n});\n\n// Defines `__parse()` static method as an exposed private.\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {\n  value: intl$messageformat$parser$$[\"default\"].parse\n});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\n  enumerable: true,\n  writable: true,\n  value: undefined\n});\nMessageFormat.prototype.resolvedOptions = function () {\n  // TODO: Provide anything else?\n  return {\n    locale: this._locale\n  };\n};\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n  var compiler = new src$compiler$$[\"default\"](locales, formats, pluralFn);\n  return compiler.compile(ast);\n};\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n  var localeData = MessageFormat.__localeData__;\n  var data = localeData[locale.toLowerCase()];\n\n  // The locale data is de-duplicated, so we have to traverse the locale's\n  // hierarchy until we find a `pluralRuleFunction` to return.\n  while (data) {\n    if (data.pluralRuleFunction) {\n      return data.pluralRuleFunction;\n    }\n    data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n  }\n  throw new Error('Locale data added to IntlMessageFormat is missing a ' + '`pluralRuleFunction` for :' + locale);\n};\nMessageFormat.prototype._format = function (pattern, values) {\n  var result = '',\n    i,\n    len,\n    part,\n    id,\n    value,\n    err;\n  for (i = 0, len = pattern.length; i < len; i += 1) {\n    part = pattern[i];\n\n    // Exist early for string parts.\n    if (typeof part === 'string') {\n      result += part;\n      continue;\n    }\n    id = part.id;\n\n    // Enforce that all required values are provided by the caller.\n    if (!(values && src$utils$$.hop.call(values, id))) {\n      err = new Error('A value must be provided for: ' + id);\n      err.variableId = id;\n      throw err;\n    }\n    value = values[id];\n\n    // Recursively format plural and select parts' option â€” which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if (part.options) {\n      result += this._format(part.getOption(value), values);\n    } else {\n      result += part.format(value);\n    }\n  }\n  return result;\n};\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n  var mergedFormats = {},\n    type,\n    mergedType;\n  for (type in defaults) {\n    if (!src$utils$$.hop.call(defaults, type)) {\n      continue;\n    }\n    mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\n    if (formats && src$utils$$.hop.call(formats, type)) {\n      src$utils$$.extend(mergedType, formats[type]);\n    }\n  }\n  return mergedFormats;\n};\nMessageFormat.prototype._resolveLocale = function (locales) {\n  if (typeof locales === 'string') {\n    locales = [locales];\n  }\n\n  // Create a copy of the array so we can push on the default locale.\n  locales = (locales || []).concat(MessageFormat.defaultLocale);\n  var localeData = MessageFormat.__localeData__;\n  var i, len, localeParts, data;\n\n  // Using the set of locales + the default locale, we look for the first one\n  // which that has been registered. When data does not exist for a locale, we\n  // traverse its ancestors to find something that's been registered within\n  // its hierarchy of locales. Since we lack the proper `parentLocale` data\n  // here, we must take a naive approach to traversal.\n  for (i = 0, len = locales.length; i < len; i += 1) {\n    localeParts = locales[i].toLowerCase().split('-');\n    while (localeParts.length) {\n      data = localeData[localeParts.join('-')];\n      if (data) {\n        // Return the normalized locale string; e.g., we return \"en-US\",\n        // instead of \"en-us\".\n        return data.locale;\n      }\n      localeParts.pop();\n    }\n  }\n  var defaultLocale = locales.pop();\n  throw new Error('No locale data has been added to IntlMessageFormat for: ' + locales.join(', ') + ', or the default locale: ' + defaultLocale);\n};","map":{"version":3,"sources":["src/core.js"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nimport {extend, hop} from './utils';\nimport {defineProperty, objCreate} from './es5';\nimport Compiler from './compiler';\nimport parser from 'intl-messageformat-parser';\n\nexport default MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n    // Parse string messages into an AST.\n    var ast = typeof message === 'string' ?\n            MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new TypeError('A message must be provided as a String or AST.');\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    formats = this._mergeFormats(MessageFormat.formats, formats);\n\n    // Defined first because it's used to build the format pattern.\n    defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    var pluralFn = this._findPluralRuleFunction(this._locale);\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var messageFormat = this;\n    this.format = function (values) {\n      try {\n        return messageFormat._format(pattern, values);\n      } catch (e) {\n        if (e.variableId) {\n          throw new Error(\n            'The intl string context variable \\'' + e.variableId + '\\'' +\n            ' was not provided to the string \\'' + message + '\\''\n          );\n        } else {\n          throw e;\n        }\n      }\n    };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\ndefineProperty(MessageFormat, 'formats', {\n    enumerable: true,\n\n    value: {\n        number: {\n            'currency': {\n                style: 'currency'\n            },\n\n            'percent': {\n                style: 'percent'\n            }\n        },\n\n        date: {\n            'short': {\n                month: 'numeric',\n                day  : 'numeric',\n                year : '2-digit'\n            },\n\n            'medium': {\n                month: 'short',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'long': {\n                month: 'long',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'full': {\n                weekday: 'long',\n                month  : 'long',\n                day    : 'numeric',\n                year   : 'numeric'\n            }\n        },\n\n        time: {\n            'short': {\n                hour  : 'numeric',\n                minute: 'numeric'\n            },\n\n            'medium':  {\n                hour  : 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n\n            'long': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            },\n\n            'full': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    }\n});\n\n// Define internal private properties for dealing with locale data.\ndefineProperty(MessageFormat, '__localeData__', {value: objCreate(null)});\ndefineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlMessageFormat is missing a ' +\n            '`locale` property'\n        );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n}});\n\n// Defines `__parse()` static method as an exposed private.\ndefineProperty(MessageFormat, '__parse', {value: parser.parse});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\ndefineProperty(MessageFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n    // TODO: Provide anything else?\n    return {\n        locale: this._locale\n    };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n    var compiler = new Compiler(locales, formats, pluralFn);\n    return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n    var localeData = MessageFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find a `pluralRuleFunction` to return.\n    while (data) {\n        if (data.pluralRuleFunction) {\n            return data.pluralRuleFunction;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlMessageFormat is missing a ' +\n        '`pluralRuleFunction` for :' + locale\n    );\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n    var result = '',\n        i, len, part, id, value, err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n        part = pattern[i];\n\n        // Exist early for string parts.\n        if (typeof part === 'string') {\n            result += part;\n            continue;\n        }\n\n        id = part.id;\n\n        // Enforce that all required values are provided by the caller.\n        if (!(values && hop.call(values, id))) {\n          err = new Error('A value must be provided for: ' + id);\n          err.variableId = id;\n          throw err;\n        }\n\n        value = values[id];\n\n        // Recursively format plural and select parts' option â€” which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (part.options) {\n            result += this._format(part.getOption(value), values);\n        } else {\n            result += part.format(value);\n        }\n    }\n\n    return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n    var mergedFormats = {},\n        type, mergedType;\n\n    for (type in defaults) {\n        if (!hop.call(defaults, type)) { continue; }\n\n        mergedFormats[type] = mergedType = objCreate(defaults[type]);\n\n        if (formats && hop.call(formats, type)) {\n            extend(mergedType, formats[type]);\n        }\n    }\n\n    return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlMessageFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}