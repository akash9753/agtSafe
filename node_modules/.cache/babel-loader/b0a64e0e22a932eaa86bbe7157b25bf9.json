{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport './clipboard.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { CopyOptions } from '../../browser/controller/textAreaInput.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nvar supportsCut = platform.isNative || document.queryCommandSupported('cut');\nvar supportsCopy = platform.isNative || document.queryCommandSupported('copy');\n// IE and Edge have trouble with setting html content in clipboard\nvar supportsCopyWithSyntaxHighlighting = supportsCopy && !browser.isEdgeOrIE;\n// Chrome incorrectly returns true for document.queryCommandSupported('paste')\n// when the paste feature is available but the calling script has insufficient\n// privileges to actually perform the action\nvar supportsPaste = platform.isNative || !browser.isChrome && document.queryCommandSupported('paste');\nvar ExecCommandAction = /** @class */function (_super) {\n  __extends(ExecCommandAction, _super);\n  function ExecCommandAction(browserCommand, opts) {\n    var _this = _super.call(this, opts) || this;\n    _this.browserCommand = browserCommand;\n    return _this;\n  }\n  ExecCommandAction.prototype.runCommand = function (accessor, args) {\n    var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      focusedEditor.trigger('keyboard', this.id, args);\n      return;\n    }\n    document.execCommand(this.browserCommand);\n  };\n  ExecCommandAction.prototype.run = function (accessor, editor) {\n    editor.focus();\n    document.execCommand(this.browserCommand);\n  };\n  return ExecCommandAction;\n}(EditorAction);\nvar ExecCommandCutAction = /** @class */function (_super) {\n  __extends(ExecCommandCutAction, _super);\n  function ExecCommandCutAction() {\n    var _this = this;\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\n      win: {\n        primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\n        secondary: [1024 /* Shift */ | 20 /* Delete */]\n      },\n      weight: 100 /* EditorContrib */\n    };\n    // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n    _this = _super.call(this, 'cut', {\n      id: 'editor.action.clipboardCutAction',\n      label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n      alias: 'Cut',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 1\n      },\n      menuOpts: {\n        menuId: 17 /* MenubarEditMenu */,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCut',\n          comment: ['&& denotes a mnemonic']\n        }, \"Cu&&t\"),\n        order: 1\n      }\n    }) || this;\n    return _this;\n  }\n  ExecCommandCutAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n    _super.prototype.run.call(this, accessor, editor);\n  };\n  return ExecCommandCutAction;\n}(ExecCommandAction);\nvar ExecCommandCopyAction = /** @class */function (_super) {\n  __extends(ExecCommandCopyAction, _super);\n  function ExecCommandCopyAction() {\n    var _this = this;\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\n      win: {\n        primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\n        secondary: [2048 /* CtrlCmd */ | 19 /* Insert */]\n      },\n      weight: 100 /* EditorContrib */\n    };\n    // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n    _this = _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyAction',\n      label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n      alias: 'Copy',\n      precondition: undefined,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 2\n      },\n      menuOpts: {\n        menuId: 17 /* MenubarEditMenu */,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCopy',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy\"),\n        order: 2\n      }\n    }) || this;\n    return _this;\n  }\n  ExecCommandCopyAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n    _super.prototype.run.call(this, accessor, editor);\n  };\n  return ExecCommandCopyAction;\n}(ExecCommandAction);\nvar ExecCommandPasteAction = /** @class */function (_super) {\n  __extends(ExecCommandPasteAction, _super);\n  function ExecCommandPasteAction() {\n    var _this = this;\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\n      win: {\n        primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\n        secondary: [1024 /* Shift */ | 19 /* Insert */]\n      },\n      weight: 100 /* EditorContrib */\n    };\n    // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n    _this = _super.call(this, 'paste', {\n      id: 'editor.action.clipboardPasteAction',\n      label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n      alias: 'Paste',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      contextMenuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 3\n      },\n      menuOpts: {\n        menuId: 17 /* MenubarEditMenu */,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miPaste',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Paste\"),\n        order: 3\n      }\n    }) || this;\n    return _this;\n  }\n  return ExecCommandPasteAction;\n}(ExecCommandAction);\nvar ExecCommandCopyWithSyntaxHighlightingAction = /** @class */function (_super) {\n  __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\n  function ExecCommandCopyWithSyntaxHighlightingAction() {\n    return _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100 /* EditorContrib */\n      }\n    }) || this;\n  }\n  ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n    _super.prototype.run.call(this, accessor, editor);\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  };\n  return ExecCommandCopyWithSyntaxHighlightingAction;\n}(ExecCommandAction);\nif (supportsCut) {\n  registerEditorAction(ExecCommandCutAction);\n}\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyAction);\n}\nif (supportsPaste) {\n  registerEditorAction(ExecCommandPasteAction);\n}\nif (supportsCopyWithSyntaxHighlighting) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","browser","platform","CopyOptions","EditorAction","registerEditorAction","ICodeEditorService","EditorContextKeys","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsCopyWithSyntaxHighlighting","isEdgeOrIE","supportsPaste","isChrome","ExecCommandAction","_super","browserCommand","opts","_this","call","runCommand","accessor","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","trigger","id","execCommand","run","editor","focus","ExecCommandCutAction","kbOpts","kbExpr","textInputFocus","primary","win","secondary","weight","undefined","label","localize","alias","precondition","writable","contextMenuOpts","group","order","menuOpts","menuId","title","key","comment","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","ExecCommandCopyAction","ExecCommandPasteAction","ExecCommandCopyWithSyntaxHighlightingAction","forceCopyWithSyntaxHighlighting"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport './clipboard.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { CopyOptions } from '../../browser/controller/textAreaInput.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\r\nvar supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\r\nvar supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\r\n// IE and Edge have trouble with setting html content in clipboard\r\nvar supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeOrIE);\r\n// Chrome incorrectly returns true for document.queryCommandSupported('paste')\r\n// when the paste feature is available but the calling script has insufficient\r\n// privileges to actually perform the action\r\nvar supportsPaste = (platform.isNative || (!browser.isChrome && document.queryCommandSupported('paste')));\r\nvar ExecCommandAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandAction, _super);\r\n    function ExecCommandAction(browserCommand, opts) {\r\n        var _this = _super.call(this, opts) || this;\r\n        _this.browserCommand = browserCommand;\r\n        return _this;\r\n    }\r\n    ExecCommandAction.prototype.runCommand = function (accessor, args) {\r\n        var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n        // Only if editor text focus (i.e. not if editor has widget focus).\r\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n            focusedEditor.trigger('keyboard', this.id, args);\r\n            return;\r\n        }\r\n        document.execCommand(this.browserCommand);\r\n    };\r\n    ExecCommandAction.prototype.run = function (accessor, editor) {\r\n        editor.focus();\r\n        document.execCommand(this.browserCommand);\r\n    };\r\n    return ExecCommandAction;\r\n}(EditorAction));\r\nvar ExecCommandCutAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCutAction, _super);\r\n    function ExecCommandCutAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */, secondary: [1024 /* Shift */ | 20 /* Delete */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind cut keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'cut', {\r\n            id: 'editor.action.clipboardCutAction',\r\n            label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\r\n            alias: 'Cut',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 1\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\r\n                order: 1\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    ExecCommandCutAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        _super.prototype.run.call(this, accessor, editor);\r\n    };\r\n    return ExecCommandCutAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandCopyAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCopyAction, _super);\r\n    function ExecCommandCopyAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */, secondary: [2048 /* CtrlCmd */ | 19 /* Insert */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind copy keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'copy', {\r\n            id: 'editor.action.clipboardCopyAction',\r\n            label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\r\n            alias: 'Copy',\r\n            precondition: undefined,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 2\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\r\n                order: 2\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    ExecCommandCopyAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        _super.prototype.run.call(this, accessor, editor);\r\n    };\r\n    return ExecCommandCopyAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandPasteAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandPasteAction, _super);\r\n    function ExecCommandPasteAction() {\r\n        var _this = this;\r\n        var kbOpts = {\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\r\n            win: { primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\r\n            weight: 100 /* EditorContrib */\r\n        };\r\n        // Do not bind paste keybindings in the browser,\r\n        // since browsers do that for us and it avoids security prompts\r\n        if (!platform.isNative) {\r\n            kbOpts = undefined;\r\n        }\r\n        _this = _super.call(this, 'paste', {\r\n            id: 'editor.action.clipboardPasteAction',\r\n            label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\r\n            alias: 'Paste',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: kbOpts,\r\n            contextMenuOpts: {\r\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n                order: 3\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '2_ccp',\r\n                title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\r\n                order: 3\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return ExecCommandPasteAction;\r\n}(ExecCommandAction));\r\nvar ExecCommandCopyWithSyntaxHighlightingAction = /** @class */ (function (_super) {\r\n    __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\r\n    function ExecCommandCopyWithSyntaxHighlightingAction() {\r\n        return _super.call(this, 'copy', {\r\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\r\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\r\n            alias: 'Copy With Syntax Highlighting',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var emptySelectionClipboard = editor.getOption(25 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\r\n        _super.prototype.run.call(this, accessor, editor);\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\r\n    };\r\n    return ExecCommandCopyWithSyntaxHighlightingAction;\r\n}(ExecCommandAction));\r\nif (supportsCut) {\r\n    registerEditorAction(ExecCommandCutAction);\r\n}\r\nif (supportsCopy) {\r\n    registerEditorAction(ExecCommandCopyAction);\r\n}\r\nif (supportsPaste) {\r\n    registerEditorAction(ExecCommandPasteAction);\r\n}\r\nif (supportsCopyWithSyntaxHighlighting) {\r\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}