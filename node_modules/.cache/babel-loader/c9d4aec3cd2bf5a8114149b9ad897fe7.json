{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nodes from '../parser/cssNodes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var colorFunctions = [{\n  func: 'rgb($red, $green, $blue)',\n  desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.')\n}, {\n  func: 'rgba($red, $green, $blue, $alpha)',\n  desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.')\n}, {\n  func: 'hsl($hue, $saturation, $lightness)',\n  desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.')\n}, {\n  func: 'hsla($hue, $saturation, $lightness, $alpha)',\n  desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.')\n}];\nexport var colors = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgrey: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  red: '#ff0000',\n  rebeccapurple: '#663399',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32'\n};\nexport var colorKeywords = {\n  'currentColor': 'The value of the \\'color\\' property. The computed value of the \\'currentColor\\' keyword is the computed value of the \\'color\\' property. If the \\'currentColor\\' keyword is set on the \\'color\\' property itself, it is treated as \\'color:inherit\\' at parse time.',\n  'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.'\n};\nfunction getNumericValue(node, factor) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(%?)$/);\n  if (m) {\n    if (m[2]) {\n      factor = 100.0;\n    }\n    var result = parseFloat(m[1]) / factor;\n    if (result >= 0 && result <= 1) {\n      return result;\n    }\n  }\n  throw new Error();\n}\nfunction getAngle(node) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(deg)?$/);\n  if (m) {\n    return parseFloat(val) % 360;\n  }\n  throw new Error();\n}\nexport function isColorConstructor(node) {\n  var name = node.getName();\n  if (!name) {\n    return false;\n  }\n  return /^(rgb|rgba|hsl|hsla)$/gi.test(name);\n}\n/**\n * Returns true if the node is a color value - either\n * defined a hex number, as rgb or rgba function, or\n * as color name.\n */\nexport function isColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    return true;\n  } else if (node.type === nodes.NodeType.Function) {\n    return isColorConstructor(node);\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return false;\n    }\n    var candidateColor = node.getText().toLowerCase();\n    if (candidateColor === 'none') {\n      return false;\n    }\n    if (colors[candidateColor]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n  if (charCode < Digit0) {\n    return 0;\n  }\n  if (charCode <= Digit9) {\n    return charCode - Digit0;\n  }\n  if (charCode < a) {\n    charCode += a - A;\n  }\n  if (charCode >= a && charCode <= f) {\n    return charCode - a + 10;\n  }\n  return 0;\n}\nexport function colorFromHex(text) {\n  if (text[0] !== '#') {\n    return null;\n  }\n  switch (text.length) {\n    case 4:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: 1\n      };\n    case 5:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: hexDigit(text.charCodeAt(4)) * 0x11 / 255.0\n      };\n    case 7:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: 1\n      };\n    case 9:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n      };\n  }\n  return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n  return {\n    red: red / 255.0,\n    green: green / 255.0,\n    blue: blue / 255.0,\n    alpha: alpha\n  };\n}\nexport function colorFromHSL(hue, sat, light, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n  hue = hue / 60.0;\n  if (sat === 0) {\n    return {\n      red: light,\n      green: light,\n      blue: light,\n      alpha: alpha\n    };\n  } else {\n    var hueToRgb = function hueToRgb(t1, t2, hue) {\n      while (hue < 0) {\n        hue += 6;\n      }\n      while (hue >= 6) {\n        hue -= 6;\n      }\n      if (hue < 1) {\n        return (t2 - t1) * hue + t1;\n      }\n      if (hue < 3) {\n        return t2;\n      }\n      if (hue < 4) {\n        return (t2 - t1) * (4 - hue) + t1;\n      }\n      return t1;\n    };\n    var t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n    var t1 = light * 2 - t2;\n    return {\n      red: hueToRgb(t1, t2, hue + 2),\n      green: hueToRgb(t1, t2, hue),\n      blue: hueToRgb(t1, t2, hue - 2),\n      alpha: alpha\n    };\n  }\n}\nexport function hslFromColor(rgba) {\n  var r = rgba.red;\n  var g = rgba.green;\n  var b = rgba.blue;\n  var a = rgba.alpha;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var l = (min + max) / 2;\n  var chroma = max - min;\n  if (chroma > 0) {\n    s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n    switch (max) {\n      case r:\n        h = (g - b) / chroma + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / chroma + 2;\n        break;\n      case b:\n        h = (r - g) / chroma + 4;\n        break;\n    }\n    h *= 60;\n    h = Math.round(h);\n  }\n  return {\n    h: h,\n    s: s,\n    l: l,\n    a: a\n  };\n}\nexport function getColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    var text = node.getText();\n    return colorFromHex(text);\n  } else if (node.type === nodes.NodeType.Function) {\n    var functionNode = node;\n    var name = functionNode.getName();\n    var colorValues = functionNode.getArguments().getChildren();\n    if (!name || colorValues.length < 3 || colorValues.length > 4) {\n      return null;\n    }\n    try {\n      var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;\n      if (name === 'rgb' || name === 'rgba') {\n        return {\n          red: getNumericValue(colorValues[0], 255.0),\n          green: getNumericValue(colorValues[1], 255.0),\n          blue: getNumericValue(colorValues[2], 255.0),\n          alpha: alpha\n        };\n      } else if (name === 'hsl' || name === 'hsla') {\n        var h = getAngle(colorValues[0]);\n        var s = getNumericValue(colorValues[1], 100.0);\n        var l = getNumericValue(colorValues[2], 100.0);\n        return colorFromHSL(h, s, l, alpha);\n      }\n    } catch (e) {\n      // parse error on numeric value\n      return null;\n    }\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return null;\n    }\n    var term = node.parent;\n    if (term && term.parent && term.parent.type === nodes.NodeType.BinaryExpression) {\n      var expression = term.parent;\n      if (expression.parent && expression.parent.type === nodes.NodeType.ListEntry && expression.parent.key === expression) {\n        return null;\n      }\n    }\n    var candidateColor = node.getText().toLowerCase();\n    if (candidateColor === 'none') {\n      return null;\n    }\n    var colorHex = colors[candidateColor];\n    if (colorHex) {\n      return colorFromHex(colorHex);\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["nodes","nls","localize","loadMessageBundle","colorFunctions","func","desc","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorKeywords","getNumericValue","node","factor","val","getText","m","match","result","parseFloat","Error","getAngle","isColorConstructor","name","getName","test","isColorValue","type","NodeType","HexColorValue","Function","Identifier","parent","Term","candidateColor","toLowerCase","Digit0","Digit9","A","F","a","f","hexDigit","charCode","colorFromHex","text","length","charCodeAt","alpha","colorFrom256RGB","colorFromHSL","hue","sat","light","hueToRgb","t1","t2","hslFromColor","rgba","r","g","b","max","Math","min","h","s","l","chroma","round","getColorValue","functionNode","colorValues","getArguments","getChildren","e","term","BinaryExpression","expression","ListEntry","key","colorHex"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/languageFacts/colors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nodes from '../parser/cssNodes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var colorFunctions = [\n    { func: 'rgb($red, $green, $blue)', desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.') },\n    { func: 'rgba($red, $green, $blue, $alpha)', desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.') },\n    { func: 'hsl($hue, $saturation, $lightness)', desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.') },\n    { func: 'hsla($hue, $saturation, $lightness, $alpha)', desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.') }\n];\nexport var colors = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgrey: '#a9a9a9',\n    darkgreen: '#006400',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    grey: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgrey: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370d8',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#d87093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    red: '#ff0000',\n    rebeccapurple: '#663399',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n};\nexport var colorKeywords = {\n    'currentColor': 'The value of the \\'color\\' property. The computed value of the \\'currentColor\\' keyword is the computed value of the \\'color\\' property. If the \\'currentColor\\' keyword is set on the \\'color\\' property itself, it is treated as \\'color:inherit\\' at parse time.',\n    'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.',\n};\nfunction getNumericValue(node, factor) {\n    var val = node.getText();\n    var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(%?)$/);\n    if (m) {\n        if (m[2]) {\n            factor = 100.0;\n        }\n        var result = parseFloat(m[1]) / factor;\n        if (result >= 0 && result <= 1) {\n            return result;\n        }\n    }\n    throw new Error();\n}\nfunction getAngle(node) {\n    var val = node.getText();\n    var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(deg)?$/);\n    if (m) {\n        return parseFloat(val) % 360;\n    }\n    throw new Error();\n}\nexport function isColorConstructor(node) {\n    var name = node.getName();\n    if (!name) {\n        return false;\n    }\n    return /^(rgb|rgba|hsl|hsla)$/gi.test(name);\n}\n/**\n * Returns true if the node is a color value - either\n * defined a hex number, as rgb or rgba function, or\n * as color name.\n */\nexport function isColorValue(node) {\n    if (node.type === nodes.NodeType.HexColorValue) {\n        return true;\n    }\n    else if (node.type === nodes.NodeType.Function) {\n        return isColorConstructor(node);\n    }\n    else if (node.type === nodes.NodeType.Identifier) {\n        if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n            return false;\n        }\n        var candidateColor = node.getText().toLowerCase();\n        if (candidateColor === 'none') {\n            return false;\n        }\n        if (colors[candidateColor]) {\n            return true;\n        }\n    }\n    return false;\n}\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\nexport function colorFromHSL(hue, sat, light, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    hue = hue / 60.0;\n    if (sat === 0) {\n        return { red: light, green: light, blue: light, alpha: alpha };\n    }\n    else {\n        var hueToRgb = function (t1, t2, hue) {\n            while (hue < 0) {\n                hue += 6;\n            }\n            while (hue >= 6) {\n                hue -= 6;\n            }\n            if (hue < 1) {\n                return (t2 - t1) * hue + t1;\n            }\n            if (hue < 3) {\n                return t2;\n            }\n            if (hue < 4) {\n                return (t2 - t1) * (4 - hue) + t1;\n            }\n            return t1;\n        };\n        var t2 = light <= 0.5 ? (light * (sat + 1)) : (light + sat - (light * sat));\n        var t1 = light * 2 - t2;\n        return { red: hueToRgb(t1, t2, hue + 2), green: hueToRgb(t1, t2, hue), blue: hueToRgb(t1, t2, hue - 2), alpha: alpha };\n    }\n}\nexport function hslFromColor(rgba) {\n    var r = rgba.red;\n    var g = rgba.green;\n    var b = rgba.blue;\n    var a = rgba.alpha;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (min + max) / 2;\n    var chroma = max - min;\n    if (chroma > 0) {\n        s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n        switch (max) {\n            case r:\n                h = (g - b) / chroma + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / chroma + 2;\n                break;\n            case b:\n                h = (r - g) / chroma + 4;\n                break;\n        }\n        h *= 60;\n        h = Math.round(h);\n    }\n    return { h: h, s: s, l: l, a: a };\n}\nexport function getColorValue(node) {\n    if (node.type === nodes.NodeType.HexColorValue) {\n        var text = node.getText();\n        return colorFromHex(text);\n    }\n    else if (node.type === nodes.NodeType.Function) {\n        var functionNode = node;\n        var name = functionNode.getName();\n        var colorValues = functionNode.getArguments().getChildren();\n        if (!name || colorValues.length < 3 || colorValues.length > 4) {\n            return null;\n        }\n        try {\n            var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;\n            if (name === 'rgb' || name === 'rgba') {\n                return {\n                    red: getNumericValue(colorValues[0], 255.0),\n                    green: getNumericValue(colorValues[1], 255.0),\n                    blue: getNumericValue(colorValues[2], 255.0),\n                    alpha: alpha\n                };\n            }\n            else if (name === 'hsl' || name === 'hsla') {\n                var h = getAngle(colorValues[0]);\n                var s = getNumericValue(colorValues[1], 100.0);\n                var l = getNumericValue(colorValues[2], 100.0);\n                return colorFromHSL(h, s, l, alpha);\n            }\n        }\n        catch (e) {\n            // parse error on numeric value\n            return null;\n        }\n    }\n    else if (node.type === nodes.NodeType.Identifier) {\n        if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n            return null;\n        }\n        var term = node.parent;\n        if (term && term.parent && term.parent.type === nodes.NodeType.BinaryExpression) {\n            var expression = term.parent;\n            if (expression.parent && expression.parent.type === nodes.NodeType.ListEntry && expression.parent.key === expression) {\n                return null;\n            }\n        }\n        var candidateColor = node.getText().toLowerCase();\n        if (candidateColor === 'none') {\n            return null;\n        }\n        var colorHex = colors[candidateColor];\n        if (colorHex) {\n            return colorFromHex(colorHex);\n        }\n    }\n    return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}