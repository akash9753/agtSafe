{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as nls from '../../../nls.js';\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { TabFocus } from '../../common/config/commonEditorConfig.js';\nvar ToggleTabFocusModeAction = /** @class */function (_super) {\n  __extends(ToggleTabFocusModeAction, _super);\n  function ToggleTabFocusModeAction() {\n    return _super.call(this, {\n      id: ToggleTabFocusModeAction.ID,\n      label: nls.localize({\n        key: 'toggle.tabMovesFocus',\n        comment: ['Turn on/off use of tab key for moving focus around VS Code']\n      }, \"Toggle Tab Key Moves Focus\"),\n      alias: 'Toggle Tab Key Moves Focus',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: null,\n        primary: 2048 /* CtrlCmd */ | 43 /* KEY_M */,\n        mac: {\n          primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 43 /* KEY_M */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    }) || this;\n  }\n  ToggleTabFocusModeAction.prototype.run = function (accessor, editor) {\n    var oldValue = TabFocus.getTabFocusMode();\n    var newValue = !oldValue;\n    TabFocus.setTabFocusMode(newValue);\n    if (newValue) {\n      alert(nls.localize('toggle.tabMovesFocus.on', \"Pressing Tab will now move focus to the next focusable element\"));\n    } else {\n      alert(nls.localize('toggle.tabMovesFocus.off', \"Pressing Tab will now insert the tab character\"));\n    }\n  };\n  ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';\n  return ToggleTabFocusModeAction;\n}(EditorAction);\nexport { ToggleTabFocusModeAction };\nregisterEditorAction(ToggleTabFocusModeAction);","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","alert","EditorAction","registerEditorAction","TabFocus","ToggleTabFocusModeAction","_super","call","id","ID","label","localize","key","comment","alias","precondition","undefined","kbOpts","kbExpr","primary","mac","weight","run","accessor","editor","oldValue","getTabFocusMode","newValue","setTabFocusMode"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { TabFocus } from '../../common/config/commonEditorConfig.js';\r\nvar ToggleTabFocusModeAction = /** @class */ (function (_super) {\r\n    __extends(ToggleTabFocusModeAction, _super);\r\n    function ToggleTabFocusModeAction() {\r\n        return _super.call(this, {\r\n            id: ToggleTabFocusModeAction.ID,\r\n            label: nls.localize({ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, \"Toggle Tab Key Moves Focus\"),\r\n            alias: 'Toggle Tab Key Moves Focus',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 2048 /* CtrlCmd */ | 43 /* KEY_M */,\r\n                mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 43 /* KEY_M */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    ToggleTabFocusModeAction.prototype.run = function (accessor, editor) {\r\n        var oldValue = TabFocus.getTabFocusMode();\r\n        var newValue = !oldValue;\r\n        TabFocus.setTabFocusMode(newValue);\r\n        if (newValue) {\r\n            alert(nls.localize('toggle.tabMovesFocus.on', \"Pressing Tab will now move focus to the next focusable element\"));\r\n        }\r\n        else {\r\n            alert(nls.localize('toggle.tabMovesFocus.off', \"Pressing Tab will now insert the tab character\"));\r\n        }\r\n    };\r\n    ToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';\r\n    return ToggleTabFocusModeAction;\r\n}(EditorAction));\r\nexport { ToggleTabFocusModeAction };\r\nregisterEditorAction(ToggleTabFocusModeAction);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}