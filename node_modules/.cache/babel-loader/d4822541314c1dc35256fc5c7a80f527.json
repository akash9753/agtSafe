{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nvar BracketElectricCharacterSupport = /** @class */function () {\n  function BracketElectricCharacterSupport(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n  BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\n    var result = [];\n    if (this._richEditBrackets) {\n      for (var _i = 0, _a = this._richEditBrackets.brackets; _i < _a.length; _i++) {\n        var bracket = _a[_i];\n        for (var _b = 0, _c = bracket.close; _b < _c.length; _b++) {\n          var close_1 = _c[_b];\n          var lastChar = close_1.charAt(close_1.length - 1);\n          result.push(lastChar);\n        }\n      }\n    }\n    // Filter duplicate entries\n    result = result.filter(function (item, pos, array) {\n      return array.indexOf(item) === pos;\n    });\n    return result;\n  };\n  BracketElectricCharacterSupport.prototype.onElectricCharacter = function (character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n    var tokenIndex = context.findTokenIndexAtOffset(column - 1);\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n    var reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    var text = context.getLineContent().substring(0, column - 1) + character;\n    var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n    if (!r) {\n      return null;\n    }\n    var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n    var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n    if (isOpen) {\n      return null;\n    }\n    var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n    return {\n      matchOpenBracket: bracketText\n    };\n  };\n  return BracketElectricCharacterSupport;\n}();\nexport { BracketElectricCharacterSupport };","map":{"version":3,"names":["ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","prototype","getElectricCharacters","result","_i","_a","brackets","length","bracket","_b","_c","close","close_1","lastChar","charAt","push","filter","item","pos","array","indexOf","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/electricCharacter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { ignoreBracketsInToken } from '../supports.js';\r\nimport { BracketsUtils } from './richEditBrackets.js';\r\nvar BracketElectricCharacterSupport = /** @class */ (function () {\r\n    function BracketElectricCharacterSupport(richEditBrackets) {\r\n        this._richEditBrackets = richEditBrackets;\r\n    }\r\n    BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\r\n        var result = [];\r\n        if (this._richEditBrackets) {\r\n            for (var _i = 0, _a = this._richEditBrackets.brackets; _i < _a.length; _i++) {\r\n                var bracket = _a[_i];\r\n                for (var _b = 0, _c = bracket.close; _b < _c.length; _b++) {\r\n                    var close_1 = _c[_b];\r\n                    var lastChar = close_1.charAt(close_1.length - 1);\r\n                    result.push(lastChar);\r\n                }\r\n            }\r\n        }\r\n        // Filter duplicate entries\r\n        result = result.filter(function (item, pos, array) {\r\n            return array.indexOf(item) === pos;\r\n        });\r\n        return result;\r\n    };\r\n    BracketElectricCharacterSupport.prototype.onElectricCharacter = function (character, context, column) {\r\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\r\n            return null;\r\n        }\r\n        var tokenIndex = context.findTokenIndexAtOffset(column - 1);\r\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\r\n            return null;\r\n        }\r\n        var reversedBracketRegex = this._richEditBrackets.reversedRegex;\r\n        var text = context.getLineContent().substring(0, column - 1) + character;\r\n        var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n        var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\r\n        if (isOpen) {\r\n            return null;\r\n        }\r\n        var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\r\n        if (!/^\\s*$/.test(textBeforeBracket)) {\r\n            // There is other text on the line before the bracket\r\n            return null;\r\n        }\r\n        return {\r\n            matchOpenBracket: bracketText\r\n        };\r\n    };\r\n    return BracketElectricCharacterSupport;\r\n}());\r\nexport { BracketElectricCharacterSupport };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}