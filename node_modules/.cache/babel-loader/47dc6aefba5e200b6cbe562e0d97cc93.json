{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { includes } from '../utils/arrays.js';\nvar Element = /** @class */function () {\n  function Element(decl) {\n    this.fullPropertyName = decl.getFullPropertyName().toLowerCase();\n    this.node = decl;\n  }\n  return Element;\n}();\nexport { Element };\nfunction setSide(model, side, value, property) {\n  var state = model[side];\n  state.value = value;\n  if (value) {\n    if (!includes(state.properties, property)) {\n      state.properties.push(property);\n    }\n  }\n}\nfunction setAllSides(model, value, property) {\n  setSide(model, 'top', value, property);\n  setSide(model, 'right', value, property);\n  setSide(model, 'bottom', value, property);\n  setSide(model, 'left', value, property);\n}\nfunction updateModelWithValue(model, side, value, property) {\n  if (side === 'top' || side === 'right' || side === 'bottom' || side === 'left') {\n    setSide(model, side, value, property);\n  } else {\n    setAllSides(model, value, property);\n  }\n}\nfunction updateModelWithList(model, values, property) {\n  switch (values.length) {\n    case 1:\n      updateModelWithValue(model, undefined, values[0], property);\n      break;\n    case 2:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'bottom', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      break;\n    case 3:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      break;\n    case 4:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      updateModelWithValue(model, 'left', values[3], property);\n      break;\n  }\n}\nfunction matches(value, candidates) {\n  for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n    var candidate = candidates_1[_i];\n    if (value.matches(candidate)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineWidth(value, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n  if (allowsKeywords && matches(value, ['initial', 'unset'])) {\n    return false;\n  }\n  // a <length> is a value and a unit\n  // so use `parseFloat` to strip the unit\n  return parseFloat(value.getText()) !== 0;\n}\nfunction checkLineWidthList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n  return nodes.map(function (node) {\n    return checkLineWidth(node, allowsKeywords);\n  });\n}\n/**\n * @param allowsKeywords whether keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineStyle(valueNode, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n  if (matches(valueNode, ['none', 'hidden'])) {\n    return false;\n  }\n  if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {\n    return false;\n  }\n  return true;\n}\nfunction checkLineStyleList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n  return nodes.map(function (node) {\n    return checkLineStyle(node, allowsKeywords);\n  });\n}\nfunction checkBorderShorthand(node) {\n  var children = node.getChildren();\n  // the only child can be a keyword, a <line-width>, or a <line-style>\n  // if either check returns false, the result is no border\n  if (children.length === 1) {\n    var value = children[0];\n    return checkLineWidth(value) && checkLineStyle(value);\n  }\n  // multiple children can't contain keywords\n  // if any child means no border, the result is no border\n  for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n    var child = children_1[_i];\n    var value = child;\n    if (!checkLineWidth(value, /* allowsKeywords: */false) || !checkLineStyle(value, /* allowsKeywords: */false)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default function calculateBoxModel(propertyTable) {\n  var model = {\n    top: {\n      value: false,\n      properties: []\n    },\n    right: {\n      value: false,\n      properties: []\n    },\n    bottom: {\n      value: false,\n      properties: []\n    },\n    left: {\n      value: false,\n      properties: []\n    }\n  };\n  for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {\n    var property = propertyTable_1[_i];\n    var value = property.node.value;\n    if (typeof value === 'undefined') {\n      continue;\n    }\n    switch (property.fullPropertyName) {\n      case 'box-sizing':\n        // has `box-sizing`, bail out\n        return {\n          top: {\n            value: false,\n            properties: []\n          },\n          right: {\n            value: false,\n            properties: []\n          },\n          bottom: {\n            value: false,\n            properties: []\n          },\n          left: {\n            value: false,\n            properties: []\n          }\n        };\n      case 'width':\n        model.width = property;\n        break;\n      case 'height':\n        model.height = property;\n        break;\n      default:\n        var segments = property.fullPropertyName.split('-');\n        switch (segments[0]) {\n          case 'border':\n            switch (segments[1]) {\n              case undefined:\n              case 'top':\n              case 'right':\n              case 'bottom':\n              case 'left':\n                switch (segments[2]) {\n                  case undefined:\n                    updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);\n                    break;\n                  case 'width':\n                    // the initial value of `border-width` is `medium`, not zero\n                    updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);\n                    break;\n                  case 'style':\n                    // the initial value of `border-style` is `none`\n                    updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);\n                    break;\n                }\n                break;\n              case 'width':\n                // the initial value of `border-width` is `medium`, not zero\n                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);\n                break;\n              case 'style':\n                // the initial value of `border-style` is `none`\n                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);\n                break;\n            }\n            break;\n          case 'padding':\n            if (segments.length === 1) {\n              // the initial value of `padding` is zero\n              updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);\n            } else {\n              // the initial value of `padding` is zero\n              updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);\n            }\n            break;\n        }\n        break;\n    }\n  }\n  return model;\n}","map":{"version":3,"names":["includes","Element","decl","fullPropertyName","getFullPropertyName","toLowerCase","node","setSide","model","side","value","property","state","properties","push","setAllSides","updateModelWithValue","updateModelWithList","values","length","undefined","matches","candidates","_i","candidates_1","candidate","checkLineWidth","allowsKeywords","parseFloat","getText","checkLineWidthList","nodes","map","checkLineStyle","valueNode","checkLineStyleList","checkBorderShorthand","children","getChildren","children_1","child","calculateBoxModel","propertyTable","top","right","bottom","left","propertyTable_1","width","height","segments","split"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/lintUtil.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { includes } from '../utils/arrays.js';\nvar Element = /** @class */ (function () {\n    function Element(decl) {\n        this.fullPropertyName = decl.getFullPropertyName().toLowerCase();\n        this.node = decl;\n    }\n    return Element;\n}());\nexport { Element };\nfunction setSide(model, side, value, property) {\n    var state = model[side];\n    state.value = value;\n    if (value) {\n        if (!includes(state.properties, property)) {\n            state.properties.push(property);\n        }\n    }\n}\nfunction setAllSides(model, value, property) {\n    setSide(model, 'top', value, property);\n    setSide(model, 'right', value, property);\n    setSide(model, 'bottom', value, property);\n    setSide(model, 'left', value, property);\n}\nfunction updateModelWithValue(model, side, value, property) {\n    if (side === 'top' || side === 'right' ||\n        side === 'bottom' || side === 'left') {\n        setSide(model, side, value, property);\n    }\n    else {\n        setAllSides(model, value, property);\n    }\n}\nfunction updateModelWithList(model, values, property) {\n    switch (values.length) {\n        case 1:\n            updateModelWithValue(model, undefined, values[0], property);\n            break;\n        case 2:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'bottom', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'left', values[1], property);\n            break;\n        case 3:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'left', values[1], property);\n            updateModelWithValue(model, 'bottom', values[2], property);\n            break;\n        case 4:\n            updateModelWithValue(model, 'top', values[0], property);\n            updateModelWithValue(model, 'right', values[1], property);\n            updateModelWithValue(model, 'bottom', values[2], property);\n            updateModelWithValue(model, 'left', values[3], property);\n            break;\n    }\n}\nfunction matches(value, candidates) {\n    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n        var candidate = candidates_1[_i];\n        if (value.matches(candidate)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineWidth(value, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    if (allowsKeywords && matches(value, ['initial', 'unset'])) {\n        return false;\n    }\n    // a <length> is a value and a unit\n    // so use `parseFloat` to strip the unit\n    return parseFloat(value.getText()) !== 0;\n}\nfunction checkLineWidthList(nodes, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    return nodes.map(function (node) { return checkLineWidth(node, allowsKeywords); });\n}\n/**\n * @param allowsKeywords whether keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\nfunction checkLineStyle(valueNode, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    if (matches(valueNode, ['none', 'hidden'])) {\n        return false;\n    }\n    if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {\n        return false;\n    }\n    return true;\n}\nfunction checkLineStyleList(nodes, allowsKeywords) {\n    if (allowsKeywords === void 0) { allowsKeywords = true; }\n    return nodes.map(function (node) { return checkLineStyle(node, allowsKeywords); });\n}\nfunction checkBorderShorthand(node) {\n    var children = node.getChildren();\n    // the only child can be a keyword, a <line-width>, or a <line-style>\n    // if either check returns false, the result is no border\n    if (children.length === 1) {\n        var value = children[0];\n        return checkLineWidth(value) && checkLineStyle(value);\n    }\n    // multiple children can't contain keywords\n    // if any child means no border, the result is no border\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n        var child = children_1[_i];\n        var value = child;\n        if (!checkLineWidth(value, /* allowsKeywords: */ false) ||\n            !checkLineStyle(value, /* allowsKeywords: */ false)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport default function calculateBoxModel(propertyTable) {\n    var model = {\n        top: { value: false, properties: [] },\n        right: { value: false, properties: [] },\n        bottom: { value: false, properties: [] },\n        left: { value: false, properties: [] },\n    };\n    for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {\n        var property = propertyTable_1[_i];\n        var value = property.node.value;\n        if (typeof value === 'undefined') {\n            continue;\n        }\n        switch (property.fullPropertyName) {\n            case 'box-sizing':\n                // has `box-sizing`, bail out\n                return {\n                    top: { value: false, properties: [] },\n                    right: { value: false, properties: [] },\n                    bottom: { value: false, properties: [] },\n                    left: { value: false, properties: [] },\n                };\n            case 'width':\n                model.width = property;\n                break;\n            case 'height':\n                model.height = property;\n                break;\n            default:\n                var segments = property.fullPropertyName.split('-');\n                switch (segments[0]) {\n                    case 'border':\n                        switch (segments[1]) {\n                            case undefined:\n                            case 'top':\n                            case 'right':\n                            case 'bottom':\n                            case 'left':\n                                switch (segments[2]) {\n                                    case undefined:\n                                        updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);\n                                        break;\n                                    case 'width':\n                                        // the initial value of `border-width` is `medium`, not zero\n                                        updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);\n                                        break;\n                                    case 'style':\n                                        // the initial value of `border-style` is `none`\n                                        updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);\n                                        break;\n                                }\n                                break;\n                            case 'width':\n                                // the initial value of `border-width` is `medium`, not zero\n                                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);\n                                break;\n                            case 'style':\n                                // the initial value of `border-style` is `none`\n                                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);\n                                break;\n                        }\n                        break;\n                    case 'padding':\n                        if (segments.length === 1) {\n                            // the initial value of `padding` is zero\n                            updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);\n                        }\n                        else {\n                            // the initial value of `padding` is zero\n                            updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);\n                        }\n                        break;\n                }\n                break;\n        }\n    }\n    return model;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}