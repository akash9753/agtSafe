{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar TreeNode = /** @class */function () {\n  function TreeNode(piece, color) {\n    this.piece = piece;\n    this.color = color;\n    this.size_left = 0;\n    this.lf_left = 0;\n    this.parent = this;\n    this.left = this;\n    this.right = this;\n  }\n  TreeNode.prototype.next = function () {\n    if (this.right !== SENTINEL) {\n      return leftest(this.right);\n    }\n    var node = this;\n    while (node.parent !== SENTINEL) {\n      if (node.parent.left === node) {\n        break;\n      }\n      node = node.parent;\n    }\n    if (node.parent === SENTINEL) {\n      return SENTINEL;\n    } else {\n      return node.parent;\n    }\n  };\n  TreeNode.prototype.prev = function () {\n    if (this.left !== SENTINEL) {\n      return righttest(this.left);\n    }\n    var node = this;\n    while (node.parent !== SENTINEL) {\n      if (node.parent.right === node) {\n        break;\n      }\n      node = node.parent;\n    }\n    if (node.parent === SENTINEL) {\n      return SENTINEL;\n    } else {\n      return node.parent;\n    }\n  };\n  TreeNode.prototype.detach = function () {\n    this.parent = null;\n    this.left = null;\n    this.right = null;\n  };\n  return TreeNode;\n}();\nexport { TreeNode };\nexport var SENTINEL = new TreeNode(null, 0 /* Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* Black */;\nexport function leftest(node) {\n  while (node.left !== SENTINEL) {\n    node = node.left;\n  }\n  return node;\n}\nexport function righttest(node) {\n  while (node.right !== SENTINEL) {\n    node = node.right;\n  }\n  return node;\n}\nexport function calculateSize(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n  return node.size_left + node.piece.length + calculateSize(node.right);\n}\nexport function calculateLF(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n  return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nexport function resetSentinel() {\n  SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n  var y = x.right;\n  // fix size_left\n  y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n  x.right = y.left;\n  if (y.left !== SENTINEL) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === SENTINEL) {\n    tree.root = y;\n  } else if (x.parent.left === x) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n}\nexport function rightRotate(tree, y) {\n  var x = y.left;\n  y.left = x.right;\n  if (x.right !== SENTINEL) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  // fix size_left\n  y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n  if (y.parent === SENTINEL) {\n    tree.root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n  x.right = y;\n  y.parent = x;\n}\nexport function rbDelete(tree, z) {\n  var x;\n  var y;\n  if (z.left === SENTINEL) {\n    y = z;\n    x = y.right;\n  } else if (z.right === SENTINEL) {\n    y = z;\n    x = y.left;\n  } else {\n    y = leftest(z.right);\n    x = y.right;\n  }\n  if (y === tree.root) {\n    tree.root = x;\n    // if x is null, we are removing the only node\n    x.color = 0 /* Black */;\n    z.detach();\n    resetSentinel();\n    tree.root.parent = SENTINEL;\n    return;\n  }\n  var yWasRed = y.color === 1 /* Red */;\n  if (y === y.parent.left) {\n    y.parent.left = x;\n  } else {\n    y.parent.right = x;\n  }\n  if (y === z) {\n    x.parent = y.parent;\n    recomputeTreeMetadata(tree, x);\n  } else {\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      x.parent = y.parent;\n    }\n    // as we make changes to x's hierarchy, update size_left of subtree first\n    recomputeTreeMetadata(tree, x);\n    y.left = z.left;\n    y.right = z.right;\n    y.parent = z.parent;\n    y.color = z.color;\n    if (z === tree.root) {\n      tree.root = y;\n    } else {\n      if (z === z.parent.left) {\n        z.parent.left = y;\n      } else {\n        z.parent.right = y;\n      }\n    }\n    if (y.left !== SENTINEL) {\n      y.left.parent = y;\n    }\n    if (y.right !== SENTINEL) {\n      y.right.parent = y;\n    }\n    // update metadata\n    // we replace z with y, so in this sub tree, the length change is z.item.length\n    y.size_left = z.size_left;\n    y.lf_left = z.lf_left;\n    recomputeTreeMetadata(tree, y);\n  }\n  z.detach();\n  if (x.parent.left === x) {\n    var newSizeLeft = calculateSize(x);\n    var newLFLeft = calculateLF(x);\n    if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n      var delta = newSizeLeft - x.parent.size_left;\n      var lf_delta = newLFLeft - x.parent.lf_left;\n      x.parent.size_left = newSizeLeft;\n      x.parent.lf_left = newLFLeft;\n      updateTreeMetadata(tree, x.parent, delta, lf_delta);\n    }\n  }\n  recomputeTreeMetadata(tree, x.parent);\n  if (yWasRed) {\n    resetSentinel();\n    return;\n  }\n  // RB-DELETE-FIXUP\n  var w;\n  while (x !== tree.root && x.color === 0 /* Black */) {\n    if (x === x.parent.left) {\n      w = x.parent.right;\n      if (w.color === 1 /* Red */) {\n        w.color = 0 /* Black */;\n        x.parent.color = 1 /* Red */;\n        leftRotate(tree, x.parent);\n        w = x.parent.right;\n      }\n      if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\n        w.color = 1 /* Red */;\n        x = x.parent;\n      } else {\n        if (w.right.color === 0 /* Black */) {\n          w.left.color = 0 /* Black */;\n          w.color = 1 /* Red */;\n          rightRotate(tree, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 0 /* Black */;\n        w.right.color = 0 /* Black */;\n        leftRotate(tree, x.parent);\n        x = tree.root;\n      }\n    } else {\n      w = x.parent.left;\n      if (w.color === 1 /* Red */) {\n        w.color = 0 /* Black */;\n        x.parent.color = 1 /* Red */;\n        rightRotate(tree, x.parent);\n        w = x.parent.left;\n      }\n      if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\n        w.color = 1 /* Red */;\n        x = x.parent;\n      } else {\n        if (w.left.color === 0 /* Black */) {\n          w.right.color = 0 /* Black */;\n          w.color = 1 /* Red */;\n          leftRotate(tree, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 0 /* Black */;\n        w.left.color = 0 /* Black */;\n        rightRotate(tree, x.parent);\n        x = tree.root;\n      }\n    }\n  }\n  x.color = 0 /* Black */;\n  resetSentinel();\n}\nexport function fixInsert(tree, x) {\n  recomputeTreeMetadata(tree, x);\n  while (x !== tree.root && x.parent.color === 1 /* Red */) {\n    if (x.parent === x.parent.parent.left) {\n      var y = x.parent.parent.right;\n      if (y.color === 1 /* Red */) {\n        x.parent.color = 0 /* Black */;\n        y.color = 0 /* Black */;\n        x.parent.parent.color = 1 /* Red */;\n        x = x.parent.parent;\n      } else {\n        if (x === x.parent.right) {\n          x = x.parent;\n          leftRotate(tree, x);\n        }\n        x.parent.color = 0 /* Black */;\n        x.parent.parent.color = 1 /* Red */;\n        rightRotate(tree, x.parent.parent);\n      }\n    } else {\n      var y = x.parent.parent.left;\n      if (y.color === 1 /* Red */) {\n        x.parent.color = 0 /* Black */;\n        y.color = 0 /* Black */;\n        x.parent.parent.color = 1 /* Red */;\n        x = x.parent.parent;\n      } else {\n        if (x === x.parent.left) {\n          x = x.parent;\n          rightRotate(tree, x);\n        }\n        x.parent.color = 0 /* Black */;\n        x.parent.parent.color = 1 /* Red */;\n        leftRotate(tree, x.parent.parent);\n      }\n    }\n  }\n  tree.root.color = 0 /* Black */;\n}\n\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n  // node length change or line feed count change\n  while (x !== tree.root && x !== SENTINEL) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lineFeedCntDelta;\n    }\n    x = x.parent;\n  }\n}\nexport function recomputeTreeMetadata(tree, x) {\n  var delta = 0;\n  var lf_delta = 0;\n  if (x === tree.root) {\n    return;\n  }\n  if (delta === 0) {\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n      x = x.parent;\n    }\n    if (x === tree.root) {\n      // well, it means we add a node to the end (inorder)\n      return;\n    }\n    // x is the node whose right subtree is changed.\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n  }\n  // go upwards till root. O(logN)\n  while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lf_delta;\n    }\n    x = x.parent;\n  }\n}","map":{"version":3,"names":["TreeNode","piece","color","size_left","lf_left","parent","left","right","prototype","next","SENTINEL","leftest","node","prev","righttest","detach","calculateSize","length","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode(piece, color) {\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.size_left = 0;\r\n        this.lf_left = 0;\r\n        this.parent = this;\r\n        this.left = this;\r\n        this.right = this;\r\n    }\r\n    TreeNode.prototype.next = function () {\r\n        if (this.right !== SENTINEL) {\r\n            return leftest(this.right);\r\n        }\r\n        var node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.left === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    };\r\n    TreeNode.prototype.prev = function () {\r\n        if (this.left !== SENTINEL) {\r\n            return righttest(this.left);\r\n        }\r\n        var node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.right === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    };\r\n    TreeNode.prototype.detach = function () {\r\n        this.parent = null;\r\n        this.left = null;\r\n        this.right = null;\r\n    };\r\n    return TreeNode;\r\n}());\r\nexport { TreeNode };\r\nexport var SENTINEL = new TreeNode(null, 0 /* Black */);\r\nSENTINEL.parent = SENTINEL;\r\nSENTINEL.left = SENTINEL;\r\nSENTINEL.right = SENTINEL;\r\nSENTINEL.color = 0 /* Black */;\r\nexport function leftest(node) {\r\n    while (node.left !== SENTINEL) {\r\n        node = node.left;\r\n    }\r\n    return node;\r\n}\r\nexport function righttest(node) {\r\n    while (node.right !== SENTINEL) {\r\n        node = node.right;\r\n    }\r\n    return node;\r\n}\r\nexport function calculateSize(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.size_left + node.piece.length + calculateSize(node.right);\r\n}\r\nexport function calculateLF(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\r\n}\r\nexport function resetSentinel() {\r\n    SENTINEL.parent = SENTINEL;\r\n}\r\nexport function leftRotate(tree, x) {\r\n    var y = x.right;\r\n    // fix size_left\r\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    x.right = y.left;\r\n    if (y.left !== SENTINEL) {\r\n        y.left.parent = x;\r\n    }\r\n    y.parent = x.parent;\r\n    if (x.parent === SENTINEL) {\r\n        tree.root = y;\r\n    }\r\n    else if (x.parent.left === x) {\r\n        x.parent.left = y;\r\n    }\r\n    else {\r\n        x.parent.right = y;\r\n    }\r\n    y.left = x;\r\n    x.parent = y;\r\n}\r\nexport function rightRotate(tree, y) {\r\n    var x = y.left;\r\n    y.left = x.right;\r\n    if (x.right !== SENTINEL) {\r\n        x.right.parent = y;\r\n    }\r\n    x.parent = y.parent;\r\n    // fix size_left\r\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    if (y.parent === SENTINEL) {\r\n        tree.root = x;\r\n    }\r\n    else if (y === y.parent.right) {\r\n        y.parent.right = x;\r\n    }\r\n    else {\r\n        y.parent.left = x;\r\n    }\r\n    x.right = y;\r\n    y.parent = x;\r\n}\r\nexport function rbDelete(tree, z) {\r\n    var x;\r\n    var y;\r\n    if (z.left === SENTINEL) {\r\n        y = z;\r\n        x = y.right;\r\n    }\r\n    else if (z.right === SENTINEL) {\r\n        y = z;\r\n        x = y.left;\r\n    }\r\n    else {\r\n        y = leftest(z.right);\r\n        x = y.right;\r\n    }\r\n    if (y === tree.root) {\r\n        tree.root = x;\r\n        // if x is null, we are removing the only node\r\n        x.color = 0 /* Black */;\r\n        z.detach();\r\n        resetSentinel();\r\n        tree.root.parent = SENTINEL;\r\n        return;\r\n    }\r\n    var yWasRed = (y.color === 1 /* Red */);\r\n    if (y === y.parent.left) {\r\n        y.parent.left = x;\r\n    }\r\n    else {\r\n        y.parent.right = x;\r\n    }\r\n    if (y === z) {\r\n        x.parent = y.parent;\r\n        recomputeTreeMetadata(tree, x);\r\n    }\r\n    else {\r\n        if (y.parent === z) {\r\n            x.parent = y;\r\n        }\r\n        else {\r\n            x.parent = y.parent;\r\n        }\r\n        // as we make changes to x's hierarchy, update size_left of subtree first\r\n        recomputeTreeMetadata(tree, x);\r\n        y.left = z.left;\r\n        y.right = z.right;\r\n        y.parent = z.parent;\r\n        y.color = z.color;\r\n        if (z === tree.root) {\r\n            tree.root = y;\r\n        }\r\n        else {\r\n            if (z === z.parent.left) {\r\n                z.parent.left = y;\r\n            }\r\n            else {\r\n                z.parent.right = y;\r\n            }\r\n        }\r\n        if (y.left !== SENTINEL) {\r\n            y.left.parent = y;\r\n        }\r\n        if (y.right !== SENTINEL) {\r\n            y.right.parent = y;\r\n        }\r\n        // update metadata\r\n        // we replace z with y, so in this sub tree, the length change is z.item.length\r\n        y.size_left = z.size_left;\r\n        y.lf_left = z.lf_left;\r\n        recomputeTreeMetadata(tree, y);\r\n    }\r\n    z.detach();\r\n    if (x.parent.left === x) {\r\n        var newSizeLeft = calculateSize(x);\r\n        var newLFLeft = calculateLF(x);\r\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\r\n            var delta = newSizeLeft - x.parent.size_left;\r\n            var lf_delta = newLFLeft - x.parent.lf_left;\r\n            x.parent.size_left = newSizeLeft;\r\n            x.parent.lf_left = newLFLeft;\r\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\r\n        }\r\n    }\r\n    recomputeTreeMetadata(tree, x.parent);\r\n    if (yWasRed) {\r\n        resetSentinel();\r\n        return;\r\n    }\r\n    // RB-DELETE-FIXUP\r\n    var w;\r\n    while (x !== tree.root && x.color === 0 /* Black */) {\r\n        if (x === x.parent.left) {\r\n            w = x.parent.right;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent);\r\n                w = x.parent.right;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.right.color === 0 /* Black */) {\r\n                    w.left.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    rightRotate(tree, w);\r\n                    w = x.parent.right;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.right.color = 0 /* Black */;\r\n                leftRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n        else {\r\n            w = x.parent.left;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent);\r\n                w = x.parent.left;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.left.color === 0 /* Black */) {\r\n                    w.right.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    leftRotate(tree, w);\r\n                    w = x.parent.left;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.left.color = 0 /* Black */;\r\n                rightRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n    }\r\n    x.color = 0 /* Black */;\r\n    resetSentinel();\r\n}\r\nexport function fixInsert(tree, x) {\r\n    recomputeTreeMetadata(tree, x);\r\n    while (x !== tree.root && x.parent.color === 1 /* Red */) {\r\n        if (x.parent === x.parent.parent.left) {\r\n            var y = x.parent.parent.right;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.right) {\r\n                    x = x.parent;\r\n                    leftRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n        else {\r\n            var y = x.parent.parent.left;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.left) {\r\n                    x = x.parent;\r\n                    rightRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n    }\r\n    tree.root.color = 0 /* Black */;\r\n}\r\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\r\n    // node length change or line feed count change\r\n    while (x !== tree.root && x !== SENTINEL) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lineFeedCntDelta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\nexport function recomputeTreeMetadata(tree, x) {\r\n    var delta = 0;\r\n    var lf_delta = 0;\r\n    if (x === tree.root) {\r\n        return;\r\n    }\r\n    if (delta === 0) {\r\n        // go upwards till the node whose left subtree is changed.\r\n        while (x !== tree.root && x === x.parent.right) {\r\n            x = x.parent;\r\n        }\r\n        if (x === tree.root) {\r\n            // well, it means we add a node to the end (inorder)\r\n            return;\r\n        }\r\n        // x is the node whose right subtree is changed.\r\n        x = x.parent;\r\n        delta = calculateSize(x.left) - x.size_left;\r\n        lf_delta = calculateLF(x.left) - x.lf_left;\r\n        x.size_left += delta;\r\n        x.lf_left += lf_delta;\r\n    }\r\n    // go upwards till root. O(logN)\r\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lf_delta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}