{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ShiftCommand } from '../../common/commands/shiftCommand.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { IndentAction } from '../../common/modes/languageConfiguration.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport * as indentUtils from '../indentation/indentUtils.js';\nvar MoveLinesCommand = /** @class */function () {\n  function MoveLinesCommand(selection, isMovingDown, autoIndent) {\n    this._selection = selection;\n    this._isMovingDown = isMovingDown;\n    this._autoIndent = autoIndent;\n    this._selectionId = null;\n    this._moveEndLineSelectionShrink = false;\n  }\n  MoveLinesCommand.prototype.getEditOperations = function (model, builder) {\n    var modelLineCount = model.getLineCount();\n    if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n      this._selectionId = builder.trackSelection(this._selection);\n      return;\n    }\n    if (!this._isMovingDown && this._selection.startLineNumber === 1) {\n      this._selectionId = builder.trackSelection(this._selection);\n      return;\n    }\n    this._moveEndPositionDown = false;\n    var s = this._selection;\n    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n      this._moveEndPositionDown = true;\n      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n    }\n    var _a = model.getOptions(),\n      tabSize = _a.tabSize,\n      indentSize = _a.indentSize,\n      insertSpaces = _a.insertSpaces;\n    var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n    var virtualModel = {\n      getLineTokens: function getLineTokens(lineNumber) {\n        return model.getLineTokens(lineNumber);\n      },\n      getLanguageIdentifier: function getLanguageIdentifier() {\n        return model.getLanguageIdentifier();\n      },\n      getLanguageIdAtPosition: function getLanguageIdAtPosition(lineNumber, column) {\n        return model.getLanguageIdAtPosition(lineNumber, column);\n      },\n      getLineContent: null\n    };\n    if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n      // Current line is empty\n      var lineNumber = s.startLineNumber;\n      var otherLineNumber = this._isMovingDown ? lineNumber + 1 : lineNumber - 1;\n      if (model.getLineMaxColumn(otherLineNumber) === 1) {\n        // Other line number is empty too, so no editing is needed\n        // Add a no-op to force running by the model\n        builder.addEditOperation(new Range(1, 1, 1, 1), null);\n      } else {\n        // Type content from other line number on line number\n        builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n        // Remove content from other line number\n        builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n      }\n      // Track selection at the other line number\n      s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n    } else {\n      var movingLineNumber_1;\n      var movingLineText = void 0;\n      if (this._isMovingDown) {\n        movingLineNumber_1 = s.endLineNumber + 1;\n        movingLineText = model.getLineContent(movingLineNumber_1);\n        // Delete line that needs to be moved\n        builder.addEditOperation(new Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);\n        var insertingText_1 = movingLineText;\n        if (this.shouldAutoIndent(model, s)) {\n          var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1);\n          // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n          if (movingLineMatchResult !== null) {\n            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n            var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n            var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n            insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n          } else {\n            // no enter rule matches, let's check indentatin rules then.\n            virtualModel.getLineContent = function (lineNumber) {\n              if (lineNumber === s.startLineNumber) {\n                return model.getLineContent(movingLineNumber_1);\n              } else {\n                return model.getLineContent(lineNumber);\n              }\n            };\n            var indentOfMovingLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);\n            if (indentOfMovingLine !== null) {\n              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\n              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                insertingText_1 = newIndentation + this.trimLeft(movingLineText);\n              }\n            }\n          }\n          // add edit operations for moving line first to make sure it's executed after we make indentation change\n          // to s.startLineNumber\n          builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1);\n          // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n          if (ret !== null) {\n            if (ret !== 0) {\n              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n            }\n          } else {\n            // it doesn't match onEnter rules, let's check indentation rules then.\n            virtualModel.getLineContent = function (lineNumber) {\n              if (lineNumber === s.startLineNumber) {\n                return insertingText_1;\n              } else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                return model.getLineContent(lineNumber - 1);\n              } else {\n                return model.getLineContent(lineNumber);\n              }\n            };\n            var newIndentatOfMovingBlock = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);\n            if (newIndentatOfMovingBlock !== null) {\n              var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n              var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n              }\n            }\n          }\n        } else {\n          // Insert line that needs to be moved before\n          builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\n        }\n      } else {\n        movingLineNumber_1 = s.startLineNumber - 1;\n        movingLineText = model.getLineContent(movingLineNumber_1);\n        // Delete line that needs to be moved\n        builder.addEditOperation(new Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null);\n        // Insert line that needs to be moved after\n        builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n        if (this.shouldAutoIndent(model, s)) {\n          virtualModel.getLineContent = function (lineNumber) {\n            if (lineNumber === movingLineNumber_1) {\n              return model.getLineContent(s.startLineNumber);\n            } else {\n              return model.getLineContent(lineNumber);\n            }\n          };\n          var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n          // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n          if (ret !== null) {\n            if (ret !== 0) {\n              this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n            }\n          } else {\n            // it doesn't match any onEnter rule, let's check indentation rules then.\n            var indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);\n            if (indentOfFirstLine !== null) {\n              // adjust the indentation of the moving block\n              var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n              var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n              var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n              if (newSpaceCnt !== oldSpaceCnt) {\n                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n              }\n            }\n          }\n        }\n      }\n    }\n    this._selectionId = builder.trackSelection(s);\n  };\n  MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {\n    return {\n      shiftIndent: function shiftIndent(indentation) {\n        return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      },\n      unshiftIndent: function unshiftIndent(indentation) {\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      }\n    };\n  };\n  MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {\n    var validPrecedingLine = oneLineAbove;\n    while (validPrecedingLine >= 1) {\n      // ship empty lines as empty lines just inherit indentation\n      var lineContent = void 0;\n      if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\n        lineContent = oneLineAboveText;\n      } else {\n        lineContent = model.getLineContent(validPrecedingLine);\n      }\n      var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n      if (nonWhitespaceIdx >= 0) {\n        break;\n      }\n      validPrecedingLine--;\n    }\n    if (validPrecedingLine < 1 || line > model.getLineCount()) {\n      return null;\n    }\n    var maxColumn = model.getLineMaxColumn(validPrecedingLine);\n    var enter = LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\n    if (enter) {\n      var enterPrefix = enter.indentation;\n      if (enter.indentAction === IndentAction.None) {\n        enterPrefix = enter.indentation + enter.appendText;\n      } else if (enter.indentAction === IndentAction.Indent) {\n        enterPrefix = enter.indentation + enter.appendText;\n      } else if (enter.indentAction === IndentAction.IndentOutdent) {\n        enterPrefix = enter.indentation;\n      } else if (enter.indentAction === IndentAction.Outdent) {\n        enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n      }\n      var movingLineText = model.getLineContent(line);\n      if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\n        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n        var newIndentation = strings.getLeadingWhitespace(enterPrefix);\n        var indentMetadataOfMovelingLine = LanguageConfigurationRegistry.getIndentMetadata(model, line);\n        if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* DECREASE_MASK */) {\n          newIndentation = indentConverter.unshiftIndent(newIndentation);\n        }\n        var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n        var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n        return newSpaceCnt - oldSpaceCnt;\n      }\n    }\n    return null;\n  };\n  MoveLinesCommand.prototype.trimLeft = function (str) {\n    return str.replace(/^\\s+/, '');\n  };\n  MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {\n    if (this._autoIndent < 4 /* Full */) {\n      return false;\n    }\n    // if it's not easy to tokenize, we stop auto indent.\n    if (!model.isCheapToTokenize(selection.startLineNumber)) {\n      return false;\n    }\n    var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n    var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n    if (languageAtSelectionStart !== languageAtSelectionEnd) {\n      return false;\n    }\n    if (LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\n      return false;\n    }\n    return true;\n  };\n  MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {\n    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\n      var lineContent = model.getLineContent(i);\n      var originalIndent = strings.getLeadingWhitespace(lineContent);\n      var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n      var newSpacesCnt = originalSpacesCnt + offset;\n      var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n      if (newIndent !== originalIndent) {\n        builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n        if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n          // as users select part of the original indent white spaces\n          // when we adjust the indentation of endLine, we should adjust the cursor position as well.\n          this._moveEndLineSelectionShrink = true;\n        }\n      }\n    }\n  };\n  MoveLinesCommand.prototype.computeCursorState = function (model, helper) {\n    var result = helper.getTrackedSelection(this._selectionId);\n    if (this._moveEndPositionDown) {\n      result = result.setEndPosition(result.endLineNumber + 1, 1);\n    }\n    if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n      result = result.setEndPosition(result.endLineNumber, 2);\n    }\n    return result;\n  };\n  return MoveLinesCommand;\n}();\nexport { MoveLinesCommand };","map":{"version":3,"names":["strings","ShiftCommand","Range","Selection","IndentAction","LanguageConfigurationRegistry","indentUtils","MoveLinesCommand","selection","isMovingDown","autoIndent","_selection","_isMovingDown","_autoIndent","_selectionId","_moveEndLineSelectionShrink","prototype","getEditOperations","model","builder","modelLineCount","getLineCount","endLineNumber","trackSelection","startLineNumber","_moveEndPositionDown","s","endColumn","setEndPosition","getLineMaxColumn","_a","getOptions","tabSize","indentSize","insertSpaces","indentConverter","buildIndentConverter","virtualModel","getLineTokens","lineNumber","getLanguageIdentifier","getLanguageIdAtPosition","column","getLineContent","otherLineNumber","addEditOperation","movingLineNumber_1","movingLineText","insertingText_1","shouldAutoIndent","movingLineMatchResult","matchEnterRule","oldIndentation","getLeadingWhitespace","newSpaceCnt","getSpaceCnt","newIndentation","generateIndent","trimLeft","indentOfMovingLine","getGoodIndentForLine","oldSpaceCnt","ret","getIndentEditsOfMovingBlock","newIndentatOfMovingBlock","spaceCntOffset","indentOfFirstLine","oldIndent","shiftIndent","indentation","length","unshiftIndent","line","oneLineAbove","oneLineAboveText","validPrecedingLine","lineContent","undefined","nonWhitespaceIdx","lastNonWhitespaceIndex","maxColumn","enter","getEnterAction","enterPrefix","indentAction","None","appendText","Indent","IndentOutdent","Outdent","indexOf","indentMetadataOfMovelingLine","getIndentMetadata","str","replace","isCheapToTokenize","languageAtSelectionStart","languageAtSelectionEnd","getIndentRulesSupport","offset","i","originalIndent","originalSpacesCnt","newSpacesCnt","newIndent","computeCursorState","helper","result","getTrackedSelection"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/moveLinesCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ShiftCommand } from '../../common/commands/shiftCommand.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { IndentAction } from '../../common/modes/languageConfiguration.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport * as indentUtils from '../indentation/indentUtils.js';\r\nvar MoveLinesCommand = /** @class */ (function () {\r\n    function MoveLinesCommand(selection, isMovingDown, autoIndent) {\r\n        this._selection = selection;\r\n        this._isMovingDown = isMovingDown;\r\n        this._autoIndent = autoIndent;\r\n        this._selectionId = null;\r\n        this._moveEndLineSelectionShrink = false;\r\n    }\r\n    MoveLinesCommand.prototype.getEditOperations = function (model, builder) {\r\n        var modelLineCount = model.getLineCount();\r\n        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\r\n            this._selectionId = builder.trackSelection(this._selection);\r\n            return;\r\n        }\r\n        if (!this._isMovingDown && this._selection.startLineNumber === 1) {\r\n            this._selectionId = builder.trackSelection(this._selection);\r\n            return;\r\n        }\r\n        this._moveEndPositionDown = false;\r\n        var s = this._selection;\r\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\r\n            this._moveEndPositionDown = true;\r\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\r\n        }\r\n        var _a = model.getOptions(), tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\r\n        var indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\r\n        var virtualModel = {\r\n            getLineTokens: function (lineNumber) {\r\n                return model.getLineTokens(lineNumber);\r\n            },\r\n            getLanguageIdentifier: function () {\r\n                return model.getLanguageIdentifier();\r\n            },\r\n            getLanguageIdAtPosition: function (lineNumber, column) {\r\n                return model.getLanguageIdAtPosition(lineNumber, column);\r\n            },\r\n            getLineContent: null,\r\n        };\r\n        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\r\n            // Current line is empty\r\n            var lineNumber = s.startLineNumber;\r\n            var otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\r\n            if (model.getLineMaxColumn(otherLineNumber) === 1) {\r\n                // Other line number is empty too, so no editing is needed\r\n                // Add a no-op to force running by the model\r\n                builder.addEditOperation(new Range(1, 1, 1, 1), null);\r\n            }\r\n            else {\r\n                // Type content from other line number on line number\r\n                builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\r\n                // Remove content from other line number\r\n                builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\r\n            }\r\n            // Track selection at the other line number\r\n            s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\r\n        }\r\n        else {\r\n            var movingLineNumber_1;\r\n            var movingLineText = void 0;\r\n            if (this._isMovingDown) {\r\n                movingLineNumber_1 = s.endLineNumber + 1;\r\n                movingLineText = model.getLineContent(movingLineNumber_1);\r\n                // Delete line that needs to be moved\r\n                builder.addEditOperation(new Range(movingLineNumber_1 - 1, model.getLineMaxColumn(movingLineNumber_1 - 1), movingLineNumber_1, model.getLineMaxColumn(movingLineNumber_1)), null);\r\n                var insertingText_1 = movingLineText;\r\n                if (this.shouldAutoIndent(model, s)) {\r\n                    var movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber_1, s.startLineNumber - 1);\r\n                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\r\n                    if (movingLineMatchResult !== null) {\r\n                        var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\r\n                        var newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                        var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\r\n                        insertingText_1 = newIndentation + this.trimLeft(movingLineText);\r\n                    }\r\n                    else {\r\n                        // no enter rule matches, let's check indentatin rules then.\r\n                        virtualModel.getLineContent = function (lineNumber) {\r\n                            if (lineNumber === s.startLineNumber) {\r\n                                return model.getLineContent(movingLineNumber_1);\r\n                            }\r\n                            else {\r\n                                return model.getLineContent(lineNumber);\r\n                            }\r\n                        };\r\n                        var indentOfMovingLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber, indentConverter);\r\n                        if (indentOfMovingLine !== null) {\r\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber_1));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\r\n                                insertingText_1 = newIndentation + this.trimLeft(movingLineText);\r\n                            }\r\n                        }\r\n                    }\r\n                    // add edit operations for moving line first to make sure it's executed after we make indentation change\r\n                    // to s.startLineNumber\r\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\r\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber, insertingText_1);\r\n                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\r\n                    if (ret !== null) {\r\n                        if (ret !== 0) {\r\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // it doesn't match onEnter rules, let's check indentation rules then.\r\n                        virtualModel.getLineContent = function (lineNumber) {\r\n                            if (lineNumber === s.startLineNumber) {\r\n                                return insertingText_1;\r\n                            }\r\n                            else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\r\n                                return model.getLineContent(lineNumber - 1);\r\n                            }\r\n                            else {\r\n                                return model.getLineContent(lineNumber);\r\n                            }\r\n                        };\r\n                        var newIndentatOfMovingBlock = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber_1, 1), s.startLineNumber + 1, indentConverter);\r\n                        if (newIndentatOfMovingBlock !== null) {\r\n                            var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\r\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Insert line that needs to be moved before\r\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText_1 + '\\n');\r\n                }\r\n            }\r\n            else {\r\n                movingLineNumber_1 = s.startLineNumber - 1;\r\n                movingLineText = model.getLineContent(movingLineNumber_1);\r\n                // Delete line that needs to be moved\r\n                builder.addEditOperation(new Range(movingLineNumber_1, 1, movingLineNumber_1 + 1, 1), null);\r\n                // Insert line that needs to be moved after\r\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\r\n                if (this.shouldAutoIndent(model, s)) {\r\n                    virtualModel.getLineContent = function (lineNumber) {\r\n                        if (lineNumber === movingLineNumber_1) {\r\n                            return model.getLineContent(s.startLineNumber);\r\n                        }\r\n                        else {\r\n                            return model.getLineContent(lineNumber);\r\n                        }\r\n                    };\r\n                    var ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\r\n                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\r\n                    if (ret !== null) {\r\n                        if (ret !== 0) {\r\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // it doesn't match any onEnter rule, let's check indentation rules then.\r\n                        var indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber_1, indentConverter);\r\n                        if (indentOfFirstLine !== null) {\r\n                            // adjust the indentation of the moving block\r\n                            var oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\r\n                            var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\r\n                            var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\r\n                            if (newSpaceCnt !== oldSpaceCnt) {\r\n                                var spaceCntOffset = newSpaceCnt - oldSpaceCnt;\r\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._selectionId = builder.trackSelection(s);\r\n    };\r\n    MoveLinesCommand.prototype.buildIndentConverter = function (tabSize, indentSize, insertSpaces) {\r\n        return {\r\n            shiftIndent: function (indentation) {\r\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\r\n            },\r\n            unshiftIndent: function (indentation) {\r\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\r\n            }\r\n        };\r\n    };\r\n    MoveLinesCommand.prototype.matchEnterRule = function (model, indentConverter, tabSize, line, oneLineAbove, oneLineAboveText) {\r\n        var validPrecedingLine = oneLineAbove;\r\n        while (validPrecedingLine >= 1) {\r\n            // ship empty lines as empty lines just inherit indentation\r\n            var lineContent = void 0;\r\n            if (validPrecedingLine === oneLineAbove && oneLineAboveText !== undefined) {\r\n                lineContent = oneLineAboveText;\r\n            }\r\n            else {\r\n                lineContent = model.getLineContent(validPrecedingLine);\r\n            }\r\n            var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\r\n            if (nonWhitespaceIdx >= 0) {\r\n                break;\r\n            }\r\n            validPrecedingLine--;\r\n        }\r\n        if (validPrecedingLine < 1 || line > model.getLineCount()) {\r\n            return null;\r\n        }\r\n        var maxColumn = model.getLineMaxColumn(validPrecedingLine);\r\n        var enter = LanguageConfigurationRegistry.getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn));\r\n        if (enter) {\r\n            var enterPrefix = enter.indentation;\r\n            if (enter.indentAction === IndentAction.None) {\r\n                enterPrefix = enter.indentation + enter.appendText;\r\n            }\r\n            else if (enter.indentAction === IndentAction.Indent) {\r\n                enterPrefix = enter.indentation + enter.appendText;\r\n            }\r\n            else if (enter.indentAction === IndentAction.IndentOutdent) {\r\n                enterPrefix = enter.indentation;\r\n            }\r\n            else if (enter.indentAction === IndentAction.Outdent) {\r\n                enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\r\n            }\r\n            var movingLineText = model.getLineContent(line);\r\n            if (this.trimLeft(movingLineText).indexOf(this.trimLeft(enterPrefix)) >= 0) {\r\n                var oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\r\n                var newIndentation = strings.getLeadingWhitespace(enterPrefix);\r\n                var indentMetadataOfMovelingLine = LanguageConfigurationRegistry.getIndentMetadata(model, line);\r\n                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* DECREASE_MASK */) {\r\n                    newIndentation = indentConverter.unshiftIndent(newIndentation);\r\n                }\r\n                var newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\r\n                var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\r\n                return newSpaceCnt - oldSpaceCnt;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    MoveLinesCommand.prototype.trimLeft = function (str) {\r\n        return str.replace(/^\\s+/, '');\r\n    };\r\n    MoveLinesCommand.prototype.shouldAutoIndent = function (model, selection) {\r\n        if (this._autoIndent < 4 /* Full */) {\r\n            return false;\r\n        }\r\n        // if it's not easy to tokenize, we stop auto indent.\r\n        if (!model.isCheapToTokenize(selection.startLineNumber)) {\r\n            return false;\r\n        }\r\n        var languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\r\n        var languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\r\n        if (languageAtSelectionStart !== languageAtSelectionEnd) {\r\n            return false;\r\n        }\r\n        if (LanguageConfigurationRegistry.getIndentRulesSupport(languageAtSelectionStart) === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    MoveLinesCommand.prototype.getIndentEditsOfMovingBlock = function (model, builder, s, tabSize, insertSpaces, offset) {\r\n        for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\r\n            var lineContent = model.getLineContent(i);\r\n            var originalIndent = strings.getLeadingWhitespace(lineContent);\r\n            var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\r\n            var newSpacesCnt = originalSpacesCnt + offset;\r\n            var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\r\n            if (newIndent !== originalIndent) {\r\n                builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\r\n                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\r\n                    // as users select part of the original indent white spaces\r\n                    // when we adjust the indentation of endLine, we should adjust the cursor position as well.\r\n                    this._moveEndLineSelectionShrink = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MoveLinesCommand.prototype.computeCursorState = function (model, helper) {\r\n        var result = helper.getTrackedSelection(this._selectionId);\r\n        if (this._moveEndPositionDown) {\r\n            result = result.setEndPosition(result.endLineNumber + 1, 1);\r\n        }\r\n        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\r\n            result = result.setEndPosition(result.endLineNumber, 2);\r\n        }\r\n        return result;\r\n    };\r\n    return MoveLinesCommand;\r\n}());\r\nexport { MoveLinesCommand };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}