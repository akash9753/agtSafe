{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nvar CommentLineAction = /** @class */function (_super) {\n  __extends(CommentLineAction, _super);\n  function CommentLineAction(type, opts) {\n    var _this = _super.call(this, opts) || this;\n    _this._type = type;\n    return _this;\n  }\n  CommentLineAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    var model = editor.getModel();\n    var commands = [];\n    var selections = editor.getSelections();\n    var modelOptions = model.getOptions();\n    var commentsOptions = editor.getOption(13 /* comments */);\n    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n      var selection = selections_1[_i];\n      commands.push(new LineCommentCommand(selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n  return CommentLineAction;\n}(EditorAction);\nvar ToggleCommentLineAction = /** @class */function (_super) {\n  __extends(ToggleCommentLineAction, _super);\n  function ToggleCommentLineAction() {\n    return _super.call(this, 0 /* Toggle */, {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 85 /* US_SLASH */,\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: 17 /* MenubarEditMenu */,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    }) || this;\n  }\n  return ToggleCommentLineAction;\n}(CommentLineAction);\nvar AddLineCommentAction = /** @class */function (_super) {\n  __extends(AddLineCommentAction, _super);\n  function AddLineCommentAction() {\n    return _super.call(this, 1 /* ForceAdd */, {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 33 /* KEY_C */),\n        weight: 100 /* EditorContrib */\n      }\n    }) || this;\n  }\n  return AddLineCommentAction;\n}(CommentLineAction);\nvar RemoveLineCommentAction = /** @class */function (_super) {\n  __extends(RemoveLineCommentAction, _super);\n  function RemoveLineCommentAction() {\n    return _super.call(this, 2 /* ForceRemove */, {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 51 /* KEY_U */),\n        weight: 100 /* EditorContrib */\n      }\n    }) || this;\n  }\n  return RemoveLineCommentAction;\n}(CommentLineAction);\nvar BlockCommentAction = /** @class */function (_super) {\n  __extends(BlockCommentAction, _super);\n  function BlockCommentAction() {\n    return _super.call(this, {\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KEY_A */,\n        linux: {\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KEY_A */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: 17 /* MenubarEditMenu */,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    }) || this;\n  }\n  BlockCommentAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    var commentsOptions = editor.getOption(13 /* comments */);\n    var commands = [];\n    var selections = editor.getSelections();\n    for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\n      var selection = selections_2[_i];\n      commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n  return BlockCommentAction;\n}(EditorAction);\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","KeyChord","EditorAction","registerEditorAction","EditorContextKeys","BlockCommentCommand","LineCommentCommand","CommentLineAction","_super","type","opts","_this","call","_type","run","accessor","editor","hasModel","model","getModel","commands","selections","getSelections","modelOptions","getOptions","commentsOptions","getOption","_i","selections_1","length","selection","push","tabSize","insertSpace","pushUndoStop","executeCommands","id","ToggleCommentLineAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","weight","menuOpts","menuId","group","title","key","comment","order","AddLineCommentAction","RemoveLineCommentAction","BlockCommentAction","linux","selections_2"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/comment/comment.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { BlockCommentCommand } from './blockCommentCommand.js';\r\nimport { LineCommentCommand } from './lineCommentCommand.js';\r\nvar CommentLineAction = /** @class */ (function (_super) {\r\n    __extends(CommentLineAction, _super);\r\n    function CommentLineAction(type, opts) {\r\n        var _this = _super.call(this, opts) || this;\r\n        _this._type = type;\r\n        return _this;\r\n    }\r\n    CommentLineAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var model = editor.getModel();\r\n        var commands = [];\r\n        var selections = editor.getSelections();\r\n        var modelOptions = model.getOptions();\r\n        var commentsOptions = editor.getOption(13 /* comments */);\r\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n            var selection = selections_1[_i];\r\n            commands.push(new LineCommentCommand(selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    };\r\n    return CommentLineAction;\r\n}(EditorAction));\r\nvar ToggleCommentLineAction = /** @class */ (function (_super) {\r\n    __extends(ToggleCommentLineAction, _super);\r\n    function ToggleCommentLineAction() {\r\n        return _super.call(this, 0 /* Toggle */, {\r\n            id: 'editor.action.commentLine',\r\n            label: nls.localize('comment.line', \"Toggle Line Comment\"),\r\n            alias: 'Toggle Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 85 /* US_SLASH */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\r\n                order: 1\r\n            }\r\n        }) || this;\r\n    }\r\n    return ToggleCommentLineAction;\r\n}(CommentLineAction));\r\nvar AddLineCommentAction = /** @class */ (function (_super) {\r\n    __extends(AddLineCommentAction, _super);\r\n    function AddLineCommentAction() {\r\n        return _super.call(this, 1 /* ForceAdd */, {\r\n            id: 'editor.action.addCommentLine',\r\n            label: nls.localize('comment.line.add', \"Add Line Comment\"),\r\n            alias: 'Add Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 33 /* KEY_C */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    return AddLineCommentAction;\r\n}(CommentLineAction));\r\nvar RemoveLineCommentAction = /** @class */ (function (_super) {\r\n    __extends(RemoveLineCommentAction, _super);\r\n    function RemoveLineCommentAction() {\r\n        return _super.call(this, 2 /* ForceRemove */, {\r\n            id: 'editor.action.removeCommentLine',\r\n            label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\r\n            alias: 'Remove Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 51 /* KEY_U */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        }) || this;\r\n    }\r\n    return RemoveLineCommentAction;\r\n}(CommentLineAction));\r\nvar BlockCommentAction = /** @class */ (function (_super) {\r\n    __extends(BlockCommentAction, _super);\r\n    function BlockCommentAction() {\r\n        return _super.call(this, {\r\n            id: 'editor.action.blockComment',\r\n            label: nls.localize('comment.block', \"Toggle Block Comment\"),\r\n            alias: 'Toggle Block Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KEY_A */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KEY_A */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: 17 /* MenubarEditMenu */,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\r\n                order: 2\r\n            }\r\n        }) || this;\r\n    }\r\n    BlockCommentAction.prototype.run = function (accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        var commentsOptions = editor.getOption(13 /* comments */);\r\n        var commands = [];\r\n        var selections = editor.getSelections();\r\n        for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\r\n            var selection = selections_2[_i];\r\n            commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    };\r\n    return BlockCommentAction;\r\n}(EditorAction));\r\nregisterEditorAction(ToggleCommentLineAction);\r\nregisterEditorAction(AddLineCommentAction);\r\nregisterEditorAction(RemoveLineCommentAction);\r\nregisterEditorAction(BlockCommentAction);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}