{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _object = require(\"../../../../../helpers/object\");\nvar MIXIN_NAME = 'stickyColumnsLeft';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {Object}\n */\n\nvar stickyColumnsLeft = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {Number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  }\n};\n(0, _object.defineGetter)(stickyColumnsLeft, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nvar _default = stickyColumnsLeft;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","_object","require","MIXIN_NAME","stickyColumnsLeft","getFirstRenderedColumn","totalColumns","wot","getSetting","getFirstVisibleColumn","getLastRenderedColumn","getRenderedColumnsCount","getLastVisibleColumn","Math","min","getVisibleColumnsCount","defineGetter","writable","enumerable","_default"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/3rdparty/walkontable/src/table/mixin/stickyColumnsLeft.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _object = require(\"../../../../../helpers/object\");\n\nvar MIXIN_NAME = 'stickyColumnsLeft';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {Object}\n */\n\nvar stickyColumnsLeft = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n\n    if (totalColumns === 0) {\n      return -1;\n    }\n\n    return 0;\n  },\n\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {Number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);\n  },\n\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  }\n};\n(0, _object.defineGetter)(stickyColumnsLeft, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nvar _default = stickyColumnsLeft;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,OAAO,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAEtD,IAAIC,UAAU,GAAG,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsB,GAAG;IACxD,IAAIC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC;IAEtD,IAAIF,YAAY,KAAK,CAAC,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,qBAAqB,EAAE,SAASA,qBAAqB,GAAG;IACtD,OAAO,IAAI,CAACJ,sBAAsB,EAAE;EACtC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,qBAAqB,EAAE,SAASA,qBAAqB,GAAG;IACtD,OAAO,IAAI,CAACC,uBAAuB,EAAE,GAAG,CAAC;EAC3C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,SAASA,oBAAoB,GAAG;IACpD,OAAO,IAAI,CAACF,qBAAqB,EAAE;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,SAASA,uBAAuB,GAAG;IAC1D,IAAIL,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC;IACtD,OAAOK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC,kBAAkB,CAAC,EAAEF,YAAY,CAAC;EACxE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACES,sBAAsB,EAAE,SAASA,sBAAsB,GAAG;IACxD,OAAO,IAAI,CAACJ,uBAAuB,EAAE;EACvC;AACF,CAAC;AACD,CAAC,CAAC,EAAEV,OAAO,CAACe,YAAY,EAAEZ,iBAAiB,EAAE,YAAY,EAAED,UAAU,EAAE;EACrEc,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,IAAIC,QAAQ,GAAGf,iBAAiB;AAChCN,OAAO,CAACE,OAAO,GAAGmB,QAAQ"},"metadata":{},"sourceType":"script"}