{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nvar LineDecoration = /** @class */function () {\n  function LineDecoration(startColumn, endColumn, className, type) {\n    this.startColumn = startColumn;\n    this.endColumn = endColumn;\n    this.className = className;\n    this.type = type;\n  }\n  LineDecoration._equals = function (a, b) {\n    return a.startColumn === b.startColumn && a.endColumn === b.endColumn && a.className === b.className && a.type === b.type;\n  };\n  LineDecoration.equalsArr = function (a, b) {\n    var aLen = a.length;\n    var bLen = b.length;\n    if (aLen !== bLen) {\n      return false;\n    }\n    for (var i = 0; i < aLen; i++) {\n      if (!LineDecoration._equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  LineDecoration.filter = function (lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n    if (lineDecorations.length === 0) {\n      return [];\n    }\n    var result = [],\n      resultLen = 0;\n    for (var i = 0, len = lineDecorations.length; i < len; i++) {\n      var d = lineDecorations[i];\n      var range = d.range;\n      if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n        // Ignore decorations that sit outside this line\n        continue;\n      }\n      if (range.isEmpty() && (d.type === 0 /* Regular */ || d.type === 3 /* RegularAffectingLetterSpacing */)) {\n        // Ignore empty range decorations\n        continue;\n      }\n      var startColumn = range.startLineNumber === lineNumber ? range.startColumn : minLineColumn;\n      var endColumn = range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn;\n      result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n    }\n    return result;\n  };\n  LineDecoration.compare = function (a, b) {\n    if (a.startColumn === b.startColumn) {\n      if (a.endColumn === b.endColumn) {\n        if (a.className < b.className) {\n          return -1;\n        }\n        if (a.className > b.className) {\n          return 1;\n        }\n        return 0;\n      }\n      return a.endColumn - b.endColumn;\n    }\n    return a.startColumn - b.startColumn;\n  };\n  return LineDecoration;\n}();\nexport { LineDecoration };\nvar DecorationSegment = /** @class */function () {\n  function DecorationSegment(startOffset, endOffset, className) {\n    this.startOffset = startOffset;\n    this.endOffset = endOffset;\n    this.className = className;\n  }\n  return DecorationSegment;\n}();\nexport { DecorationSegment };\nvar Stack = /** @class */function () {\n  function Stack() {\n    this.stopOffsets = [];\n    this.classNames = [];\n    this.count = 0;\n  }\n  Stack.prototype.consumeLowerThan = function (maxStopOffset, nextStartOffset, result) {\n    while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n      var i = 0;\n      // Take all equal stopping offsets\n      while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n        i++;\n      }\n      // Basically we are consuming the first i + 1 elements of the stack\n      result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' ')));\n      nextStartOffset = this.stopOffsets[i] + 1;\n      // Consume them\n      this.stopOffsets.splice(0, i + 1);\n      this.classNames.splice(0, i + 1);\n      this.count -= i + 1;\n    }\n    if (this.count > 0 && nextStartOffset < maxStopOffset) {\n      result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' ')));\n      nextStartOffset = maxStopOffset;\n    }\n    return nextStartOffset;\n  };\n  Stack.prototype.insert = function (stopOffset, className) {\n    if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n      // Insert at the end\n      this.stopOffsets.push(stopOffset);\n      this.classNames.push(className);\n    } else {\n      // Find the insertion position for `stopOffset`\n      for (var i = 0; i < this.count; i++) {\n        if (this.stopOffsets[i] >= stopOffset) {\n          this.stopOffsets.splice(i, 0, stopOffset);\n          this.classNames.splice(i, 0, className);\n          break;\n        }\n      }\n    }\n    this.count++;\n    return;\n  };\n  return Stack;\n}();\nvar LineDecorationsNormalizer = /** @class */function () {\n  function LineDecorationsNormalizer() {}\n  /**\r\n   * Normalize line decorations. Overlapping decorations will generate multiple segments\r\n   */\n  LineDecorationsNormalizer.normalize = function (lineContent, lineDecorations) {\n    if (lineDecorations.length === 0) {\n      return [];\n    }\n    var result = [];\n    var stack = new Stack();\n    var nextStartOffset = 0;\n    for (var i = 0, len = lineDecorations.length; i < len; i++) {\n      var d = lineDecorations[i];\n      var startColumn = d.startColumn;\n      var endColumn = d.endColumn;\n      var className = d.className;\n      // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n      if (startColumn > 1) {\n        var charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          startColumn--;\n        }\n      }\n      if (endColumn > 1) {\n        var charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          endColumn--;\n        }\n      }\n      var currentStartOffset = startColumn - 1;\n      var currentEndOffset = endColumn - 2;\n      nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n      if (stack.count === 0) {\n        nextStartOffset = currentStartOffset;\n      }\n      stack.insert(currentEndOffset, className);\n    }\n    stack.consumeLowerThan(1073741824 /* MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n    return result;\n  };\n  return LineDecorationsNormalizer;\n}();\nexport { LineDecorationsNormalizer };","map":{"version":3,"names":["strings","LineDecoration","startColumn","endColumn","className","type","_equals","a","b","equalsArr","aLen","length","bLen","i","filter","lineDecorations","lineNumber","minLineColumn","maxLineColumn","result","resultLen","len","d","range","endLineNumber","startLineNumber","isEmpty","inlineClassName","compare","DecorationSegment","startOffset","endOffset","Stack","stopOffsets","classNames","count","prototype","consumeLowerThan","maxStopOffset","nextStartOffset","push","join","splice","insert","stopOffset","LineDecorationsNormalizer","normalize","lineContent","stack","charCodeBefore","charCodeAt","isHighSurrogate","currentStartOffset","currentEndOffset"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar LineDecoration = /** @class */ (function () {\r\n    function LineDecoration(startColumn, endColumn, className, type) {\r\n        this.startColumn = startColumn;\r\n        this.endColumn = endColumn;\r\n        this.className = className;\r\n        this.type = type;\r\n    }\r\n    LineDecoration._equals = function (a, b) {\r\n        return (a.startColumn === b.startColumn\r\n            && a.endColumn === b.endColumn\r\n            && a.className === b.className\r\n            && a.type === b.type);\r\n    };\r\n    LineDecoration.equalsArr = function (a, b) {\r\n        var aLen = a.length;\r\n        var bLen = b.length;\r\n        if (aLen !== bLen) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < aLen; i++) {\r\n            if (!LineDecoration._equals(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    LineDecoration.filter = function (lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\r\n        if (lineDecorations.length === 0) {\r\n            return [];\r\n        }\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = lineDecorations.length; i < len; i++) {\r\n            var d = lineDecorations[i];\r\n            var range = d.range;\r\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\r\n                // Ignore decorations that sit outside this line\r\n                continue;\r\n            }\r\n            if (range.isEmpty() && (d.type === 0 /* Regular */ || d.type === 3 /* RegularAffectingLetterSpacing */)) {\r\n                // Ignore empty range decorations\r\n                continue;\r\n            }\r\n            var startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\r\n            var endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\r\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\r\n        }\r\n        return result;\r\n    };\r\n    LineDecoration.compare = function (a, b) {\r\n        if (a.startColumn === b.startColumn) {\r\n            if (a.endColumn === b.endColumn) {\r\n                if (a.className < b.className) {\r\n                    return -1;\r\n                }\r\n                if (a.className > b.className) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n            return a.endColumn - b.endColumn;\r\n        }\r\n        return a.startColumn - b.startColumn;\r\n    };\r\n    return LineDecoration;\r\n}());\r\nexport { LineDecoration };\r\nvar DecorationSegment = /** @class */ (function () {\r\n    function DecorationSegment(startOffset, endOffset, className) {\r\n        this.startOffset = startOffset;\r\n        this.endOffset = endOffset;\r\n        this.className = className;\r\n    }\r\n    return DecorationSegment;\r\n}());\r\nexport { DecorationSegment };\r\nvar Stack = /** @class */ (function () {\r\n    function Stack() {\r\n        this.stopOffsets = [];\r\n        this.classNames = [];\r\n        this.count = 0;\r\n    }\r\n    Stack.prototype.consumeLowerThan = function (maxStopOffset, nextStartOffset, result) {\r\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\r\n            var i = 0;\r\n            // Take all equal stopping offsets\r\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\r\n                i++;\r\n            }\r\n            // Basically we are consuming the first i + 1 elements of the stack\r\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' ')));\r\n            nextStartOffset = this.stopOffsets[i] + 1;\r\n            // Consume them\r\n            this.stopOffsets.splice(0, i + 1);\r\n            this.classNames.splice(0, i + 1);\r\n            this.count -= (i + 1);\r\n        }\r\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\r\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' ')));\r\n            nextStartOffset = maxStopOffset;\r\n        }\r\n        return nextStartOffset;\r\n    };\r\n    Stack.prototype.insert = function (stopOffset, className) {\r\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\r\n            // Insert at the end\r\n            this.stopOffsets.push(stopOffset);\r\n            this.classNames.push(className);\r\n        }\r\n        else {\r\n            // Find the insertion position for `stopOffset`\r\n            for (var i = 0; i < this.count; i++) {\r\n                if (this.stopOffsets[i] >= stopOffset) {\r\n                    this.stopOffsets.splice(i, 0, stopOffset);\r\n                    this.classNames.splice(i, 0, className);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.count++;\r\n        return;\r\n    };\r\n    return Stack;\r\n}());\r\nvar LineDecorationsNormalizer = /** @class */ (function () {\r\n    function LineDecorationsNormalizer() {\r\n    }\r\n    /**\r\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\r\n     */\r\n    LineDecorationsNormalizer.normalize = function (lineContent, lineDecorations) {\r\n        if (lineDecorations.length === 0) {\r\n            return [];\r\n        }\r\n        var result = [];\r\n        var stack = new Stack();\r\n        var nextStartOffset = 0;\r\n        for (var i = 0, len = lineDecorations.length; i < len; i++) {\r\n            var d = lineDecorations[i];\r\n            var startColumn = d.startColumn;\r\n            var endColumn = d.endColumn;\r\n            var className = d.className;\r\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\r\n            if (startColumn > 1) {\r\n                var charCodeBefore = lineContent.charCodeAt(startColumn - 2);\r\n                if (strings.isHighSurrogate(charCodeBefore)) {\r\n                    startColumn--;\r\n                }\r\n            }\r\n            if (endColumn > 1) {\r\n                var charCodeBefore = lineContent.charCodeAt(endColumn - 2);\r\n                if (strings.isHighSurrogate(charCodeBefore)) {\r\n                    endColumn--;\r\n                }\r\n            }\r\n            var currentStartOffset = startColumn - 1;\r\n            var currentEndOffset = endColumn - 2;\r\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\r\n            if (stack.count === 0) {\r\n                nextStartOffset = currentStartOffset;\r\n            }\r\n            stack.insert(currentEndOffset, className);\r\n        }\r\n        stack.consumeLowerThan(1073741824 /* MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\r\n        return result;\r\n    };\r\n    return LineDecorationsNormalizer;\r\n}());\r\nexport { LineDecorationsNormalizer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}