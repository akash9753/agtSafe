{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as strings from '../../../base/common/strings.js';\nvar CursorPosition = /** @class */function () {\n  function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n  }\n  return CursorPosition;\n}();\nexport { CursorPosition };\nvar MoveOperations = /** @class */function () {\n  function MoveOperations() {}\n  MoveOperations.leftPosition = function (model, lineNumber, column) {\n    if (column > model.getLineMinColumn(lineNumber)) {\n      column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\n    } else if (lineNumber > 1) {\n      lineNumber = lineNumber - 1;\n      column = model.getLineMaxColumn(lineNumber);\n    }\n    return new Position(lineNumber, column);\n  };\n  MoveOperations.left = function (config, model, lineNumber, column) {\n    var pos = MoveOperations.leftPosition(model, lineNumber, column);\n    return new CursorPosition(pos.lineNumber, pos.column, 0);\n  };\n  MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n  MoveOperations.rightPosition = function (model, lineNumber, column) {\n    if (column < model.getLineMaxColumn(lineNumber)) {\n      column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n    } else if (lineNumber < model.getLineCount()) {\n      lineNumber = lineNumber + 1;\n      column = model.getLineMinColumn(lineNumber);\n    }\n    return new Position(lineNumber, column);\n  };\n  MoveOperations.right = function (config, model, lineNumber, column) {\n    var pos = MoveOperations.rightPosition(model, lineNumber, column);\n    return new CursorPosition(pos.lineNumber, pos.column, 0);\n  };\n  MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n  MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber + count;\n    var lineCount = model.getLineCount();\n    if (lineNumber > lineCount) {\n      lineNumber = lineCount;\n      if (allowMoveOnLastLine) {\n        column = model.getLineMaxColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n    }\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n  MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move down acts relative to the end of selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n    var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n  MoveOperations.translateDown = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n  MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber - count;\n    if (lineNumber < 1) {\n      lineNumber = 1;\n      if (allowMoveOnFirstLine) {\n        column = model.getLineMinColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n    }\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n  MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move up acts relative to the beginning of selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n    var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n  MoveOperations.translateUp = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n  MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var minColumn = model.getLineMinColumn(lineNumber);\n    var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n    var column;\n    var relevantColumnNumber = cursor.position.column;\n    if (relevantColumnNumber === firstNonBlankColumn) {\n      column = minColumn;\n    } else {\n      column = firstNonBlankColumn;\n    }\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n  MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n  };\n  MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\n    return cursor.move(inSelectionMode, 1, 1, 0);\n  };\n  MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\n    var lastLineNumber = model.getLineCount();\n    var lastColumn = model.getLineMaxColumn(lastLineNumber);\n    return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n  };\n  return MoveOperations;\n}();\nexport { MoveOperations };","map":{"version":3,"names":["CursorColumns","SingleCursorState","Position","Range","strings","CursorPosition","lineNumber","column","leftoverVisibleColumns","MoveOperations","leftPosition","model","getLineMinColumn","prevCharLength","getLineContent","getLineMaxColumn","left","config","pos","moveLeft","cursor","inSelectionMode","noOfColumns","hasSelection","selection","startLineNumber","startColumn","r","position","move","rightPosition","nextCharLength","getLineCount","right","moveRight","endLineNumber","endColumn","down","count","allowMoveOnLastLine","currentVisibleColumn","visibleColumnFromColumn","tabSize","lineCount","Math","min","columnFromVisibleColumn2","moveDown","linesCount","translateDown","selectionStart","selectionStartLineNumber","selectionStartColumn","selectionStartLeftoverVisibleColumns","positionLineNumber","positionColumn","up","allowMoveOnFirstLine","moveUp","translateUp","moveToBeginningOfLine","minColumn","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","relevantColumnNumber","moveToEndOfLine","maxColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","lastLineNumber","lastColumn"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar CursorPosition = /** @class */ (function () {\r\n    function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n    }\r\n    return CursorPosition;\r\n}());\r\nexport { CursorPosition };\r\nvar MoveOperations = /** @class */ (function () {\r\n    function MoveOperations() {\r\n    }\r\n    MoveOperations.leftPosition = function (model, lineNumber, column) {\r\n        if (column > model.getLineMinColumn(lineNumber)) {\r\n            column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber > 1) {\r\n            lineNumber = lineNumber - 1;\r\n            column = model.getLineMaxColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.left = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.leftPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.rightPosition = function (model, lineNumber, column) {\r\n        if (column < model.getLineMaxColumn(lineNumber)) {\r\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber < model.getLineCount()) {\r\n            lineNumber = lineNumber + 1;\r\n            column = model.getLineMinColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.right = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.rightPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber + count;\r\n        var lineCount = model.getLineCount();\r\n        if (lineNumber > lineCount) {\r\n            lineNumber = lineCount;\r\n            if (allowMoveOnLastLine) {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move down acts relative to the end of selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateDown = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber - count;\r\n        if (lineNumber < 1) {\r\n            lineNumber = 1;\r\n            if (allowMoveOnFirstLine) {\r\n                column = model.getLineMinColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move up acts relative to the beginning of selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateUp = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\r\n        var column;\r\n        var relevantColumnNumber = cursor.position.column;\r\n        if (relevantColumnNumber === firstNonBlankColumn) {\r\n            column = minColumn;\r\n        }\r\n        else {\r\n            column = firstNonBlankColumn;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\r\n    };\r\n    MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        return cursor.move(inSelectionMode, 1, 1, 0);\r\n    };\r\n    MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        var lastLineNumber = model.getLineCount();\r\n        var lastColumn = model.getLineMaxColumn(lastLineNumber);\r\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\r\n    };\r\n    return MoveOperations;\r\n}());\r\nexport { MoveOperations };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}