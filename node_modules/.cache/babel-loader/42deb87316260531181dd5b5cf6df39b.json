{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as strings from '../../../base/common/strings.js';\nimport { SingleCursorState } from './cursorCommon.js';\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nvar WordOperations = /** @class */function () {\n  function WordOperations() {}\n  WordOperations._createWord = function (lineContent, wordType, nextCharClass, start, end) {\n    // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\n    return {\n      start: start,\n      end: end,\n      wordType: wordType,\n      nextCharClass: nextCharClass\n    };\n  };\n  WordOperations._findPreviousWordOnLine = function (wordSeparators, model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\n  };\n  WordOperations._doFindPreviousWordOnLine = function (lineContent, wordSeparators, position) {\n    var wordType = 0 /* None */;\n    for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n      if (chClass === 0 /* Regular */) {\n        if (wordType === 2 /* Separator */) {\n          return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n        }\n        wordType = 1 /* Regular */;\n      } else if (chClass === 2 /* WordSeparator */) {\n        if (wordType === 1 /* Regular */) {\n          return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n        }\n        wordType = 2 /* Separator */;\n      } else if (chClass === 1 /* Whitespace */) {\n        if (wordType !== 0 /* None */) {\n          return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n        }\n      }\n    }\n    if (wordType !== 0 /* None */) {\n      return this._createWord(lineContent, wordType, 1 /* Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\n    }\n    return null;\n  };\n  WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\n    var len = lineContent.length;\n    for (var chIndex = startIndex; chIndex < len; chIndex++) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n      if (chClass === 1 /* Whitespace */) {\n        return chIndex;\n      }\n      if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\n        return chIndex;\n      }\n      if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\n        return chIndex;\n      }\n    }\n    return len;\n  };\n  WordOperations._findNextWordOnLine = function (wordSeparators, model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\n  };\n  WordOperations._doFindNextWordOnLine = function (lineContent, wordSeparators, position) {\n    var wordType = 0 /* None */;\n    var len = lineContent.length;\n    for (var chIndex = position.column - 1; chIndex < len; chIndex++) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n      if (chClass === 0 /* Regular */) {\n        if (wordType === 2 /* Separator */) {\n          return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n        }\n        wordType = 1 /* Regular */;\n      } else if (chClass === 2 /* WordSeparator */) {\n        if (wordType === 1 /* Regular */) {\n          return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n        }\n        wordType = 2 /* Separator */;\n      } else if (chClass === 1 /* Whitespace */) {\n        if (wordType !== 0 /* None */) {\n          return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n        }\n      }\n    }\n    if (wordType !== 0 /* None */) {\n      return this._createWord(lineContent, wordType, 1 /* Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\n    }\n    return null;\n  };\n  WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\n    for (var chIndex = startIndex; chIndex >= 0; chIndex--) {\n      var chCode = lineContent.charCodeAt(chIndex);\n      var chClass = wordSeparators.get(chCode);\n      if (chClass === 1 /* Whitespace */) {\n        return chIndex + 1;\n      }\n      if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\n        return chIndex + 1;\n      }\n      if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\n        return chIndex + 1;\n      }\n    }\n    return 0;\n  };\n  WordOperations.moveWordLeft = function (wordSeparators, model, position, wordNavigationType) {\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var movedToPreviousLine = false;\n    if (column === 1) {\n      if (lineNumber > 1) {\n        movedToPreviousLine = true;\n        lineNumber = lineNumber - 1;\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    }\n    var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n    if (wordNavigationType === 0 /* WordStart */) {\n      if (prevWordOnLine && !movedToPreviousLine) {\n        // Special case for Visual Studio compatibility:\n        // when starting in the trim whitespace at the end of a line,\n        // go to the end of the last word\n        var lastWhitespaceColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n        if (lastWhitespaceColumn < column) {\n          return new Position(lineNumber, prevWordOnLine.end + 1);\n        }\n      }\n      return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n    }\n    if (wordNavigationType === 1 /* WordStartFast */) {\n      if (prevWordOnLine && prevWordOnLine.wordType === 2 /* Separator */ && prevWordOnLine.end - prevWordOnLine.start === 1 && prevWordOnLine.nextCharClass === 0 /* Regular */) {\n        // Skip over a word made up of one single separator and followed by a regular character\n        prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n      }\n      return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n    }\n    if (wordNavigationType === 3 /* WordAccessibility */) {\n      while (prevWordOnLine && prevWordOnLine.wordType === 2 /* Separator */) {\n        // Skip over words made up of only separators\n        prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n      }\n      return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n    }\n    // We are stopping at the ending of words\n    if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n      prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n    }\n    return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\n  };\n  WordOperations._moveWordPartLeft = function (model, position) {\n    var lineNumber = position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    if (position.column === 1) {\n      return lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position;\n    }\n    var lineContent = model.getLineContent(lineNumber);\n    for (var column = position.column - 1; column > 1; column--) {\n      var left = lineContent.charCodeAt(column - 2);\n      var right = lineContent.charCodeAt(column - 1);\n      if (left !== 95 /* Underline */ && right === 95 /* Underline */) {\n        // snake_case_variables\n        return new Position(lineNumber, column);\n      }\n      if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // camelCaseVariables\n        return new Position(lineNumber, column);\n      }\n      if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // thisIsACamelCaseWithOneLetterWords\n        if (column + 1 < maxColumn) {\n          var rightRight = lineContent.charCodeAt(column);\n          if (strings.isLowerAsciiLetter(rightRight)) {\n            return new Position(lineNumber, column);\n          }\n        }\n      }\n    }\n    return new Position(lineNumber, 1);\n  };\n  WordOperations.moveWordRight = function (wordSeparators, model, position, wordNavigationType) {\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var movedDown = false;\n    if (column === model.getLineMaxColumn(lineNumber)) {\n      if (lineNumber < model.getLineCount()) {\n        movedDown = true;\n        lineNumber = lineNumber + 1;\n        column = 1;\n      }\n    }\n    var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n    if (wordNavigationType === 2 /* WordEnd */) {\n      if (nextWordOnLine && nextWordOnLine.wordType === 2 /* Separator */) {\n        if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* Regular */) {\n          // Skip over a word made up of one single separator and followed by a regular character\n          nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n        }\n      }\n      if (nextWordOnLine) {\n        column = nextWordOnLine.end + 1;\n      } else {\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    } else if (wordNavigationType === 3 /* WordAccessibility */) {\n      if (movedDown) {\n        // If we move to the next line, pretend that the cursor is right before the first character.\n        // This is needed when the first word starts right at the first character - and in order not to miss it,\n        // we need to start before.\n        column = 0;\n      }\n      while (nextWordOnLine && (nextWordOnLine.wordType === 2 /* Separator */ || nextWordOnLine.start + 1 <= column)) {\n        // Skip over a word made up of one single separator\n        // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\n        nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n      }\n      if (nextWordOnLine) {\n        column = nextWordOnLine.start + 1;\n      } else {\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    } else {\n      if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\n        nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n      }\n      if (nextWordOnLine) {\n        column = nextWordOnLine.start + 1;\n      } else {\n        column = model.getLineMaxColumn(lineNumber);\n      }\n    }\n    return new Position(lineNumber, column);\n  };\n  WordOperations._moveWordPartRight = function (model, position) {\n    var lineNumber = position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    if (position.column === maxColumn) {\n      return lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position;\n    }\n    var lineContent = model.getLineContent(lineNumber);\n    for (var column = position.column + 1; column < maxColumn; column++) {\n      var left = lineContent.charCodeAt(column - 2);\n      var right = lineContent.charCodeAt(column - 1);\n      if (left === 95 /* Underline */ && right !== 95 /* Underline */) {\n        // snake_case_variables\n        return new Position(lineNumber, column);\n      }\n      if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // camelCaseVariables\n        return new Position(lineNumber, column);\n      }\n      if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n        // thisIsACamelCaseWithOneLetterWords\n        if (column + 1 < maxColumn) {\n          var rightRight = lineContent.charCodeAt(column);\n          if (strings.isLowerAsciiLetter(rightRight)) {\n            return new Position(lineNumber, column);\n          }\n        }\n      }\n    }\n    return new Position(lineNumber, maxColumn);\n  };\n  WordOperations._deleteWordLeftWhitespace = function (model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    var startIndex = position.column - 2;\n    var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\n    if (lastNonWhitespace + 1 < startIndex) {\n      return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\n    }\n    return null;\n  };\n  WordOperations.deleteWordLeft = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n    var position = new Position(selection.positionLineNumber, selection.positionColumn);\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    if (lineNumber === 1 && column === 1) {\n      // Ignore deleting at beginning of file\n      return null;\n    }\n    if (whitespaceHeuristics) {\n      var r = this._deleteWordLeftWhitespace(model, position);\n      if (r) {\n        return r;\n      }\n    }\n    var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n    if (wordNavigationType === 0 /* WordStart */) {\n      if (prevWordOnLine) {\n        column = prevWordOnLine.start + 1;\n      } else {\n        if (column > 1) {\n          column = 1;\n        } else {\n          lineNumber--;\n          column = model.getLineMaxColumn(lineNumber);\n        }\n      }\n    } else {\n      if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n        prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n      }\n      if (prevWordOnLine) {\n        column = prevWordOnLine.end + 1;\n      } else {\n        if (column > 1) {\n          column = 1;\n        } else {\n          lineNumber--;\n          column = model.getLineMaxColumn(lineNumber);\n        }\n      }\n    }\n    return new Range(lineNumber, column, position.lineNumber, position.column);\n  };\n  WordOperations._deleteWordPartLeft = function (model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n    var pos = selection.getPosition();\n    var toPosition = WordOperations._moveWordPartLeft(model, pos);\n    return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n  };\n  WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {\n    var len = str.length;\n    for (var chIndex = startIndex; chIndex < len; chIndex++) {\n      var ch = str.charAt(chIndex);\n      if (ch !== ' ' && ch !== '\\t') {\n        return chIndex;\n      }\n    }\n    return len;\n  };\n  WordOperations._deleteWordRightWhitespace = function (model, position) {\n    var lineContent = model.getLineContent(position.lineNumber);\n    var startIndex = position.column - 1;\n    var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\n    if (startIndex + 1 < firstNonWhitespace) {\n      // bingo\n      return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\n    }\n    return null;\n  };\n  WordOperations.deleteWordRight = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n    var position = new Position(selection.positionLineNumber, selection.positionColumn);\n    var lineNumber = position.lineNumber;\n    var column = position.column;\n    var lineCount = model.getLineCount();\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    if (lineNumber === lineCount && column === maxColumn) {\n      // Ignore deleting at end of file\n      return null;\n    }\n    if (whitespaceHeuristics) {\n      var r = this._deleteWordRightWhitespace(model, position);\n      if (r) {\n        return r;\n      }\n    }\n    var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n    if (wordNavigationType === 2 /* WordEnd */) {\n      if (nextWordOnLine) {\n        column = nextWordOnLine.end + 1;\n      } else {\n        if (column < maxColumn || lineNumber === lineCount) {\n          column = maxColumn;\n        } else {\n          lineNumber++;\n          nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n          if (nextWordOnLine) {\n            column = nextWordOnLine.start + 1;\n          } else {\n            column = model.getLineMaxColumn(lineNumber);\n          }\n        }\n      }\n    } else {\n      if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\n        nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n      }\n      if (nextWordOnLine) {\n        column = nextWordOnLine.start + 1;\n      } else {\n        if (column < maxColumn || lineNumber === lineCount) {\n          column = maxColumn;\n        } else {\n          lineNumber++;\n          nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n          if (nextWordOnLine) {\n            column = nextWordOnLine.start + 1;\n          } else {\n            column = model.getLineMaxColumn(lineNumber);\n          }\n        }\n      }\n    }\n    return new Range(lineNumber, column, position.lineNumber, position.column);\n  };\n  WordOperations._deleteWordPartRight = function (model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n    var pos = selection.getPosition();\n    var toPosition = WordOperations._moveWordPartRight(model, pos);\n    return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n  };\n  WordOperations.word = function (config, model, cursor, inSelectionMode, position) {\n    var wordSeparators = getMapForWordSeparators(config.wordSeparators);\n    var prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n    var nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n    if (!inSelectionMode) {\n      // Entering word selection for the first time\n      var startColumn_1;\n      var endColumn_1;\n      if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n        // isTouchingPrevWord\n        startColumn_1 = prevWord.start + 1;\n        endColumn_1 = prevWord.end + 1;\n      } else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n        // isTouchingNextWord\n        startColumn_1 = nextWord.start + 1;\n        endColumn_1 = nextWord.end + 1;\n      } else {\n        if (prevWord) {\n          startColumn_1 = prevWord.end + 1;\n        } else {\n          startColumn_1 = 1;\n        }\n        if (nextWord) {\n          endColumn_1 = nextWord.start + 1;\n        } else {\n          endColumn_1 = model.getLineMaxColumn(position.lineNumber);\n        }\n      }\n      return new SingleCursorState(new Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new Position(position.lineNumber, endColumn_1), 0);\n    }\n    var startColumn;\n    var endColumn;\n    if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\n      // isInsidePrevWord\n      startColumn = prevWord.start + 1;\n      endColumn = prevWord.end + 1;\n    } else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\n      // isInsideNextWord\n      startColumn = nextWord.start + 1;\n      endColumn = nextWord.end + 1;\n    } else {\n      startColumn = position.column;\n      endColumn = position.column;\n    }\n    var lineNumber = position.lineNumber;\n    var column;\n    if (cursor.selectionStart.containsPosition(position)) {\n      column = cursor.selectionStart.endColumn;\n    } else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\n      column = startColumn;\n      var possiblePosition = new Position(lineNumber, column);\n      if (cursor.selectionStart.containsPosition(possiblePosition)) {\n        column = cursor.selectionStart.endColumn;\n      }\n    } else {\n      column = endColumn;\n      var possiblePosition = new Position(lineNumber, column);\n      if (cursor.selectionStart.containsPosition(possiblePosition)) {\n        column = cursor.selectionStart.startColumn;\n      }\n    }\n    return cursor.move(true, lineNumber, column, 0);\n  };\n  return WordOperations;\n}();\nexport { WordOperations };\nvar WordPartOperations = /** @class */function (_super) {\n  __extends(WordPartOperations, _super);\n  function WordPartOperations() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  WordPartOperations.deleteWordPartLeft = function (wordSeparators, model, selection, whitespaceHeuristics) {\n    var candidates = enforceDefined([WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */), WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */), WordOperations._deleteWordPartLeft(model, selection)]);\n    candidates.sort(Range.compareRangesUsingEnds);\n    return candidates[2];\n  };\n  WordPartOperations.deleteWordPartRight = function (wordSeparators, model, selection, whitespaceHeuristics) {\n    var candidates = enforceDefined([WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */), WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */), WordOperations._deleteWordPartRight(model, selection)]);\n    candidates.sort(Range.compareRangesUsingStarts);\n    return candidates[0];\n  };\n  WordPartOperations.moveWordPartLeft = function (wordSeparators, model, position) {\n    var candidates = enforceDefined([WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordStart */), WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordEnd */), WordOperations._moveWordPartLeft(model, position)]);\n    candidates.sort(Position.compare);\n    return candidates[2];\n  };\n  WordPartOperations.moveWordPartRight = function (wordSeparators, model, position) {\n    var candidates = enforceDefined([WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordStart */), WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordEnd */), WordOperations._moveWordPartRight(model, position)]);\n    candidates.sort(Position.compare);\n    return candidates[0];\n  };\n  return WordPartOperations;\n}(WordOperations);\nexport { WordPartOperations };\nfunction enforceDefined(arr) {\n  return arr.filter(function (el) {\n    return Boolean(el);\n  });\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","strings","SingleCursorState","getMapForWordSeparators","Position","Range","WordOperations","_createWord","lineContent","wordType","nextCharClass","start","end","_findPreviousWordOnLine","wordSeparators","model","position","getLineContent","lineNumber","_doFindPreviousWordOnLine","chIndex","column","chCode","charCodeAt","chClass","get","_findEndOfWord","startIndex","len","length","_findNextWordOnLine","_doFindNextWordOnLine","_findStartOfWord","moveWordLeft","wordNavigationType","movedToPreviousLine","getLineMaxColumn","prevWordOnLine","lastWhitespaceColumn","getLineLastNonWhitespaceColumn","_moveWordPartLeft","maxColumn","left","right","isLowerAsciiLetter","isUpperAsciiLetter","rightRight","moveWordRight","movedDown","getLineCount","nextWordOnLine","_moveWordPartRight","_deleteWordLeftWhitespace","lastNonWhitespace","lastNonWhitespaceIndex","deleteWordLeft","selection","whitespaceHeuristics","isEmpty","positionLineNumber","positionColumn","r","_deleteWordPartLeft","pos","getPosition","toPosition","_findFirstNonWhitespaceChar","str","ch","charAt","_deleteWordRightWhitespace","firstNonWhitespace","deleteWordRight","lineCount","_deleteWordPartRight","word","config","cursor","inSelectionMode","prevWord","nextWord","startColumn_1","endColumn_1","startColumn","endColumn","selectionStart","containsPosition","isBeforeOrEqual","getStartPosition","possiblePosition","move","WordPartOperations","_super","apply","arguments","deleteWordPartLeft","candidates","enforceDefined","sort","compareRangesUsingEnds","deleteWordPartRight","compareRangesUsingStarts","moveWordPartLeft","compare","moveWordPartRight","arr","filter","el","Boolean"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { SingleCursorState } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar WordOperations = /** @class */ (function () {\r\n    function WordOperations() {\r\n    }\r\n    WordOperations._createWord = function (lineContent, wordType, nextCharClass, start, end) {\r\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\r\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\r\n    };\r\n    WordOperations._findPreviousWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindPreviousWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        var len = lineContent.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._findNextWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindNextWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        var len = lineContent.length;\r\n        for (var chIndex = position.column - 1; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        for (var chIndex = startIndex; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    WordOperations.moveWordLeft = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedToPreviousLine = false;\r\n        if (column === 1) {\r\n            if (lineNumber > 1) {\r\n                movedToPreviousLine = true;\r\n                lineNumber = lineNumber - 1;\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine && !movedToPreviousLine) {\r\n                // Special case for Visual Studio compatibility:\r\n                // when starting in the trim whitespace at the end of a line,\r\n                // go to the end of the last word\r\n                var lastWhitespaceColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\r\n                if (lastWhitespaceColumn < column) {\r\n                    return new Position(lineNumber, prevWordOnLine.end + 1);\r\n                }\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 1 /* WordStartFast */) {\r\n            if (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */\r\n                && prevWordOnLine.end - prevWordOnLine.start === 1\r\n                && prevWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                // Skip over a word made up of one single separator and followed by a regular character\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            while (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */) {\r\n                // Skip over words made up of only separators\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        // We are stopping at the ending of words\r\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n        }\r\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\r\n    };\r\n    WordOperations._moveWordPartLeft = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === 1) {\r\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column - 1; column > 1; column--) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left !== 95 /* Underline */ && right === 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, 1);\r\n    };\r\n    WordOperations.moveWordRight = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedDown = false;\r\n        if (column === model.getLineMaxColumn(lineNumber)) {\r\n            if (lineNumber < model.getLineCount()) {\r\n                movedDown = true;\r\n                lineNumber = lineNumber + 1;\r\n                column = 1;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* Separator */) {\r\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                    // Skip over a word made up of one single separator and followed by a regular character\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n                }\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            if (movedDown) {\r\n                // If we move to the next line, pretend that the cursor is right before the first character.\r\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\r\n                // we need to start before.\r\n                column = 0;\r\n            }\r\n            while (nextWordOnLine\r\n                && (nextWordOnLine.wordType === 2 /* Separator */\r\n                    || nextWordOnLine.start + 1 <= column)) {\r\n                // Skip over a word made up of one single separator\r\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    WordOperations._moveWordPartRight = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === maxColumn) {\r\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column + 1; column < maxColumn; column++) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left === 95 /* Underline */ && right !== 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, maxColumn);\r\n    };\r\n    WordOperations._deleteWordLeftWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 2;\r\n        var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\r\n        if (lastNonWhitespace + 1 < startIndex) {\r\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordLeft = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        if (lineNumber === 1 && column === 1) {\r\n            // Ignore deleting at beginning of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordLeftWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartLeft = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartLeft(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {\r\n        var len = str.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var ch = str.charAt(chIndex);\r\n            if (ch !== ' ' && ch !== '\\t') {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._deleteWordRightWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 1;\r\n        var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\r\n        if (startIndex + 1 < firstNonWhitespace) {\r\n            // bingo\r\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordRight = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var lineCount = model.getLineCount();\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (lineNumber === lineCount && column === maxColumn) {\r\n            // Ignore deleting at end of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordRightWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartRight = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartRight(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations.word = function (config, model, cursor, inSelectionMode, position) {\r\n        var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n        var prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        var nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (!inSelectionMode) {\r\n            // Entering word selection for the first time\r\n            var startColumn_1;\r\n            var endColumn_1;\r\n            if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\r\n                // isTouchingPrevWord\r\n                startColumn_1 = prevWord.start + 1;\r\n                endColumn_1 = prevWord.end + 1;\r\n            }\r\n            else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\r\n                // isTouchingNextWord\r\n                startColumn_1 = nextWord.start + 1;\r\n                endColumn_1 = nextWord.end + 1;\r\n            }\r\n            else {\r\n                if (prevWord) {\r\n                    startColumn_1 = prevWord.end + 1;\r\n                }\r\n                else {\r\n                    startColumn_1 = 1;\r\n                }\r\n                if (nextWord) {\r\n                    endColumn_1 = nextWord.start + 1;\r\n                }\r\n                else {\r\n                    endColumn_1 = model.getLineMaxColumn(position.lineNumber);\r\n                }\r\n            }\r\n            return new SingleCursorState(new Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new Position(position.lineNumber, endColumn_1), 0);\r\n        }\r\n        var startColumn;\r\n        var endColumn;\r\n        if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\r\n            // isInsidePrevWord\r\n            startColumn = prevWord.start + 1;\r\n            endColumn = prevWord.end + 1;\r\n        }\r\n        else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\r\n            // isInsideNextWord\r\n            startColumn = nextWord.start + 1;\r\n            endColumn = nextWord.end + 1;\r\n        }\r\n        else {\r\n            startColumn = position.column;\r\n            endColumn = position.column;\r\n        }\r\n        var lineNumber = position.lineNumber;\r\n        var column;\r\n        if (cursor.selectionStart.containsPosition(position)) {\r\n            column = cursor.selectionStart.endColumn;\r\n        }\r\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\r\n            column = startColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.endColumn;\r\n            }\r\n        }\r\n        else {\r\n            column = endColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.startColumn;\r\n            }\r\n        }\r\n        return cursor.move(true, lineNumber, column, 0);\r\n    };\r\n    return WordOperations;\r\n}());\r\nexport { WordOperations };\r\nvar WordPartOperations = /** @class */ (function (_super) {\r\n    __extends(WordPartOperations, _super);\r\n    function WordPartOperations() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    WordPartOperations.deleteWordPartLeft = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartLeft(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingEnds);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.deleteWordPartRight = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartRight(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingStarts);\r\n        return candidates[0];\r\n    };\r\n    WordPartOperations.moveWordPartLeft = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartLeft(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.moveWordPartRight = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartRight(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[0];\r\n    };\r\n    return WordPartOperations;\r\n}(WordOperations));\r\nexport { WordPartOperations };\r\nfunction enforceDefined(arr) {\r\n    return arr.filter(function (el) { return Boolean(el); });\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,cAAa,GAAG,uBAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,cAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC;QAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;MAAC;IAAC,CAAC;IAC9E,OAAOP,cAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,cAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ,OAAO,KAAKI,OAAO,MAAM,iCAAiC;AAC1D,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,kBAAkB;AACxC,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAc,GAAG,CAC1B;EACAA,cAAc,CAACC,WAAW,GAAG,UAAUC,WAAW,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACrF;IACA,OAAO;MAAED,KAAK,EAAEA,KAAK;MAAEC,GAAG,EAAEA,GAAG;MAAEH,QAAQ,EAAEA,QAAQ;MAAEC,aAAa,EAAEA;IAAc,CAAC;EACvF,CAAC;EACDJ,cAAc,CAACO,uBAAuB,GAAG,UAAUC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAChF,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC;IAC3D,OAAO,IAAI,CAACC,yBAAyB,CAACX,WAAW,EAAEM,cAAc,EAAEE,QAAQ,CAAC;EAChF,CAAC;EACDV,cAAc,CAACa,yBAAyB,GAAG,UAAUX,WAAW,EAAEM,cAAc,EAAEE,QAAQ,EAAE;IACxF,IAAIP,QAAQ,GAAG,CAAC,CAAC;IACjB,KAAK,IAAIW,OAAO,GAAGJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAED,OAAO,IAAI,CAAC,EAAEA,OAAO,EAAE,EAAE;MAC7D,IAAIE,MAAM,GAAGd,WAAW,CAACe,UAAU,CAACH,OAAO,CAAC;MAC5C,IAAII,OAAO,GAAGV,cAAc,CAACW,GAAG,CAACH,MAAM,CAAC;MACxC,IAAIE,OAAO,KAAK,CAAC,CAAC,eAAe;QAC7B,IAAIf,QAAQ,KAAK,CAAC,CAAC,iBAAiB;UAChC,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAEJ,OAAO,GAAG,CAAC,EAAE,IAAI,CAACM,cAAc,CAAClB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,CAAC;QACjJ;QACAX,QAAQ,GAAG,CAAC,CAAC;MACjB,CAAC,MACI,IAAIe,OAAO,KAAK,CAAC,CAAC,qBAAqB;QACxC,IAAIf,QAAQ,KAAK,CAAC,CAAC,eAAe;UAC9B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAEJ,OAAO,GAAG,CAAC,EAAE,IAAI,CAACM,cAAc,CAAClB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,CAAC;QACjJ;QACAX,QAAQ,GAAG,CAAC,CAAC;MACjB,CAAC,MACI,IAAIe,OAAO,KAAK,CAAC,CAAC,kBAAkB;QACrC,IAAIf,QAAQ,KAAK,CAAC,CAAC,YAAY;UAC3B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAEJ,OAAO,GAAG,CAAC,EAAE,IAAI,CAACM,cAAc,CAAClB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,CAAC;QACjJ;MACJ;IACJ;IACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAE,CAAC,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAACiB,cAAc,CAAClB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAE,CAAC,CAAC,CAAC;IACxI;IACA,OAAO,IAAI;EACf,CAAC;EACDH,cAAc,CAACoB,cAAc,GAAG,UAAUlB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEkB,UAAU,EAAE;IACzF,IAAIC,GAAG,GAAGpB,WAAW,CAACqB,MAAM;IAC5B,KAAK,IAAIT,OAAO,GAAGO,UAAU,EAAEP,OAAO,GAAGQ,GAAG,EAAER,OAAO,EAAE,EAAE;MACrD,IAAIE,MAAM,GAAGd,WAAW,CAACe,UAAU,CAACH,OAAO,CAAC;MAC5C,IAAII,OAAO,GAAGV,cAAc,CAACW,GAAG,CAACH,MAAM,CAAC;MACxC,IAAIE,OAAO,KAAK,CAAC,CAAC,kBAAkB;QAChC,OAAOJ,OAAO;MAClB;MACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,iBAAiBe,OAAO,KAAK,CAAC,CAAC,qBAAqB;QACnE,OAAOJ,OAAO;MAClB;MACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,mBAAmBe,OAAO,KAAK,CAAC,CAAC,eAAe;QAC/D,OAAOJ,OAAO;MAClB;IACJ;IACA,OAAOQ,GAAG;EACd,CAAC;EACDtB,cAAc,CAACwB,mBAAmB,GAAG,UAAUhB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC5E,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC;IAC3D,OAAO,IAAI,CAACa,qBAAqB,CAACvB,WAAW,EAAEM,cAAc,EAAEE,QAAQ,CAAC;EAC5E,CAAC;EACDV,cAAc,CAACyB,qBAAqB,GAAG,UAAUvB,WAAW,EAAEM,cAAc,EAAEE,QAAQ,EAAE;IACpF,IAAIP,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAImB,GAAG,GAAGpB,WAAW,CAACqB,MAAM;IAC5B,KAAK,IAAIT,OAAO,GAAGJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAED,OAAO,GAAGQ,GAAG,EAAER,OAAO,EAAE,EAAE;MAC9D,IAAIE,MAAM,GAAGd,WAAW,CAACe,UAAU,CAACH,OAAO,CAAC;MAC5C,IAAII,OAAO,GAAGV,cAAc,CAACW,GAAG,CAACH,MAAM,CAAC;MACxC,IAAIE,OAAO,KAAK,CAAC,CAAC,eAAe;QAC7B,IAAIf,QAAQ,KAAK,CAAC,CAAC,iBAAiB;UAChC,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACQ,gBAAgB,CAACxB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,EAAEA,OAAO,CAAC;QAC/I;QACAX,QAAQ,GAAG,CAAC,CAAC;MACjB,CAAC,MACI,IAAIe,OAAO,KAAK,CAAC,CAAC,qBAAqB;QACxC,IAAIf,QAAQ,KAAK,CAAC,CAAC,eAAe;UAC9B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACQ,gBAAgB,CAACxB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,EAAEA,OAAO,CAAC;QAC/I;QACAX,QAAQ,GAAG,CAAC,CAAC;MACjB,CAAC,MACI,IAAIe,OAAO,KAAK,CAAC,CAAC,kBAAkB;QACrC,IAAIf,QAAQ,KAAK,CAAC,CAAC,YAAY;UAC3B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAEe,OAAO,EAAE,IAAI,CAACQ,gBAAgB,CAACxB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEW,OAAO,GAAG,CAAC,CAAC,EAAEA,OAAO,CAAC;QAC/I;MACJ;IACJ;IACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI,CAACF,WAAW,CAACC,WAAW,EAAEC,QAAQ,EAAE,CAAC,CAAC,kBAAkB,IAAI,CAACuB,gBAAgB,CAACxB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEmB,GAAG,GAAG,CAAC,CAAC,EAAEA,GAAG,CAAC;IAClJ;IACA,OAAO,IAAI;EACf,CAAC;EACDtB,cAAc,CAAC0B,gBAAgB,GAAG,UAAUxB,WAAW,EAAEM,cAAc,EAAEL,QAAQ,EAAEkB,UAAU,EAAE;IAC3F,KAAK,IAAIP,OAAO,GAAGO,UAAU,EAAEP,OAAO,IAAI,CAAC,EAAEA,OAAO,EAAE,EAAE;MACpD,IAAIE,MAAM,GAAGd,WAAW,CAACe,UAAU,CAACH,OAAO,CAAC;MAC5C,IAAII,OAAO,GAAGV,cAAc,CAACW,GAAG,CAACH,MAAM,CAAC;MACxC,IAAIE,OAAO,KAAK,CAAC,CAAC,kBAAkB;QAChC,OAAOJ,OAAO,GAAG,CAAC;MACtB;MACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,iBAAiBe,OAAO,KAAK,CAAC,CAAC,qBAAqB;QACnE,OAAOJ,OAAO,GAAG,CAAC;MACtB;MACA,IAAIX,QAAQ,KAAK,CAAC,CAAC,mBAAmBe,OAAO,KAAK,CAAC,CAAC,eAAe;QAC/D,OAAOJ,OAAO,GAAG,CAAC;MACtB;IACJ;IACA,OAAO,CAAC;EACZ,CAAC;EACDd,cAAc,CAAC2B,YAAY,GAAG,UAAUnB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAEkB,kBAAkB,EAAE;IACzF,IAAIhB,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM;IAC5B,IAAIc,mBAAmB,GAAG,KAAK;IAC/B,IAAId,MAAM,KAAK,CAAC,EAAE;MACd,IAAIH,UAAU,GAAG,CAAC,EAAE;QAChBiB,mBAAmB,GAAG,IAAI;QAC1BjB,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3BG,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;MAC/C;IACJ;IACA,IAAImB,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC,CAAC;IACpH,IAAIa,kBAAkB,KAAK,CAAC,CAAC,iBAAiB;MAC1C,IAAIG,cAAc,IAAI,CAACF,mBAAmB,EAAE;QACxC;QACA;QACA;QACA,IAAIG,oBAAoB,GAAGvB,KAAK,CAACwB,8BAA8B,CAACrB,UAAU,CAAC;QAC3E,IAAIoB,oBAAoB,GAAGjB,MAAM,EAAE;UAC/B,OAAO,IAAIjB,QAAQ,CAACc,UAAU,EAAEmB,cAAc,CAACzB,GAAG,GAAG,CAAC,CAAC;QAC3D;MACJ;MACA,OAAO,IAAIR,QAAQ,CAACc,UAAU,EAAEmB,cAAc,GAAGA,cAAc,CAAC1B,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClF;IACA,IAAIuB,kBAAkB,KAAK,CAAC,CAAC,qBAAqB;MAC9C,IAAIG,cAAc,IACXA,cAAc,CAAC5B,QAAQ,KAAK,CAAC,CAAC,mBAC9B4B,cAAc,CAACzB,GAAG,GAAGyB,cAAc,CAAC1B,KAAK,KAAK,CAAC,IAC/C0B,cAAc,CAAC3B,aAAa,KAAK,CAAC,CAAC,eAAe;QACrD;QACA2B,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEmB,cAAc,CAAC1B,KAAK,GAAG,CAAC,CAAC,CAAC;MACtI;MACA,OAAO,IAAIP,QAAQ,CAACc,UAAU,EAAEmB,cAAc,GAAGA,cAAc,CAAC1B,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClF;IACA,IAAIuB,kBAAkB,KAAK,CAAC,CAAC,yBAAyB;MAClD,OAAOG,cAAc,IACdA,cAAc,CAAC5B,QAAQ,KAAK,CAAC,CAAC,iBAAiB;QAClD;QACA4B,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEmB,cAAc,CAAC1B,KAAK,GAAG,CAAC,CAAC,CAAC;MACtI;MACA,OAAO,IAAIP,QAAQ,CAACc,UAAU,EAAEmB,cAAc,GAAGA,cAAc,CAAC1B,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClF;IACA;IACA,IAAI0B,cAAc,IAAIhB,MAAM,IAAIgB,cAAc,CAACzB,GAAG,GAAG,CAAC,EAAE;MACpDyB,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEmB,cAAc,CAAC1B,KAAK,GAAG,CAAC,CAAC,CAAC;IACtI;IACA,OAAO,IAAIP,QAAQ,CAACc,UAAU,EAAEmB,cAAc,GAAGA,cAAc,CAACzB,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAChF,CAAC;EACDN,cAAc,CAACkC,iBAAiB,GAAG,UAAUzB,KAAK,EAAEC,QAAQ,EAAE;IAC1D,IAAIE,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIuB,SAAS,GAAG1B,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;IAClD,IAAIF,QAAQ,CAACK,MAAM,KAAK,CAAC,EAAE;MACvB,OAAQH,UAAU,GAAG,CAAC,GAAG,IAAId,QAAQ,CAACc,UAAU,GAAG,CAAC,EAAEH,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,GAAG,CAAC,CAAC,CAAC,GAAGF,QAAQ;IAC5G;IACA,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACC,UAAU,CAAC;IAClD,KAAK,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,EAAEA,MAAM,EAAE,EAAE;MACzD,IAAIqB,IAAI,GAAGlC,WAAW,CAACe,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;MAC7C,IAAIsB,KAAK,GAAGnC,WAAW,CAACe,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;MAC9C,IAAIqB,IAAI,KAAK,EAAE,CAAC,mBAAmBC,KAAK,KAAK,EAAE,CAAC,iBAAiB;QAC7D;QACA,OAAO,IAAIvC,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MAC3C;MACA,IAAIpB,OAAO,CAAC2C,kBAAkB,CAACF,IAAI,CAAC,IAAIzC,OAAO,CAAC4C,kBAAkB,CAACF,KAAK,CAAC,EAAE;QACvE;QACA,OAAO,IAAIvC,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MAC3C;MACA,IAAIpB,OAAO,CAAC4C,kBAAkB,CAACH,IAAI,CAAC,IAAIzC,OAAO,CAAC4C,kBAAkB,CAACF,KAAK,CAAC,EAAE;QACvE;QACA,IAAItB,MAAM,GAAG,CAAC,GAAGoB,SAAS,EAAE;UACxB,IAAIK,UAAU,GAAGtC,WAAW,CAACe,UAAU,CAACF,MAAM,CAAC;UAC/C,IAAIpB,OAAO,CAAC2C,kBAAkB,CAACE,UAAU,CAAC,EAAE;YACxC,OAAO,IAAI1C,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;UAC3C;QACJ;MACJ;IACJ;IACA,OAAO,IAAIjB,QAAQ,CAACc,UAAU,EAAE,CAAC,CAAC;EACtC,CAAC;EACDZ,cAAc,CAACyC,aAAa,GAAG,UAAUjC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAEkB,kBAAkB,EAAE;IAC1F,IAAIhB,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM;IAC5B,IAAI2B,SAAS,GAAG,KAAK;IACrB,IAAI3B,MAAM,KAAKN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC,EAAE;MAC/C,IAAIA,UAAU,GAAGH,KAAK,CAACkC,YAAY,EAAE,EAAE;QACnCD,SAAS,GAAG,IAAI;QAChB9B,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3BG,MAAM,GAAG,CAAC;MACd;IACJ;IACA,IAAI6B,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC,CAAC;IAChH,IAAIa,kBAAkB,KAAK,CAAC,CAAC,eAAe;MACxC,IAAIgB,cAAc,IAAIA,cAAc,CAACzC,QAAQ,KAAK,CAAC,CAAC,iBAAiB;QACjE,IAAIyC,cAAc,CAACtC,GAAG,GAAGsC,cAAc,CAACvC,KAAK,KAAK,CAAC,IAAIuC,cAAc,CAACxC,aAAa,KAAK,CAAC,CAAC,eAAe;UACrG;UACAwC,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEgC,cAAc,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC;QAChI;MACJ;MACA,IAAIsC,cAAc,EAAE;QAChB7B,MAAM,GAAG6B,cAAc,CAACtC,GAAG,GAAG,CAAC;MACnC,CAAC,MACI;QACDS,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;MAC/C;IACJ,CAAC,MACI,IAAIgB,kBAAkB,KAAK,CAAC,CAAC,yBAAyB;MACvD,IAAIc,SAAS,EAAE;QACX;QACA;QACA;QACA3B,MAAM,GAAG,CAAC;MACd;MACA,OAAO6B,cAAc,KACbA,cAAc,CAACzC,QAAQ,KAAK,CAAC,CAAC,mBAC3ByC,cAAc,CAACvC,KAAK,GAAG,CAAC,IAAIU,MAAM,CAAC,EAAE;QAC5C;QACA;QACA6B,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEgC,cAAc,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC;MAChI;MACA,IAAIsC,cAAc,EAAE;QAChB7B,MAAM,GAAG6B,cAAc,CAACvC,KAAK,GAAG,CAAC;MACrC,CAAC,MACI;QACDU,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;MAC/C;IACJ,CAAC,MACI;MACD,IAAIgC,cAAc,IAAI,CAACF,SAAS,IAAI3B,MAAM,IAAI6B,cAAc,CAACvC,KAAK,GAAG,CAAC,EAAE;QACpEuC,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEgC,cAAc,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC;MAChI;MACA,IAAIsC,cAAc,EAAE;QAChB7B,MAAM,GAAG6B,cAAc,CAACvC,KAAK,GAAG,CAAC;MACrC,CAAC,MACI;QACDU,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;MAC/C;IACJ;IACA,OAAO,IAAId,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;EAC3C,CAAC;EACDf,cAAc,CAAC6C,kBAAkB,GAAG,UAAUpC,KAAK,EAAEC,QAAQ,EAAE;IAC3D,IAAIE,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIuB,SAAS,GAAG1B,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;IAClD,IAAIF,QAAQ,CAACK,MAAM,KAAKoB,SAAS,EAAE;MAC/B,OAAQvB,UAAU,GAAGH,KAAK,CAACkC,YAAY,EAAE,GAAG,IAAI7C,QAAQ,CAACc,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,GAAGF,QAAQ;IAC1F;IACA,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACC,UAAU,CAAC;IAClD,KAAK,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGoB,SAAS,EAAEpB,MAAM,EAAE,EAAE;MACjE,IAAIqB,IAAI,GAAGlC,WAAW,CAACe,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;MAC7C,IAAIsB,KAAK,GAAGnC,WAAW,CAACe,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;MAC9C,IAAIqB,IAAI,KAAK,EAAE,CAAC,mBAAmBC,KAAK,KAAK,EAAE,CAAC,iBAAiB;QAC7D;QACA,OAAO,IAAIvC,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MAC3C;MACA,IAAIpB,OAAO,CAAC2C,kBAAkB,CAACF,IAAI,CAAC,IAAIzC,OAAO,CAAC4C,kBAAkB,CAACF,KAAK,CAAC,EAAE;QACvE;QACA,OAAO,IAAIvC,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MAC3C;MACA,IAAIpB,OAAO,CAAC4C,kBAAkB,CAACH,IAAI,CAAC,IAAIzC,OAAO,CAAC4C,kBAAkB,CAACF,KAAK,CAAC,EAAE;QACvE;QACA,IAAItB,MAAM,GAAG,CAAC,GAAGoB,SAAS,EAAE;UACxB,IAAIK,UAAU,GAAGtC,WAAW,CAACe,UAAU,CAACF,MAAM,CAAC;UAC/C,IAAIpB,OAAO,CAAC2C,kBAAkB,CAACE,UAAU,CAAC,EAAE;YACxC,OAAO,IAAI1C,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;UAC3C;QACJ;MACJ;IACJ;IACA,OAAO,IAAIjB,QAAQ,CAACc,UAAU,EAAEuB,SAAS,CAAC;EAC9C,CAAC;EACDnC,cAAc,CAAC8C,yBAAyB,GAAG,UAAUrC,KAAK,EAAEC,QAAQ,EAAE;IAClE,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC;IAC3D,IAAIS,UAAU,GAAGX,QAAQ,CAACK,MAAM,GAAG,CAAC;IACpC,IAAIgC,iBAAiB,GAAGpD,OAAO,CAACqD,sBAAsB,CAAC9C,WAAW,EAAEmB,UAAU,CAAC;IAC/E,IAAI0B,iBAAiB,GAAG,CAAC,GAAG1B,UAAU,EAAE;MACpC,OAAO,IAAItB,KAAK,CAACW,QAAQ,CAACE,UAAU,EAAEmC,iBAAiB,GAAG,CAAC,EAAErC,QAAQ,CAACE,UAAU,EAAEF,QAAQ,CAACK,MAAM,CAAC;IACtG;IACA,OAAO,IAAI;EACf,CAAC;EACDf,cAAc,CAACiD,cAAc,GAAG,UAAUzC,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAEvB,kBAAkB,EAAE;IAClH,IAAI,CAACsB,SAAS,CAACE,OAAO,EAAE,EAAE;MACtB,OAAOF,SAAS;IACpB;IACA,IAAIxC,QAAQ,GAAG,IAAIZ,QAAQ,CAACoD,SAAS,CAACG,kBAAkB,EAAEH,SAAS,CAACI,cAAc,CAAC;IACnF,IAAI1C,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM;IAC5B,IAAIH,UAAU,KAAK,CAAC,IAAIG,MAAM,KAAK,CAAC,EAAE;MAClC;MACA,OAAO,IAAI;IACf;IACA,IAAIoC,oBAAoB,EAAE;MACtB,IAAII,CAAC,GAAG,IAAI,CAACT,yBAAyB,CAACrC,KAAK,EAAEC,QAAQ,CAAC;MACvD,IAAI6C,CAAC,EAAE;QACH,OAAOA,CAAC;MACZ;IACJ;IACA,IAAIxB,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IAC5F,IAAIkB,kBAAkB,KAAK,CAAC,CAAC,iBAAiB;MAC1C,IAAIG,cAAc,EAAE;QAChBhB,MAAM,GAAGgB,cAAc,CAAC1B,KAAK,GAAG,CAAC;MACrC,CAAC,MACI;QACD,IAAIU,MAAM,GAAG,CAAC,EAAE;UACZA,MAAM,GAAG,CAAC;QACd,CAAC,MACI;UACDH,UAAU,EAAE;UACZG,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;QAC/C;MACJ;IACJ,CAAC,MACI;MACD,IAAImB,cAAc,IAAIhB,MAAM,IAAIgB,cAAc,CAACzB,GAAG,GAAG,CAAC,EAAE;QACpDyB,cAAc,GAAG/B,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEmB,cAAc,CAAC1B,KAAK,GAAG,CAAC,CAAC,CAAC;MACtI;MACA,IAAI0B,cAAc,EAAE;QAChBhB,MAAM,GAAGgB,cAAc,CAACzB,GAAG,GAAG,CAAC;MACnC,CAAC,MACI;QACD,IAAIS,MAAM,GAAG,CAAC,EAAE;UACZA,MAAM,GAAG,CAAC;QACd,CAAC,MACI;UACDH,UAAU,EAAE;UACZG,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;QAC/C;MACJ;IACJ;IACA,OAAO,IAAIb,KAAK,CAACa,UAAU,EAAEG,MAAM,EAAEL,QAAQ,CAACE,UAAU,EAAEF,QAAQ,CAACK,MAAM,CAAC;EAC9E,CAAC;EACDf,cAAc,CAACwD,mBAAmB,GAAG,UAAU/C,KAAK,EAAEyC,SAAS,EAAE;IAC7D,IAAI,CAACA,SAAS,CAACE,OAAO,EAAE,EAAE;MACtB,OAAOF,SAAS;IACpB;IACA,IAAIO,GAAG,GAAGP,SAAS,CAACQ,WAAW,EAAE;IACjC,IAAIC,UAAU,GAAG3D,cAAc,CAACkC,iBAAiB,CAACzB,KAAK,EAAEgD,GAAG,CAAC;IAC7D,OAAO,IAAI1D,KAAK,CAAC0D,GAAG,CAAC7C,UAAU,EAAE6C,GAAG,CAAC1C,MAAM,EAAE4C,UAAU,CAAC/C,UAAU,EAAE+C,UAAU,CAAC5C,MAAM,CAAC;EAC1F,CAAC;EACDf,cAAc,CAAC4D,2BAA2B,GAAG,UAAUC,GAAG,EAAExC,UAAU,EAAE;IACpE,IAAIC,GAAG,GAAGuC,GAAG,CAACtC,MAAM;IACpB,KAAK,IAAIT,OAAO,GAAGO,UAAU,EAAEP,OAAO,GAAGQ,GAAG,EAAER,OAAO,EAAE,EAAE;MACrD,IAAIgD,EAAE,GAAGD,GAAG,CAACE,MAAM,CAACjD,OAAO,CAAC;MAC5B,IAAIgD,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,IAAI,EAAE;QAC3B,OAAOhD,OAAO;MAClB;IACJ;IACA,OAAOQ,GAAG;EACd,CAAC;EACDtB,cAAc,CAACgE,0BAA0B,GAAG,UAAUvD,KAAK,EAAEC,QAAQ,EAAE;IACnE,IAAIR,WAAW,GAAGO,KAAK,CAACE,cAAc,CAACD,QAAQ,CAACE,UAAU,CAAC;IAC3D,IAAIS,UAAU,GAAGX,QAAQ,CAACK,MAAM,GAAG,CAAC;IACpC,IAAIkD,kBAAkB,GAAG,IAAI,CAACL,2BAA2B,CAAC1D,WAAW,EAAEmB,UAAU,CAAC;IAClF,IAAIA,UAAU,GAAG,CAAC,GAAG4C,kBAAkB,EAAE;MACrC;MACA,OAAO,IAAIlE,KAAK,CAACW,QAAQ,CAACE,UAAU,EAAEF,QAAQ,CAACK,MAAM,EAAEL,QAAQ,CAACE,UAAU,EAAEqD,kBAAkB,GAAG,CAAC,CAAC;IACvG;IACA,OAAO,IAAI;EACf,CAAC;EACDjE,cAAc,CAACkE,eAAe,GAAG,UAAU1D,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAEvB,kBAAkB,EAAE;IACnH,IAAI,CAACsB,SAAS,CAACE,OAAO,EAAE,EAAE;MACtB,OAAOF,SAAS;IACpB;IACA,IAAIxC,QAAQ,GAAG,IAAIZ,QAAQ,CAACoD,SAAS,CAACG,kBAAkB,EAAEH,SAAS,CAACI,cAAc,CAAC;IACnF,IAAI1C,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIG,MAAM,GAAGL,QAAQ,CAACK,MAAM;IAC5B,IAAIoD,SAAS,GAAG1D,KAAK,CAACkC,YAAY,EAAE;IACpC,IAAIR,SAAS,GAAG1B,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;IAClD,IAAIA,UAAU,KAAKuD,SAAS,IAAIpD,MAAM,KAAKoB,SAAS,EAAE;MAClD;MACA,OAAO,IAAI;IACf;IACA,IAAIgB,oBAAoB,EAAE;MACtB,IAAII,CAAC,GAAG,IAAI,CAACS,0BAA0B,CAACvD,KAAK,EAAEC,QAAQ,CAAC;MACxD,IAAI6C,CAAC,EAAE;QACH,OAAOA,CAAC;MACZ;IACJ;IACA,IAAIX,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IACxF,IAAIkB,kBAAkB,KAAK,CAAC,CAAC,eAAe;MACxC,IAAIgB,cAAc,EAAE;QAChB7B,MAAM,GAAG6B,cAAc,CAACtC,GAAG,GAAG,CAAC;MACnC,CAAC,MACI;QACD,IAAIS,MAAM,GAAGoB,SAAS,IAAIvB,UAAU,KAAKuD,SAAS,EAAE;UAChDpD,MAAM,GAAGoB,SAAS;QACtB,CAAC,MACI;UACDvB,UAAU,EAAE;UACZgC,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAE,CAAC,CAAC,CAAC;UACvG,IAAIgC,cAAc,EAAE;YAChB7B,MAAM,GAAG6B,cAAc,CAACvC,KAAK,GAAG,CAAC;UACrC,CAAC,MACI;YACDU,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;UAC/C;QACJ;MACJ;IACJ,CAAC,MACI;MACD,IAAIgC,cAAc,IAAI7B,MAAM,IAAI6B,cAAc,CAACvC,KAAK,GAAG,CAAC,EAAE;QACtDuC,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAEgC,cAAc,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC;MAChI;MACA,IAAIsC,cAAc,EAAE;QAChB7B,MAAM,GAAG6B,cAAc,CAACvC,KAAK,GAAG,CAAC;MACrC,CAAC,MACI;QACD,IAAIU,MAAM,GAAGoB,SAAS,IAAIvB,UAAU,KAAKuD,SAAS,EAAE;UAChDpD,MAAM,GAAGoB,SAAS;QACtB,CAAC,MACI;UACDvB,UAAU,EAAE;UACZgC,cAAc,GAAG5C,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAE,IAAIX,QAAQ,CAACc,UAAU,EAAE,CAAC,CAAC,CAAC;UACvG,IAAIgC,cAAc,EAAE;YAChB7B,MAAM,GAAG6B,cAAc,CAACvC,KAAK,GAAG,CAAC;UACrC,CAAC,MACI;YACDU,MAAM,GAAGN,KAAK,CAACqB,gBAAgB,CAAClB,UAAU,CAAC;UAC/C;QACJ;MACJ;IACJ;IACA,OAAO,IAAIb,KAAK,CAACa,UAAU,EAAEG,MAAM,EAAEL,QAAQ,CAACE,UAAU,EAAEF,QAAQ,CAACK,MAAM,CAAC;EAC9E,CAAC;EACDf,cAAc,CAACoE,oBAAoB,GAAG,UAAU3D,KAAK,EAAEyC,SAAS,EAAE;IAC9D,IAAI,CAACA,SAAS,CAACE,OAAO,EAAE,EAAE;MACtB,OAAOF,SAAS;IACpB;IACA,IAAIO,GAAG,GAAGP,SAAS,CAACQ,WAAW,EAAE;IACjC,IAAIC,UAAU,GAAG3D,cAAc,CAAC6C,kBAAkB,CAACpC,KAAK,EAAEgD,GAAG,CAAC;IAC9D,OAAO,IAAI1D,KAAK,CAAC0D,GAAG,CAAC7C,UAAU,EAAE6C,GAAG,CAAC1C,MAAM,EAAE4C,UAAU,CAAC/C,UAAU,EAAE+C,UAAU,CAAC5C,MAAM,CAAC;EAC1F,CAAC;EACDf,cAAc,CAACqE,IAAI,GAAG,UAAUC,MAAM,EAAE7D,KAAK,EAAE8D,MAAM,EAAEC,eAAe,EAAE9D,QAAQ,EAAE;IAC9E,IAAIF,cAAc,GAAGX,uBAAuB,CAACyE,MAAM,CAAC9D,cAAc,CAAC;IACnE,IAAIiE,QAAQ,GAAGzE,cAAc,CAACO,uBAAuB,CAACC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IACtF,IAAIgE,QAAQ,GAAG1E,cAAc,CAACwB,mBAAmB,CAAChB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,CAAC;IAClF,IAAI,CAAC8D,eAAe,EAAE;MAClB;MACA,IAAIG,aAAa;MACjB,IAAIC,WAAW;MACf,IAAIH,QAAQ,IAAIA,QAAQ,CAACtE,QAAQ,KAAK,CAAC,CAAC,iBAAiBsE,QAAQ,CAACpE,KAAK,IAAIK,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAI0D,QAAQ,CAACnE,GAAG,EAAE;QACnI;QACAqE,aAAa,GAAGF,QAAQ,CAACpE,KAAK,GAAG,CAAC;QAClCuE,WAAW,GAAGH,QAAQ,CAACnE,GAAG,GAAG,CAAC;MAClC,CAAC,MACI,IAAIoE,QAAQ,IAAIA,QAAQ,CAACvE,QAAQ,KAAK,CAAC,CAAC,iBAAiBuE,QAAQ,CAACrE,KAAK,IAAIK,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAI2D,QAAQ,CAACpE,GAAG,EAAE;QACxI;QACAqE,aAAa,GAAGD,QAAQ,CAACrE,KAAK,GAAG,CAAC;QAClCuE,WAAW,GAAGF,QAAQ,CAACpE,GAAG,GAAG,CAAC;MAClC,CAAC,MACI;QACD,IAAImE,QAAQ,EAAE;UACVE,aAAa,GAAGF,QAAQ,CAACnE,GAAG,GAAG,CAAC;QACpC,CAAC,MACI;UACDqE,aAAa,GAAG,CAAC;QACrB;QACA,IAAID,QAAQ,EAAE;UACVE,WAAW,GAAGF,QAAQ,CAACrE,KAAK,GAAG,CAAC;QACpC,CAAC,MACI;UACDuE,WAAW,GAAGnE,KAAK,CAACqB,gBAAgB,CAACpB,QAAQ,CAACE,UAAU,CAAC;QAC7D;MACJ;MACA,OAAO,IAAIhB,iBAAiB,CAAC,IAAIG,KAAK,CAACW,QAAQ,CAACE,UAAU,EAAE+D,aAAa,EAAEjE,QAAQ,CAACE,UAAU,EAAEgE,WAAW,CAAC,EAAE,CAAC,EAAE,IAAI9E,QAAQ,CAACY,QAAQ,CAACE,UAAU,EAAEgE,WAAW,CAAC,EAAE,CAAC,CAAC;IACvK;IACA,IAAIC,WAAW;IACf,IAAIC,SAAS;IACb,IAAIL,QAAQ,IAAIA,QAAQ,CAACtE,QAAQ,KAAK,CAAC,CAAC,iBAAiBsE,QAAQ,CAACpE,KAAK,GAAGK,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACK,MAAM,GAAG,CAAC,GAAG0D,QAAQ,CAACnE,GAAG,EAAE;MACjI;MACAuE,WAAW,GAAGJ,QAAQ,CAACpE,KAAK,GAAG,CAAC;MAChCyE,SAAS,GAAGL,QAAQ,CAACnE,GAAG,GAAG,CAAC;IAChC,CAAC,MACI,IAAIoE,QAAQ,IAAIA,QAAQ,CAACvE,QAAQ,KAAK,CAAC,CAAC,iBAAiBuE,QAAQ,CAACrE,KAAK,GAAGK,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACK,MAAM,GAAG,CAAC,GAAG2D,QAAQ,CAACpE,GAAG,EAAE;MACtI;MACAuE,WAAW,GAAGH,QAAQ,CAACrE,KAAK,GAAG,CAAC;MAChCyE,SAAS,GAAGJ,QAAQ,CAACpE,GAAG,GAAG,CAAC;IAChC,CAAC,MACI;MACDuE,WAAW,GAAGnE,QAAQ,CAACK,MAAM;MAC7B+D,SAAS,GAAGpE,QAAQ,CAACK,MAAM;IAC/B;IACA,IAAIH,UAAU,GAAGF,QAAQ,CAACE,UAAU;IACpC,IAAIG,MAAM;IACV,IAAIwD,MAAM,CAACQ,cAAc,CAACC,gBAAgB,CAACtE,QAAQ,CAAC,EAAE;MAClDK,MAAM,GAAGwD,MAAM,CAACQ,cAAc,CAACD,SAAS;IAC5C,CAAC,MACI,IAAIpE,QAAQ,CAACuE,eAAe,CAACV,MAAM,CAACQ,cAAc,CAACG,gBAAgB,EAAE,CAAC,EAAE;MACzEnE,MAAM,GAAG8D,WAAW;MACpB,IAAIM,gBAAgB,GAAG,IAAIrF,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MACvD,IAAIwD,MAAM,CAACQ,cAAc,CAACC,gBAAgB,CAACG,gBAAgB,CAAC,EAAE;QAC1DpE,MAAM,GAAGwD,MAAM,CAACQ,cAAc,CAACD,SAAS;MAC5C;IACJ,CAAC,MACI;MACD/D,MAAM,GAAG+D,SAAS;MAClB,IAAIK,gBAAgB,GAAG,IAAIrF,QAAQ,CAACc,UAAU,EAAEG,MAAM,CAAC;MACvD,IAAIwD,MAAM,CAACQ,cAAc,CAACC,gBAAgB,CAACG,gBAAgB,CAAC,EAAE;QAC1DpE,MAAM,GAAGwD,MAAM,CAACQ,cAAc,CAACF,WAAW;MAC9C;IACJ;IACA,OAAON,MAAM,CAACa,IAAI,CAAC,IAAI,EAAExE,UAAU,EAAEG,MAAM,EAAE,CAAC,CAAC;EACnD,CAAC;EACD,OAAOf,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc;AACvB,IAAIqF,kBAAkB,GAAG,aAAe,UAAUC,MAAM,EAAE;EACtDzG,SAAS,CAACwG,kBAAkB,EAAEC,MAAM,CAAC;EACrC,SAASD,kBAAkB,GAAG;IAC1B,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAH,kBAAkB,CAACI,kBAAkB,GAAG,UAAUjF,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE;IACtG,IAAIuC,UAAU,GAAGC,cAAc,CAAC,CAC5B3F,cAAc,CAACiD,cAAc,CAACzC,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE,CAAC,CAAC,gBAAgB,EACxGnD,cAAc,CAACiD,cAAc,CAACzC,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE,CAAC,CAAC,cAAc,EACtGnD,cAAc,CAACwD,mBAAmB,CAAC/C,KAAK,EAAEyC,SAAS,CAAC,CACvD,CAAC;IACFwC,UAAU,CAACE,IAAI,CAAC7F,KAAK,CAAC8F,sBAAsB,CAAC;IAC7C,OAAOH,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EACDL,kBAAkB,CAACS,mBAAmB,GAAG,UAAUtF,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE;IACvG,IAAIuC,UAAU,GAAGC,cAAc,CAAC,CAC5B3F,cAAc,CAACkE,eAAe,CAAC1D,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE,CAAC,CAAC,gBAAgB,EACzGnD,cAAc,CAACkE,eAAe,CAAC1D,cAAc,EAAEC,KAAK,EAAEyC,SAAS,EAAEC,oBAAoB,EAAE,CAAC,CAAC,cAAc,EACvGnD,cAAc,CAACoE,oBAAoB,CAAC3D,KAAK,EAAEyC,SAAS,CAAC,CACxD,CAAC;IACFwC,UAAU,CAACE,IAAI,CAAC7F,KAAK,CAACgG,wBAAwB,CAAC;IAC/C,OAAOL,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EACDL,kBAAkB,CAACW,gBAAgB,GAAG,UAAUxF,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC7E,IAAIgF,UAAU,GAAGC,cAAc,CAAC,CAC5B3F,cAAc,CAAC2B,YAAY,CAACnB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE,CAAC,CAAC,gBAAgB,EAC/EV,cAAc,CAAC2B,YAAY,CAACnB,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAC7EV,cAAc,CAACkC,iBAAiB,CAACzB,KAAK,EAAEC,QAAQ,CAAC,CACpD,CAAC;IACFgF,UAAU,CAACE,IAAI,CAAC9F,QAAQ,CAACmG,OAAO,CAAC;IACjC,OAAOP,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EACDL,kBAAkB,CAACa,iBAAiB,GAAG,UAAU1F,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC9E,IAAIgF,UAAU,GAAGC,cAAc,CAAC,CAC5B3F,cAAc,CAACyC,aAAa,CAACjC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE,CAAC,CAAC,gBAAgB,EAChFV,cAAc,CAACyC,aAAa,CAACjC,cAAc,EAAEC,KAAK,EAAEC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAC9EV,cAAc,CAAC6C,kBAAkB,CAACpC,KAAK,EAAEC,QAAQ,CAAC,CACrD,CAAC;IACFgF,UAAU,CAACE,IAAI,CAAC9F,QAAQ,CAACmG,OAAO,CAAC;IACjC,OAAOP,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EACD,OAAOL,kBAAkB;AAC7B,CAAC,CAACrF,cAAc,CAAE;AAClB,SAASqF,kBAAkB;AAC3B,SAASM,cAAc,CAACQ,GAAG,EAAE;EACzB,OAAOA,GAAG,CAACC,MAAM,CAAC,UAAUC,EAAE,EAAE;IAAE,OAAOC,OAAO,CAACD,EAAE,CAAC;EAAE,CAAC,CAAC;AAC5D"},"metadata":{},"sourceType":"module"}