{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: ['{#', '#}']\n  },\n  brackets: [['{#', '#}'], ['{%', '%}'], ['{{', '}}'], ['(', ')'], ['[', ']'],\n  // HTML\n  ['<!--', '-->'], ['<', '>']],\n  autoClosingPairs: [{\n    open: '{# ',\n    close: ' #}'\n  }, {\n    open: '{% ',\n    close: ' %}'\n  }, {\n    open: '{{ ',\n    close: ' }}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  },\n  // HTML\n  {\n    open: '<',\n    close: '>'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '',\n  ignoreCase: true,\n  keywords: [\n  // (opening) tags\n  'apply', 'autoescape', 'block', 'deprecated', 'do', 'embed', 'extends', 'flush', 'for', 'from', 'if', 'import', 'include', 'macro', 'sandbox', 'set', 'use', 'verbatim', 'with',\n  // closing tags\n  'endapply', 'endautoescape', 'endblock', 'endembed', 'endfor', 'endif', 'endmacro', 'endsandbox', 'endset', 'endwith',\n  // literals\n  'true', 'false'],\n  tokenizer: {\n    root: [\n    // whitespace\n    [/\\s+/],\n    // Twig Tag Delimiters\n    [/{#/, 'comment.twig', '@commentState'], [/{%[-~]?/, 'delimiter.twig', '@blockState'], [/{{[-~]?/, 'delimiter.twig', '@variableState'],\n    // HTML\n    [/<!DOCTYPE/, 'metatag.html', '@doctype'], [/<!--/, 'comment.html', '@comment'], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']], [/(<)(script)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@script'\n    }]], [/(<)(style)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@style'\n    }]], [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', {\n      token: 'tag.html',\n      next: '@otherTag'\n    }]], [/</, 'delimiter.html'], [/[^<]+/]],\n    /**\r\n     * Comment Tag Handling\r\n     */\n    commentState: [[/#}/, 'comment.twig', '@pop'], [/./, 'comment.twig']],\n    /**\r\n     * Block Tag Handling\r\n     */\n    blockState: [[/[-~]?%}/, 'delimiter.twig', '@pop'],\n    // whitespace\n    [/\\s+/],\n    // verbatim\n    // Unlike other blocks, verbatim ehas its own state\n    // transition to ensure we mark its contents as strings.\n    [/(verbatim)(\\s*)([-~]?%})/, ['keyword.twig', '', {\n      token: 'delimiter.twig',\n      next: '@rawDataState'\n    }]], {\n      include: 'expression'\n    }],\n    rawDataState: [\n    // endverbatim\n    [/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/, ['delimiter.twig', '', 'keyword.twig', '', {\n      token: 'delimiter.twig',\n      next: '@popall'\n    }]], [/./, 'string.twig']],\n    /**\r\n     * Variable Tag Handling\r\n     */\n    variableState: [[/[-~]?}}/, 'delimiter.twig', '@pop'], {\n      include: 'expression'\n    }],\n    stringState: [\n    // closing double quoted string\n    [/\"/, 'string.twig', '@pop'],\n    // interpolation start\n    [/#{\\s*/, 'string.twig', '@interpolationState'],\n    // string part\n    [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, 'string.twig']],\n    interpolationState: [\n    // interpolation end\n    [/}/, 'string.twig', '@pop'], {\n      include: 'expression'\n    }],\n    /**\r\n     * Expression Handling\r\n     */\n    expression: [\n    // whitespace\n    [/\\s+/],\n    // operators - math\n    [/\\+|-|\\/{1,2}|%|\\*{1,2}/, 'operators.twig'],\n    // operators - logic\n    [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, ['operators.twig', '']],\n    // operators - comparison (symbols)\n    [/==|!=|<|>|>=|<=/, 'operators.twig'],\n    // operators - comparison (words)\n    [/(starts with|ends with|matches)(\\s+)/, ['operators.twig', '']],\n    // operators - containment\n    [/(in)(\\s+)/, ['operators.twig', '']],\n    // operators - test\n    [/(is)(\\s+)/, ['operators.twig', '']],\n    // operators - misc\n    [/\\||~|:|\\.{1,2}|\\?{1,2}/, 'operators.twig'],\n    // names\n    [/[^\\W\\d][\\w]*/, {\n      cases: {\n        '@keywords': 'keyword.twig',\n        '@default': 'variable.twig'\n      }\n    }],\n    // numbers\n    [/\\d+(\\.\\d+)?/, 'number.twig'],\n    // punctuation\n    [/\\(|\\)|\\[|\\]|{|}|,/, 'delimiter.twig'],\n    // strings\n    [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, 'string.twig'],\n    // opening double quoted string\n    [/\"/, 'string.twig', '@stringState'],\n    // misc syntactic constructs\n    // These are not operators per se, but for the purposes of lexical analysis we\n    // can treat them as such.\n    // arrow functions\n    [/=>/, 'operators.twig'],\n    // assignment\n    [/=/, 'operators.twig']],\n    /**\r\n     * HTML\r\n     */\n    doctype: [[/[^>]+/, 'metatag.content.html'], [/>/, 'metatag.html', '@pop']],\n    comment: [[/-->/, 'comment.html', '@pop'], [/[^-]+/, 'comment.content.html'], [/./, 'comment.content.html']],\n    otherTag: [[/\\/?>/, 'delimiter.html', '@pop'], [/\"([^\"]*)\"/, 'attribute.value.html'], [/'([^']*)'/, 'attribute.value.html'], [/[\\w\\-]+/, 'attribute.name.html'], [/=/, 'delimiter.html'], [/[ \\t\\r\\n]+/]],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [[/type/, 'attribute.name.html', '@scriptAfterType'], [/\"([^\"]*)\"/, 'attribute.value.html'], [/'([^']*)'/, 'attribute.value.html'], [/[\\w\\-]+/, 'attribute.name.html'], [/=/, 'delimiter.html'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <script ... type\n    scriptAfterType: [[/=/, 'delimiter.html', '@scriptAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type =\n    scriptAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value.html',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value.html',\n      switchTo: '@scriptWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded',\n      nextEmbedded: 'text/javascript'\n    }], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <script ... type = $S2\n    scriptWithCustomType: [[/>/, {\n      token: 'delimiter.html',\n      next: '@scriptEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value.html'], [/'([^']*)'/, 'attribute.value.html'], [/[\\w\\-]+/, 'attribute.name.html'], [/=/, 'delimiter.html'], [/[ \\t\\r\\n]+/], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    scriptEmbedded: [[/<\\/script/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [[/type/, 'attribute.name.html', '@styleAfterType'], [/\"([^\"]*)\"/, 'attribute.value.html'], [/'([^']*)'/, 'attribute.value.html'], [/[\\w\\-]+/, 'attribute.name.html'], [/=/, 'delimiter.html'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', {\n      token: 'delimiter.html',\n      next: '@pop'\n    }]]],\n    // After <style ... type\n    styleAfterType: [[/=/, 'delimiter.html', '@styleAfterTypeEquals'], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type =\n    styleAfterTypeEquals: [[/\"([^\"]*)\"/, {\n      token: 'attribute.value.html',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/'([^']*)'/, {\n      token: 'attribute.value.html',\n      switchTo: '@styleWithCustomType.$1'\n    }], [/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded',\n      nextEmbedded: 'text/css'\n    }], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    // After <style ... type = $S2\n    styleWithCustomType: [[/>/, {\n      token: 'delimiter.html',\n      next: '@styleEmbedded.$S2',\n      nextEmbedded: '$S2'\n    }], [/\"([^\"]*)\"/, 'attribute.value.html'], [/'([^']*)'/, 'attribute.value.html'], [/[\\w\\-]+/, 'attribute.name.html'], [/=/, 'delimiter.html'], [/[ \\t\\r\\n]+/], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop'\n    }]],\n    styleEmbedded: [[/<\\/style/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^<]+/, '']]\n  }\n};","map":{"version":3,"names":["conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","keywords","tokenizer","root","token","next","commentState","blockState","include","rawDataState","variableState","stringState","interpolationState","expression","cases","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","switchTo","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{#', '#}'],\r\n    },\r\n    brackets: [\r\n        ['{#', '#}'],\r\n        ['{%', '%}'],\r\n        ['{{', '}}'],\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        // HTML\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{# ', close: ' #}' },\r\n        { open: '{% ', close: ' %}' },\r\n        { open: '{{ ', close: ' }}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        // HTML\r\n        { open: '<', close: '>' },\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    ignoreCase: true,\r\n    keywords: [\r\n        // (opening) tags\r\n        'apply', 'autoescape', 'block', 'deprecated', 'do', 'embed', 'extends',\r\n        'flush', 'for', 'from', 'if', 'import', 'include', 'macro', 'sandbox',\r\n        'set', 'use', 'verbatim', 'with',\r\n        // closing tags\r\n        'endapply', 'endautoescape', 'endblock', 'endembed', 'endfor', 'endif',\r\n        'endmacro', 'endsandbox', 'endset', 'endwith',\r\n        // literals\r\n        'true', 'false',\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // Twig Tag Delimiters\r\n            [/{#/, 'comment.twig', '@commentState'],\r\n            [/{%[-~]?/, 'delimiter.twig', '@blockState'],\r\n            [/{{[-~]?/, 'delimiter.twig', '@variableState'],\r\n            // HTML\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@comment'],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/[^<]+/],\r\n        ],\r\n        /**\r\n         * Comment Tag Handling\r\n         */\r\n        commentState: [\r\n            [/#}/, 'comment.twig', '@pop'],\r\n            [/./, 'comment.twig'],\r\n        ],\r\n        /**\r\n         * Block Tag Handling\r\n         */\r\n        blockState: [\r\n            [/[-~]?%}/, 'delimiter.twig', '@pop'],\r\n            // whitespace\r\n            [/\\s+/],\r\n            // verbatim\r\n            // Unlike other blocks, verbatim ehas its own state\r\n            // transition to ensure we mark its contents as strings.\r\n            [/(verbatim)(\\s*)([-~]?%})/, [\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@rawDataState' },\r\n                ]],\r\n            { include: 'expression' }\r\n        ],\r\n        rawDataState: [\r\n            // endverbatim\r\n            [/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/, [\r\n                    'delimiter.twig',\r\n                    '',\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@popall' },\r\n                ]],\r\n            [/./, 'string.twig'],\r\n        ],\r\n        /**\r\n         * Variable Tag Handling\r\n         */\r\n        variableState: [\r\n            [/[-~]?}}/, 'delimiter.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        stringState: [\r\n            // closing double quoted string\r\n            [/\"/, 'string.twig', '@pop'],\r\n            // interpolation start\r\n            [/#{\\s*/, 'string.twig', '@interpolationState'],\r\n            // string part\r\n            [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, 'string.twig'],\r\n        ],\r\n        interpolationState: [\r\n            // interpolation end\r\n            [/}/, 'string.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        /**\r\n         * Expression Handling\r\n         */\r\n        expression: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // operators - math\r\n            [/\\+|-|\\/{1,2}|%|\\*{1,2}/, 'operators.twig'],\r\n            // operators - logic\r\n            [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, ['operators.twig', '']],\r\n            // operators - comparison (symbols)\r\n            [/==|!=|<|>|>=|<=/, 'operators.twig'],\r\n            // operators - comparison (words)\r\n            [/(starts with|ends with|matches)(\\s+)/, ['operators.twig', '']],\r\n            // operators - containment\r\n            [/(in)(\\s+)/, ['operators.twig', '']],\r\n            // operators - test\r\n            [/(is)(\\s+)/, ['operators.twig', '']],\r\n            // operators - misc\r\n            [/\\||~|:|\\.{1,2}|\\?{1,2}/, 'operators.twig'],\r\n            // names\r\n            [/[^\\W\\d][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword.twig',\r\n                        '@default': 'variable.twig'\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d+(\\.\\d+)?/, 'number.twig'],\r\n            // punctuation\r\n            [/\\(|\\)|\\[|\\]|{|}|,/, 'delimiter.twig'],\r\n            // strings\r\n            [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, 'string.twig'],\r\n            // opening double quoted string\r\n            [/\"/, 'string.twig', '@stringState'],\r\n            // misc syntactic constructs\r\n            // These are not operators per se, but for the purposes of lexical analysis we\r\n            // can treat them as such.\r\n            // arrow functions\r\n            [/=>/, 'operators.twig'],\r\n            // assignment\r\n            [/=/, 'operators.twig'],\r\n        ],\r\n        /**\r\n         * HTML\r\n         */\r\n        doctype: [\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop'],\r\n        ],\r\n        comment: [\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [/type/, 'attribute.name.html', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [/=/, 'delimiter.html', '@scriptAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [/type/, 'attribute.name.html', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [/=/, 'delimiter.html', '@styleAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AACZ,OAAO,IAAIA,IAAI,GAAG;EACdC,WAAW,EAAE,gFAAgF;EAC7FC,QAAQ,EAAE;IACNC,YAAY,EAAE,CAAC,IAAI,EAAE,IAAI;EAC7B,CAAC;EACDC,QAAQ,EAAE,CACN,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC;EACV;EACA,CAAC,MAAM,EAAE,KAAK,CAAC,EACf,CAAC,GAAG,EAAE,GAAG,CAAC,CACb;EACDC,gBAAgB,EAAE,CACd;IAAEC,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC7B;IAAED,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC7B;IAAED,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC7B;IAAED,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,EACzB;IAAED,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,EACzB;IAAED,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,EACzB;IAAED,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAC9B;EACDC,gBAAgB,EAAE,CACd;IAAEF,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,EACzB;IAAED,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC;EAC3B;EACA;IAAED,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC;AAEjC,CAAC;AACD,OAAO,IAAIE,QAAQ,GAAG;EAClBC,YAAY,EAAE,EAAE;EAChBC,YAAY,EAAE,EAAE;EAChBC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE;EACN;EACA,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EACtE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EACrE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM;EAChC;EACA,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EACtE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS;EAC7C;EACA,MAAM,EAAE,OAAO,CAClB;EACDC,SAAS,EAAE;IACPC,IAAI,EAAE;IACF;IACA,CAAC,KAAK,CAAC;IACP;IACA,CAAC,IAAI,EAAE,cAAc,EAAE,eAAe,CAAC,EACvC,CAAC,SAAS,EAAE,gBAAgB,EAAE,aAAa,CAAC,EAC5C,CAAC,SAAS,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;IAC/C;IACA,CAAC,WAAW,EAAE,cAAc,EAAE,UAAU,CAAC,EACzC,CAAC,MAAM,EAAE,cAAc,EAAE,UAAU,CAAC,EACpC,CAAC,qCAAqC,EAAE,CAAC,gBAAgB,EAAE,UAAU,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAC,EAC7F,CAAC,aAAa,EAAE,CAAC,gBAAgB,EAAE;MAAEC,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC,CAAC,EAC3E,CAAC,YAAY,EAAE,CAAC,gBAAgB,EAAE;MAAED,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAS,CAAC,CAAC,CAAC,EACzE,CAAC,2BAA2B,EAAE,CAAC,gBAAgB,EAAE;MAAED,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC,EAC3F,CAAC,6BAA6B,EAAE,CAAC,gBAAgB,EAAE;MAAED,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC,EAC7F,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,OAAO,CAAC,CACZ;IACD;AACR;AACA;IACQC,YAAY,EAAE,CACV,CAAC,IAAI,EAAE,cAAc,EAAE,MAAM,CAAC,EAC9B,CAAC,GAAG,EAAE,cAAc,CAAC,CACxB;IACD;AACR;AACA;IACQC,UAAU,EAAE,CACR,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,CAAC;IACrC;IACA,CAAC,KAAK,CAAC;IACP;IACA;IACA;IACA,CAAC,0BAA0B,EAAE,CACrB,cAAc,EACd,EAAE,EACF;MAAEH,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAgB,CAAC,CACrD,CAAC,EACN;MAAEG,OAAO,EAAE;IAAa,CAAC,CAC5B;IACDC,YAAY,EAAE;IACV;IACA,CAAC,2CAA2C,EAAE,CACtC,gBAAgB,EAChB,EAAE,EACF,cAAc,EACd,EAAE,EACF;MAAEL,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAU,CAAC,CAC/C,CAAC,EACN,CAAC,GAAG,EAAE,aAAa,CAAC,CACvB;IACD;AACR;AACA;IACQK,aAAa,EAAE,CACX,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,CAAC,EACrC;MAAEF,OAAO,EAAE;IAAa,CAAC,CAC5B;IACDG,WAAW,EAAE;IACT;IACA,CAAC,GAAG,EAAE,aAAa,EAAE,MAAM,CAAC;IAC5B;IACA,CAAC,OAAO,EAAE,aAAa,EAAE,qBAAqB,CAAC;IAC/C;IACA,CAAC,sCAAsC,EAAE,aAAa,CAAC,CAC1D;IACDC,kBAAkB,EAAE;IAChB;IACA,CAAC,GAAG,EAAE,aAAa,EAAE,MAAM,CAAC,EAC5B;MAAEJ,OAAO,EAAE;IAAa,CAAC,CAC5B;IACD;AACR;AACA;IACQK,UAAU,EAAE;IACR;IACA,CAAC,KAAK,CAAC;IACP;IACA,CAAC,wBAAwB,EAAE,gBAAgB,CAAC;IAC5C;IACA,CAAC,oCAAoC,EAAE,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAC9D;IACA,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IACrC;IACA,CAAC,sCAAsC,EAAE,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAChE;IACA,CAAC,WAAW,EAAE,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACrC;IACA,CAAC,WAAW,EAAE,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACrC;IACA,CAAC,wBAAwB,EAAE,gBAAgB,CAAC;IAC5C;IACA,CAAC,cAAc,EAAE;MACTC,KAAK,EAAE;QACH,WAAW,EAAE,cAAc;QAC3B,UAAU,EAAE;MAChB;IACJ,CAAC,CAAC;IACN;IACA,CAAC,aAAa,EAAE,aAAa,CAAC;IAC9B;IACA,CAAC,mBAAmB,EAAE,gBAAgB,CAAC;IACvC;IACA,CAAC,6DAA6D,EAAE,aAAa,CAAC;IAC9E;IACA,CAAC,GAAG,EAAE,aAAa,EAAE,cAAc,CAAC;IACpC;IACA;IACA;IACA;IACA,CAAC,IAAI,EAAE,gBAAgB,CAAC;IACxB;IACA,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAC1B;IACD;AACR;AACA;IACQC,OAAO,EAAE,CACL,CAAC,OAAO,EAAE,sBAAsB,CAAC,EACjC,CAAC,GAAG,EAAE,cAAc,EAAE,MAAM,CAAC,CAChC;IACDC,OAAO,EAAE,CACL,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,CAAC,EAC/B,CAAC,OAAO,EAAE,sBAAsB,CAAC,EACjC,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAChC;IACDC,QAAQ,EAAE,CACN,CAAC,MAAM,EAAE,gBAAgB,EAAE,MAAM,CAAC,EAClC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAClC,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,YAAY,CAAC,CACjB;IACD;IACA;IACAC,MAAM,EAAE,CACJ,CAAC,MAAM,EAAE,qBAAqB,EAAE,kBAAkB,CAAC,EACnD,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAClC,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,GAAG,EAAE;MAAEd,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,iBAAiB;MAAEc,YAAY,EAAE;IAAkB,CAAC,CAAC,EAC5F,CAAC,YAAY,CAAC,EACd,CAAC,qBAAqB,EAAE,CAAC,gBAAgB,EAAE,UAAU,EAAE;MAAEf,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CAAC,CACrG;IACD;IACAe,eAAe,EAAE,CACb,CAAC,GAAG,EAAE,gBAAgB,EAAE,wBAAwB,CAAC,EACjD,CAAC,GAAG,EAAE;MAAEhB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,iBAAiB;MAAEc,YAAY,EAAE;IAAkB,CAAC,CAAC,EAC5F,CAAC,YAAY,CAAC,EACd,CAAC,eAAe,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACzD;IACD;IACAgB,qBAAqB,EAAE,CACnB,CAAC,WAAW,EAAE;MAAEjB,KAAK,EAAE,sBAAsB;MAAEkB,QAAQ,EAAE;IAA2B,CAAC,CAAC,EACtF,CAAC,WAAW,EAAE;MAAElB,KAAK,EAAE,sBAAsB;MAAEkB,QAAQ,EAAE;IAA2B,CAAC,CAAC,EACtF,CAAC,GAAG,EAAE;MAAElB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,iBAAiB;MAAEc,YAAY,EAAE;IAAkB,CAAC,CAAC,EAC5F,CAAC,YAAY,CAAC,EACd,CAAC,eAAe,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACzD;IACD;IACAkB,oBAAoB,EAAE,CAClB,CAAC,GAAG,EAAE;MAAEnB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,qBAAqB;MAAEc,YAAY,EAAE;IAAM,CAAC,CAAC,EACpF,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAClC,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,YAAY,CAAC,EACd,CAAC,eAAe,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACzD;IACDmB,cAAc,EAAE,CACZ,CAAC,WAAW,EAAE;MAAEpB,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE,MAAM;MAAEc,YAAY,EAAE;IAAO,CAAC,CAAC,EACxE,CAAC,OAAO,EAAE,EAAE,CAAC,CAChB;IACD;IACA;IACA;IACAM,KAAK,EAAE,CACH,CAAC,MAAM,EAAE,qBAAqB,EAAE,iBAAiB,CAAC,EAClD,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAClC,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,GAAG,EAAE;MAAErB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,gBAAgB;MAAEc,YAAY,EAAE;IAAW,CAAC,CAAC,EACpF,CAAC,YAAY,CAAC,EACd,CAAC,oBAAoB,EAAE,CAAC,gBAAgB,EAAE,UAAU,EAAE;MAAEf,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CAAC,CACpG;IACD;IACAqB,cAAc,EAAE,CACZ,CAAC,GAAG,EAAE,gBAAgB,EAAE,uBAAuB,CAAC,EAChD,CAAC,GAAG,EAAE;MAAEtB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,gBAAgB;MAAEc,YAAY,EAAE;IAAW,CAAC,CAAC,EACpF,CAAC,YAAY,CAAC,EACd,CAAC,cAAc,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACxD;IACD;IACAsB,oBAAoB,EAAE,CAClB,CAAC,WAAW,EAAE;MAAEvB,KAAK,EAAE,sBAAsB;MAAEkB,QAAQ,EAAE;IAA0B,CAAC,CAAC,EACrF,CAAC,WAAW,EAAE;MAAElB,KAAK,EAAE,sBAAsB;MAAEkB,QAAQ,EAAE;IAA0B,CAAC,CAAC,EACrF,CAAC,GAAG,EAAE;MAAElB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,gBAAgB;MAAEc,YAAY,EAAE;IAAW,CAAC,CAAC,EACpF,CAAC,YAAY,CAAC,EACd,CAAC,cAAc,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACxD;IACD;IACAuB,mBAAmB,EAAE,CACjB,CAAC,GAAG,EAAE;MAAExB,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,oBAAoB;MAAEc,YAAY,EAAE;IAAM,CAAC,CAAC,EACnF,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,WAAW,EAAE,sBAAsB,CAAC,EACrC,CAAC,SAAS,EAAE,qBAAqB,CAAC,EAClC,CAAC,GAAG,EAAE,gBAAgB,CAAC,EACvB,CAAC,YAAY,CAAC,EACd,CAAC,cAAc,EAAE;MAAEf,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CACxD;IACDwB,aAAa,EAAE,CACX,CAAC,UAAU,EAAE;MAAEzB,KAAK,EAAE,UAAU;MAAEC,IAAI,EAAE,MAAM;MAAEc,YAAY,EAAE;IAAO,CAAC,CAAC,EACvE,CAAC,OAAO,EAAE,EAAE,CAAC;EAErB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}