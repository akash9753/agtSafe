{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n  return r;\n};\nimport * as extpath from './extpath.js';\nimport * as paths from './path.js';\nimport { URI } from './uri.js';\nimport { equalsIgnoreCase } from './strings.js';\nimport { Schemas } from './network.js';\nimport { isLinux, isWindows } from './platform.js';\nexport function hasToIgnoreCase(resource) {\n  // A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n  // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n  return resource && resource.scheme === Schemas.file ? !isLinux : true;\n}\nexport function basenameOrAuthority(resource) {\n  return basename(resource) || resource.authority;\n}\n/**\r\n * Tests wheter the two authorities are the same\r\n */\nexport function isEqualAuthority(a1, a2) {\n  return a1 === a2 || equalsIgnoreCase(a1, a2);\n}\nexport function isEqual(first, second, ignoreCase) {\n  if (ignoreCase === void 0) {\n    ignoreCase = hasToIgnoreCase(first);\n  }\n  if (first === second) {\n    return true;\n  }\n  if (!first || !second) {\n    return false;\n  }\n  if (first.scheme !== second.scheme || !isEqualAuthority(first.authority, second.authority)) {\n    return false;\n  }\n  var p1 = first.path || '/',\n    p2 = second.path || '/';\n  return p1 === p2 || ignoreCase && equalsIgnoreCase(p1 || '/', p2 || '/');\n}\nexport function basename(resource) {\n  return paths.posix.basename(resource.path);\n}\n/**\r\n * Return a URI representing the directory of a URI path.\r\n *\r\n * @param resource The input URI.\r\n * @returns The URI representing the directory of the input URI.\r\n */\nexport function dirname(resource) {\n  if (resource.path.length === 0) {\n    return resource;\n  }\n  if (resource.scheme === Schemas.file) {\n    return URI.file(paths.dirname(originalFSPath(resource)));\n  }\n  var dirname = paths.posix.dirname(resource.path);\n  if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* Slash */) {\n    console.error(\"dirname(\\\"\" + resource.toString + \")) resulted in a relative path\");\n    dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n  }\n\n  return resource.with({\n    path: dirname\n  });\n}\n/**\r\n * Join a URI path with path fragments and normalizes the resulting path.\r\n *\r\n * @param resource The input URI.\r\n * @param pathFragment The path fragment to add to the URI path.\r\n * @returns The resulting URI.\r\n */\nexport function joinPath(resource) {\n  var _a;\n  var pathFragment = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    pathFragment[_i - 1] = arguments[_i];\n  }\n  var joinedPath;\n  if (resource.scheme === Schemas.file) {\n    joinedPath = URI.file(paths.join.apply(paths, __spreadArrays([originalFSPath(resource)], pathFragment))).path;\n  } else {\n    joinedPath = (_a = paths.posix).join.apply(_a, __spreadArrays([resource.path || '/'], pathFragment));\n  }\n  return resource.with({\n    path: joinedPath\n  });\n}\n/**\r\n * Normalizes the path part of a URI: Resolves `.` and `..` elements with directory names.\r\n *\r\n * @param resource The URI to normalize the path.\r\n * @returns The URI with the normalized path.\r\n */\nexport function normalizePath(resource) {\n  if (!resource.path.length) {\n    return resource;\n  }\n  var normalizedPath;\n  if (resource.scheme === Schemas.file) {\n    normalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n  } else {\n    normalizedPath = paths.posix.normalize(resource.path);\n  }\n  return resource.with({\n    path: normalizedPath\n  });\n}\n/**\r\n * Returns the fsPath of an URI where the drive letter is not normalized.\r\n * See #56403.\r\n */\nexport function originalFSPath(uri) {\n  var value;\n  var uriPath = uri.path;\n  if (uri.authority && uriPath.length > 1 && uri.scheme === Schemas.file) {\n    // unc path: file://shares/c$/far/boo\n    value = \"//\" + uri.authority + uriPath;\n  } else if (isWindows && uriPath.charCodeAt(0) === 47 /* Slash */ && extpath.isWindowsDriveLetter(uriPath.charCodeAt(1)) && uriPath.charCodeAt(2) === 58 /* Colon */) {\n    value = uriPath.substr(1);\n  } else {\n    // other path\n    value = uriPath;\n  }\n  if (isWindows) {\n    value = value.replace(/\\//g, '\\\\');\n  }\n  return value;\n}\n/**\r\n * Returns a relative path between two URIs. If the URIs don't have the same schema or authority, `undefined` is returned.\r\n * The returned relative path always uses forward slashes.\r\n */\nexport function relativePath(from, to, ignoreCase) {\n  if (ignoreCase === void 0) {\n    ignoreCase = hasToIgnoreCase(from);\n  }\n  if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n    return undefined;\n  }\n  if (from.scheme === Schemas.file) {\n    var relativePath_1 = paths.relative(from.path, to.path);\n    return isWindows ? extpath.toSlashes(relativePath_1) : relativePath_1;\n  }\n  var fromPath = from.path || '/',\n    toPath = to.path || '/';\n  if (ignoreCase) {\n    // make casing of fromPath match toPath\n    var i = 0;\n    for (var len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n      if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n        if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n          break;\n        }\n      }\n    }\n    fromPath = toPath.substr(0, i) + fromPath.substr(i);\n  }\n  return paths.posix.relative(fromPath, toPath);\n}\n/**\r\n * Data URI related helpers.\r\n */\nexport var DataUri;\n(function (DataUri) {\n  DataUri.META_DATA_LABEL = 'label';\n  DataUri.META_DATA_DESCRIPTION = 'description';\n  DataUri.META_DATA_SIZE = 'size';\n  DataUri.META_DATA_MIME = 'mime';\n  function parseMetaData(dataUri) {\n    var metadata = new Map();\n    // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n    // the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n    var meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n    meta.split(';').forEach(function (property) {\n      var _a = property.split(':'),\n        key = _a[0],\n        value = _a[1];\n      if (key && value) {\n        metadata.set(key, value);\n      }\n    });\n    // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n    // the mime is: image/png\n    var mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n    if (mime) {\n      metadata.set(DataUri.META_DATA_MIME, mime);\n    }\n    return metadata;\n  }\n  DataUri.parseMetaData = parseMetaData;\n})(DataUri || (DataUri = {}));","map":{"version":3,"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","extpath","paths","URI","equalsIgnoreCase","Schemas","isLinux","isWindows","hasToIgnoreCase","resource","scheme","file","basenameOrAuthority","basename","authority","isEqualAuthority","a1","a2","isEqual","first","second","ignoreCase","p1","path","p2","posix","dirname","originalFSPath","charCodeAt","console","error","toString","with","joinPath","_a","pathFragment","_i","joinedPath","join","apply","normalizePath","normalizedPath","normalize","uri","value","uriPath","isWindowsDriveLetter","substr","replace","relativePath","from","to","undefined","relativePath_1","relative","toSlashes","fromPath","toPath","len","Math","min","charAt","toLowerCase","DataUri","META_DATA_LABEL","META_DATA_DESCRIPTION","META_DATA_SIZE","META_DATA_MIME","parseMetaData","dataUri","metadata","Map","meta","substring","indexOf","lastIndexOf","split","forEach","property","key","set","mime"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/resources.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nimport * as extpath from './extpath.js';\r\nimport * as paths from './path.js';\r\nimport { URI } from './uri.js';\r\nimport { equalsIgnoreCase } from './strings.js';\r\nimport { Schemas } from './network.js';\r\nimport { isLinux, isWindows } from './platform.js';\r\nexport function hasToIgnoreCase(resource) {\r\n    // A file scheme resource is in the same platform as code, so ignore case for non linux platforms\r\n    // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\r\n    return resource && resource.scheme === Schemas.file ? !isLinux : true;\r\n}\r\nexport function basenameOrAuthority(resource) {\r\n    return basename(resource) || resource.authority;\r\n}\r\n/**\r\n * Tests wheter the two authorities are the same\r\n */\r\nexport function isEqualAuthority(a1, a2) {\r\n    return a1 === a2 || equalsIgnoreCase(a1, a2);\r\n}\r\nexport function isEqual(first, second, ignoreCase) {\r\n    if (ignoreCase === void 0) { ignoreCase = hasToIgnoreCase(first); }\r\n    if (first === second) {\r\n        return true;\r\n    }\r\n    if (!first || !second) {\r\n        return false;\r\n    }\r\n    if (first.scheme !== second.scheme || !isEqualAuthority(first.authority, second.authority)) {\r\n        return false;\r\n    }\r\n    var p1 = first.path || '/', p2 = second.path || '/';\r\n    return p1 === p2 || ignoreCase && equalsIgnoreCase(p1 || '/', p2 || '/');\r\n}\r\nexport function basename(resource) {\r\n    return paths.posix.basename(resource.path);\r\n}\r\n/**\r\n * Return a URI representing the directory of a URI path.\r\n *\r\n * @param resource The input URI.\r\n * @returns The URI representing the directory of the input URI.\r\n */\r\nexport function dirname(resource) {\r\n    if (resource.path.length === 0) {\r\n        return resource;\r\n    }\r\n    if (resource.scheme === Schemas.file) {\r\n        return URI.file(paths.dirname(originalFSPath(resource)));\r\n    }\r\n    var dirname = paths.posix.dirname(resource.path);\r\n    if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* Slash */) {\r\n        console.error(\"dirname(\\\"\" + resource.toString + \")) resulted in a relative path\");\r\n        dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\r\n    }\r\n    return resource.with({\r\n        path: dirname\r\n    });\r\n}\r\n/**\r\n * Join a URI path with path fragments and normalizes the resulting path.\r\n *\r\n * @param resource The input URI.\r\n * @param pathFragment The path fragment to add to the URI path.\r\n * @returns The resulting URI.\r\n */\r\nexport function joinPath(resource) {\r\n    var _a;\r\n    var pathFragment = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        pathFragment[_i - 1] = arguments[_i];\r\n    }\r\n    var joinedPath;\r\n    if (resource.scheme === Schemas.file) {\r\n        joinedPath = URI.file(paths.join.apply(paths, __spreadArrays([originalFSPath(resource)], pathFragment))).path;\r\n    }\r\n    else {\r\n        joinedPath = (_a = paths.posix).join.apply(_a, __spreadArrays([resource.path || '/'], pathFragment));\r\n    }\r\n    return resource.with({\r\n        path: joinedPath\r\n    });\r\n}\r\n/**\r\n * Normalizes the path part of a URI: Resolves `.` and `..` elements with directory names.\r\n *\r\n * @param resource The URI to normalize the path.\r\n * @returns The URI with the normalized path.\r\n */\r\nexport function normalizePath(resource) {\r\n    if (!resource.path.length) {\r\n        return resource;\r\n    }\r\n    var normalizedPath;\r\n    if (resource.scheme === Schemas.file) {\r\n        normalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\r\n    }\r\n    else {\r\n        normalizedPath = paths.posix.normalize(resource.path);\r\n    }\r\n    return resource.with({\r\n        path: normalizedPath\r\n    });\r\n}\r\n/**\r\n * Returns the fsPath of an URI where the drive letter is not normalized.\r\n * See #56403.\r\n */\r\nexport function originalFSPath(uri) {\r\n    var value;\r\n    var uriPath = uri.path;\r\n    if (uri.authority && uriPath.length > 1 && uri.scheme === Schemas.file) {\r\n        // unc path: file://shares/c$/far/boo\r\n        value = \"//\" + uri.authority + uriPath;\r\n    }\r\n    else if (isWindows\r\n        && uriPath.charCodeAt(0) === 47 /* Slash */\r\n        && extpath.isWindowsDriveLetter(uriPath.charCodeAt(1))\r\n        && uriPath.charCodeAt(2) === 58 /* Colon */) {\r\n        value = uriPath.substr(1);\r\n    }\r\n    else {\r\n        // other path\r\n        value = uriPath;\r\n    }\r\n    if (isWindows) {\r\n        value = value.replace(/\\//g, '\\\\');\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns a relative path between two URIs. If the URIs don't have the same schema or authority, `undefined` is returned.\r\n * The returned relative path always uses forward slashes.\r\n */\r\nexport function relativePath(from, to, ignoreCase) {\r\n    if (ignoreCase === void 0) { ignoreCase = hasToIgnoreCase(from); }\r\n    if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\r\n        return undefined;\r\n    }\r\n    if (from.scheme === Schemas.file) {\r\n        var relativePath_1 = paths.relative(from.path, to.path);\r\n        return isWindows ? extpath.toSlashes(relativePath_1) : relativePath_1;\r\n    }\r\n    var fromPath = from.path || '/', toPath = to.path || '/';\r\n    if (ignoreCase) {\r\n        // make casing of fromPath match toPath\r\n        var i = 0;\r\n        for (var len = Math.min(fromPath.length, toPath.length); i < len; i++) {\r\n            if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\r\n                if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        fromPath = toPath.substr(0, i) + fromPath.substr(i);\r\n    }\r\n    return paths.posix.relative(fromPath, toPath);\r\n}\r\n/**\r\n * Data URI related helpers.\r\n */\r\nexport var DataUri;\r\n(function (DataUri) {\r\n    DataUri.META_DATA_LABEL = 'label';\r\n    DataUri.META_DATA_DESCRIPTION = 'description';\r\n    DataUri.META_DATA_SIZE = 'size';\r\n    DataUri.META_DATA_MIME = 'mime';\r\n    function parseMetaData(dataUri) {\r\n        var metadata = new Map();\r\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\r\n        // the metadata is: size:2313;label:SomeLabel;description:SomeDescription\r\n        var meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\r\n        meta.split(';').forEach(function (property) {\r\n            var _a = property.split(':'), key = _a[0], value = _a[1];\r\n            if (key && value) {\r\n                metadata.set(key, value);\r\n            }\r\n        });\r\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\r\n        // the mime is: image/png\r\n        var mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\r\n        if (mime) {\r\n            metadata.set(DataUri.META_DATA_MIME, mime);\r\n        }\r\n        return metadata;\r\n    }\r\n    DataUri.parseMetaData = parseMetaData;\r\n})(DataUri || (DataUri = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}