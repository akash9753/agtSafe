{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n  if (charCode < Digit0) {\n    return 0;\n  }\n  if (charCode <= Digit9) {\n    return charCode - Digit0;\n  }\n  if (charCode < a) {\n    charCode += a - A;\n  }\n  if (charCode >= a && charCode <= f) {\n    return charCode - a + 10;\n  }\n  return 0;\n}\nexport function colorFromHex(text) {\n  if (text[0] !== '#') {\n    return null;\n  }\n  switch (text.length) {\n    case 4:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: 1\n      };\n    case 5:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: hexDigit(text.charCodeAt(4)) * 0x11 / 255.0\n      };\n    case 7:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: 1\n      };\n    case 9:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n      };\n  }\n  return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n  return {\n    red: red / 255.0,\n    green: green / 255.0,\n    blue: blue / 255.0,\n    alpha: alpha\n  };\n}","map":{"version":3,"names":["Digit0","Digit9","A","a","f","hexDigit","charCode","colorFromHex","text","length","red","charCodeAt","green","blue","alpha","colorFrom256RGB"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-json-languageservice/utils/colors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n    if (charCode < Digit0) {\n        return 0;\n    }\n    if (charCode <= Digit9) {\n        return charCode - Digit0;\n    }\n    if (charCode < a) {\n        charCode += (a - A);\n    }\n    if (charCode >= a && charCode <= f) {\n        return charCode - a + 10;\n    }\n    return 0;\n}\nexport function colorFromHex(text) {\n    if (text[0] !== '#') {\n        return null;\n    }\n    switch (text.length) {\n        case 4:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: 1\n            };\n        case 5:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,\n                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,\n                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,\n            };\n        case 7:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: 1\n            };\n        case 9:\n            return {\n                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n            };\n    }\n    return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1.0; }\n    return {\n        red: red / 255.0,\n        green: green / 255.0,\n        blue: blue / 255.0,\n        alpha: alpha\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}