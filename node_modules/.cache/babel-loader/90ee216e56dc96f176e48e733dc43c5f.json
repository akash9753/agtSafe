{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.regexp.exec\");\nrequire(\"core-js/modules/es.string.replace\");\nrequire(\"core-js/modules/es.string.trim\");\nexports.__esModule = true;\nexports.toSingleLine = toSingleLine;\nvar _array = require(\"../helpers/array\");\n\n/* eslint-disable import/prefer-default-export */\n\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...String} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {String}\n */\nfunction toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n  var result = (0, _array.arrayReduce)(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/(?:\\r?\\n\\s+)/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}","map":{"version":3,"names":["require","exports","__esModule","toSingleLine","_array","strings","_len","arguments","length","expressions","Array","_key","result","arrayReduce","previousValue","currentValue","index","valueWithoutWhiteSpaces","replace","expressionForIndex","trim"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/helpers/templateLiteralTag.js"],"sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.trim\");\n\nexports.__esModule = true;\nexports.toSingleLine = toSingleLine;\n\nvar _array = require(\"../helpers/array\");\n\n/* eslint-disable import/prefer-default-export */\n\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...String} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {String}\n */\nfunction toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  var result = (0, _array.arrayReduce)(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/(?:\\r?\\n\\s+)/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAAC,gCAAgC,CAAC;AAEzCA,OAAO,CAAC,mCAAmC,CAAC;AAE5CA,OAAO,CAAC,gCAAgC,CAAC;AAEzCC,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,YAAY,GAAGA,YAAY;AAEnC,IAAIC,MAAM,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAY,CAACE,OAAO,EAAE;EAC7B,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,WAAW,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IACjHF,WAAW,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EACzC;EAEA,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAER,MAAM,CAACS,WAAW,EAAER,OAAO,EAAE,UAAUS,aAAa,EAAEC,YAAY,EAAEC,KAAK,EAAE;IAC1F,IAAIC,uBAAuB,GAAGF,YAAY,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;IACvE,IAAIC,kBAAkB,GAAGV,WAAW,CAACO,KAAK,CAAC,GAAGP,WAAW,CAACO,KAAK,CAAC,GAAG,EAAE;IACrE,OAAOF,aAAa,GAAGG,uBAAuB,GAAGE,kBAAkB;EACrE,CAAC,EAAE,EAAE,CAAC;EACN,OAAOP,MAAM,CAACQ,IAAI,EAAE;AACtB"},"metadata":{},"sourceType":"script"}