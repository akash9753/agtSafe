{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n  var tokenCount = context.getCount();\n  var tokenIndex = context.findTokenIndexAtOffset(offset);\n  var desiredLanguageId = context.getLanguageId(tokenIndex);\n  var lastTokenIndex = tokenIndex;\n  while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n    lastTokenIndex++;\n  }\n  var firstTokenIndex = tokenIndex;\n  while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n    firstTokenIndex--;\n  }\n  return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nvar ScopedLineTokens = /** @class */function () {\n  function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n    this._actual = actual;\n    this.languageId = languageId;\n    this._firstTokenIndex = firstTokenIndex;\n    this._lastTokenIndex = lastTokenIndex;\n    this.firstCharOffset = firstCharOffset;\n    this._lastCharOffset = lastCharOffset;\n  }\n  ScopedLineTokens.prototype.getLineContent = function () {\n    var actualLineContent = this._actual.getLineContent();\n    return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n  };\n  ScopedLineTokens.prototype.getActualLineContentBefore = function (offset) {\n    var actualLineContent = this._actual.getLineContent();\n    return actualLineContent.substring(0, this.firstCharOffset + offset);\n  };\n  ScopedLineTokens.prototype.getTokenCount = function () {\n    return this._lastTokenIndex - this._firstTokenIndex;\n  };\n  ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\n    return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n  };\n  ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {\n    return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n  };\n  return ScopedLineTokens;\n}();\nexport { ScopedLineTokens };\nexport function ignoreBracketsInToken(standardTokenType) {\n  return (standardTokenType & 7 /* value */) !== 0;\n}","map":{"version":3,"names":["createScopedLineTokens","context","offset","tokenCount","getCount","tokenIndex","findTokenIndexAtOffset","desiredLanguageId","getLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","languageId","firstCharOffset","lastCharOffset","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","prototype","getLineContent","actualLineContent","substring","getActualLineContentBefore","getTokenCount","getStandardTokenType","ignoreBracketsInToken","standardTokenType"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/modes/supports.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function createScopedLineTokens(context, offset) {\r\n    var tokenCount = context.getCount();\r\n    var tokenIndex = context.findTokenIndexAtOffset(offset);\r\n    var desiredLanguageId = context.getLanguageId(tokenIndex);\r\n    var lastTokenIndex = tokenIndex;\r\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\r\n        lastTokenIndex++;\r\n    }\r\n    var firstTokenIndex = tokenIndex;\r\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\r\n        firstTokenIndex--;\r\n    }\r\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\r\n}\r\nvar ScopedLineTokens = /** @class */ (function () {\r\n    function ScopedLineTokens(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\r\n        this._actual = actual;\r\n        this.languageId = languageId;\r\n        this._firstTokenIndex = firstTokenIndex;\r\n        this._lastTokenIndex = lastTokenIndex;\r\n        this.firstCharOffset = firstCharOffset;\r\n        this._lastCharOffset = lastCharOffset;\r\n    }\r\n    ScopedLineTokens.prototype.getLineContent = function () {\r\n        var actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\r\n    };\r\n    ScopedLineTokens.prototype.getActualLineContentBefore = function (offset) {\r\n        var actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\r\n    };\r\n    ScopedLineTokens.prototype.getTokenCount = function () {\r\n        return this._lastTokenIndex - this._firstTokenIndex;\r\n    };\r\n    ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\r\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\r\n    };\r\n    ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {\r\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\r\n    };\r\n    return ScopedLineTokens;\r\n}());\r\nexport { ScopedLineTokens };\r\nexport function ignoreBracketsInToken(standardTokenType) {\r\n    return (standardTokenType & 7 /* value */) !== 0;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAsB,CAACC,OAAO,EAAEC,MAAM,EAAE;EACpD,IAAIC,UAAU,GAAGF,OAAO,CAACG,QAAQ,EAAE;EACnC,IAAIC,UAAU,GAAGJ,OAAO,CAACK,sBAAsB,CAACJ,MAAM,CAAC;EACvD,IAAIK,iBAAiB,GAAGN,OAAO,CAACO,aAAa,CAACH,UAAU,CAAC;EACzD,IAAII,cAAc,GAAGJ,UAAU;EAC/B,OAAOI,cAAc,GAAG,CAAC,GAAGN,UAAU,IAAIF,OAAO,CAACO,aAAa,CAACC,cAAc,GAAG,CAAC,CAAC,KAAKF,iBAAiB,EAAE;IACvGE,cAAc,EAAE;EACpB;EACA,IAAIC,eAAe,GAAGL,UAAU;EAChC,OAAOK,eAAe,GAAG,CAAC,IAAIT,OAAO,CAACO,aAAa,CAACE,eAAe,GAAG,CAAC,CAAC,KAAKH,iBAAiB,EAAE;IAC5FG,eAAe,EAAE;EACrB;EACA,OAAO,IAAIC,gBAAgB,CAACV,OAAO,EAAEM,iBAAiB,EAAEG,eAAe,EAAED,cAAc,GAAG,CAAC,EAAER,OAAO,CAACW,cAAc,CAACF,eAAe,CAAC,EAAET,OAAO,CAACY,YAAY,CAACJ,cAAc,CAAC,CAAC;AAC/K;AACA,IAAIE,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgB,CAACG,MAAM,EAAEC,UAAU,EAAEL,eAAe,EAAED,cAAc,EAAEO,eAAe,EAAEC,cAAc,EAAE;IAC5G,IAAI,CAACC,OAAO,GAAGJ,MAAM;IACrB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACI,gBAAgB,GAAGT,eAAe;IACvC,IAAI,CAACU,eAAe,GAAGX,cAAc;IACrC,IAAI,CAACO,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACK,eAAe,GAAGJ,cAAc;EACzC;EACAN,gBAAgB,CAACW,SAAS,CAACC,cAAc,GAAG,YAAY;IACpD,IAAIC,iBAAiB,GAAG,IAAI,CAACN,OAAO,CAACK,cAAc,EAAE;IACrD,OAAOC,iBAAiB,CAACC,SAAS,CAAC,IAAI,CAACT,eAAe,EAAE,IAAI,CAACK,eAAe,CAAC;EAClF,CAAC;EACDV,gBAAgB,CAACW,SAAS,CAACI,0BAA0B,GAAG,UAAUxB,MAAM,EAAE;IACtE,IAAIsB,iBAAiB,GAAG,IAAI,CAACN,OAAO,CAACK,cAAc,EAAE;IACrD,OAAOC,iBAAiB,CAACC,SAAS,CAAC,CAAC,EAAE,IAAI,CAACT,eAAe,GAAGd,MAAM,CAAC;EACxE,CAAC;EACDS,gBAAgB,CAACW,SAAS,CAACK,aAAa,GAAG,YAAY;IACnD,OAAO,IAAI,CAACP,eAAe,GAAG,IAAI,CAACD,gBAAgB;EACvD,CAAC;EACDR,gBAAgB,CAACW,SAAS,CAAChB,sBAAsB,GAAG,UAAUJ,MAAM,EAAE;IAClE,OAAO,IAAI,CAACgB,OAAO,CAACZ,sBAAsB,CAACJ,MAAM,GAAG,IAAI,CAACc,eAAe,CAAC,GAAG,IAAI,CAACG,gBAAgB;EACrG,CAAC;EACDR,gBAAgB,CAACW,SAAS,CAACM,oBAAoB,GAAG,UAAUvB,UAAU,EAAE;IACpE,OAAO,IAAI,CAACa,OAAO,CAACU,oBAAoB,CAACvB,UAAU,GAAG,IAAI,CAACc,gBAAgB,CAAC;EAChF,CAAC;EACD,OAAOR,gBAAgB;AAC3B,CAAC,EAAG;AACJ,SAASA,gBAAgB;AACzB,OAAO,SAASkB,qBAAqB,CAACC,iBAAiB,EAAE;EACrD,OAAO,CAACA,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC;AACpD"},"metadata":{},"sourceType":"module"}