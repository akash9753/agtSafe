{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  var decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\nvar RGBA = /** @class */function () {\n  function RGBA(r, g, b, a) {\n    if (a === void 0) {\n      a = 1;\n    }\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  RGBA.equals = function (a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  };\n  return RGBA;\n}();\nexport { RGBA };\nvar HSLA = /** @class */function () {\n  function HSLA(h, s, l, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  HSLA.equals = function (a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  };\n  /**\r\n   * Converts an RGB color value to HSL. Conversion formula\r\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n   * Assumes r, g, and b are contained in the set [0, 255] and\r\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n   */\n  HSLA.fromRGBA = function (rgba) {\n    var r = rgba.r / 255;\n    var g = rgba.g / 255;\n    var b = rgba.b / 255;\n    var a = rgba.a;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (min + max) / 2;\n    var chroma = max - min;\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n      h *= 60;\n      h = Math.round(h);\n    }\n    return new HSLA(h, s, l, a);\n  };\n  HSLA._hue2rgb = function (p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  };\n  /**\r\n   * Converts an HSL color value to RGB. Conversion formula\r\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n   * returns r, g, and b in the set [0, 255].\r\n   */\n  HSLA.toRGBA = function (hsla) {\n    var h = hsla.h / 360;\n    var s = hsla.s,\n      l = hsla.l,\n      a = hsla.a;\n    var r, g, b;\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  };\n  return HSLA;\n}();\nexport { HSLA };\nvar HSVA = /** @class */function () {\n  function HSVA(h, s, v, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  HSVA.equals = function (a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  };\n  // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n  HSVA.fromRGBA = function (rgba) {\n    var r = rgba.r / 255;\n    var g = rgba.g / 255;\n    var b = rgba.b / 255;\n    var cmax = Math.max(r, g, b);\n    var cmin = Math.min(r, g, b);\n    var delta = cmax - cmin;\n    var s = cmax === 0 ? 0 : delta / cmax;\n    var m;\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  };\n  // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n  HSVA.toRGBA = function (hsva) {\n    var h = hsva.h,\n      s = hsva.s,\n      v = hsva.v,\n      a = hsva.a;\n    var c = v * s;\n    var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    var m = v - c;\n    var _a = [0, 0, 0],\n      r = _a[0],\n      g = _a[1],\n      b = _a[2];\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h < 360) {\n      r = c;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  };\n  return HSVA;\n}();\nexport { HSVA };\nvar Color = /** @class */function () {\n  function Color(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n  Color.fromHex = function (hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  };\n  Object.defineProperty(Color.prototype, \"hsla\", {\n    get: function get() {\n      if (this._hsla) {\n        return this._hsla;\n      } else {\n        return HSLA.fromRGBA(this.rgba);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"hsva\", {\n    get: function get() {\n      if (this._hsva) {\n        return this._hsva;\n      }\n      return HSVA.fromRGBA(this.rgba);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Color.prototype.equals = function (other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  };\n  /**\r\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n   */\n  Color.prototype.getRelativeLuminance = function () {\n    var R = Color._relativeLuminanceForComponent(this.rgba.r);\n    var G = Color._relativeLuminanceForComponent(this.rgba.g);\n    var B = Color._relativeLuminanceForComponent(this.rgba.b);\n    var luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  };\n  Color._relativeLuminanceForComponent = function (color) {\n    var c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  };\n  /**\r\n   *\thttp://24ways.org/2010/calculating-color-contrast\r\n   *  Return 'true' if lighter color otherwise 'false'\r\n   */\n  Color.prototype.isLighter = function () {\n    var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  };\n  Color.prototype.isLighterThan = function (another) {\n    var lum1 = this.getRelativeLuminance();\n    var lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  };\n  Color.prototype.isDarkerThan = function (another) {\n    var lum1 = this.getRelativeLuminance();\n    var lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  };\n  Color.prototype.lighten = function (factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  };\n  Color.prototype.darken = function (factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  };\n  Color.prototype.transparent = function (factor) {\n    var _a = this.rgba,\n      r = _a.r,\n      g = _a.g,\n      b = _a.b,\n      a = _a.a;\n    return new Color(new RGBA(r, g, b, a * factor));\n  };\n  Color.prototype.isTransparent = function () {\n    return this.rgba.a === 0;\n  };\n  Color.prototype.isOpaque = function () {\n    return this.rgba.a === 1;\n  };\n  Color.prototype.opposite = function () {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  };\n  Color.prototype.toString = function () {\n    return '' + Color.Format.CSS.format(this);\n  };\n  Color.getLighterColor = function (of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    var lum1 = of.getRelativeLuminance();\n    var lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  };\n  Color.getDarkerColor = function (of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    var lum1 = of.getRelativeLuminance();\n    var lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  };\n  Color.white = new Color(new RGBA(255, 255, 255, 1));\n  Color.black = new Color(new RGBA(0, 0, 0, 1));\n  Color.red = new Color(new RGBA(255, 0, 0, 1));\n  Color.blue = new Color(new RGBA(0, 0, 255, 1));\n  Color.cyan = new Color(new RGBA(0, 255, 255, 1));\n  Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));\n  Color.transparent = new Color(new RGBA(0, 0, 0, 0));\n  return Color;\n}();\nexport { Color };\n(function (Color) {\n  var Format;\n  (function (Format) {\n    var CSS;\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return \"rgb(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \")\";\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.formatRGB = formatRGB;\n      function formatRGBA(color) {\n        return \"rgba(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \", \" + +color.rgba.a.toFixed(2) + \")\";\n      }\n      CSS.formatRGBA = formatRGBA;\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return \"hsl(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%)\";\n        }\n        return Color.Format.CSS.formatHSLA(color);\n      }\n      CSS.formatHSL = formatHSL;\n      function formatHSLA(color) {\n        return \"hsla(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%, \" + color.hsla.a.toFixed(2) + \")\";\n      }\n      CSS.formatHSLA = formatHSLA;\n      function _toTwoDigitHex(n) {\n        var r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\r\n       * Formats the color as #RRGGBB\r\n       */\n      function formatHex(color) {\n        return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b);\n      }\n      CSS.formatHex = formatHex;\n      /**\r\n       * Formats the color as #RRGGBBAA\r\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n       */\n      function formatHexA(color, compact) {\n        if (compact === void 0) {\n          compact = false;\n        }\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b) + _toTwoDigitHex(Math.round(color.rgba.a * 255));\n      }\n      CSS.formatHexA = formatHexA;\n      /**\r\n       * The default format will use HEX if opaque and RGBA otherwise.\r\n       */\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.format = format;\n      /**\r\n       * Converts an Hex color value to a Color.\r\n       * returns r, g, and b are contained in the set [0, 255]\r\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n       */\n      function parseHex(hex) {\n        var length = hex.length;\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n        if (hex.charCodeAt(0) !== 35 /* Hash */) {\n          // Does not begin with a #\n          return null;\n        }\n        if (length === 7) {\n          // #RRGGBB format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          return new Color(new RGBA(r, g, b, 1));\n        }\n        if (length === 9) {\n          // #RRGGBBAA format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n        if (length === 4) {\n          // #RGB format\n          var r = _parseHexDigit(hex.charCodeAt(1));\n          var g = _parseHexDigit(hex.charCodeAt(2));\n          var b = _parseHexDigit(hex.charCodeAt(3));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n        if (length === 5) {\n          // #RGBA format\n          var r = _parseHexDigit(hex.charCodeAt(1));\n          var g = _parseHexDigit(hex.charCodeAt(2));\n          var b = _parseHexDigit(hex.charCodeAt(3));\n          var a = _parseHexDigit(hex.charCodeAt(4));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        }\n        // Invalid color\n        return null;\n      }\n      CSS.parseHex = parseHex;\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48 /* Digit0 */:\n            return 0;\n          case 49 /* Digit1 */:\n            return 1;\n          case 50 /* Digit2 */:\n            return 2;\n          case 51 /* Digit3 */:\n            return 3;\n          case 52 /* Digit4 */:\n            return 4;\n          case 53 /* Digit5 */:\n            return 5;\n          case 54 /* Digit6 */:\n            return 6;\n          case 55 /* Digit7 */:\n            return 7;\n          case 56 /* Digit8 */:\n            return 8;\n          case 57 /* Digit9 */:\n            return 9;\n          case 97 /* a */:\n            return 10;\n          case 65 /* A */:\n            return 10;\n          case 98 /* b */:\n            return 11;\n          case 66 /* B */:\n            return 11;\n          case 99 /* c */:\n            return 12;\n          case 67 /* C */:\n            return 12;\n          case 100 /* d */:\n            return 13;\n          case 68 /* D */:\n            return 13;\n          case 101 /* e */:\n            return 14;\n          case 69 /* E */:\n            return 14;\n          case 102 /* f */:\n            return 15;\n          case 70 /* F */:\n            return 15;\n        }\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","r","g","b","a","min","max","equals","HSLA","h","s","l","fromRGBA","rgba","chroma","_hue2rgb","p","q","t","toRGBA","hsla","HSVA","v","cmax","cmin","delta","m","hsva","c","x","abs","_a","Color","arg","Error","_hsla","_hsva","fromHex","hex","Format","CSS","parseHex","red","Object","defineProperty","prototype","get","enumerable","configurable","other","getRelativeLuminance","R","_relativeLuminanceForComponent","G","B","luminance","color","isLighter","yiq","isLighterThan","another","lum1","lum2","isDarkerThan","lighten","factor","darken","transparent","isTransparent","isOpaque","opposite","toString","format","getLighterColor","of","relative","getDarkerColor","white","black","blue","cyan","lightgrey","formatRGB","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","length","formatHex","formatHexA","compact","charCodeAt","_parseHexDigit","charCode"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/color.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction roundFloat(number, decimalPoints) {\r\n    var decimal = Math.pow(10, decimalPoints);\r\n    return Math.round(number * decimal) / decimal;\r\n}\r\nvar RGBA = /** @class */ (function () {\r\n    function RGBA(r, g, b, a) {\r\n        if (a === void 0) { a = 1; }\r\n        this.r = Math.min(255, Math.max(0, r)) | 0;\r\n        this.g = Math.min(255, Math.max(0, g)) | 0;\r\n        this.b = Math.min(255, Math.max(0, b)) | 0;\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    RGBA.equals = function (a, b) {\r\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\r\n    };\r\n    return RGBA;\r\n}());\r\nexport { RGBA };\r\nvar HSLA = /** @class */ (function () {\r\n    function HSLA(h, s, l, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    HSLA.equals = function (a, b) {\r\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\r\n    };\r\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n     */\r\n    HSLA.fromRGBA = function (rgba) {\r\n        var r = rgba.r / 255;\r\n        var g = rgba.g / 255;\r\n        var b = rgba.b / 255;\r\n        var a = rgba.a;\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var l = (min + max) / 2;\r\n        var chroma = max - min;\r\n        if (chroma > 0) {\r\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / chroma + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / chroma + 4;\r\n                    break;\r\n            }\r\n            h *= 60;\r\n            h = Math.round(h);\r\n        }\r\n        return new HSLA(h, s, l, a);\r\n    };\r\n    HSLA._hue2rgb = function (p, q, t) {\r\n        if (t < 0) {\r\n            t += 1;\r\n        }\r\n        if (t > 1) {\r\n            t -= 1;\r\n        }\r\n        if (t < 1 / 6) {\r\n            return p + (q - p) * 6 * t;\r\n        }\r\n        if (t < 1 / 2) {\r\n            return q;\r\n        }\r\n        if (t < 2 / 3) {\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        }\r\n        return p;\r\n    };\r\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     */\r\n    HSLA.toRGBA = function (hsla) {\r\n        var h = hsla.h / 360;\r\n        var s = hsla.s, l = hsla.l, a = hsla.a;\r\n        var r, g, b;\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\r\n            g = HSLA._hue2rgb(p, q, h);\r\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\r\n    };\r\n    return HSLA;\r\n}());\r\nexport { HSLA };\r\nvar HSVA = /** @class */ (function () {\r\n    function HSVA(h, s, v, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    HSVA.equals = function (a, b) {\r\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\r\n    };\r\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\r\n    HSVA.fromRGBA = function (rgba) {\r\n        var r = rgba.r / 255;\r\n        var g = rgba.g / 255;\r\n        var b = rgba.b / 255;\r\n        var cmax = Math.max(r, g, b);\r\n        var cmin = Math.min(r, g, b);\r\n        var delta = cmax - cmin;\r\n        var s = cmax === 0 ? 0 : (delta / cmax);\r\n        var m;\r\n        if (delta === 0) {\r\n            m = 0;\r\n        }\r\n        else if (cmax === r) {\r\n            m = ((((g - b) / delta) % 6) + 6) % 6;\r\n        }\r\n        else if (cmax === g) {\r\n            m = ((b - r) / delta) + 2;\r\n        }\r\n        else {\r\n            m = ((r - g) / delta) + 4;\r\n        }\r\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\r\n    };\r\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\r\n    HSVA.toRGBA = function (hsva) {\r\n        var h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;\r\n        var c = v * s;\r\n        var x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n        var m = v - c;\r\n        var _a = [0, 0, 0], r = _a[0], g = _a[1], b = _a[2];\r\n        if (h < 60) {\r\n            r = c;\r\n            g = x;\r\n        }\r\n        else if (h < 120) {\r\n            r = x;\r\n            g = c;\r\n        }\r\n        else if (h < 180) {\r\n            g = c;\r\n            b = x;\r\n        }\r\n        else if (h < 240) {\r\n            g = x;\r\n            b = c;\r\n        }\r\n        else if (h < 300) {\r\n            r = x;\r\n            b = c;\r\n        }\r\n        else if (h < 360) {\r\n            r = c;\r\n            b = x;\r\n        }\r\n        r = Math.round((r + m) * 255);\r\n        g = Math.round((g + m) * 255);\r\n        b = Math.round((b + m) * 255);\r\n        return new RGBA(r, g, b, a);\r\n    };\r\n    return HSVA;\r\n}());\r\nexport { HSVA };\r\nvar Color = /** @class */ (function () {\r\n    function Color(arg) {\r\n        if (!arg) {\r\n            throw new Error('Color needs a value');\r\n        }\r\n        else if (arg instanceof RGBA) {\r\n            this.rgba = arg;\r\n        }\r\n        else if (arg instanceof HSLA) {\r\n            this._hsla = arg;\r\n            this.rgba = HSLA.toRGBA(arg);\r\n        }\r\n        else if (arg instanceof HSVA) {\r\n            this._hsva = arg;\r\n            this.rgba = HSVA.toRGBA(arg);\r\n        }\r\n        else {\r\n            throw new Error('Invalid color ctor argument');\r\n        }\r\n    }\r\n    Color.fromHex = function (hex) {\r\n        return Color.Format.CSS.parseHex(hex) || Color.red;\r\n    };\r\n    Object.defineProperty(Color.prototype, \"hsla\", {\r\n        get: function () {\r\n            if (this._hsla) {\r\n                return this._hsla;\r\n            }\r\n            else {\r\n                return HSLA.fromRGBA(this.rgba);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hsva\", {\r\n        get: function () {\r\n            if (this._hsva) {\r\n                return this._hsva;\r\n            }\r\n            return HSVA.fromRGBA(this.rgba);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Color.prototype.equals = function (other) {\r\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\r\n    };\r\n    /**\r\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n     */\r\n    Color.prototype.getRelativeLuminance = function () {\r\n        var R = Color._relativeLuminanceForComponent(this.rgba.r);\r\n        var G = Color._relativeLuminanceForComponent(this.rgba.g);\r\n        var B = Color._relativeLuminanceForComponent(this.rgba.b);\r\n        var luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n        return roundFloat(luminance, 4);\r\n    };\r\n    Color._relativeLuminanceForComponent = function (color) {\r\n        var c = color / 255;\r\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\r\n    };\r\n    /**\r\n     *\thttp://24ways.org/2010/calculating-color-contrast\r\n     *  Return 'true' if lighter color otherwise 'false'\r\n     */\r\n    Color.prototype.isLighter = function () {\r\n        var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\r\n        return yiq >= 128;\r\n    };\r\n    Color.prototype.isLighterThan = function (another) {\r\n        var lum1 = this.getRelativeLuminance();\r\n        var lum2 = another.getRelativeLuminance();\r\n        return lum1 > lum2;\r\n    };\r\n    Color.prototype.isDarkerThan = function (another) {\r\n        var lum1 = this.getRelativeLuminance();\r\n        var lum2 = another.getRelativeLuminance();\r\n        return lum1 < lum2;\r\n    };\r\n    Color.prototype.lighten = function (factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\r\n    };\r\n    Color.prototype.darken = function (factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\r\n    };\r\n    Color.prototype.transparent = function (factor) {\r\n        var _a = this.rgba, r = _a.r, g = _a.g, b = _a.b, a = _a.a;\r\n        return new Color(new RGBA(r, g, b, a * factor));\r\n    };\r\n    Color.prototype.isTransparent = function () {\r\n        return this.rgba.a === 0;\r\n    };\r\n    Color.prototype.isOpaque = function () {\r\n        return this.rgba.a === 1;\r\n    };\r\n    Color.prototype.opposite = function () {\r\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\r\n    };\r\n    Color.prototype.toString = function () {\r\n        return '' + Color.Format.CSS.format(this);\r\n    };\r\n    Color.getLighterColor = function (of, relative, factor) {\r\n        if (of.isLighterThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        var lum1 = of.getRelativeLuminance();\r\n        var lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum2 - lum1) / lum2;\r\n        return of.lighten(factor);\r\n    };\r\n    Color.getDarkerColor = function (of, relative, factor) {\r\n        if (of.isDarkerThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        var lum1 = of.getRelativeLuminance();\r\n        var lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum1 - lum2) / lum1;\r\n        return of.darken(factor);\r\n    };\r\n    Color.white = new Color(new RGBA(255, 255, 255, 1));\r\n    Color.black = new Color(new RGBA(0, 0, 0, 1));\r\n    Color.red = new Color(new RGBA(255, 0, 0, 1));\r\n    Color.blue = new Color(new RGBA(0, 0, 255, 1));\r\n    Color.cyan = new Color(new RGBA(0, 255, 255, 1));\r\n    Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));\r\n    Color.transparent = new Color(new RGBA(0, 0, 0, 0));\r\n    return Color;\r\n}());\r\nexport { Color };\r\n(function (Color) {\r\n    var Format;\r\n    (function (Format) {\r\n        var CSS;\r\n        (function (CSS) {\r\n            function formatRGB(color) {\r\n                if (color.rgba.a === 1) {\r\n                    return \"rgb(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \")\";\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.formatRGB = formatRGB;\r\n            function formatRGBA(color) {\r\n                return \"rgba(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \", \" + +(color.rgba.a).toFixed(2) + \")\";\r\n            }\r\n            CSS.formatRGBA = formatRGBA;\r\n            function formatHSL(color) {\r\n                if (color.hsla.a === 1) {\r\n                    return \"hsl(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%)\";\r\n                }\r\n                return Color.Format.CSS.formatHSLA(color);\r\n            }\r\n            CSS.formatHSL = formatHSL;\r\n            function formatHSLA(color) {\r\n                return \"hsla(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%, \" + color.hsla.a.toFixed(2) + \")\";\r\n            }\r\n            CSS.formatHSLA = formatHSLA;\r\n            function _toTwoDigitHex(n) {\r\n                var r = n.toString(16);\r\n                return r.length !== 2 ? '0' + r : r;\r\n            }\r\n            /**\r\n             * Formats the color as #RRGGBB\r\n             */\r\n            function formatHex(color) {\r\n                return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b);\r\n            }\r\n            CSS.formatHex = formatHex;\r\n            /**\r\n             * Formats the color as #RRGGBBAA\r\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n             */\r\n            function formatHexA(color, compact) {\r\n                if (compact === void 0) { compact = false; }\r\n                if (compact && color.rgba.a === 1) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b) + _toTwoDigitHex(Math.round(color.rgba.a * 255));\r\n            }\r\n            CSS.formatHexA = formatHexA;\r\n            /**\r\n             * The default format will use HEX if opaque and RGBA otherwise.\r\n             */\r\n            function format(color) {\r\n                if (color.isOpaque()) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.format = format;\r\n            /**\r\n             * Converts an Hex color value to a Color.\r\n             * returns r, g, and b are contained in the set [0, 255]\r\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n             */\r\n            function parseHex(hex) {\r\n                var length = hex.length;\r\n                if (length === 0) {\r\n                    // Invalid color\r\n                    return null;\r\n                }\r\n                if (hex.charCodeAt(0) !== 35 /* Hash */) {\r\n                    // Does not begin with a #\r\n                    return null;\r\n                }\r\n                if (length === 7) {\r\n                    // #RRGGBB format\r\n                    var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    return new Color(new RGBA(r, g, b, 1));\r\n                }\r\n                if (length === 9) {\r\n                    // #RRGGBBAA format\r\n                    var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\r\n                    return new Color(new RGBA(r, g, b, a / 255));\r\n                }\r\n                if (length === 4) {\r\n                    // #RGB format\r\n                    var r = _parseHexDigit(hex.charCodeAt(1));\r\n                    var g = _parseHexDigit(hex.charCodeAt(2));\r\n                    var b = _parseHexDigit(hex.charCodeAt(3));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\r\n                }\r\n                if (length === 5) {\r\n                    // #RGBA format\r\n                    var r = _parseHexDigit(hex.charCodeAt(1));\r\n                    var g = _parseHexDigit(hex.charCodeAt(2));\r\n                    var b = _parseHexDigit(hex.charCodeAt(3));\r\n                    var a = _parseHexDigit(hex.charCodeAt(4));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\r\n                }\r\n                // Invalid color\r\n                return null;\r\n            }\r\n            CSS.parseHex = parseHex;\r\n            function _parseHexDigit(charCode) {\r\n                switch (charCode) {\r\n                    case 48 /* Digit0 */: return 0;\r\n                    case 49 /* Digit1 */: return 1;\r\n                    case 50 /* Digit2 */: return 2;\r\n                    case 51 /* Digit3 */: return 3;\r\n                    case 52 /* Digit4 */: return 4;\r\n                    case 53 /* Digit5 */: return 5;\r\n                    case 54 /* Digit6 */: return 6;\r\n                    case 55 /* Digit7 */: return 7;\r\n                    case 56 /* Digit8 */: return 8;\r\n                    case 57 /* Digit9 */: return 9;\r\n                    case 97 /* a */: return 10;\r\n                    case 65 /* A */: return 10;\r\n                    case 98 /* b */: return 11;\r\n                    case 66 /* B */: return 11;\r\n                    case 99 /* c */: return 12;\r\n                    case 67 /* C */: return 12;\r\n                    case 100 /* d */: return 13;\r\n                    case 68 /* D */: return 13;\r\n                    case 101 /* e */: return 14;\r\n                    case 69 /* E */: return 14;\r\n                    case 102 /* f */: return 15;\r\n                    case 70 /* F */: return 15;\r\n                }\r\n                return 0;\r\n            }\r\n        })(CSS = Format.CSS || (Format.CSS = {}));\r\n    })(Format = Color.Format || (Color.Format = {}));\r\n})(Color || (Color = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}