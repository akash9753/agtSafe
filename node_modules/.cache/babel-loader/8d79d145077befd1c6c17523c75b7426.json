{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nvar MinimapCharRenderer = /** @class */function () {\n  function MinimapCharRenderer(charData, scale) {\n    this.scale = scale;\n    this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n    this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n  }\n  MinimapCharRenderer.soften = function (input, ratio) {\n    var result = new Uint8ClampedArray(input.length);\n    for (var i = 0, len = input.length; i < len; i++) {\n      result[i] = input[i] * ratio;\n    }\n    return result;\n  };\n  MinimapCharRenderer.prototype.renderChar = function (target, dx, dy, chCode, color, backgroundColor, fontScale, useLighterFont) {\n    var charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n    var charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n    if (dx + charWidth > target.width || dy + charHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n    var charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n    var charIndex = getCharIndex(chCode, fontScale);\n    var destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n    var backgroundR = backgroundColor.r;\n    var backgroundG = backgroundColor.g;\n    var backgroundB = backgroundColor.b;\n    var deltaR = color.r - backgroundR;\n    var deltaG = color.g - backgroundG;\n    var deltaB = color.b - backgroundB;\n    var dest = target.data;\n    var sourceOffset = charIndex * charWidth * charHeight;\n    var row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n    for (var y = 0; y < charHeight; y++) {\n      var column = row;\n      for (var x = 0; x < charWidth; x++) {\n        var c = charData[sourceOffset++] / 255;\n        dest[column++] = backgroundR + deltaR * c;\n        dest[column++] = backgroundG + deltaG * c;\n        dest[column++] = backgroundB + deltaB * c;\n        column++;\n      }\n      row += destWidth;\n    }\n  };\n  MinimapCharRenderer.prototype.blockRenderChar = function (target, dx, dy, color, backgroundColor, useLighterFont) {\n    var charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n    var charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n    if (dx + charWidth > target.width || dy + charHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n    var destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n    var c = 0.5;\n    var backgroundR = backgroundColor.r;\n    var backgroundG = backgroundColor.g;\n    var backgroundB = backgroundColor.b;\n    var deltaR = color.r - backgroundR;\n    var deltaG = color.g - backgroundG;\n    var deltaB = color.b - backgroundB;\n    var colorR = backgroundR + deltaR * c;\n    var colorG = backgroundG + deltaG * c;\n    var colorB = backgroundB + deltaB * c;\n    var dest = target.data;\n    var row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n    for (var y = 0; y < charHeight; y++) {\n      var column = row;\n      for (var x = 0; x < charWidth; x++) {\n        dest[column++] = colorR;\n        dest[column++] = colorG;\n        dest[column++] = colorB;\n        column++;\n      }\n      row += destWidth;\n    }\n  };\n  return MinimapCharRenderer;\n}();\nexport { MinimapCharRenderer };","map":{"version":3,"names":["getCharIndex","MinimapCharRenderer","charData","scale","charDataNormal","soften","charDataLight","input","ratio","result","Uint8ClampedArray","length","i","len","prototype","renderChar","target","dx","dy","chCode","color","backgroundColor","fontScale","useLighterFont","charWidth","charHeight","width","height","console","warn","charIndex","destWidth","backgroundR","r","backgroundG","g","backgroundB","b","deltaR","deltaG","deltaB","dest","data","sourceOffset","row","y","column","x","c","blockRenderChar","colorR","colorG","colorB"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { getCharIndex } from './minimapCharSheet.js';\r\nvar MinimapCharRenderer = /** @class */ (function () {\r\n    function MinimapCharRenderer(charData, scale) {\r\n        this.scale = scale;\r\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\r\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\r\n    }\r\n    MinimapCharRenderer.soften = function (input, ratio) {\r\n        var result = new Uint8ClampedArray(input.length);\r\n        for (var i = 0, len = input.length; i < len; i++) {\r\n            result[i] = input[i] * ratio;\r\n        }\r\n        return result;\r\n    };\r\n    MinimapCharRenderer.prototype.renderChar = function (target, dx, dy, chCode, color, backgroundColor, fontScale, useLighterFont) {\r\n        var charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\r\n        var charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\r\n        if (dx + charWidth > target.width || dy + charHeight > target.height) {\r\n            console.warn('bad render request outside image data');\r\n            return;\r\n        }\r\n        var charData = useLighterFont ? this.charDataLight : this.charDataNormal;\r\n        var charIndex = getCharIndex(chCode, fontScale);\r\n        var destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\r\n        var backgroundR = backgroundColor.r;\r\n        var backgroundG = backgroundColor.g;\r\n        var backgroundB = backgroundColor.b;\r\n        var deltaR = color.r - backgroundR;\r\n        var deltaG = color.g - backgroundG;\r\n        var deltaB = color.b - backgroundB;\r\n        var dest = target.data;\r\n        var sourceOffset = charIndex * charWidth * charHeight;\r\n        var row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\r\n        for (var y = 0; y < charHeight; y++) {\r\n            var column = row;\r\n            for (var x = 0; x < charWidth; x++) {\r\n                var c = charData[sourceOffset++] / 255;\r\n                dest[column++] = backgroundR + deltaR * c;\r\n                dest[column++] = backgroundG + deltaG * c;\r\n                dest[column++] = backgroundB + deltaB * c;\r\n                column++;\r\n            }\r\n            row += destWidth;\r\n        }\r\n    };\r\n    MinimapCharRenderer.prototype.blockRenderChar = function (target, dx, dy, color, backgroundColor, useLighterFont) {\r\n        var charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\r\n        var charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\r\n        if (dx + charWidth > target.width || dy + charHeight > target.height) {\r\n            console.warn('bad render request outside image data');\r\n            return;\r\n        }\r\n        var destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\r\n        var c = 0.5;\r\n        var backgroundR = backgroundColor.r;\r\n        var backgroundG = backgroundColor.g;\r\n        var backgroundB = backgroundColor.b;\r\n        var deltaR = color.r - backgroundR;\r\n        var deltaG = color.g - backgroundG;\r\n        var deltaB = color.b - backgroundB;\r\n        var colorR = backgroundR + deltaR * c;\r\n        var colorG = backgroundG + deltaG * c;\r\n        var colorB = backgroundB + deltaB * c;\r\n        var dest = target.data;\r\n        var row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\r\n        for (var y = 0; y < charHeight; y++) {\r\n            var column = row;\r\n            for (var x = 0; x < charWidth; x++) {\r\n                dest[column++] = colorR;\r\n                dest[column++] = colorG;\r\n                dest[column++] = colorB;\r\n                column++;\r\n            }\r\n            row += destWidth;\r\n        }\r\n    };\r\n    return MinimapCharRenderer;\r\n}());\r\nexport { MinimapCharRenderer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}