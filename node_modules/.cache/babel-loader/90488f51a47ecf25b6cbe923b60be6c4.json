{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nvar ColumnSelection = /** @class */function () {\n  function ColumnSelection() {}\n  ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n    var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n    var reversed = fromLineNumber > toLineNumber;\n    var isRTL = fromVisibleColumn > toVisibleColumn;\n    var isLTR = fromVisibleColumn < toVisibleColumn;\n    var result = [];\n    // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n    for (var i = 0; i < lineCount; i++) {\n      var lineNumber = fromLineNumber + (reversed ? -i : i);\n      var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n      var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n      var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\n      var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\n      // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n      if (isLTR) {\n        if (visibleStartColumn > toVisibleColumn) {\n          continue;\n        }\n        if (visibleEndColumn < fromVisibleColumn) {\n          continue;\n        }\n      }\n      if (isRTL) {\n        if (visibleEndColumn > fromVisibleColumn) {\n          continue;\n        }\n        if (visibleStartColumn < toVisibleColumn) {\n          continue;\n        }\n      }\n      result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n    }\n    if (result.length === 0) {\n      // We are after all the lines, so add cursor at the end of each line\n      for (var i = 0; i < lineCount; i++) {\n        var lineNumber = fromLineNumber + (reversed ? -i : i);\n        var maxColumn = model.getLineMaxColumn(lineNumber);\n        result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\n      }\n    }\n    return {\n      viewStates: result,\n      reversed: reversed,\n      fromLineNumber: fromLineNumber,\n      fromVisualColumn: fromVisibleColumn,\n      toLineNumber: toLineNumber,\n      toVisualColumn: toVisibleColumn\n    };\n  };\n  ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n    if (toViewVisualColumn > 1) {\n      toViewVisualColumn--;\n    }\n    return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n  ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\n    var maxVisualViewColumn = 0;\n    var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n      var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n      var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\n      maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n    }\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n    if (toViewVisualColumn < maxVisualViewColumn) {\n      toViewVisualColumn++;\n    }\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n  ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n  ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n  return ColumnSelection;\n}();\nexport { ColumnSelection };","map":{"version":3,"names":["CursorColumns","SingleCursorState","Position","Range","ColumnSelection","columnSelect","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn2","endColumn","visibleStartColumn","visibleColumnFromColumn2","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","toViewVisualColumn","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","columnSelectRight","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorColumnSelection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar ColumnSelection = /** @class */ (function () {\r\n    function ColumnSelection() {\r\n    }\r\n    ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\r\n        var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\r\n        var reversed = (fromLineNumber > toLineNumber);\r\n        var isRTL = (fromVisibleColumn > toVisibleColumn);\r\n        var isLTR = (fromVisibleColumn < toVisibleColumn);\r\n        var result = [];\r\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n            var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\r\n            var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\r\n            var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\r\n            var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\r\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\r\n            if (isLTR) {\r\n                if (visibleStartColumn > toVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleEndColumn < fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (isRTL) {\r\n                if (visibleEndColumn > fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleStartColumn < toVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\r\n        }\r\n        if (result.length === 0) {\r\n            // We are after all the lines, so add cursor at the end of each line\r\n            for (var i = 0; i < lineCount; i++) {\r\n                var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n                var maxColumn = model.getLineMaxColumn(lineNumber);\r\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\r\n            }\r\n        }\r\n        return {\r\n            viewStates: result,\r\n            reversed: reversed,\r\n            fromLineNumber: fromLineNumber,\r\n            fromVisualColumn: fromVisibleColumn,\r\n            toLineNumber: toLineNumber,\r\n            toVisualColumn: toVisibleColumn\r\n        };\r\n    };\r\n    ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn > 1) {\r\n            toViewVisualColumn--;\r\n        }\r\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\r\n        var maxVisualViewColumn = 0;\r\n        var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\r\n            var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\r\n            var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\r\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\r\n        }\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn < maxVisualViewColumn) {\r\n            toViewVisualColumn++;\r\n        }\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    return ColumnSelection;\r\n}());\r\nexport { ColumnSelection };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}