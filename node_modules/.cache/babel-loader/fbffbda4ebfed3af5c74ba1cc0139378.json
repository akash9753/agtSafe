{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n(function (EditorContextKeys) {\n  EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false);\n  /**\r\n   * A context key that is set when the editor's text has focus (cursor is blinking).\r\n   */\n  EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false);\n  /**\r\n   * A context key that is set when the editor's text or an editor's widget has focus.\r\n   */\n  EditorContextKeys.focus = new RawContextKey('editorFocus', false);\n  /**\r\n   * A context key that is set when any editor input has focus (regular editor, repl input...).\r\n   */\n  EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false);\n  EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false);\n  EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n  EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false);\n  EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n  EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false);\n  EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n  EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false);\n  EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n  EditorContextKeys.isInEmbeddedEditor = new RawContextKey('isInEmbeddedEditor', false);\n  EditorContextKeys.canUndo = new RawContextKey('canUndo', false);\n  EditorContextKeys.canRedo = new RawContextKey('canRedo', false);\n  // -- mode context keys\n  EditorContextKeys.languageId = new RawContextKey('editorLangId', '');\n  EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false);\n  EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false);\n  EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false);\n  EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false);\n  EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false);\n  EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false);\n  EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false);\n  EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false);\n  EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false);\n  EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false);\n  EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false);\n  EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false);\n  EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false);\n  // -- mode context keys: formatting\n  EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false);\n  EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false);\n  EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false);\n  EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false);\n})(EditorContextKeys || (EditorContextKeys = {}));","map":{"version":3,"names":["RawContextKey","EditorContextKeys","editorSimpleInput","editorTextFocus","focus","textInputFocus","readOnly","writable","toNegated","hasNonEmptySelection","hasOnlyEmptySelection","hasMultipleSelections","hasSingleSelection","tabMovesFocus","tabDoesNotMoveFocus","isInEmbeddedEditor","canUndo","canRedo","languageId","hasCompletionItemProvider","hasCodeActionsProvider","hasCodeLensProvider","hasDefinitionProvider","hasDeclarationProvider","hasImplementationProvider","hasTypeDefinitionProvider","hasHoverProvider","hasDocumentHighlightProvider","hasDocumentSymbolProvider","hasReferenceProvider","hasRenameProvider","hasSignatureHelpProvider","hasDocumentFormattingProvider","hasDocumentSelectionFormattingProvider","hasMultipleDocumentFormattingProvider","hasMultipleDocumentSelectionFormattingProvider"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\r\nexport var EditorContextKeys;\r\n(function (EditorContextKeys) {\r\n    EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false);\r\n    /**\r\n     * A context key that is set when the editor's text has focus (cursor is blinking).\r\n     */\r\n    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false);\r\n    /**\r\n     * A context key that is set when the editor's text or an editor's widget has focus.\r\n     */\r\n    EditorContextKeys.focus = new RawContextKey('editorFocus', false);\r\n    /**\r\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\r\n     */\r\n    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false);\r\n    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false);\r\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\r\n    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false);\r\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\r\n    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false);\r\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\r\n    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false);\r\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\r\n    EditorContextKeys.isInEmbeddedEditor = new RawContextKey('isInEmbeddedEditor', false);\r\n    EditorContextKeys.canUndo = new RawContextKey('canUndo', false);\r\n    EditorContextKeys.canRedo = new RawContextKey('canRedo', false);\r\n    // -- mode context keys\r\n    EditorContextKeys.languageId = new RawContextKey('editorLangId', '');\r\n    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false);\r\n    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false);\r\n    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false);\r\n    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false);\r\n    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false);\r\n    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false);\r\n    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false);\r\n    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false);\r\n    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false);\r\n    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false);\r\n    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false);\r\n    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false);\r\n    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false);\r\n    // -- mode context keys: formatting\r\n    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false);\r\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false);\r\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false);\r\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false);\r\n})(EditorContextKeys || (EditorContextKeys = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}