{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { OpenerService } from '../../browser/services/openerService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as modes from '../../common/modes.js';\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\nimport { StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nfunction withAllStandaloneServices(domElement, override, callback) {\n  var services = new DynamicStandaloneServices(domElement, override);\n  var simpleEditorModelResolverService = null;\n  if (!services.has(ITextModelService)) {\n    simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\n    services.set(ITextModelService, simpleEditorModelResolverService);\n  }\n  if (!services.has(IOpenerService)) {\n    services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\n  }\n  var result = callback(services);\n  if (simpleEditorModelResolverService) {\n    simpleEditorModelResolverService.setEditor(result);\n  }\n  return result;\n}\n/**\r\n * Create a new editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\nexport function create(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService));\n  });\n}\n/**\r\n * Emitted when an editor is created.\r\n * Creating a diff editor might cause this listener to be invoked with the two editors.\r\n * @event\r\n */\nexport function onDidCreateEditor(listener) {\n  return StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {\n    listener(editor);\n  });\n}\n/**\r\n * Create a new diff editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\nexport function createDiffEditor(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), null);\n  });\n}\nexport function createDiffNavigator(diffEditor, opts) {\n  return new DiffNavigator(diffEditor, opts);\n}\nfunction doCreateModel(value, languageSelection, uri) {\n  return StaticServices.modelService.get().createModel(value, languageSelection, uri);\n}\n/**\r\n * Create a new editor model.\r\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\r\n */\nexport function createModel(value, language, uri) {\n  value = value || '';\n  if (!language) {\n    var firstLF = value.indexOf('\\n');\n    var firstLine = value;\n    if (firstLF !== -1) {\n      firstLine = value.substring(0, firstLF);\n    }\n    return doCreateModel(value, StaticServices.modeService.get().createByFilepathOrFirstLine(uri || null, firstLine), uri);\n  }\n  return doCreateModel(value, StaticServices.modeService.get().create(language), uri);\n}\n/**\r\n * Change the language for a model.\r\n */\nexport function setModelLanguage(model, languageId) {\n  StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\n}\n/**\r\n * Set the markers for a model.\r\n */\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    StaticServices.markerService.get().changeOne(owner, model.uri, markers);\n  }\n}\n/**\r\n * Get markers for owner and/or resource\r\n *\r\n * @returns list of markers\r\n */\nexport function getModelMarkers(filter) {\n  return StaticServices.markerService.get().read(filter);\n}\n/**\r\n * Get the model that has `uri` if it exists.\r\n */\nexport function getModel(uri) {\n  return StaticServices.modelService.get().getModel(uri);\n}\n/**\r\n * Get all the created models.\r\n */\nexport function getModels() {\n  return StaticServices.modelService.get().getModels();\n}\n/**\r\n * Emitted when a model is created.\r\n * @event\r\n */\nexport function onDidCreateModel(listener) {\n  return StaticServices.modelService.get().onModelAdded(listener);\n}\n/**\r\n * Emitted right before a model is disposed.\r\n * @event\r\n */\nexport function onWillDisposeModel(listener) {\n  return StaticServices.modelService.get().onModelRemoved(listener);\n}\n/**\r\n * Emitted when a different language is set to a model.\r\n * @event\r\n */\nexport function onDidChangeModelLanguage(listener) {\n  return StaticServices.modelService.get().onModelModeChanged(function (e) {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldModeId\n    });\n  });\n}\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StaticServices.modelService.get(), opts);\n}\n/**\r\n * Colorize the contents of `domNode` using attribute `data-lang`.\r\n */\nexport function colorizeElement(domNode, options) {\n  return Colorizer.colorizeElement(StaticServices.standaloneThemeService.get(), StaticServices.modeService.get(), domNode, options);\n}\n/**\r\n * Colorize `text` using language `languageId`.\r\n */\nexport function colorize(text, languageId, options) {\n  return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\n}\n/**\r\n * Colorize a line in a model.\r\n */\nexport function colorizeModelLine(model, lineNumber, tabSize) {\n  if (tabSize === void 0) {\n    tabSize = 4;\n  }\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\r\n * @internal\r\n */\nfunction getSafeTokenizationSupport(language) {\n  var tokenizationSupport = modes.TokenizationRegistry.get(language);\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n  return {\n    getInitialState: function getInitialState() {\n      return NULL_STATE;\n    },\n    tokenize: function tokenize(line, state, deltaOffset) {\n      return nullTokenize(language, line, state, deltaOffset);\n    }\n  };\n}\n/**\r\n * Tokenize `text` using language `languageId`\r\n */\nexport function tokenize(text, languageId) {\n  var modeService = StaticServices.modeService.get();\n  // Needed in order to get the mode registered for subsequent look-ups\n  modeService.triggerMode(languageId);\n  var tokenizationSupport = getSafeTokenizationSupport(languageId);\n  var lines = text.split(/\\r\\n|\\r|\\n/);\n  var result = [];\n  var state = tokenizationSupport.getInitialState();\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n    var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n  return result;\n}\n/**\r\n * Define a new theme or update an existing theme.\r\n */\nexport function defineTheme(themeName, themeData) {\n  StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\n}\n/**\r\n * Switches to a theme.\r\n */\nexport function setTheme(themeName) {\n  StaticServices.standaloneThemeService.get().setTheme(themeName);\n}\n/**\r\n * Clears all cached font measurements and triggers re-measurement.\r\n */\nexport function remeasureFonts() {\n  clearAllFontInfos();\n}\n/**\r\n * @internal\r\n */\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    onDidCreateEditor: onDidCreateEditor,\n    createDiffEditor: createDiffEditor,\n    createDiffNavigator: createDiffNavigator,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    // enums\n    AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n    EditorOption: standaloneEnums.EditorOption,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    ScrollType: standaloneEnums.ScrollType,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    // classes\n    ConfigurationChangedEvent: ConfigurationChangedEvent,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    // vars\n    EditorType: EditorType,\n    EditorOptions: EditorOptions\n  };\n}","map":{"version":3,"names":["ICodeEditorService","OpenerService","DiffNavigator","EditorOptions","ConfigurationChangedEvent","BareFontInfo","FontInfo","EditorType","FindMatch","TextModelResolvedOptions","modes","NULL_STATE","nullTokenize","IEditorWorkerService","ITextModelService","createWebWorker","actualCreateWebWorker","standaloneEnums","Colorizer","SimpleEditorModelResolverService","StandaloneDiffEditor","StandaloneEditor","DynamicStandaloneServices","StaticServices","IStandaloneThemeService","ICommandService","IConfigurationService","IContextKeyService","IContextViewService","IContextMenuService","IInstantiationService","IKeybindingService","INotificationService","IOpenerService","IAccessibilityService","clearAllFontInfos","IEditorProgressService","withAllStandaloneServices","domElement","override","callback","services","simpleEditorModelResolverService","has","modelService","get","set","result","setEditor","create","options","onDidCreateEditor","listener","codeEditorService","onCodeEditorAdd","editor","createDiffEditor","createDiffNavigator","diffEditor","opts","doCreateModel","value","languageSelection","uri","createModel","language","firstLF","indexOf","firstLine","substring","modeService","createByFilepathOrFirstLine","setModelLanguage","model","languageId","setMode","setModelMarkers","owner","markers","markerService","changeOne","getModelMarkers","filter","read","getModel","getModels","onDidCreateModel","onModelAdded","onWillDisposeModel","onModelRemoved","onDidChangeModelLanguage","onModelModeChanged","e","oldLanguage","oldModeId","colorizeElement","domNode","standaloneThemeService","colorize","text","colorizeModelLine","lineNumber","tabSize","getSafeTokenizationSupport","tokenizationSupport","TokenizationRegistry","getInitialState","tokenize","line","state","deltaOffset","triggerMode","lines","split","i","len","length","tokenizationResult","tokens","endState","defineTheme","themeName","themeData","setTheme","remeasureFonts","createMonacoEditorAPI","AccessibilitySupport","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","MinimapPosition","MouseTargetType","OverlayWidgetPositionPreference","OverviewRulerLane","RenderLineNumbersType","RenderMinimap","ScrollbarVisibility","ScrollType","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './standalone-tokens.css';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { OpenerService } from '../../browser/services/openerService.js';\r\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\r\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\r\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\r\nimport { EditorType } from '../../common/editorCommon.js';\r\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\r\nimport * as modes from '../../common/modes.js';\r\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\r\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\r\nimport { ITextModelService } from '../../common/services/resolverService.js';\r\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\r\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\r\nimport { Colorizer } from './colorizer.js';\r\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\r\nimport { StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\r\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\r\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\r\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\r\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\r\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\r\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\r\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\r\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\r\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\r\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\r\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\r\nfunction withAllStandaloneServices(domElement, override, callback) {\r\n    var services = new DynamicStandaloneServices(domElement, override);\r\n    var simpleEditorModelResolverService = null;\r\n    if (!services.has(ITextModelService)) {\r\n        simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\r\n        services.set(ITextModelService, simpleEditorModelResolverService);\r\n    }\r\n    if (!services.has(IOpenerService)) {\r\n        services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\r\n    }\r\n    var result = callback(services);\r\n    if (simpleEditorModelResolverService) {\r\n        simpleEditorModelResolverService.setEditor(result);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create a new editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\r\nexport function create(domElement, options, override) {\r\n    return withAllStandaloneServices(domElement, override || {}, function (services) {\r\n        return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService));\r\n    });\r\n}\r\n/**\r\n * Emitted when an editor is created.\r\n * Creating a diff editor might cause this listener to be invoked with the two editors.\r\n * @event\r\n */\r\nexport function onDidCreateEditor(listener) {\r\n    return StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {\r\n        listener(editor);\r\n    });\r\n}\r\n/**\r\n * Create a new diff editor under `domElement`.\r\n * `domElement` should be empty (not contain other dom nodes).\r\n * The editor will read the size of `domElement`.\r\n */\r\nexport function createDiffEditor(domElement, options, override) {\r\n    return withAllStandaloneServices(domElement, override || {}, function (services) {\r\n        return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), null);\r\n    });\r\n}\r\nexport function createDiffNavigator(diffEditor, opts) {\r\n    return new DiffNavigator(diffEditor, opts);\r\n}\r\nfunction doCreateModel(value, languageSelection, uri) {\r\n    return StaticServices.modelService.get().createModel(value, languageSelection, uri);\r\n}\r\n/**\r\n * Create a new editor model.\r\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\r\n */\r\nexport function createModel(value, language, uri) {\r\n    value = value || '';\r\n    if (!language) {\r\n        var firstLF = value.indexOf('\\n');\r\n        var firstLine = value;\r\n        if (firstLF !== -1) {\r\n            firstLine = value.substring(0, firstLF);\r\n        }\r\n        return doCreateModel(value, StaticServices.modeService.get().createByFilepathOrFirstLine(uri || null, firstLine), uri);\r\n    }\r\n    return doCreateModel(value, StaticServices.modeService.get().create(language), uri);\r\n}\r\n/**\r\n * Change the language for a model.\r\n */\r\nexport function setModelLanguage(model, languageId) {\r\n    StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\r\n}\r\n/**\r\n * Set the markers for a model.\r\n */\r\nexport function setModelMarkers(model, owner, markers) {\r\n    if (model) {\r\n        StaticServices.markerService.get().changeOne(owner, model.uri, markers);\r\n    }\r\n}\r\n/**\r\n * Get markers for owner and/or resource\r\n *\r\n * @returns list of markers\r\n */\r\nexport function getModelMarkers(filter) {\r\n    return StaticServices.markerService.get().read(filter);\r\n}\r\n/**\r\n * Get the model that has `uri` if it exists.\r\n */\r\nexport function getModel(uri) {\r\n    return StaticServices.modelService.get().getModel(uri);\r\n}\r\n/**\r\n * Get all the created models.\r\n */\r\nexport function getModels() {\r\n    return StaticServices.modelService.get().getModels();\r\n}\r\n/**\r\n * Emitted when a model is created.\r\n * @event\r\n */\r\nexport function onDidCreateModel(listener) {\r\n    return StaticServices.modelService.get().onModelAdded(listener);\r\n}\r\n/**\r\n * Emitted right before a model is disposed.\r\n * @event\r\n */\r\nexport function onWillDisposeModel(listener) {\r\n    return StaticServices.modelService.get().onModelRemoved(listener);\r\n}\r\n/**\r\n * Emitted when a different language is set to a model.\r\n * @event\r\n */\r\nexport function onDidChangeModelLanguage(listener) {\r\n    return StaticServices.modelService.get().onModelModeChanged(function (e) {\r\n        listener({\r\n            model: e.model,\r\n            oldLanguage: e.oldModeId\r\n        });\r\n    });\r\n}\r\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\r\nexport function createWebWorker(opts) {\r\n    return actualCreateWebWorker(StaticServices.modelService.get(), opts);\r\n}\r\n/**\r\n * Colorize the contents of `domNode` using attribute `data-lang`.\r\n */\r\nexport function colorizeElement(domNode, options) {\r\n    return Colorizer.colorizeElement(StaticServices.standaloneThemeService.get(), StaticServices.modeService.get(), domNode, options);\r\n}\r\n/**\r\n * Colorize `text` using language `languageId`.\r\n */\r\nexport function colorize(text, languageId, options) {\r\n    return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\r\n}\r\n/**\r\n * Colorize a line in a model.\r\n */\r\nexport function colorizeModelLine(model, lineNumber, tabSize) {\r\n    if (tabSize === void 0) { tabSize = 4; }\r\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction getSafeTokenizationSupport(language) {\r\n    var tokenizationSupport = modes.TokenizationRegistry.get(language);\r\n    if (tokenizationSupport) {\r\n        return tokenizationSupport;\r\n    }\r\n    return {\r\n        getInitialState: function () { return NULL_STATE; },\r\n        tokenize: function (line, state, deltaOffset) { return nullTokenize(language, line, state, deltaOffset); }\r\n    };\r\n}\r\n/**\r\n * Tokenize `text` using language `languageId`\r\n */\r\nexport function tokenize(text, languageId) {\r\n    var modeService = StaticServices.modeService.get();\r\n    // Needed in order to get the mode registered for subsequent look-ups\r\n    modeService.triggerMode(languageId);\r\n    var tokenizationSupport = getSafeTokenizationSupport(languageId);\r\n    var lines = text.split(/\\r\\n|\\r|\\n/);\r\n    var result = [];\r\n    var state = tokenizationSupport.getInitialState();\r\n    for (var i = 0, len = lines.length; i < len; i++) {\r\n        var line = lines[i];\r\n        var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);\r\n        result[i] = tokenizationResult.tokens;\r\n        state = tokenizationResult.endState;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Define a new theme or update an existing theme.\r\n */\r\nexport function defineTheme(themeName, themeData) {\r\n    StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\r\n}\r\n/**\r\n * Switches to a theme.\r\n */\r\nexport function setTheme(themeName) {\r\n    StaticServices.standaloneThemeService.get().setTheme(themeName);\r\n}\r\n/**\r\n * Clears all cached font measurements and triggers re-measurement.\r\n */\r\nexport function remeasureFonts() {\r\n    clearAllFontInfos();\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function createMonacoEditorAPI() {\r\n    return {\r\n        // methods\r\n        create: create,\r\n        onDidCreateEditor: onDidCreateEditor,\r\n        createDiffEditor: createDiffEditor,\r\n        createDiffNavigator: createDiffNavigator,\r\n        createModel: createModel,\r\n        setModelLanguage: setModelLanguage,\r\n        setModelMarkers: setModelMarkers,\r\n        getModelMarkers: getModelMarkers,\r\n        getModels: getModels,\r\n        getModel: getModel,\r\n        onDidCreateModel: onDidCreateModel,\r\n        onWillDisposeModel: onWillDisposeModel,\r\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\r\n        createWebWorker: createWebWorker,\r\n        colorizeElement: colorizeElement,\r\n        colorize: colorize,\r\n        colorizeModelLine: colorizeModelLine,\r\n        tokenize: tokenize,\r\n        defineTheme: defineTheme,\r\n        setTheme: setTheme,\r\n        remeasureFonts: remeasureFonts,\r\n        // enums\r\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\r\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\r\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\r\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\r\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\r\n        EditorOption: standaloneEnums.EditorOption,\r\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\r\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\r\n        MinimapPosition: standaloneEnums.MinimapPosition,\r\n        MouseTargetType: standaloneEnums.MouseTargetType,\r\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\r\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\r\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\r\n        RenderMinimap: standaloneEnums.RenderMinimap,\r\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\r\n        ScrollType: standaloneEnums.ScrollType,\r\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\r\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\r\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\r\n        WrappingIndent: standaloneEnums.WrappingIndent,\r\n        // classes\r\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\r\n        BareFontInfo: BareFontInfo,\r\n        FontInfo: FontInfo,\r\n        TextModelResolvedOptions: TextModelResolvedOptions,\r\n        FindMatch: FindMatch,\r\n        // vars\r\n        EditorType: EditorType,\r\n        EditorOptions: EditorOptions\r\n    };\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,yBAAyB;AAChC,SAASA,kBAAkB,QAAQ,6CAA6C;AAChF,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,aAAa,EAAEC,yBAAyB,QAAQ,sCAAsC;AAC/F,SAASC,YAAY,EAAEC,QAAQ,QAAQ,iCAAiC;AACxE,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,SAAS,EAAEC,wBAAwB,QAAQ,uBAAuB;AAC3E,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,SAASC,UAAU,EAAEC,YAAY,QAAQ,gCAAgC;AACzE,SAASC,oBAAoB,QAAQ,8CAA8C;AACnF,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,eAAe,IAAIC,qBAAqB,QAAQ,oCAAoC;AAC7F,OAAO,KAAKC,eAAe,MAAM,4CAA4C;AAC7E,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,gCAAgC,QAAQ,qBAAqB;AACtE,SAASC,oBAAoB,EAAEC,gBAAgB,QAAQ,2BAA2B;AAClF,SAASC,yBAAyB,EAAEC,cAAc,QAAQ,yBAAyB;AACnF,SAASC,uBAAuB,QAAQ,qCAAqC;AAC7E,SAASC,eAAe,QAAQ,+CAA+C;AAC/E,SAASC,qBAAqB,QAAQ,yDAAyD;AAC/F,SAASC,kBAAkB,QAAQ,mDAAmD;AACtF,SAASC,mBAAmB,EAAEC,mBAAmB,QAAQ,sDAAsD;AAC/G,SAASC,qBAAqB,QAAQ,yDAAyD;AAC/F,SAASC,kBAAkB,QAAQ,mDAAmD;AACtF,SAASC,oBAAoB,QAAQ,uDAAuD;AAC5F,SAASC,cAAc,QAAQ,2CAA2C;AAC1E,SAASC,qBAAqB,QAAQ,yDAAyD;AAC/F,SAASC,iBAAiB,QAAQ,uCAAuC;AACzE,SAASC,sBAAsB,QAAQ,+CAA+C;AACtF,SAASC,yBAAyB,CAACC,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAC/D,IAAIC,QAAQ,GAAG,IAAInB,yBAAyB,CAACgB,UAAU,EAAEC,QAAQ,CAAC;EAClE,IAAIG,gCAAgC,GAAG,IAAI;EAC3C,IAAI,CAACD,QAAQ,CAACE,GAAG,CAAC7B,iBAAiB,CAAC,EAAE;IAClC4B,gCAAgC,GAAG,IAAIvB,gCAAgC,CAACI,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAAC;IAC1GJ,QAAQ,CAACK,GAAG,CAAChC,iBAAiB,EAAE4B,gCAAgC,CAAC;EACrE;EACA,IAAI,CAACD,QAAQ,CAACE,GAAG,CAACV,cAAc,CAAC,EAAE;IAC/BQ,QAAQ,CAACK,GAAG,CAACb,cAAc,EAAE,IAAIhC,aAAa,CAACwC,QAAQ,CAACI,GAAG,CAAC7C,kBAAkB,CAAC,EAAEyC,QAAQ,CAACI,GAAG,CAACpB,eAAe,CAAC,CAAC,CAAC;EACpH;EACA,IAAIsB,MAAM,GAAGP,QAAQ,CAACC,QAAQ,CAAC;EAC/B,IAAIC,gCAAgC,EAAE;IAClCA,gCAAgC,CAACM,SAAS,CAACD,MAAM,CAAC;EACtD;EACA,OAAOA,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,MAAM,CAACX,UAAU,EAAEY,OAAO,EAAEX,QAAQ,EAAE;EAClD,OAAOF,yBAAyB,CAACC,UAAU,EAAEC,QAAQ,IAAI,CAAC,CAAC,EAAE,UAAUE,QAAQ,EAAE;IAC7E,OAAO,IAAIpB,gBAAgB,CAACiB,UAAU,EAAEY,OAAO,EAAET,QAAQ,EAAEA,QAAQ,CAACI,GAAG,CAACf,qBAAqB,CAAC,EAAEW,QAAQ,CAACI,GAAG,CAAC7C,kBAAkB,CAAC,EAAEyC,QAAQ,CAACI,GAAG,CAACpB,eAAe,CAAC,EAAEgB,QAAQ,CAACI,GAAG,CAAClB,kBAAkB,CAAC,EAAEc,QAAQ,CAACI,GAAG,CAACd,kBAAkB,CAAC,EAAEU,QAAQ,CAACI,GAAG,CAACjB,mBAAmB,CAAC,EAAEa,QAAQ,CAACI,GAAG,CAACrB,uBAAuB,CAAC,EAAEiB,QAAQ,CAACI,GAAG,CAACb,oBAAoB,CAAC,EAAES,QAAQ,CAACI,GAAG,CAACnB,qBAAqB,CAAC,EAAEe,QAAQ,CAACI,GAAG,CAACX,qBAAqB,CAAC,CAAC;EACha,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,iBAAiB,CAACC,QAAQ,EAAE;EACxC,OAAO7B,cAAc,CAAC8B,iBAAiB,CAACR,GAAG,EAAE,CAACS,eAAe,CAAC,UAAUC,MAAM,EAAE;IAC5EH,QAAQ,CAACG,MAAM,CAAC;EACpB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAAClB,UAAU,EAAEY,OAAO,EAAEX,QAAQ,EAAE;EAC5D,OAAOF,yBAAyB,CAACC,UAAU,EAAEC,QAAQ,IAAI,CAAC,CAAC,EAAE,UAAUE,QAAQ,EAAE;IAC7E,OAAO,IAAIrB,oBAAoB,CAACkB,UAAU,EAAEY,OAAO,EAAET,QAAQ,EAAEA,QAAQ,CAACI,GAAG,CAACf,qBAAqB,CAAC,EAAEW,QAAQ,CAACI,GAAG,CAAClB,kBAAkB,CAAC,EAAEc,QAAQ,CAACI,GAAG,CAACd,kBAAkB,CAAC,EAAEU,QAAQ,CAACI,GAAG,CAACjB,mBAAmB,CAAC,EAAEa,QAAQ,CAACI,GAAG,CAAChC,oBAAoB,CAAC,EAAE4B,QAAQ,CAACI,GAAG,CAAC7C,kBAAkB,CAAC,EAAEyC,QAAQ,CAACI,GAAG,CAACrB,uBAAuB,CAAC,EAAEiB,QAAQ,CAACI,GAAG,CAACb,oBAAoB,CAAC,EAAES,QAAQ,CAACI,GAAG,CAACnB,qBAAqB,CAAC,EAAEe,QAAQ,CAACI,GAAG,CAAChB,mBAAmB,CAAC,EAAEY,QAAQ,CAACI,GAAG,CAACT,sBAAsB,CAAC,EAAE,IAAI,CAAC;EACnd,CAAC,CAAC;AACN;AACA,OAAO,SAASqB,mBAAmB,CAACC,UAAU,EAAEC,IAAI,EAAE;EAClD,OAAO,IAAIzD,aAAa,CAACwD,UAAU,EAAEC,IAAI,CAAC;AAC9C;AACA,SAASC,aAAa,CAACC,KAAK,EAAEC,iBAAiB,EAAEC,GAAG,EAAE;EAClD,OAAOxC,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAACmB,WAAW,CAACH,KAAK,EAAEC,iBAAiB,EAAEC,GAAG,CAAC;AACvF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACH,KAAK,EAAEI,QAAQ,EAAEF,GAAG,EAAE;EAC9CF,KAAK,GAAGA,KAAK,IAAI,EAAE;EACnB,IAAI,CAACI,QAAQ,EAAE;IACX,IAAIC,OAAO,GAAGL,KAAK,CAACM,OAAO,CAAC,IAAI,CAAC;IACjC,IAAIC,SAAS,GAAGP,KAAK;IACrB,IAAIK,OAAO,KAAK,CAAC,CAAC,EAAE;MAChBE,SAAS,GAAGP,KAAK,CAACQ,SAAS,CAAC,CAAC,EAAEH,OAAO,CAAC;IAC3C;IACA,OAAON,aAAa,CAACC,KAAK,EAAEtC,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE,CAAC0B,2BAA2B,CAACR,GAAG,IAAI,IAAI,EAAEK,SAAS,CAAC,EAAEL,GAAG,CAAC;EAC1H;EACA,OAAOH,aAAa,CAACC,KAAK,EAAEtC,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE,CAACI,MAAM,CAACgB,QAAQ,CAAC,EAAEF,GAAG,CAAC;AACvF;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgB,CAACC,KAAK,EAAEC,UAAU,EAAE;EAChDnD,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAAC8B,OAAO,CAACF,KAAK,EAAElD,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE,CAACI,MAAM,CAACyB,UAAU,CAAC,CAAC;AACzG;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAe,CAACH,KAAK,EAAEI,KAAK,EAAEC,OAAO,EAAE;EACnD,IAAIL,KAAK,EAAE;IACPlD,cAAc,CAACwD,aAAa,CAAClC,GAAG,EAAE,CAACmC,SAAS,CAACH,KAAK,EAAEJ,KAAK,CAACV,GAAG,EAAEe,OAAO,CAAC;EAC3E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAe,CAACC,MAAM,EAAE;EACpC,OAAO3D,cAAc,CAACwD,aAAa,CAAClC,GAAG,EAAE,CAACsC,IAAI,CAACD,MAAM,CAAC;AAC1D;AACA;AACA;AACA;AACA,OAAO,SAASE,QAAQ,CAACrB,GAAG,EAAE;EAC1B,OAAOxC,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAACuC,QAAQ,CAACrB,GAAG,CAAC;AAC1D;AACA;AACA;AACA;AACA,OAAO,SAASsB,SAAS,GAAG;EACxB,OAAO9D,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAACwC,SAAS,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAAClC,QAAQ,EAAE;EACvC,OAAO7B,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAAC0C,YAAY,CAACnC,QAAQ,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoC,kBAAkB,CAACpC,QAAQ,EAAE;EACzC,OAAO7B,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAAC4C,cAAc,CAACrC,QAAQ,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsC,wBAAwB,CAACtC,QAAQ,EAAE;EAC/C,OAAO7B,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,CAAC8C,kBAAkB,CAAC,UAAUC,CAAC,EAAE;IACrExC,QAAQ,CAAC;MACLqB,KAAK,EAAEmB,CAAC,CAACnB,KAAK;MACdoB,WAAW,EAAED,CAAC,CAACE;IACnB,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS/E,eAAe,CAAC4C,IAAI,EAAE;EAClC,OAAO3C,qBAAqB,CAACO,cAAc,CAACqB,YAAY,CAACC,GAAG,EAAE,EAAEc,IAAI,CAAC;AACzE;AACA;AACA;AACA;AACA,OAAO,SAASoC,eAAe,CAACC,OAAO,EAAE9C,OAAO,EAAE;EAC9C,OAAOhC,SAAS,CAAC6E,eAAe,CAACxE,cAAc,CAAC0E,sBAAsB,CAACpD,GAAG,EAAE,EAAEtB,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE,EAAEmD,OAAO,EAAE9C,OAAO,CAAC;AACrI;AACA;AACA;AACA;AACA,OAAO,SAASgD,QAAQ,CAACC,IAAI,EAAEzB,UAAU,EAAExB,OAAO,EAAE;EAChD,OAAOhC,SAAS,CAACgF,QAAQ,CAAC3E,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE,EAAEsD,IAAI,EAAEzB,UAAU,EAAExB,OAAO,CAAC;AAC1F;AACA;AACA;AACA;AACA,OAAO,SAASkD,iBAAiB,CAAC3B,KAAK,EAAE4B,UAAU,EAAEC,OAAO,EAAE;EAC1D,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC;EAAE;EACvC,OAAOpF,SAAS,CAACkF,iBAAiB,CAAC3B,KAAK,EAAE4B,UAAU,EAAEC,OAAO,CAAC;AAClE;AACA;AACA;AACA;AACA,SAASC,0BAA0B,CAACtC,QAAQ,EAAE;EAC1C,IAAIuC,mBAAmB,GAAG9F,KAAK,CAAC+F,oBAAoB,CAAC5D,GAAG,CAACoB,QAAQ,CAAC;EAClE,IAAIuC,mBAAmB,EAAE;IACrB,OAAOA,mBAAmB;EAC9B;EACA,OAAO;IACHE,eAAe,EAAE,2BAAY;MAAE,OAAO/F,UAAU;IAAE,CAAC;IACnDgG,QAAQ,EAAE,kBAAUC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAE;MAAE,OAAOlG,YAAY,CAACqD,QAAQ,EAAE2C,IAAI,EAAEC,KAAK,EAAEC,WAAW,CAAC;IAAE;EAC7G,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,SAASH,QAAQ,CAACR,IAAI,EAAEzB,UAAU,EAAE;EACvC,IAAIJ,WAAW,GAAG/C,cAAc,CAAC+C,WAAW,CAACzB,GAAG,EAAE;EAClD;EACAyB,WAAW,CAACyC,WAAW,CAACrC,UAAU,CAAC;EACnC,IAAI8B,mBAAmB,GAAGD,0BAA0B,CAAC7B,UAAU,CAAC;EAChE,IAAIsC,KAAK,GAAGb,IAAI,CAACc,KAAK,CAAC,YAAY,CAAC;EACpC,IAAIlE,MAAM,GAAG,EAAE;EACf,IAAI8D,KAAK,GAAGL,mBAAmB,CAACE,eAAe,EAAE;EACjD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,KAAK,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC9C,IAAIN,IAAI,GAAGI,KAAK,CAACE,CAAC,CAAC;IACnB,IAAIG,kBAAkB,GAAGb,mBAAmB,CAACG,QAAQ,CAACC,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC;IACrE9D,MAAM,CAACmE,CAAC,CAAC,GAAGG,kBAAkB,CAACC,MAAM;IACrCT,KAAK,GAAGQ,kBAAkB,CAACE,QAAQ;EACvC;EACA,OAAOxE,MAAM;AACjB;AACA;AACA;AACA;AACA,OAAO,SAASyE,WAAW,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC9CnG,cAAc,CAAC0E,sBAAsB,CAACpD,GAAG,EAAE,CAAC2E,WAAW,CAACC,SAAS,EAAEC,SAAS,CAAC;AACjF;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQ,CAACF,SAAS,EAAE;EAChClG,cAAc,CAAC0E,sBAAsB,CAACpD,GAAG,EAAE,CAAC8E,QAAQ,CAACF,SAAS,CAAC;AACnE;AACA;AACA;AACA;AACA,OAAO,SAASG,cAAc,GAAG;EAC7BzF,iBAAiB,EAAE;AACvB;AACA;AACA;AACA;AACA,OAAO,SAAS0F,qBAAqB,GAAG;EACpC,OAAO;IACH;IACA5E,MAAM,EAAEA,MAAM;IACdE,iBAAiB,EAAEA,iBAAiB;IACpCK,gBAAgB,EAAEA,gBAAgB;IAClCC,mBAAmB,EAAEA,mBAAmB;IACxCO,WAAW,EAAEA,WAAW;IACxBQ,gBAAgB,EAAEA,gBAAgB;IAClCI,eAAe,EAAEA,eAAe;IAChCK,eAAe,EAAEA,eAAe;IAChCI,SAAS,EAAEA,SAAS;IACpBD,QAAQ,EAAEA,QAAQ;IAClBE,gBAAgB,EAAEA,gBAAgB;IAClCE,kBAAkB,EAAEA,kBAAkB;IACtCE,wBAAwB,EAAEA,wBAAwB;IAClD3E,eAAe,EAAEA,eAAe;IAChCgF,eAAe,EAAEA,eAAe;IAChCG,QAAQ,EAAEA,QAAQ;IAClBE,iBAAiB,EAAEA,iBAAiB;IACpCO,QAAQ,EAAEA,QAAQ;IAClBa,WAAW,EAAEA,WAAW;IACxBG,QAAQ,EAAEA,QAAQ;IAClBC,cAAc,EAAEA,cAAc;IAC9B;IACAE,oBAAoB,EAAE7G,eAAe,CAAC6G,oBAAoB;IAC1DC,+BAA+B,EAAE9G,eAAe,CAAC8G,+BAA+B;IAChFC,kBAAkB,EAAE/G,eAAe,CAAC+G,kBAAkB;IACtDC,gBAAgB,EAAEhH,eAAe,CAACgH,gBAAgB;IAClDC,wBAAwB,EAAEjH,eAAe,CAACiH,wBAAwB;IAClEC,YAAY,EAAElH,eAAe,CAACkH,YAAY;IAC1CC,mBAAmB,EAAEnH,eAAe,CAACmH,mBAAmB;IACxDC,iBAAiB,EAAEpH,eAAe,CAACoH,iBAAiB;IACpDC,eAAe,EAAErH,eAAe,CAACqH,eAAe;IAChDC,eAAe,EAAEtH,eAAe,CAACsH,eAAe;IAChDC,+BAA+B,EAAEvH,eAAe,CAACuH,+BAA+B;IAChFC,iBAAiB,EAAExH,eAAe,CAACwH,iBAAiB;IACpDC,qBAAqB,EAAEzH,eAAe,CAACyH,qBAAqB;IAC5DC,aAAa,EAAE1H,eAAe,CAAC0H,aAAa;IAC5CC,mBAAmB,EAAE3H,eAAe,CAAC2H,mBAAmB;IACxDC,UAAU,EAAE5H,eAAe,CAAC4H,UAAU;IACtCC,6BAA6B,EAAE7H,eAAe,CAAC6H,6BAA6B;IAC5EC,qBAAqB,EAAE9H,eAAe,CAAC8H,qBAAqB;IAC5DC,sBAAsB,EAAE/H,eAAe,CAAC+H,sBAAsB;IAC9DC,cAAc,EAAEhI,eAAe,CAACgI,cAAc;IAC9C;IACA7I,yBAAyB,EAAEA,yBAAyB;IACpDC,YAAY,EAAEA,YAAY;IAC1BC,QAAQ,EAAEA,QAAQ;IAClBG,wBAAwB,EAAEA,wBAAwB;IAClDD,SAAS,EAAEA,SAAS;IACpB;IACAD,UAAU,EAAEA,UAAU;IACtBJ,aAAa,EAAEA;EACnB,CAAC;AACL"},"metadata":{},"sourceType":"module"}