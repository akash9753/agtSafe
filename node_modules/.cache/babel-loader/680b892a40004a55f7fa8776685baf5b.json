{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\nrequire(\"core-js/modules/es.symbol.description\");\nrequire(\"core-js/modules/es.symbol.iterator\");\nrequire(\"core-js/modules/es.array.iterator\");\nrequire(\"core-js/modules/es.object.get-prototype-of\");\nrequire(\"core-js/modules/es.object.set-prototype-of\");\nrequire(\"core-js/modules/es.object.to-string\");\nrequire(\"core-js/modules/es.string.iterator\");\nrequire(\"core-js/modules/es.string.trim\");\nrequire(\"core-js/modules/web.dom-collections.iterator\");\nexports.__esModule = true;\nexports.default = exports.EditorState = void 0;\nvar _src = require(\"./../3rdparty/walkontable/src\");\nvar _mixed = require(\"./../helpers/mixed\");\nvar _object = require(\"./../helpers/object\");\nvar _hooksRefRegisterer = _interopRequireDefault(require(\"./../mixins/hooksRefRegisterer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar EditorState = {\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n};\n/**\n * @util\n * @class BaseEditor\n */\n\nexports.EditorState = EditorState;\nvar BaseEditor = /*#__PURE__*/\nfunction () {\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {String}\n     */\n\n    this.state = EditorState.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {Number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {Number|String}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {Boolean} result\n   */\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param {Number|String} prop\n     * @param {HTMLTableCellElement} td\n     * @param {*} originalValue\n     * @param {Object} cellProperties\n     */\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, originalValue, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = originalValue;\n      this.cellProperties = cellProperties;\n      this.state = EditorState.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     */\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/(\n        function (_this$constructor) {\n          _inherits(Editor, _this$constructor);\n          function Editor() {\n            _classCallCheck(this, Editor);\n            return _possibleConstructorReturn(this, _getPrototypeOf(Editor).apply(this, arguments));\n          }\n          return Editor;\n        }(this.constructor)\n      );\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value\n     * @param {Boolean} ctrlDown If true, applies value to each cell in the last selected range.\n     */\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var selection;\n      var tmp; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        selection = this.hot.getSelectedLast();\n        if (selection[0] > selection[2]) {\n          tmp = selection[0];\n          selection[0] = selection[2];\n          selection[2] = tmp;\n        }\n        if (selection[1] > selection[3]) {\n          tmp = selection[1];\n          selection[1] = selection[3];\n          selection[3] = tmp;\n        }\n      } else {\n        selection = [this.row, this.col, null, null];\n      }\n      this.hot.populateFromArray(selection[0], selection[1], value, selection[2], selection[3], 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue\n     * @param {*} event\n     */\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EditorState.VIRGIN) {\n        return;\n      }\n      this.hot.view.scrollViewport(new _src.CellCoords(this.row, this.col));\n      this.state = EditorState.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : (0, _mixed.stringify)(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      this.hot.view.render();\n      this.hot.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {Boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {Boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback\n     */\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n      var val;\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n          callback(result);\n          _this.hot.view.render();\n        };\n      }\n      if (this.isWaiting()) {\n        return;\n      }\n      if (this.state === EditorState.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n        return;\n      }\n      if (this.state === EditorState.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n        var value = this.getValue();\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n        this.state = EditorState.WAITING;\n        this.saveValue(val, ctrlDown);\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EditorState.FINISHED;\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EditorState.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EditorState.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {Boolean|undefined} result\n     */\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EditorState.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EditorState.EDITING;\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EditorState.VIRGIN;\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     */\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     */\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EditorState.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n        case 'left':\n          return 'ht_clone_left';\n        case 'bottom':\n          return 'ht_clone_bottom';\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n        case 'top':\n          return 'ht_clone_top';\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     */\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n      return section;\n    }\n  }]);\n  return BaseEditor;\n}();\n(0, _object.mixin)(BaseEditor, _hooksRefRegisterer.default);\nvar _default = BaseEditor;\nexports.default = _default;","map":{"version":3,"names":["require","exports","__esModule","default","EditorState","_src","_mixed","_object","_hooksRefRegisterer","_interopRequireDefault","obj","_typeof","Symbol","iterator","constructor","prototype","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","create","value","writable","configurable","_setPrototypeOf","p","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","VIRGIN","EDITING","WAITING","FINISHED","BaseEditor","hot","state","_opened","_fullEditMode","_closeCallback","TD","row","col","prop","originalValue","cellProperties","init","_fireCallbacks","result","getValue","Error","setValue","open","close","prepare","td","extend","_this$constructor","Editor","apply","arguments","saveValue","ctrlDown","selection","tmp","getSelectedLast","populateFromArray","beginEditing","newInitialValue","event","view","scrollViewport","CellCoords","isInFullEditMode","stringifiedInitialValue","stringify","focus","render","runHooks","finishEditing","restoreOriginalValue","callback","_this","val","previousCloseCallback","isWaiting","_registerTimeout","cancelChanges","getSettings","trimWhitespace","String","trim","getCellValidator","addHookOnce","discardEditor","allowInvalid","selectCell","enableFullEditMode","isOpened","getEditedCellsLayerClass","editorSection","checkEditorSection","getEditedCell","getCell","totalRows","countRows","section","fixedRowsTop","fixedColumnsLeft","fixedRowsBottom","mixin","_default"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/editors/_baseEditor.js"],"sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.trim\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nexports.__esModule = true;\nexports.default = exports.EditorState = void 0;\n\nvar _src = require(\"./../3rdparty/walkontable/src\");\n\nvar _mixed = require(\"./../helpers/mixed\");\n\nvar _object = require(\"./../helpers/object\");\n\nvar _hooksRefRegisterer = _interopRequireDefault(require(\"./../mixins/hooksRefRegisterer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar EditorState = {\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n};\n/**\n * @util\n * @class BaseEditor\n */\n\nexports.EditorState = EditorState;\n\nvar BaseEditor =\n/*#__PURE__*/\nfunction () {\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {String}\n     */\n\n    this.state = EditorState.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {Number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {Number|String}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {Boolean} result\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param {Number|String} prop\n     * @param {HTMLTableCellElement} td\n     * @param {*} originalValue\n     * @param {Object} cellProperties\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, originalValue, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = originalValue;\n      this.cellProperties = cellProperties;\n      this.state = EditorState.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return (\n        /*#__PURE__*/\n        function (_this$constructor) {\n          _inherits(Editor, _this$constructor);\n\n          function Editor() {\n            _classCallCheck(this, Editor);\n\n            return _possibleConstructorReturn(this, _getPrototypeOf(Editor).apply(this, arguments));\n          }\n\n          return Editor;\n        }(this.constructor)\n      );\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value\n     * @param {Boolean} ctrlDown If true, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var selection;\n      var tmp; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        selection = this.hot.getSelectedLast();\n\n        if (selection[0] > selection[2]) {\n          tmp = selection[0];\n          selection[0] = selection[2];\n          selection[2] = tmp;\n        }\n\n        if (selection[1] > selection[3]) {\n          tmp = selection[1];\n          selection[1] = selection[3];\n          selection[3] = tmp;\n        }\n      } else {\n        selection = [this.row, this.col, null, null];\n      }\n\n      this.hot.populateFromArray(selection[0], selection[1], value, selection[2], selection[3], 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue\n     * @param {*} event\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EditorState.VIRGIN) {\n        return;\n      }\n\n      this.hot.view.scrollViewport(new _src.CellCoords(this.row, this.col));\n      this.state = EditorState.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : (0, _mixed.stringify)(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      this.hot.view.render();\n      this.hot.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {Boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {Boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EditorState.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EditorState.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EditorState.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EditorState.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EditorState.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EditorState.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {Boolean|undefined} result\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EditorState.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EditorState.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EditorState.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EditorState.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }]);\n\n  return BaseEditor;\n}();\n\n(0, _object.mixin)(BaseEditor, _hooksRefRegisterer.default);\nvar _default = BaseEditor;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}