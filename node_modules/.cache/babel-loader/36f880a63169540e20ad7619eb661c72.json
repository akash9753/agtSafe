{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n/**\r\n * The minimal size of the slider (such that it can still be clickable) -- it is artificially enlarged.\r\n */\nvar MINIMUM_SLIDER_SIZE = 20;\nvar ScrollbarState = /** @class */function () {\n  function ScrollbarState(arrowSize, scrollbarSize, oppositeScrollbarSize, visibleSize, scrollSize, scrollPosition) {\n    this._scrollbarSize = Math.round(scrollbarSize);\n    this._oppositeScrollbarSize = Math.round(oppositeScrollbarSize);\n    this._arrowSize = Math.round(arrowSize);\n    this._visibleSize = visibleSize;\n    this._scrollSize = scrollSize;\n    this._scrollPosition = scrollPosition;\n    this._computedAvailableSize = 0;\n    this._computedIsNeeded = false;\n    this._computedSliderSize = 0;\n    this._computedSliderRatio = 0;\n    this._computedSliderPosition = 0;\n    this._refreshComputedValues();\n  }\n  ScrollbarState.prototype.clone = function () {\n    return new ScrollbarState(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize, this._visibleSize, this._scrollSize, this._scrollPosition);\n  };\n  ScrollbarState.prototype.setVisibleSize = function (visibleSize) {\n    var iVisibleSize = Math.round(visibleSize);\n    if (this._visibleSize !== iVisibleSize) {\n      this._visibleSize = iVisibleSize;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  };\n  ScrollbarState.prototype.setScrollSize = function (scrollSize) {\n    var iScrollSize = Math.round(scrollSize);\n    if (this._scrollSize !== iScrollSize) {\n      this._scrollSize = iScrollSize;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  };\n  ScrollbarState.prototype.setScrollPosition = function (scrollPosition) {\n    var iScrollPosition = Math.round(scrollPosition);\n    if (this._scrollPosition !== iScrollPosition) {\n      this._scrollPosition = iScrollPosition;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  };\n  ScrollbarState._computeValues = function (oppositeScrollbarSize, arrowSize, visibleSize, scrollSize, scrollPosition) {\n    var computedAvailableSize = Math.max(0, visibleSize - oppositeScrollbarSize);\n    var computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * arrowSize);\n    var computedIsNeeded = scrollSize > 0 && scrollSize > visibleSize;\n    if (!computedIsNeeded) {\n      // There is no need for a slider\n      return {\n        computedAvailableSize: Math.round(computedAvailableSize),\n        computedIsNeeded: computedIsNeeded,\n        computedSliderSize: Math.round(computedRepresentableSize),\n        computedSliderRatio: 0,\n        computedSliderPosition: 0\n      };\n    }\n    // We must artificially increase the size of the slider if needed, since the slider would be too small to grab with the mouse otherwise\n    var computedSliderSize = Math.round(Math.max(MINIMUM_SLIDER_SIZE, Math.floor(visibleSize * computedRepresentableSize / scrollSize)));\n    // The slider can move from 0 to `computedRepresentableSize` - `computedSliderSize`\n    // in the same way `scrollPosition` can move from 0 to `scrollSize` - `visibleSize`.\n    var computedSliderRatio = (computedRepresentableSize - computedSliderSize) / (scrollSize - visibleSize);\n    var computedSliderPosition = scrollPosition * computedSliderRatio;\n    return {\n      computedAvailableSize: Math.round(computedAvailableSize),\n      computedIsNeeded: computedIsNeeded,\n      computedSliderSize: Math.round(computedSliderSize),\n      computedSliderRatio: computedSliderRatio,\n      computedSliderPosition: Math.round(computedSliderPosition)\n    };\n  };\n  ScrollbarState.prototype._refreshComputedValues = function () {\n    var r = ScrollbarState._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);\n    this._computedAvailableSize = r.computedAvailableSize;\n    this._computedIsNeeded = r.computedIsNeeded;\n    this._computedSliderSize = r.computedSliderSize;\n    this._computedSliderRatio = r.computedSliderRatio;\n    this._computedSliderPosition = r.computedSliderPosition;\n  };\n  ScrollbarState.prototype.getArrowSize = function () {\n    return this._arrowSize;\n  };\n  ScrollbarState.prototype.getScrollPosition = function () {\n    return this._scrollPosition;\n  };\n  ScrollbarState.prototype.getRectangleLargeSize = function () {\n    return this._computedAvailableSize;\n  };\n  ScrollbarState.prototype.getRectangleSmallSize = function () {\n    return this._scrollbarSize;\n  };\n  ScrollbarState.prototype.isNeeded = function () {\n    return this._computedIsNeeded;\n  };\n  ScrollbarState.prototype.getSliderSize = function () {\n    return this._computedSliderSize;\n  };\n  ScrollbarState.prototype.getSliderPosition = function () {\n    return this._computedSliderPosition;\n  };\n  /**\r\n   * Compute a desired `scrollPosition` such that `offset` ends up in the center of the slider.\r\n   * `offset` is based on the same coordinate system as the `sliderPosition`.\r\n   */\n  ScrollbarState.prototype.getDesiredScrollPositionFromOffset = function (offset) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n    var desiredSliderPosition = offset - this._arrowSize - this._computedSliderSize / 2;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  };\n  /**\r\n   * Compute a desired `scrollPosition` such that the slider moves by `delta`.\r\n   */\n  ScrollbarState.prototype.getDesiredScrollPositionFromDelta = function (delta) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n    var desiredSliderPosition = this._computedSliderPosition + delta;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  };\n  return ScrollbarState;\n}();\nexport { ScrollbarState };","map":{"version":3,"names":["MINIMUM_SLIDER_SIZE","ScrollbarState","arrowSize","scrollbarSize","oppositeScrollbarSize","visibleSize","scrollSize","scrollPosition","_scrollbarSize","Math","round","_oppositeScrollbarSize","_arrowSize","_visibleSize","_scrollSize","_scrollPosition","_computedAvailableSize","_computedIsNeeded","_computedSliderSize","_computedSliderRatio","_computedSliderPosition","_refreshComputedValues","prototype","clone","setVisibleSize","iVisibleSize","setScrollSize","iScrollSize","setScrollPosition","iScrollPosition","_computeValues","computedAvailableSize","max","computedRepresentableSize","computedIsNeeded","computedSliderSize","computedSliderRatio","computedSliderPosition","floor","r","getArrowSize","getScrollPosition","getRectangleLargeSize","getRectangleSmallSize","isNeeded","getSliderSize","getSliderPosition","getDesiredScrollPositionFromOffset","offset","desiredSliderPosition","getDesiredScrollPositionFromDelta","delta"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollbarState.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * The minimal size of the slider (such that it can still be clickable) -- it is artificially enlarged.\r\n */\r\nvar MINIMUM_SLIDER_SIZE = 20;\r\nvar ScrollbarState = /** @class */ (function () {\r\n    function ScrollbarState(arrowSize, scrollbarSize, oppositeScrollbarSize, visibleSize, scrollSize, scrollPosition) {\r\n        this._scrollbarSize = Math.round(scrollbarSize);\r\n        this._oppositeScrollbarSize = Math.round(oppositeScrollbarSize);\r\n        this._arrowSize = Math.round(arrowSize);\r\n        this._visibleSize = visibleSize;\r\n        this._scrollSize = scrollSize;\r\n        this._scrollPosition = scrollPosition;\r\n        this._computedAvailableSize = 0;\r\n        this._computedIsNeeded = false;\r\n        this._computedSliderSize = 0;\r\n        this._computedSliderRatio = 0;\r\n        this._computedSliderPosition = 0;\r\n        this._refreshComputedValues();\r\n    }\r\n    ScrollbarState.prototype.clone = function () {\r\n        return new ScrollbarState(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize, this._visibleSize, this._scrollSize, this._scrollPosition);\r\n    };\r\n    ScrollbarState.prototype.setVisibleSize = function (visibleSize) {\r\n        var iVisibleSize = Math.round(visibleSize);\r\n        if (this._visibleSize !== iVisibleSize) {\r\n            this._visibleSize = iVisibleSize;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ScrollbarState.prototype.setScrollSize = function (scrollSize) {\r\n        var iScrollSize = Math.round(scrollSize);\r\n        if (this._scrollSize !== iScrollSize) {\r\n            this._scrollSize = iScrollSize;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ScrollbarState.prototype.setScrollPosition = function (scrollPosition) {\r\n        var iScrollPosition = Math.round(scrollPosition);\r\n        if (this._scrollPosition !== iScrollPosition) {\r\n            this._scrollPosition = iScrollPosition;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ScrollbarState._computeValues = function (oppositeScrollbarSize, arrowSize, visibleSize, scrollSize, scrollPosition) {\r\n        var computedAvailableSize = Math.max(0, visibleSize - oppositeScrollbarSize);\r\n        var computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * arrowSize);\r\n        var computedIsNeeded = (scrollSize > 0 && scrollSize > visibleSize);\r\n        if (!computedIsNeeded) {\r\n            // There is no need for a slider\r\n            return {\r\n                computedAvailableSize: Math.round(computedAvailableSize),\r\n                computedIsNeeded: computedIsNeeded,\r\n                computedSliderSize: Math.round(computedRepresentableSize),\r\n                computedSliderRatio: 0,\r\n                computedSliderPosition: 0,\r\n            };\r\n        }\r\n        // We must artificially increase the size of the slider if needed, since the slider would be too small to grab with the mouse otherwise\r\n        var computedSliderSize = Math.round(Math.max(MINIMUM_SLIDER_SIZE, Math.floor(visibleSize * computedRepresentableSize / scrollSize)));\r\n        // The slider can move from 0 to `computedRepresentableSize` - `computedSliderSize`\r\n        // in the same way `scrollPosition` can move from 0 to `scrollSize` - `visibleSize`.\r\n        var computedSliderRatio = (computedRepresentableSize - computedSliderSize) / (scrollSize - visibleSize);\r\n        var computedSliderPosition = (scrollPosition * computedSliderRatio);\r\n        return {\r\n            computedAvailableSize: Math.round(computedAvailableSize),\r\n            computedIsNeeded: computedIsNeeded,\r\n            computedSliderSize: Math.round(computedSliderSize),\r\n            computedSliderRatio: computedSliderRatio,\r\n            computedSliderPosition: Math.round(computedSliderPosition),\r\n        };\r\n    };\r\n    ScrollbarState.prototype._refreshComputedValues = function () {\r\n        var r = ScrollbarState._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);\r\n        this._computedAvailableSize = r.computedAvailableSize;\r\n        this._computedIsNeeded = r.computedIsNeeded;\r\n        this._computedSliderSize = r.computedSliderSize;\r\n        this._computedSliderRatio = r.computedSliderRatio;\r\n        this._computedSliderPosition = r.computedSliderPosition;\r\n    };\r\n    ScrollbarState.prototype.getArrowSize = function () {\r\n        return this._arrowSize;\r\n    };\r\n    ScrollbarState.prototype.getScrollPosition = function () {\r\n        return this._scrollPosition;\r\n    };\r\n    ScrollbarState.prototype.getRectangleLargeSize = function () {\r\n        return this._computedAvailableSize;\r\n    };\r\n    ScrollbarState.prototype.getRectangleSmallSize = function () {\r\n        return this._scrollbarSize;\r\n    };\r\n    ScrollbarState.prototype.isNeeded = function () {\r\n        return this._computedIsNeeded;\r\n    };\r\n    ScrollbarState.prototype.getSliderSize = function () {\r\n        return this._computedSliderSize;\r\n    };\r\n    ScrollbarState.prototype.getSliderPosition = function () {\r\n        return this._computedSliderPosition;\r\n    };\r\n    /**\r\n     * Compute a desired `scrollPosition` such that `offset` ends up in the center of the slider.\r\n     * `offset` is based on the same coordinate system as the `sliderPosition`.\r\n     */\r\n    ScrollbarState.prototype.getDesiredScrollPositionFromOffset = function (offset) {\r\n        if (!this._computedIsNeeded) {\r\n            // no need for a slider\r\n            return 0;\r\n        }\r\n        var desiredSliderPosition = offset - this._arrowSize - this._computedSliderSize / 2;\r\n        return Math.round(desiredSliderPosition / this._computedSliderRatio);\r\n    };\r\n    /**\r\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\r\n     */\r\n    ScrollbarState.prototype.getDesiredScrollPositionFromDelta = function (delta) {\r\n        if (!this._computedIsNeeded) {\r\n            // no need for a slider\r\n            return 0;\r\n        }\r\n        var desiredSliderPosition = this._computedSliderPosition + delta;\r\n        return Math.round(desiredSliderPosition / this._computedSliderRatio);\r\n    };\r\n    return ScrollbarState;\r\n}());\r\nexport { ScrollbarState };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,mBAAmB,GAAG,EAAE;AAC5B,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAc,CAACC,SAAS,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,WAAW,EAAEC,UAAU,EAAEC,cAAc,EAAE;IAC9G,IAAI,CAACC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACP,aAAa,CAAC;IAC/C,IAAI,CAACQ,sBAAsB,GAAGF,IAAI,CAACC,KAAK,CAACN,qBAAqB,CAAC;IAC/D,IAAI,CAACQ,UAAU,GAAGH,IAAI,CAACC,KAAK,CAACR,SAAS,CAAC;IACvC,IAAI,CAACW,YAAY,GAAGR,WAAW;IAC/B,IAAI,CAACS,WAAW,GAAGR,UAAU;IAC7B,IAAI,CAACS,eAAe,GAAGR,cAAc;IACrC,IAAI,CAACS,sBAAsB,GAAG,CAAC;IAC/B,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,mBAAmB,GAAG,CAAC;IAC5B,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACC,uBAAuB,GAAG,CAAC;IAChC,IAAI,CAACC,sBAAsB,EAAE;EACjC;EACApB,cAAc,CAACqB,SAAS,CAACC,KAAK,GAAG,YAAY;IACzC,OAAO,IAAItB,cAAc,CAAC,IAAI,CAACW,UAAU,EAAE,IAAI,CAACJ,cAAc,EAAE,IAAI,CAACG,sBAAsB,EAAE,IAAI,CAACE,YAAY,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;EAC3J,CAAC;EACDd,cAAc,CAACqB,SAAS,CAACE,cAAc,GAAG,UAAUnB,WAAW,EAAE;IAC7D,IAAIoB,YAAY,GAAGhB,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;IAC1C,IAAI,IAAI,CAACQ,YAAY,KAAKY,YAAY,EAAE;MACpC,IAAI,CAACZ,YAAY,GAAGY,YAAY;MAChC,IAAI,CAACJ,sBAAsB,EAAE;MAC7B,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACDpB,cAAc,CAACqB,SAAS,CAACI,aAAa,GAAG,UAAUpB,UAAU,EAAE;IAC3D,IAAIqB,WAAW,GAAGlB,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;IACxC,IAAI,IAAI,CAACQ,WAAW,KAAKa,WAAW,EAAE;MAClC,IAAI,CAACb,WAAW,GAAGa,WAAW;MAC9B,IAAI,CAACN,sBAAsB,EAAE;MAC7B,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACDpB,cAAc,CAACqB,SAAS,CAACM,iBAAiB,GAAG,UAAUrB,cAAc,EAAE;IACnE,IAAIsB,eAAe,GAAGpB,IAAI,CAACC,KAAK,CAACH,cAAc,CAAC;IAChD,IAAI,IAAI,CAACQ,eAAe,KAAKc,eAAe,EAAE;MAC1C,IAAI,CAACd,eAAe,GAAGc,eAAe;MACtC,IAAI,CAACR,sBAAsB,EAAE;MAC7B,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;EACDpB,cAAc,CAAC6B,cAAc,GAAG,UAAU1B,qBAAqB,EAAEF,SAAS,EAAEG,WAAW,EAAEC,UAAU,EAAEC,cAAc,EAAE;IACjH,IAAIwB,qBAAqB,GAAGtB,IAAI,CAACuB,GAAG,CAAC,CAAC,EAAE3B,WAAW,GAAGD,qBAAqB,CAAC;IAC5E,IAAI6B,yBAAyB,GAAGxB,IAAI,CAACuB,GAAG,CAAC,CAAC,EAAED,qBAAqB,GAAG,CAAC,GAAG7B,SAAS,CAAC;IAClF,IAAIgC,gBAAgB,GAAI5B,UAAU,GAAG,CAAC,IAAIA,UAAU,GAAGD,WAAY;IACnE,IAAI,CAAC6B,gBAAgB,EAAE;MACnB;MACA,OAAO;QACHH,qBAAqB,EAAEtB,IAAI,CAACC,KAAK,CAACqB,qBAAqB,CAAC;QACxDG,gBAAgB,EAAEA,gBAAgB;QAClCC,kBAAkB,EAAE1B,IAAI,CAACC,KAAK,CAACuB,yBAAyB,CAAC;QACzDG,mBAAmB,EAAE,CAAC;QACtBC,sBAAsB,EAAE;MAC5B,CAAC;IACL;IACA;IACA,IAAIF,kBAAkB,GAAG1B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACuB,GAAG,CAAChC,mBAAmB,EAAES,IAAI,CAAC6B,KAAK,CAACjC,WAAW,GAAG4B,yBAAyB,GAAG3B,UAAU,CAAC,CAAC,CAAC;IACpI;IACA;IACA,IAAI8B,mBAAmB,GAAG,CAACH,yBAAyB,GAAGE,kBAAkB,KAAK7B,UAAU,GAAGD,WAAW,CAAC;IACvG,IAAIgC,sBAAsB,GAAI9B,cAAc,GAAG6B,mBAAoB;IACnE,OAAO;MACHL,qBAAqB,EAAEtB,IAAI,CAACC,KAAK,CAACqB,qBAAqB,CAAC;MACxDG,gBAAgB,EAAEA,gBAAgB;MAClCC,kBAAkB,EAAE1B,IAAI,CAACC,KAAK,CAACyB,kBAAkB,CAAC;MAClDC,mBAAmB,EAAEA,mBAAmB;MACxCC,sBAAsB,EAAE5B,IAAI,CAACC,KAAK,CAAC2B,sBAAsB;IAC7D,CAAC;EACL,CAAC;EACDpC,cAAc,CAACqB,SAAS,CAACD,sBAAsB,GAAG,YAAY;IAC1D,IAAIkB,CAAC,GAAGtC,cAAc,CAAC6B,cAAc,CAAC,IAAI,CAACnB,sBAAsB,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;IAC9I,IAAI,CAACC,sBAAsB,GAAGuB,CAAC,CAACR,qBAAqB;IACrD,IAAI,CAACd,iBAAiB,GAAGsB,CAAC,CAACL,gBAAgB;IAC3C,IAAI,CAAChB,mBAAmB,GAAGqB,CAAC,CAACJ,kBAAkB;IAC/C,IAAI,CAAChB,oBAAoB,GAAGoB,CAAC,CAACH,mBAAmB;IACjD,IAAI,CAAChB,uBAAuB,GAAGmB,CAAC,CAACF,sBAAsB;EAC3D,CAAC;EACDpC,cAAc,CAACqB,SAAS,CAACkB,YAAY,GAAG,YAAY;IAChD,OAAO,IAAI,CAAC5B,UAAU;EAC1B,CAAC;EACDX,cAAc,CAACqB,SAAS,CAACmB,iBAAiB,GAAG,YAAY;IACrD,OAAO,IAAI,CAAC1B,eAAe;EAC/B,CAAC;EACDd,cAAc,CAACqB,SAAS,CAACoB,qBAAqB,GAAG,YAAY;IACzD,OAAO,IAAI,CAAC1B,sBAAsB;EACtC,CAAC;EACDf,cAAc,CAACqB,SAAS,CAACqB,qBAAqB,GAAG,YAAY;IACzD,OAAO,IAAI,CAACnC,cAAc;EAC9B,CAAC;EACDP,cAAc,CAACqB,SAAS,CAACsB,QAAQ,GAAG,YAAY;IAC5C,OAAO,IAAI,CAAC3B,iBAAiB;EACjC,CAAC;EACDhB,cAAc,CAACqB,SAAS,CAACuB,aAAa,GAAG,YAAY;IACjD,OAAO,IAAI,CAAC3B,mBAAmB;EACnC,CAAC;EACDjB,cAAc,CAACqB,SAAS,CAACwB,iBAAiB,GAAG,YAAY;IACrD,OAAO,IAAI,CAAC1B,uBAAuB;EACvC,CAAC;EACD;AACJ;AACA;AACA;EACInB,cAAc,CAACqB,SAAS,CAACyB,kCAAkC,GAAG,UAAUC,MAAM,EAAE;IAC5E,IAAI,CAAC,IAAI,CAAC/B,iBAAiB,EAAE;MACzB;MACA,OAAO,CAAC;IACZ;IACA,IAAIgC,qBAAqB,GAAGD,MAAM,GAAG,IAAI,CAACpC,UAAU,GAAG,IAAI,CAACM,mBAAmB,GAAG,CAAC;IACnF,OAAOT,IAAI,CAACC,KAAK,CAACuC,qBAAqB,GAAG,IAAI,CAAC9B,oBAAoB,CAAC;EACxE,CAAC;EACD;AACJ;AACA;EACIlB,cAAc,CAACqB,SAAS,CAAC4B,iCAAiC,GAAG,UAAUC,KAAK,EAAE;IAC1E,IAAI,CAAC,IAAI,CAAClC,iBAAiB,EAAE;MACzB;MACA,OAAO,CAAC;IACZ;IACA,IAAIgC,qBAAqB,GAAG,IAAI,CAAC7B,uBAAuB,GAAG+B,KAAK;IAChE,OAAO1C,IAAI,CAACC,KAAK,CAACuC,qBAAqB,GAAG,IAAI,CAAC9B,oBAAoB,CAAC;EACxE,CAAC;EACD,OAAOlB,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc"},"metadata":{},"sourceType":"module"}