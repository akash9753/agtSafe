{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\Mapper\\\\blocklyWorkspace.js\";\nimport React, { Component } from \"react\";\nimport ContentTab from \"../TreeView/contentTab\";\nimport { Row, Modal, Form, Button, Spin, Icon, Tabs, message } from \"antd\";\nimport Blockly from 'blockly/core';\nimport { FormErrorHtmlIfObj, FormErrorIfArray, checkXML, GetRenameVariables, StepBlockValidation, Get_Var_From_Step, ImpactValidation, WorkDatasetVariableExists } from './blockValidation';\nimport BlocklyComponent, { Block, Field, Category } from './Blockly';\nimport { MappingDatas } from '../TreeView/getMappingDatas';\nimport { CREATE, UPDATE, isArray, isNotNull, PostCallWithZone, strLowerCase, successModalCallback, errorModal, errorModalCallback, showProgress, setSessionValue, hideProgress, CallServerPost, validJSON, isObjectCheck } from '../Utility/sharedUtility';\nimport ConfirmModal from '../Utility/ConfirmModal';\nimport axios from 'axios';\nimport { Validator } from './validator';\nimport { HotTable, HotColumn } from '@handsontable/react';\nimport \"handsontable/dist/handsontable.min.css\";\nimport SplitPane from 'react-split-pane';\nimport BlockWorkResult from './blockWorkResult';\nimport CustomProgram from './CustomProgram';\nvar Pane = require('react-split-pane/lib/Pane');\nvar TabPane = Tabs.TabPane;\nvar thisObj = \"\";\nvar SelectedCategory = {};\nvar antIcon = /*#__PURE__*/React.createElement(Icon, {\n  type: \"loading\",\n  style: {\n    fontSize: 24\n  },\n  spin: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 17\n  }\n});\nvar BlocklyWorkspace = /*#__PURE__*/function (_Component) {\n  _inherits(BlocklyWorkspace, _Component);\n  var _super = _createSuper(BlocklyWorkspace);\n  function BlocklyWorkspace(_props) {\n    var _this;\n    _classCallCheck(this, BlocklyWorkspace);\n    _this = _super.call(this, _props);\n    _this.getInitialXML = function (props) {\n      var action = props.action,\n        MappingConstruct = props.MappingConstruct,\n        allValues = props.allValues;\n      var SourceDataset = allValues.SourceDataset;\n      var sourceDataset = MappingConstruct.sourceDataset,\n        sourceVariableName = MappingConstruct.sourceVariableName;\n      var Variable = SourceDataset.Variable;\n      var srcObj = {};\n      srcObj = _objectSpread(_objectSpread({}, srcObj), Variable.find(function (va) {\n        return va.TABLE_NAME === sourceDataset && va.COLUMN_NAME === sourceVariableName;\n      }));\n      srcObj[\"blockType\"] = \"SourceVar\";\n      srcObj = JSON.stringify(srcObj);\n      return \"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\">\\n                        <block deletable=\\\"false\\\" type=\\\"final_step_type\\\" startScrollX=\\\"30\\\" startScrollY=\\\"30\\\" x=\\\"30\\\" y=\\\"30\\\" />\\n                        <block type=\\\"variable_type_source_multi\\\" id=\\\"kkos\\\" disabled=\\\"true\\\" editable=\\\"false\\\" x=\\\"407\\\" y=\\\"124\\\">\\n                        <field name=\\\"var_name\\\">\" + sourceDataset + \".\" + sourceVariableName + \"</field>\\n                        <data>\" + srcObj + \"</data>\\n                        </block>\\n                    </xml>\";\n    };\n    _this.hideToolBox = function () {\n      var workspace = Blockly.getMainWorkspace();\n      // For now the trashcan flyout always autocloses because it overlays the\n      // trashcan UI (no trashcan to click to close it).\n\n      if (workspace.trashcan && workspace.trashcan.flyout) {\n        workspace.trashcan.flyout.hide();\n      }\n      var toolbox = workspace.getToolbox();\n      if (toolbox && toolbox.getFlyout() && toolbox.getFlyout().autoClose) {\n        toolbox.clearSelection();\n      }\n    };\n    _this.FetchBlocks = function (mappingBlocks) {\n      var thisOb = _assertThisInitialized(_this);\n      showProgress();\n      new Promise(function (resolve, reject) {\n        //console.log(mappingBlocks)\n        mappingBlocks.map(function (mappingBlock, index) {\n          var validateJSON = function validateJSON(json) {\n            var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            try {\n              return JSON.parse(json);\n            } catch (e) {\n              return v === 0 ? json : [];\n            }\n          };\n          var blockObj = {};\n          blockObj[\"type\"] = mappingBlock[\"type\"];\n          blockObj[\"colour\"] = mappingBlock[\"color\"];\n          blockObj[\"args0\"] = validateJSON(mappingBlock[\"args\"]);\n          blockObj[\"message0\"] = mappingBlock[\"message\"];\n          if (mappingBlock[\"previousStatement\"]) {\n            blockObj[\"previousStatement\"] = validateJSON(mappingBlock.previousStatement, 0);\n          }\n          if (mappingBlock[\"nextStatement\"]) {\n            blockObj[\"nextStatement\"] = validateJSON(mappingBlock.nextStatement, 0);\n          }\n          if (mappingBlock[\"output\"]) {\n            blockObj[\"output\"] = validateJSON(mappingBlock.output, 0);\n          }\n          if (mappingBlock[\"inputsInline\"]) {\n            blockObj[\"inputsInline\"] = true;\n          }\n          if (mappingBlock[\"type\"] === \"custom_program_type\") {\n            Blockly.Blocks[mappingBlock.type] = {\n              init: function init() {\n                //Help Text \n                //set value for help text\n                if (mappingBlock[\"description\"]) {\n                  this.setWarningText(mappingBlock[\"description\"]);\n                }\n\n                //for to enable if it is not used in workspace except step block\n                this.highPriority = mappingBlock.category === \"step\";\n                this.jsonInit(blockObj);\n              },\n              customContextMenu: function customContextMenu(options) {\n                var run_Option = {\n                  enabled: true,\n                  text: 'Edit Program',\n                  callback: function callback(blk) {\n                    thisOb.setState({\n                      customVisible: true\n                    });\n                  }\n                };\n                run_Option.scopeType = {\n                  block: Blockly.ContextMenuRegistry.ScopeType.BLOCK\n                };\n                options.unshift(run_Option);\n                return options;\n              }\n            };\n          } else if (mappingBlock[\"type\"] !== \"step_type\" && mappingBlock[\"type\"] !== \"step_type_variable\") {\n            Blockly.Blocks[mappingBlock.type] = {\n              init: function init() {\n                //Help Text \n                //set value for help text\n                if (mappingBlock[\"description\"]) {\n                  this.setWarningText(mappingBlock[\"description\"]);\n                }\n\n                //for to enable if it is not used in workspace except step block\n                this.highPriority = mappingBlock.category === \"step\";\n                this.jsonInit(blockObj);\n                var thisBlock = this;\n                if (mappingBlock.type == \"constant_type_multi\") {\n                  var literalValidator = function literalValidator(newValue) {\n                    if (newValue.length > 100) {\n                      return null;\n                    }\n                    return newValue;\n                  };\n                  this.getField(\"const_str\").setValidator(literalValidator);\n                }\n                if (mappingBlock.tooltip) {\n                  this.setTooltip(function () {\n                    switch (thisBlock.type) {\n                      case \"constant_type_multi\":\n                        {\n                          var data = validJSON(thisBlock.data);\n                          if (data && data.cdiscDefinition && typeof data.cdiscDefinition === \"string\") {\n                            return data.nciPreferredTerm + \" - \" + data.cdiscDefinition;\n                          }\n                        }\n                        break;\n                      default:\n                        break;\n                    }\n                  });\n                }\n              },\n              onchange: function onchange(e) {\n                try {\n                  if (typeof e.name != \"undefined\") {\n                    switch (e.name) {\n                      case \"input_replace_string_extra\":\n                      case \"input_string_extra\":\n                        {\n                          var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\n                          if (block) {\n                            block.setFieldValue(e.newValue.replace(/\\d+/g, ''), e.name);\n                          }\n                          return;\n                        }\n                      //case \"const_str\":\n                      //    var err = [];\n                      //    let txtvalue = e.newValue;\n                      //    let getIFBlk = Blockly.getMainWorkspace().getBlocksByType(\"constant_type_multi\")[0];\n                      //    if (txtvalue.length > 200) {\n                      //        err.push(\"Literal should be less than 200 characters\");\n                      //    } else {\n                      //        getIFBlk.setWarningText(null);\n                      //        if (getIFBlk.warning && getIFBlk.warning.bubble_) {\n                      //            getIFBlk.warning.disposeBubble();\n                      //        }\n                      //    }\n                      //    if (err.length > 0) {\n\n                      //        getIFBlk.setWarningText(err.toString());\n                      //        if (getIFBlk.warning && !getIFBlk.warning.bubble_) {\n                      //            getIFBlk.warning.createBubble();\n                      //        }\n                      //        getIFBlk.warning.setVisible(true);\n                      //    }\n\n                      //    return;\n                      case \"rename_var\":\n                        {\n                          var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\n                          if (block) {\n                            if (e.newValue && typeof e.newValue == \"string\") {\n                              {\n                                block.setFieldValue(e.newValue.toUpperCase().trim(), e.name);\n                              }\n                            }\n                            return;\n                          }\n                        }\n                      default:\n                        break;\n                    }\n                  }\n                } catch (e) {\n                  //console.log(e);\n                }\n              }\n            };\n          } else if (mappingBlock[\"type\"] === \"step_type\" || mappingBlock[\"type\"] === \"step_type_variable\") {\n            Blockly.Blocks[mappingBlock.type] = {\n              init: function init() {\n                //Help Text \n                //set value for help text\n                if (mappingBlock[\"description\"]) {\n                  this.setWarningText(mappingBlock[\"description\"]);\n                }\n\n                //for to enable if it is not used in workspace except step block\n                this.highPriority = mappingBlock.category === \"step\";\n                this.jsonInit(blockObj);\n              },\n              onchange: function onchange(e) {\n                try {\n                  if (typeof e.name != \"undefined\") {\n                    switch (e.name) {\n                      case \"temp_dsname\":\n                      case \"temp_varname\":\n                        {\n                          var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\n                          if (block) {\n                            if (e.newValue && typeof e.newValue == \"string\") {\n                              {\n                                block.setFieldValue(e.newValue.toUpperCase().trim(), e.name);\n                              }\n                            }\n                            return;\n                          }\n                        }\n                      default:\n                        break;\n                    }\n                  }\n                } catch (e) {\n                  //console.log(e);\n                }\n              },\n              customContextMenu: function customContextMenu(options) {\n                var run_Option = {\n                  enabled: true,\n                  text: 'Run Step',\n                  callback: function callback(blk) {\n                    var block_selected = Blockly.selected;\n                    thisOb.executeStep(block_selected);\n                  }\n                };\n                run_Option.scopeType = {\n                  block: Blockly.ContextMenuRegistry.ScopeType.BLOCK\n                };\n                options.unshift(run_Option);\n                var run_from_top_Option = {\n                  enabled: true,\n                  text: 'Run From Top',\n                  callback: function callback(blk) {\n                    var block_selected = Blockly.selected;\n                    thisOb.executeFromTop(block_selected);\n                  }\n                };\n                run_Option.scopeType = {\n                  block: Blockly.ContextMenuRegistry.ScopeType.BLOCK\n                };\n                options.unshift(run_from_top_Option);\n                var view_WorkVar_Option = {\n                  enabled: true,\n                  text: 'Get Work Dataset',\n                  callback: function callback(blk) {\n                    var block_selected = Blockly.selected;\n                    //Only for step and Final Step\n                    thisOb.GetWorkDatasetWhenManual(block_selected);\n                  }\n                };\n                view_WorkVar_Option.scopeType = {\n                  block: Blockly.ContextMenuRegistry.ScopeType.BLOCK\n                };\n                options.unshift(view_WorkVar_Option);\n                return options;\n              }\n            };\n          }\n        });\n        resolve();\n      }).then(function () {\n        hideProgress();\n      }).catch(function () {\n        hideProgress();\n      });\n    };\n    _this.GetWorkDatasetWhenLoad = function () {\n      var MappingConstruct = _this.props.MappingConstruct;\n      var constructJson = MappingConstruct.constructJson;\n      var xml = constructJson && constructJson != \"\" ? constructJson : _this.getInitialXML(_this.props);\n      var _this$fnToGetWorkData = _this.fnToGetWorkDataset(xml),\n        wds = _this$fnToGetWorkData.wds;\n      thisObj.props.addWorkDataset(wds, function () {\n        return thisObj.setState({\n          WORK_BLOCKS: thisObj.workBlocks(wds),\n          WORKVARIABLETYPE1: [],\n          WORKVARIABLETYPE2: [],\n          selected_workDS: \"\"\n        });\n      });\n    };\n    _this.GetWorkDatasetWhenManual = function (sel_blk) {\n      var _this$fnToGetWorkData2 = _this.fnToGetWorkDataset(false, sel_blk),\n        wds = _this$fnToGetWorkData2.wds;\n      thisObj.props.addWorkDataset(wds, function () {\n        return thisObj.setState({\n          WORK_BLOCKS: thisObj.workBlocks(wds),\n          WORKVARIABLETYPE1: [],\n          WORKVARIABLETYPE2: [],\n          selected_workDS: \"\"\n        });\n      });\n    };\n    _this.isCheckAllDataset = function (block) {\n      try {\n        var getAllConnectedBlock = block && typeof block === \"object\" ? block.getDescendants() : [];\n        return getAllConnectedBlock.some(function (bl) {\n          return bl.type === \"final_step_type\";\n        });\n      } catch (e) {\n        return false;\n      }\n    };\n    _this.fnToGetWorkDataset = function () {\n      var initialxmlcheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var selected_step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var NotToValidateBlk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      try {\n        var form_work_dataset = [];\n        //variable to handle error \n        var err = {\n          validationErr: [],\n          duplicateColumn: [],\n          impacted_block: {},\n          combineAllErr: []\n        };\n        var validationErr = err.validationErr,\n          duplicateColumn = err.duplicateColumn,\n          impacted_block = err.impacted_block,\n          combineAllErr = err.combineAllErr;\n        //End\n        var _assertThisInitialize = _assertThisInitialized(_this),\n          props = _assertThisInitialize.props;\n        var work_datasets = props.work_datasets,\n          NCICODELISTDATA = props.NCICODELISTDATA,\n          MappingConstruct = props.MappingConstruct;\n        var _props$allValues = props.allValues,\n          SourceDataset = _props$allValues.SourceDataset,\n          Standards = _props$allValues.Standards,\n          MappingList = _props$allValues.MappingList;\n        var tempWorkspce = new Blockly.Workspace();\n        var validXML = \"\";\n\n        //For when click Create/Update \n        if (!initialxmlcheck) {\n          //check dataset for step alone or whole connected steps\n          var checkforwhole = _this.isCheckAllDataset(selected_step);\n          //Get valid xml before validation\n          //AS we pick many blocks and keep them in workspace ,So in that case Valid xml means xml which have final step\n          //Following function find the final step and return that block chain alone\n          var validBlcoks = checkforwhole ? _this.getValidXML() : selected_step.getRootBlock();\n          Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\n          //Blocks to xml\n          validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\n          //Get valid xml End\n        }\n        //For initial load if action is update\n        else {\n          //parse xml\n          Blockly.Xml.domToWorkspace(tempWorkspce, Blockly.Xml.textToDom(initialxmlcheck));\n          validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\n        }\n        var errors = [];\n        var dataTableNameVariableNameValidation = function dataTableNameVariableNameValidation() {\n          //check if datatable field has no values\n          Array.from(validXML.querySelectorAll('[name=\"temp_dsname\"]')).some(function (dsfield) {\n            return !isNotNull(dsfield.textContent) ? (validationErr.push('Enter Data Table Name'), true) : false;\n          });\n\n          //check if variable field has no values\n          Array.from(validXML.querySelectorAll('[name=\"temp_varname\"]')).some(function (varfield) {\n            return !isNotNull(varfield.textContent) ? (validationErr.push('Enter Variable Name'), true) : false;\n          });\n        };\n        dataTableNameVariableNameValidation();\n        var all_Blocks = tempWorkspce.getAllBlocks();\n        var NotAvailWkList = {};\n        var isAllUsedStepValid = StepBlockValidation(\"partialstep\", all_Blocks);\n        !initialxmlcheck && !isAllUsedStepValid && validationErr.push('Mapping Rule cannot be empty');\n        //Step Block Validation (FinalStep,Variable step And Datatable step)\n        if (validXML) {\n          //Validate the used block inside the step\n\n          //Filter only variable step and datatable step block\n          //step_type -> datatable steps\n          //step_type_variable -> variable step\n          var all_used_step_blocks = isArray(all_Blocks) ? (all_Blocks || []).filter(function (blk) {\n            return blk.type === \"step_type\" || blk.type === \"step_type_variable\" || blk.type === \"final_step_type\";\n          }) : [];\n          for (var index = 0; index < all_used_step_blocks.length; index++) {\n            var StepBlock = all_used_step_blocks[index];\n            var frst_stmt_bk = StepBlock.getChildren();\n            //check step have any blocks\n            if (frst_stmt_bk[0]) {\n              //Validate the used block inside the step -- Normal validation(isempty,isvalid)\n              var valdteBlk = !NotToValidateBlk ? checkXML(frst_stmt_bk[0].getDescendants(), true) : [];\n              valdteBlk = isArray(valdteBlk) ? valdteBlk : [];\n              validationErr = !NotToValidateBlk ? [].concat(_toConsumableArray(validationErr), _toConsumableArray(valdteBlk)) : [];\n\n              //First get the List variables going to rename\n              var _GetRenameVariables = GetRenameVariables(frst_stmt_bk[0].getDescendants(), SourceDataset, MappingList, form_work_dataset),\n                variableRenameList = _GetRenameVariables.variableRenameList,\n                duplicate = _GetRenameVariables.duplicate;\n\n              //Impact Validation \n              var impact = new ImpactValidation(Standards, SourceDataset, validXML);\n              impact.stepblk = frst_stmt_bk[0].getDescendants();\n              impact.MappingList = MappingList;\n              impact.NotValidateWork = true;\n              impact.variableRenameList = variableRenameList;\n              impact.ImpactValidationOfUsedBlocks();\n              impact.NCICODELISTDATA = NCICODELISTDATA;\n              impact.ImapctNCICodeListValidationWorkspace();\n              //Impact validation end\n\n              //Work Validation Begins\n              //for to filter all the work ,if that block have no error\n              var usedWKExist = true;\n              //first step check workdataset should be []\n              var _WorkDatasetVariableE = WorkDatasetVariableExists(StepBlock, form_work_dataset, variableRenameList),\n                Work_Exist = _WorkDatasetVariableE.Work_Exist,\n                Not_Avail_WkList = _WorkDatasetVariableE.Not_Avail_WkList;\n              if (!Work_Exist) {\n                usedWKExist = false;\n                NotAvailWkList = _objectSpread(_objectSpread({}, NotAvailWkList), Not_Avail_WkList);\n              }\n              //Work validation End\n              if (usedWKExist && !impact.impacted && duplicate.length == 0) {\n                var type = StepBlock.type;\n                switch (type) {\n                  //Variable Operation Step\n                  case \"step_type_variable\":\n                    {\n                      (function () {\n                        //Get @DataTable(TextBOX field ) And @VariableName(TextBOX field ) field of the Step\n                        var DataTable = StepBlock.getFieldValue(\"temp_dsname\");\n                        var VariableName = StepBlock.getFieldValue(\"temp_varname\");\n                        if (DataTable && DataTable.trim() != \"\" && VariableName && VariableName.trim() != \"\") {\n                          //Get the Variable from the dataset of the Variable Used\n                          // Initialise the Fn\n                          var TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\n                          //Set value\n                          TheFnToGetVariable.StepBlock = StepBlock;\n                          //For Which step are we going to filter variable \n                          TheFnToGetVariable.StepType = \"VariableStep\";\n                          TheFnToGetVariable.WorkDataTable = DataTable;\n                          TheFnToGetVariable.ForToGetWorkDataset = true;\n                          TheFnToGetVariable.SourceOfRule = MappingConstruct;\n                          TheFnToGetVariable.variableRenameList = variableRenameList;\n                          //Function start here\n                          var filter_variable = TheFnToGetVariable.init();\n                          var work_variables = filter_variable;\n\n                          //Add custom variable by @VariableName(TextBOX field ) field of the Step\n                          work_variables.push({\n                            \"name\": VariableName,\n                            \"memname\": DataTable\n                          });\n                          //End add custom variable \n\n                          form_work_dataset = usedWKExist ? [].concat(_toConsumableArray(form_work_dataset.filter(function (e) {\n                            return typeof e.memname === \"string\" && e.memname.toLowerCase() !== DataTable.toLowerCase();\n                          })), _toConsumableArray(work_variables)) : form_work_dataset;\n                        }\n                      })();\n                    }\n                    break;\n                  //DataTable Operation Step\n                  case \"step_type\":\n                    {\n                      (function () {\n                        //Get @VariableName(TextBOX field ) And @DataTable(TextBOX field ) field of the Step\n                        var DataTable = StepBlock.getFieldValue(\"temp_dsname\");\n                        if (DataTable && (typeof DataTable === \"string\" || DataTable.trim() !== \"\")) {\n                          //Get the Variable from the dataset of the Variable Used\n                          var TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\n                          //For Which step are we going to filter variable \n                          TheFnToGetVariable.StepType = \"DataTableStep\";\n                          TheFnToGetVariable.StepBlock = StepBlock;\n                          TheFnToGetVariable.WorkDataTable = DataTable;\n                          TheFnToGetVariable.ForToGetWorkDataset = true;\n                          TheFnToGetVariable.variableRenameList = variableRenameList;\n\n                          //here we filter the var from the dataset of the Variable Used\n                          var work_variables = TheFnToGetVariable.init();\n                          form_work_dataset = usedWKExist ? [].concat(_toConsumableArray(form_work_dataset.filter(function (e) {\n                            return typeof e.memname === \"string\" && e.memname.toLowerCase() !== DataTable.toLowerCase();\n                          })), _toConsumableArray(work_variables)) : form_work_dataset;\n                        }\n                      })();\n                    }\n                    break;\n                  case \"final_step_type\":\n                    {\n                      //Get @VariableName(TextBOX field ) And @DataTable(TextBOX field ) field of the Step\n\n                      //Get the Variable from the dataset of the Variable Used\n                      var TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\n                      //For Which step are we going to filter variable \n                      TheFnToGetVariable.StepType = \"WkFinalStep\";\n                      TheFnToGetVariable.StepBlock = StepBlock;\n                      TheFnToGetVariable.WorkDataTable = \"\";\n                      TheFnToGetVariable.ForToGetWorkDataset = true;\n                      //here we filter the var from the dataset of the Variable Used\n                      var work_variables = TheFnToGetVariable.init();\n                    }\n                    break;\n                  default:\n                    break;\n                }\n              } else {\n                impact.impacted && (impacted_block = _objectSpread(_objectSpread({}, impacted_block), impact.ImpactedList));\n                duplicate.length > 0 && duplicateColumn.push(duplicate);\n              }\n            }\n          }\n          combineAllErr = validationErr.length > 0 ? FormErrorIfArray(\"Validation Error\", validationErr) : [];\n          //Work error\n          isObjectCheck(NotAvailWkList) && combineAllErr.push(FormErrorHtmlIfObj(\"The following Works are not available\", NotAvailWkList));\n          //Impact error\n          Object.keys(impacted_block).length > 0 && combineAllErr.push(FormErrorHtmlIfObj(\"The following blocks are impacted\", impacted_block));\n          //column duplication error due to rename\n          duplicateColumn.length > 0 && combineAllErr.push(FormErrorIfArray(\"Rename variables should be unique\", duplicateColumn));\n          combineAllErr.length > 0 && errorModalCallback(combineAllErr);\n          return {\n            wds: form_work_dataset,\n            err: isObjectCheck(combineAllErr)\n          };\n        } else {\n          errorModal(\"XML not valid\");\n          return {\n            err: true,\n            wds: form_work_dataset\n          };\n        }\n      } catch (e) {\n        console.log(e);\n        initialxmlcheck && thisObj.resetWorkDataset();\n        return {\n          err: true,\n          wds: []\n        };\n      }\n    };\n    _this.resetWorkDataset = function () {\n      thisObj.props.addWorkDataset([], function () {\n        return thisObj.setState({\n          WORK_BLOCKS: thisObj.workBlocks([]),\n          WORKVARIABLETYPE1: [],\n          WORKVARIABLETYPE2: [],\n          selected_workDS: \"\"\n        });\n      });\n    };\n    _this.sourceBlocks = function (props) {\n      var SourceDataset = props.allValues.SourceDataset;\n      return SourceDataset.Domain.map(function (source) {\n        var dataSource = _objectSpread(_objectSpread({}, source), {}, {\n          blockType: \"Source\"\n        });\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: source.TABLE_NAME + \"_key\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Block, {\n          editable: false,\n          type: \"dataset_type_multi_source\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"ds_name\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 21\n          }\n        }, source.TABLE_NAME), /*#__PURE__*/React.createElement(\"data\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 21\n          }\n        }, JSON.stringify(_objectSpread(_objectSpread({}, dataSource), {}, {\n          category: \"dataset\",\n          primaryID: source.TABLE_NAME\n        })))));\n      });\n    };\n    _this.targetBlocks = function (props) {\n      var Standards = props.allValues.Standards;\n      var Domain = Standards.Domain;\n      var MappingList = MappingDatas.MappingList;\n      var mappinglistdomains = MappingList.map(function (data, index) {\n        if (MappingList.findIndex(function (e) {\n          return e.cdiscDataStdDomainMetadataID == data.cdiscDataStdDomainMetadataID;\n        }) === index) {\n          var Target = Domain.find(function (x) {\n            return x.cdiscDataStdDomainMetadataID === data.cdiscDataStdDomainMetadataID;\n          });\n          if (Target !== null && typeof Target === \"object\") {\n            var dataTarget = _objectSpread(_objectSpread({}, Target), {}, {\n              blockType: \"Target\"\n            });\n            return /*#__PURE__*/React.createElement(React.Fragment, {\n              key: Target.domain + \"_key\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Block, {\n              editable: false,\n              type: \"dataset_type_multi_target\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Field, {\n              name: \"ds_name\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 29\n              }\n            }, Target.domain), /*#__PURE__*/React.createElement(\"data\", {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 29\n              }\n            }, JSON.stringify(_objectSpread(_objectSpread({}, dataTarget), {}, {\n              category: \"dataset\",\n              primaryID: data.cdiscDataStdDomainMetadataID\n            })))));\n          }\n        }\n      });\n      Domain.map(function (Target) {\n        if (Target.domain.includes(\"_int\")) {\n          var dataTarget = _objectSpread(_objectSpread({}, Target), {}, {\n            blockType: \"Target\"\n          });\n          mappinglistdomains.push( /*#__PURE__*/React.createElement(React.Fragment, {\n            key: Target.domain + \"_key\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 42\n            }\n          }, /*#__PURE__*/React.createElement(Block, {\n            editable: false,\n            type: \"dataset_type_multi_target\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Field, {\n            name: \"ds_name\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 25\n            }\n          }, Target.domain), /*#__PURE__*/React.createElement(\"data\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 777,\n              columnNumber: 25\n            }\n          }, JSON.stringify(_objectSpread(_objectSpread({}, dataTarget), {}, {\n            category: \"dataset\",\n            primaryID: Target.cdiscDataStdDomainMetadataID\n          }))))));\n        }\n      });\n      return mappinglistdomains;\n    };\n    _this.workBlocks = function (work_datasets) {\n      var workDomains = _toConsumableArray(new Set(work_datasets.map(function (x) {\n        return x.memname;\n      })));\n      //console.log(workDomains)\n      var workBlocks_s = workDomains.map(function (datInfo) {\n        var dataSource = {\n          blockType: \"Work\",\n          name: datInfo\n        };\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: datInfo + \"work_fg_key\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Block, {\n          editable: false,\n          type: \"dataset_type_multi_work\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"ds_name\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 21\n          }\n        }, datInfo), /*#__PURE__*/React.createElement(\"data\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 21\n          }\n        }, JSON.stringify(_objectSpread(_objectSpread({}, dataSource), {}, {\n          category: \"dataset\",\n          primaryID: datInfo\n        })))));\n      });\n      return workBlocks_s;\n    };\n    _this.workVariableBlocks = function (obj, block) {\n      var selected_workDS = _this.state.selected_workDS;\n      //1.filter all the variables that needs to be renamed if Rename block used\n      //2.Check Duplication (do not rename multiple columns with the same name).\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n        props = _assertThisInitialize2.props;\n      var work_datasets = props.work_datasets;\n      var _props$allValues2 = props.allValues,\n        SourceDataset = _props$allValues2.SourceDataset,\n        MappingList = _props$allValues2.MappingList;\n      var _GetRenameVariables2 = GetRenameVariables([block], SourceDataset, MappingList, work_datasets),\n        variableRenameList = _GetRenameVariables2.variableRenameList,\n        duplicate = _GetRenameVariables2.duplicate;\n      if (duplicate.length === 0) {\n        if (selected_workDS !== obj.name) {\n          var type1 = [];\n          var type2 = [];\n          var datasetobj = _this.props.work_datasets.filter(function (v) {\n            return v.memname === obj.name;\n          });\n          if (datasetobj.length > 0) {\n            datasetobj.map(function (vaobj) {\n              //Because of the override to source/original value ,you have to stringify and use.\n              var va_str = JSON.stringify(vaobj);\n              var datInfo = validJSON(va_str);\n              var dataSource = {\n                blockType: \"WorkVar\",\n                type: 'variable',\n                variable: datInfo.name,\n                dataset: obj.name\n              };\n\n              //Rename the variable ,if it is in rename. \n              var rename_obj = variableRenameList[obj.name + \"@_\" + \"WorkVar\"];\n              var renameTo = rename_obj && rename_obj[dataSource.variable] && rename_obj[dataSource.variable].renameTo;\n              dataSource.variable = isNotNull(renameTo) ? renameTo.toUpperCase() : dataSource.variable;\n              type1.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                key: dataSource.variable + \"work_fgv_key\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 838,\n                  columnNumber: 36\n                }\n              }, /*#__PURE__*/React.createElement(Block, {\n                editable: false,\n                type: \"variable_type_work_multi\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 839,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Field, {\n                name: \"var_name\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 840,\n                  columnNumber: 33\n                }\n              }, obj.name, \".\", dataSource.variable.toUpperCase()), /*#__PURE__*/React.createElement(\"data\", {\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 843,\n                  columnNumber: 33\n                }\n              }, JSON.stringify(_objectSpread({}, dataSource))))));\n              type2.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                key: dataSource.variable + \"work_fgv_key\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 846,\n                  columnNumber: 36\n                }\n              }, /*#__PURE__*/React.createElement(Block, {\n                editable: false,\n                type: \"variable_type_work_multi_2\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 847,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Field, {\n                name: \"var_name\",\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 848,\n                  columnNumber: 33\n                }\n              }, obj.name, \".\", dataSource.variable.toUpperCase()), /*#__PURE__*/React.createElement(\"data\", {\n                __self: _assertThisInitialized(_this),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 851,\n                  columnNumber: 33\n                }\n              }, JSON.stringify(_objectSpread({}, dataSource))))));\n            });\n            _this.setState({\n              WORKVARIABLETYPE1: type1,\n              WORKVARIABLETYPE2: type2,\n              selected_workDS: obj.name\n            });\n          }\n        } else {\n          thisObj.RemoveVariables(obj);\n        }\n      } else {\n        errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\n      }\n    };\n    _this.BulkMapDataBlock = function (BulkMapDataObj) {\n      var groupBlock = {};\n      var nciblock = [];\n\n      //Block creation\n      var block = function block(b) {\n        var dataSource = _objectSpread({\n          blockType: \"BulkMapData\"\n        }, b);\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: b.targetVariable + \"_key\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Block, {\n          editable: false,\n          type: \"constant_type_multi\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 877,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"const_str\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 21\n          }\n        }, b.targetDomain + \".\" + b.targetVariable), /*#__PURE__*/React.createElement(\"data\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 21\n          }\n        }, JSON.stringify(_objectSpread(_objectSpread({}, dataSource), {}, {\n          category: \"dataset\"\n        })))));\n      };\n      if (typeof BulkMapDataObj === \"object\" && BulkMapDataObj.length > 20) {\n        BulkMapDataObj.map(function (data) {\n          var firstLetter = typeof data.targetDomain === \"string\" && data.targetDomain.charAt(0);\n          if (firstLetter && firstLetter.match(/^[a-zA-Z]+$/)) {\n            return groupBlock[firstLetter.toUpperCase()] ? groupBlock[firstLetter.toUpperCase()].push(block(data)) : groupBlock[firstLetter.toUpperCase()] = [block(data)];\n          } else {\n            return groupBlock[\"123\"] ? groupBlock[\"123\"].push(block(data)) : groupBlock[\"123\"] = [block(data)];\n          }\n        });\n\n        //Category creation\n        nciblock = Object.keys(groupBlock).map(function (groupName) {\n          return /*#__PURE__*/React.createElement(Category, {\n            name: groupName,\n            colour: \"100\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 24\n            }\n          }, groupBlock[groupName]);\n        });\n      } else {\n        nciblock = BulkMapDataObj.map(function (obj) {\n          return block(obj);\n        });\n      }\n      return {\n        name: \"BulkMapConfig\",\n        block: nciblock\n      };\n    };\n    _this.nciCodeListDataBlock = function (nCICODELISTDATA) {\n      var codelistName = \"\";\n      var groupBlock = {};\n      var nciblock = [];\n\n      //Block creation\n      var block = function block(b) {\n        var dataSource = _objectSpread({\n          blockType: \"NciCodeListData\"\n        }, b);\n        codelistName = b.codelistName;\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: b.cdiscSubmissionValue + \"_key\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 932,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Block, {\n          editable: false,\n          type: \"constant_type_multi\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"const_str\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 21\n          }\n        }, b.cdiscSubmissionValue), /*#__PURE__*/React.createElement(\"data\", {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 21\n          }\n        }, JSON.stringify(_objectSpread(_objectSpread({}, dataSource), {}, {\n          category: \"dataset\"\n        })))));\n      };\n      if (typeof nCICODELISTDATA === \"object\" && nCICODELISTDATA.length > 20) {\n        nCICODELISTDATA.map(function (data) {\n          var firstLetter = data.cdiscSubmissionValue.charAt(0);\n          if (firstLetter.match(/^[a-zA-Z]+$/)) {\n            return groupBlock[firstLetter.toUpperCase()] ? groupBlock[firstLetter.toUpperCase()].push(block(data)) : groupBlock[firstLetter.toUpperCase()] = [block(data)];\n          } else {\n            return groupBlock[\"123\"] ? groupBlock[\"123\"].push(block(data)) : groupBlock[\"123\"] = [block(data)];\n          }\n        });\n\n        //Category creation\n        nciblock = Object.keys(groupBlock).map(function (groupName) {\n          return /*#__PURE__*/React.createElement(Category, {\n            name: groupName,\n            colour: \"100\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 959,\n              columnNumber: 24\n            }\n          }, groupBlock[groupName]);\n        });\n      } else {\n        nciblock = nCICODELISTDATA.map(function (obj) {\n          return block(obj);\n        });\n      }\n      return {\n        name: codelistName,\n        block: nciblock\n      };\n    };\n    _this.SourceVariableBlocks = function (obj, block) {\n      //1.filter all the variables that needs to be renamed if Rename block used\n      //2.Check Duplication (do not rename multiple columns with the same name).\n      var work_datasets = _this.props.work_datasets;\n      var _this$props$allValues = _this.props.allValues,\n        SourceDataset = _this$props$allValues.SourceDataset,\n        MappingList = _this$props$allValues.MappingList;\n      var _GetRenameVariables3 = GetRenameVariables([block], SourceDataset, MappingList, work_datasets),\n        variableRenameList = _GetRenameVariables3.variableRenameList,\n        duplicate = _GetRenameVariables3.duplicate;\n      if (duplicate.length === 0) {\n        var selected_sourceDS = _this.state.selected_sourceDS;\n        if (selected_sourceDS !== obj.TABLE_NAME) {\n          var _SourceDataset = thisObj.props.allValues.SourceDataset;\n          var VariableList = _SourceDataset.Variable.filter(function (va) {\n            return va.TABLE_NAME === obj.TABLE_NAME;\n          });\n          SelectedCategory = {\n            Category: 5\n          };\n          var type1 = [];\n          var type2 = [];\n          var varBlock = VariableList.map(function (vari) {\n            //Because of the override to source/original value ,you have to stringify and use.\n            var va_str = JSON.stringify(vari);\n            var data = validJSON(va_str);\n\n            //Rename the variable ,if a rename block exists \n            var rename_obj = variableRenameList[obj.TABLE_NAME + \"@_\" + \"SourceVar\"];\n            var renameTo = rename_obj && rename_obj[data.COLUMN_NAME] && rename_obj[data.COLUMN_NAME].renameTo;\n            data.COLUMN_NAME = isNotNull(renameTo) ? renameTo.toUpperCase() : data.COLUMN_NAME;\n            data[\"blockType\"] = \"SourceVar\";\n            type1.push( /*#__PURE__*/React.createElement(React.Fragment, {\n              key: \"src_fgmt_key_\" + obj.TABLE_NAME + data.COLUMN_NAME,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1012,\n                columnNumber: 32\n              }\n            }, /*#__PURE__*/React.createElement(Block, {\n              editable: false,\n              type: \"variable_type_source_multi\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1013,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Field, {\n              name: \"var_name\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1014,\n                columnNumber: 29\n              }\n            }, obj.TABLE_NAME, \".\", data.COLUMN_NAME), /*#__PURE__*/React.createElement(\"data\", {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1017,\n                columnNumber: 29\n              }\n            }, JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n              uniqueid: obj.TABLE_NAME\n            }))))));\n            type2.push( /*#__PURE__*/React.createElement(React.Fragment, {\n              key: \"src_fgmt_key_\" + obj.TABLE_NAME + data.COLUMN_NAME,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 32\n              }\n            }, /*#__PURE__*/React.createElement(Block, {\n              editable: false,\n              type: \"variable_type_source_multi_2\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1022,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Field, {\n              name: \"var_name\",\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1023,\n                columnNumber: 29\n              }\n            }, obj.TABLE_NAME, \".\", data.COLUMN_NAME), /*#__PURE__*/React.createElement(\"data\", {\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1026,\n                columnNumber: 29\n              }\n            }, JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n              uniqueid: obj.TABLE_NAME\n            }))))));\n          });\n          thisObj.setState({\n            SOURCEVARIABLETYPE1: type1,\n            SOURCEVARIABLETYPE2: type2,\n            selected_sourceDS: obj.TABLE_NAME\n          });\n        } else {\n          thisObj.RemoveVariables(obj);\n        }\n      } else {\n        errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\n      }\n    };\n    _this.TargetVariableBlocks = function (obj, block) {\n      var work_datasets = _this.props.work_datasets;\n      var _this$props$allValues2 = _this.props.allValues,\n        SourceDataset = _this$props$allValues2.SourceDataset,\n        MappingList = _this$props$allValues2.MappingList;\n\n      //1.filter all the variables that needs to be renamed if Rename block used\n      //2.Check Duplication (do not rename multiple columns with the same name).\n      var _GetRenameVariables4 = GetRenameVariables([block], SourceDataset, MappingList, work_datasets),\n        variableRenameList = _GetRenameVariables4.variableRenameList,\n        duplicate = _GetRenameVariables4.duplicate;\n      if (duplicate.length === 0) {\n        var selected_targetDS = _this.state.selected_targetDS;\n        if (selected_targetDS !== obj.domain) {\n          var Standards = thisObj.props.allValues.Standards;\n\n          //For HighLight node\n          SelectedCategory = {\n            Category: 6\n          };\n          var variablesList = Standards.Variable.filter(function (variable) {\n            return variable.cdiscDataStdDomainMetadataID === obj.cdiscDataStdDomainMetadataID;\n          });\n          var type1 = [];\n          var type2 = [];\n          variablesList.map(function (vari) {\n            //Because of the override to source/original value ,you have to stringify and use.\n            var va_str = JSON.stringify(vari);\n            var variable = validJSON(va_str);\n            var mappingConstruct = MappingDatas.MappingList.filter(function (mapper) {\n              return mapper.cdiscDataStdVariableMetadataID === variable.cdiscDataStdVariableMetadataID;\n            });\n\n            //Rename the variable ,if its is in the rename list \n            var rename_obj = variableRenameList[obj.domain + \"@_\" + \"TargetVar\"];\n            var renameTo = rename_obj && rename_obj[variable.variableName] && rename_obj[variable.variableName].renameTo;\n            var col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : variable.variableName;\n            variable.variableName = col_Name;\n            variable[\"blockType\"] = \"TargetVar\";\n            if (typeof mappingConstruct === 'object' && mappingConstruct && mappingConstruct.length > 0 || obj.domain.includes(\"_int\")) {\n              type1.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                key: \"tgtfmt_var_\" + col_Name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1093,\n                  columnNumber: 36\n                }\n              }, /*#__PURE__*/React.createElement(Block, {\n                editable: false,\n                type: \"variable_type_target_multi\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1094,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Field, {\n                name: \"var_name\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1095,\n                  columnNumber: 33\n                }\n              }, obj.domain, \".\", col_Name), /*#__PURE__*/React.createElement(\"data\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1098,\n                  columnNumber: 33\n                }\n              }, JSON.stringify(_objectSpread(_objectSpread({}, variable), {}, {\n                domain: obj.domain,\n                uniqueid: obj.cdiscDataStdDomainMetadataID\n              }))))));\n              type2.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                key: \"tgtfmt_var_\" + variable.variableName,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1102,\n                  columnNumber: 36\n                }\n              }, /*#__PURE__*/React.createElement(Block, {\n                editable: false,\n                type: \"variable_type_target_multi_2\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Field, {\n                name: \"var_name\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1104,\n                  columnNumber: 33\n                }\n              }, obj.domain, \".\", col_Name), /*#__PURE__*/React.createElement(\"data\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1107,\n                  columnNumber: 33\n                }\n              }, JSON.stringify(_objectSpread(_objectSpread({}, variable), {}, {\n                domain: obj.domain,\n                uniqueid: obj.cdiscDataStdDomainMetadataID\n              }))))));\n            }\n          });\n          thisObj.setState({\n            TARGETVARIABLETYPE1: type1,\n            TARGETVARIABLETYPE2: type2,\n            selected_targetDS: obj.domain\n          });\n        } else {\n          thisObj.RemoveVariables(obj);\n        }\n      } else {\n        errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\n      }\n    };\n    _this.RemoveVariables = function (obj) {\n      if (obj.blockType === \"Source\") {\n        thisObj.setState({\n          SOURCEVARIABLETYPE1: [],\n          SOURCEVARIABLETYPE2: [],\n          selected_sourceDS: \"\"\n        });\n      } else if (obj.blockType === \"Target\") {\n        thisObj.setState({\n          TARGETVARIABLETYPE1: [],\n          TARGETVARIABLETYPE2: [],\n          selected_targetDS: \"\"\n        });\n      } else if (obj.blockType === \"Work\") {\n        thisObj.setState({\n          WORKVARIABLETYPE1: [],\n          WORKVARIABLETYPE2: [],\n          selected_workDS: \"\"\n        });\n      }\n    };\n    _this.hideMapperModal = function (flag) {\n      if (flag === \"Cancel\") {\n        _this.props.hideMapperModal();\n      }\n    };\n    _this.saveRule = function () {\n      var ChangeReason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Created\";\n      var saveProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _thisObj$props$allVal = thisObj.props.allValues,\n        SourceDataset = _thisObj$props$allVal.SourceDataset,\n        Standards = _thisObj$props$allVal.Standards;\n      var _assertThisInitialize3 = _assertThisInitialized(_this),\n        props = _assertThisInitialize3.props;\n      var sourceObj = props.sourceObj,\n        selectedTargetObj = props.selectedTargetObj,\n        MappingConstruct = props.MappingConstruct,\n        action = props.action,\n        work_datasets = props.work_datasets;\n      var TargetDomainID = selectedTargetObj.TargetDomainID,\n        TargetVariableID = selectedTargetObj.TargetVariableID;\n\n      //Create and Update \n      var xml = _this.getValidXML();\n      xml = _this.wrapXMLTag(xml);\n      if (xml) {\n        var used_dset_var_from_finalstp = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, work_datasets);\n        //For Which step are we going to filter variable \n        used_dset_var_from_finalstp.StepType = \"FinalStep\";\n        var values = {\n          ConstructJson: xml,\n          ConstructString: \"\",\n          MappingXML: \"\",\n          StudyID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID,\n          CDISCDataStdDomainMetadataID: MappingConstruct.cdiscDataStdDomainMetadataID !== undefined ? MappingConstruct.cdiscDataStdDomainMetadataID : TargetDomainID,\n          CDISCDataStdVariableMetadataID: MappingConstruct.cdiscDataStdVariableMetadataID !== undefined ? MappingConstruct.cdiscDataStdVariableMetadataID : TargetVariableID,\n          SourceDataset: action === UPDATE ? MappingConstruct.sourceDataset : sourceObj.TABLE_NAME,\n          SourceVariableName: action === UPDATE ? MappingConstruct.sourceVariableName : sourceObj.COLUMN_NAME,\n          ChangeReason: ChangeReason,\n          action: thisObj.props.action,\n          Order: action === UPDATE ? MappingConstruct.Order : 0,\n          isCheckedOut: saveProgress ? 1 : 0,\n          Extra1: \"\",\n          Extra2: used_dset_var_from_finalstp.init(used_dset_var_from_finalstp),\n          impact: saveProgress ? MappingConstruct.impact : 0,\n          Status: action === UPDATE ? MappingConstruct.Status : \"\",\n          UpdatedDateTimeText: MappingConstruct.updatedDateTimeText\n        };\n        //if (action == UPDATE) {\n        values.MappingConstructID = MappingConstruct.mappingConstructID;\n        if (xml.includes(\"custom_program_type\")) {\n          values[\"MappingProgram\"] = thisObj.state.customprogram;\n          values[\"PythonProgram\"] = thisObj.state.customprogram;\n        }\n        // Loader\n        var urltocall = saveProgress ? \"MappingOperations/SaveProgress\" : \"MappingOperations/UpdateMappingOperations\";\n        showProgress();\n        PostCallWithZone(urltocall, values).then(function (response) {\n          var responseData = response;\n          if (responseData.status == 1) {\n            if (saveProgress) {\n              message.destroy();\n              message.success('Rule progress saved successfully!', 0.5);\n              hideProgress();\n            } else {\n              setSessionValue(\"MappingDeleteIsCheckOut\", null);\n              setSessionValue(\"MappingUpdateIsCheckOut\", null);\n              thisObj.setState({\n                showConfirmation: false\n              });\n              successModalCallback(response.message, function () {\n                return thisObj.props.clearWorkSpace(\"refresh\");\n              });\n            }\n          } else {\n            errorModal(response.message);\n          }\n          hideProgress();\n        });\n      }\n    };\n    _this.getValidXML = function () {\n      var XMLOfAllUsedBlock = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\n      //Cretae one temp workspace(@Note:if use actual workspace one copy will create in actual workspace.So create temp workspace)\n      var tempWorkSpace = new Blockly.Workspace();\n      var validXML = \"\";\n      var result = Array.from(XMLOfAllUsedBlock.childNodes).some(function (b) {\n        var block = Blockly.Xml.domToBlock(tempWorkSpace, b);\n        var loopToFindIsFinal_step_type_ExistOrNot = function loopToFindIsFinal_step_type_ExistOrNot(blo) {\n          var nxt = blo.getNextBlock();\n          return blo.type === \"final_step_type\" ? (validXML = block, true) : nxt ? loopToFindIsFinal_step_type_ExistOrNot(nxt) : false;\n        };\n        return loopToFindIsFinal_step_type_ExistOrNot(block);\n      });\n      return result ? validXML : result;\n    };\n    _this.wrapXMLTag = function (validBlockChain) {\n      return \" <xml xmlns=\\\"https://developers.google.com/blockly/xml\\\">\" + new XMLSerializer().serializeToString(Blockly.Xml.blockToDom(validBlockChain)) + \"</xml>\";\n    };\n    _this.validateRule = function () {\n      var _assertThisInitialize4 = _assertThisInitialized(_this),\n        props = _assertThisInitialize4.props;\n      var action = props.action;\n      //Create and Update \n\n      //Get valid xml first and the validate\n      //we can creat many block .So in that case Valid xml means xml which have final step\n      //Following function find the final step and return that block chain alone\n      var validBlcoks = _this.getValidXML();\n      var tempWorkspce = new Blockly.Workspace();\n      Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\n\n      //Blocks to xml\n      var validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\n\n      //First one is for initial load, Sec param is block and third one is dontShowErrMsg\n      var _thisObj$fnToGetWorkD = thisObj.fnToGetWorkDataset(false, validBlcoks, false),\n        wds = _thisObj$fnToGetWorkD.wds,\n        err = _thisObj$fnToGetWorkD.err;\n      if (!err) {\n        if (action === \"Create\") {\n          thisObj.saveRule();\n        } else {\n          thisObj.props.addWorkDataset(wds, function () {\n            return thisObj.setState({\n              WORK_BLOCKS: thisObj.workBlocks(wds),\n              WORKVARIABLETYPE1: [],\n              WORKVARIABLETYPE2: [],\n              selected_workDS: \"\",\n              showConfirmation: true\n            });\n          });\n        }\n      } else {\n        thisObj.props.addWorkDataset(wds, function () {\n          return thisObj.setState({\n            WORK_BLOCKS: thisObj.workBlocks(wds),\n            WORKVARIABLETYPE1: [],\n            WORKVARIABLETYPE2: [],\n            selected_workDS: \"\"\n          });\n        });\n      }\n    };\n    _this.impactedBlkPresent = function (workspce) {\n      var AllValidBlocks = workspce.getAllBlocks();\n      var _this$props$allValues3 = _this.props.allValues,\n        SourceDataset = _this$props$allValues3.SourceDataset,\n        MappingList = _this$props$allValues3.MappingList;\n      var Variable = SourceDataset.Variable;\n\n      //For Src\n      var getAllSrcBlk = AllValidBlocks.filter(function (c) {\n        var data = validJSON(c.data);\n        if (data) {\n          return data.blockType === \"SourceVar\";\n        }\n      });\n      //For Target\n      var getAllTargetBlk = AllValidBlocks.filter(function (c) {\n        var data = validJSON(c.data);\n        if (data) {\n          return data.blockType === \"TargetVar\";\n        }\n      });\n\n      //is used src avl in current study src\n      var UsedSrcNotAvl = getAllSrcBlk.map(function (srcblk) {\n        var srcobj = validJSON(srcblk.data);\n        //Variable var is actual source variable\n        //srcobj is used block srcobj\n        return Variable.some(function (va) {\n          return va.TABLE_NAME === srcobj.TABLE_NAME && va.COLUMN_NAME === srcobj.COLUMN_NAME;\n        });\n      }).some(function (isaval) {\n        return !isaval;\n      });\n\n      //is used targ avl in current study version target\n      var UsedTarNotAvl = getAllTargetBlk.map(function (tarblk) {\n        var tarobj = validJSON(tarblk.data);\n        //Variable var is actual Std variable\n        //tarobj is used block target\n\n        return MappingList.some(function (va) {\n          //let getDomain = Standards.Domain.find(d => d.cdiscDataStdDomainMetadataID === va.cdiscDataStdDomainMetadataID);\n          return tarobj.domain === va.targetDataSet && va.targetVariableName === tarobj.variableName;\n        });\n      }).some(function (isaval) {\n        return !isaval;\n      });\n      return UsedSrcNotAvl || UsedTarNotAvl;\n    };\n    _this.handleChangeReasonCancel = function () {\n      thisObj.setState({\n        showConfirmation: false\n      });\n    };\n    _this.handleSASResult = function (response) {\n      _this.setState({\n        log: response[\"LOG\"],\n        lstHTML: response[\"LST\"],\n        resultSet: JSON.parse(response[\"dataset\"])\n      });\n    };\n    _this.setProgress = function (show) {\n      _this.setState({\n        loading: show\n      });\n    };\n    _this.genrateProgram = function () {\n      var stepxml = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var _assertThisInitialize5 = _assertThisInitialized(_this),\n        props = _assertThisInitialize5.props;\n      var selectedTargetObj = props.selectedTargetObj,\n        allValues = props.allValues,\n        NCICODELISTDATA = props.NCICODELISTDATA,\n        work_datasets = props.work_datasets;\n      var Standards = allValues.Standards,\n        SourceDataset = allValues.SourceDataset,\n        MappingList = allValues.MappingList;\n\n      //Code to put validation for Generate Program\n      //Transbot 1.0.1\n      //Demo update\n      var cus_pro = Blockly.getMainWorkspace().getBlocksByType(\"custom_program_type\");\n      if (cus_pro.length === 0 || !cus_pro.some(function (x) {\n        return x.getParent() && x.getParent().type === \"final_step_type\";\n      })) {\n        //Create and Update \n\n        //Get valid xml first and the validate\n        //we can creat many block .So in that case Valid xml means xml which have final step\n        //Following function find the final step and return that block chain alone\n        var validBlcoks = _this.getValidXML();\n        var tempWorkspce = new Blockly.Workspace();\n        Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\n        //Blocks to xml\n        var validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\n        //First one is for initial load, Sec param is block and third one is dontShowErrMsg\n        var _thisObj$fnToGetWorkD2 = thisObj.fnToGetWorkDataset(false, validBlcoks, false),\n          wds = _thisObj$fnToGetWorkD2.wds,\n          err = _thisObj$fnToGetWorkD2.err;\n        if (!err) {\n          tempWorkspce.dispose();\n          thisObj.props.addWorkDataset(wds, function () {\n            return thisObj.setState({\n              WORK_BLOCKS: thisObj.workBlocks(wds),\n              WORKVARIABLETYPE1: [],\n              WORKVARIABLETYPE2: [],\n              selected_workDS: \"\"\n            }, function () {\n              return thisObj.getSASMacro();\n            });\n          });\n        } else {\n          thisObj.props.addWorkDataset(wds, function () {\n            return thisObj.setState({\n              WORK_BLOCKS: thisObj.workBlocks(wds),\n              WORKVARIABLETYPE1: [],\n              WORKVARIABLETYPE2: [],\n              selected_workDS: \"\"\n            });\n          });\n        }\n      } else {\n        thisObj.setState({\n          sasmacro: _this.state.customprogram,\n          dsName: \"\",\n          log: \"\"\n        });\n        props.fnToShowHideProgramArea(true);\n      }\n    };\n    _this.getSASMacro = function () {\n      var stepxml = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var _assertThisInitialize6 = _assertThisInitialized(_this),\n        props = _assertThisInitialize6.props;\n      var programType = _this.state.programType;\n      var sourceObj = props.sourceObj,\n        selectedTargetObj = props.selectedTargetObj,\n        MappingConstruct = props.MappingConstruct,\n        action = props.action,\n        allValues = props.allValues;\n      var TargetDomainID = selectedTargetObj.TargetDomainID,\n        TargetVariableID = selectedTargetObj.TargetVariableID;\n\n      //Get valid xml first and the validate\n      //we can creat many block .So in that case Valid xml means xml which have final step\n      //Following function find the final step and return that block chain alone\n      var tempxml = _this.getValidXML();\n      tempxml = _this.wrapXMLTag(tempxml);\n      var xml = stepxml === \"\" ? tempxml : true;\n      if (xml) {\n        var XMLValue = stepxml === \"\" ? xml : stepxml;\n        var values = {\n          ConstructJson: XMLValue,\n          ConstructString: \"\",\n          MappingXML: \"\",\n          StudyID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID,\n          CDISCDataStdDomainMetadataID: action === UPDATE ? MappingConstruct.cdiscDataStdDomainMetadataID : TargetDomainID,\n          CDISCDataStdVariableMetadataID: action === UPDATE ? MappingConstruct.cdiscDataStdVariableMetadataID : TargetVariableID,\n          SourceDataset: action === UPDATE ? MappingConstruct.sourceDataset : sourceObj.TABLE_NAME,\n          SourceVariableName: action === UPDATE ? MappingConstruct.sourceVariableName : sourceObj.COLUMN_NAME\n        };\n        showProgress();\n        if (stepxml === \"\") {\n          CallServerPost(\"MappingOperations/GenMacro\", values).then(function (response) {\n            var responseData = response;\n            if (responseData.status == 1) {\n              thisObj.setState({\n                sasmacro: programType == 1 ? responseData.value.pythonProgram : responseData.value.mappingProgram,\n                dsName: \"\".concat(responseData.value.domain)\n              });\n              props.fnToShowHideProgramArea(true);\n            } else {\n              errorModal(response.message);\n            }\n            hideProgress();\n          });\n        } else {\n          return CallServerPost(\"MappingOperations/GenMacro\", values).then(function (response) {\n            var responseData = response;\n            if (responseData.status == 1) {\n              return programType == 1 ? responseData.value.pythonProgram : responseData.value.mappingProgram;\n            } else {\n              return \"\";\n            }\n          });\n        }\n      }\n    };\n    _this.executeMacro = function () {\n      var thisObj = _assertThisInitialized(_this);\n      var execmacro = _this.state.sasmacro;\n      showProgress();\n      var ds = '';\n      var domain = '';\n      if (_this.props.action == CREATE) {\n        ds = \"FX\".concat(_this.props.selectedTargetObj.TargetDomain, \"_\").concat(_this.props.selectedTargetObj.TargetVariable);\n        domain = _this.props.selectedTargetObj.TargetDomain;\n      } else if (_this.props.action == UPDATE) {\n        ds = \"FX\".concat(_this.props.MappingConstruct.targetDataSet, \"_\").concat(_this.props.MappingConstruct.targetVariableName);\n        domain = _this.props.MappingConstruct.targetDataSet;\n      }\n      var StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\n      CallServerPost(\"Py/ExecSasTemp\", {\n        'program': execmacro,\n        'dataset': ds,\n        StudyID: StudyID,\n        'domain': domain,\n        'username': JSON.parse(sessionStorage.userProfile).userName\n      }).then(function (response) {\n        if (response.status == 1) {\n          var res = response.value;\n          if (res !== null && \"LOG\" in res) {\n            thisObj.setState({\n              log: res[\"LOG\"],\n              lstHTML: res[\"LST\"]\n            });\n            if (\"dataset\" in res && res[\"dataset\"] != \"\") {\n              thisObj.props.addWorkTable(JSON.parse(res[\"dataset\"]), ds);\n            }\n          } else {\n            errorModal(\"Something went wrong!\");\n          }\n        }\n        hideProgress();\n      });\n    };\n    _this.getStep = function () {\n      // let xml = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\n      //console.log(xml.querySelector('[type=\"step_type\"]'));\n      return \"Step 1\";\n    };\n    _this.setCurrentStep = function (currStep) {\n      //this.setState({ currentStep: currStep });\n    };\n    _this.addNewWorkData = function () {};\n    _this.executeFromTop = function (block_selected) {\n      try {\n        var allValues = thisObj.props.allValues;\n        var allblocks = block_selected.getRootBlock();\n\n        //Blocks to xml\n        var validXML = Blockly.Xml.blockToDom(allblocks);\n        //selected block to xml,for to remove next connection\n        var selectedXML = Blockly.Xml.blockToDom(block_selected);\n        if (selectedXML.children[selectedXML.children.length - 1].localName == \"next\") {\n          if (block_selected.id === validXML.id) {\n            validXML.children[validXML.children.length - 1].remove();\n          } else {\n            var selxml = validXML.querySelector('[id=\"' + block_selected.id + '\"]');\n            selxml.children[selectedXML.children.length - 1].remove();\n          }\n        }\n        //validate selected block \n        //Following function find the step and return that block chain alone\n        //Validate selected step block alone\n        var tempWorkspce = new Blockly.Workspace();\n        Blockly.Xml.domToBlock(tempWorkspce, validXML);\n        var validBlcoks = tempWorkspce.getAllBlocks();\n        var th = _assertThisInitialized(_this);\n\n        //First one is for initial load, Sec param is block and third one is dontShowErrMsg\n        var _thisObj$fnToGetWorkD3 = thisObj.fnToGetWorkDataset(false, validBlcoks[0]),\n          wds = _thisObj$fnToGetWorkD3.wds,\n          err = _thisObj$fnToGetWorkD3.err;\n        if (!err) {\n          var dsxml = validXML.querySelectorAll('[name=\"temp_dsname\"]');\n          var datasetName = dsxml[dsxml.length - 1].textContent;\n          var variablename = block_selected.getField(\"temp_varname\");\n          if (datasetName !== \"\" && (!variablename || variablename.getValue() !== \"\")) {\n            var XMLValue = new XMLSerializer().serializeToString(validXML);\n            var xmlfinal = \"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\">\" + XMLValue + \"</xml>\";\n            //console.log(xmlfinal);\n\n            thisObj.props.addWorkDataset(wds, function () {\n              return thisObj.setState({\n                WORK_BLOCKS: thisObj.workBlocks(wds),\n                WORKVARIABLETYPE1: [],\n                WORKVARIABLETYPE2: [],\n                selected_workDS: \"\"\n              }, function () {\n                _this.getSASMacro(xmlfinal).then(function (macro) {\n                  //console.log(macro);\n                  if (macro !== \"\") {\n                    th.executeStepMacro(macro, datasetName, variablename);\n                  } else {\n                    hideProgress();\n                  }\n                });\n              });\n            });\n          } else {\n            var errorMsg = [];\n            datasetName === \"\" && errorMsg.push( /*#__PURE__*/React.createElement(\"div\", {\n              key: errorMsg.length + 1,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1579,\n                columnNumber: 57\n              }\n            }, errorMsg.length + 1, \". \", \"Enter Data Table Name.\"));\n            variablename && variablename.getValue() === \"\" && errorMsg.push( /*#__PURE__*/React.createElement(\"div\", {\n              key: errorMsg.length + 1,\n              __self: _assertThisInitialized(_this),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1580,\n                columnNumber: 87\n              }\n            }, errorMsg.length + 1, \". \", \"Enter Variable Name.\"));\n            errorModal(errorMsg);\n          }\n        } else {\n          thisObj.props.addWorkDataset(wds, function () {\n            return thisObj.setState({\n              WORK_BLOCKS: thisObj.workBlocks(wds),\n              WORKVARIABLETYPE1: [],\n              WORKVARIABLETYPE2: [],\n              selected_workDS: \"\"\n            });\n          });\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    _this.executeStep = function (block_selected) {\n      try {\n        var _thisObj$props = thisObj.props,\n          selectedTargetObj = _thisObj$props.selectedTargetObj,\n          allValues = _thisObj$props.allValues,\n          NCICODELISTDATA = _thisObj$props.NCICODELISTDATA,\n          work_datasets = _thisObj$props.work_datasets;\n        var Standards = allValues.Standards,\n          SourceDataset = allValues.SourceDataset,\n          MappingList = allValues.MappingList;\n\n        //for selected block to validate that block alone\n        var validXML = Blockly.Xml.blockToDom(block_selected);\n        if (validXML.children[validXML.children.length - 1].localName == \"next\") {\n          validXML.children[validXML.children.length - 1].remove();\n        }\n\n        //validate selected block \n        //for selcted \n        //Following function find the step and return that block chain alone\n        //Validate selected step block alone\n        var tempWorkspce1 = new Blockly.Workspace();\n        Blockly.Xml.domToBlock(tempWorkspce1, validXML);\n        //normal validateion & no work validation\n        var validate_sel_blcoks = tempWorkspce1.getAllBlocks();\n        var th = _assertThisInitialized(_this);\n\n        //for rename\n        var root_blk = block_selected.getRootBlock();\n        //1.filter all the variables that needs to be renamed if Rename block used\n        //2.Check Duplication (do not rename multiple columns with the same name).\n        var _GetRenameVariables5 = GetRenameVariables(validate_sel_blcoks, SourceDataset, MappingList, work_datasets),\n          variableRenameList = _GetRenameVariables5.variableRenameList,\n          duplicate = _GetRenameVariables5.duplicate;\n        var impact = new ImpactValidation(Standards, SourceDataset, validXML);\n        impact.stepblk = validate_sel_blcoks;\n        impact.MappingList = MappingList;\n        impact.WorkDatatset = [];\n        impact.variableRenameList = variableRenameList;\n        impact.ImpactValidationOfUsedBlocks();\n        impact.NCICODELISTDATA = NCICODELISTDATA;\n        !impact.impacted && impact.ImapctNCICodeListValidationWorkspace();\n        if (validXML && StepBlockValidation(\"step_type_and_step_type_variable\", validate_sel_blcoks)) {\n          if (checkXML(validate_sel_blcoks)) {\n            if (!impact.impacted && duplicate.length == 0) {\n              var datasetName = validXML.querySelector('[name=\"temp_dsname\"]').textContent;\n              var variablename = block_selected.getField(\"temp_varname\");\n              if (datasetName !== \"\" && (!variablename || variablename.getValue() !== \"\")) {\n                var XMLValue = new XMLSerializer().serializeToString(validXML);\n                var xmlfinal = \"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\">\" + XMLValue + \"</xml>\";\n                //console.log(xmlfinal);\n\n                _this.getSASMacro(xmlfinal).then(function (macro) {\n                  //console.log(macro);\n                  if (macro !== \"\") {\n                    th.executeStepMacro(macro, datasetName, variablename);\n                  } else {\n                    hideProgress();\n                  }\n                });\n              } else {\n                var errorMsg = [];\n                datasetName === \"\" && errorMsg.push( /*#__PURE__*/React.createElement(\"div\", {\n                  key: errorMsg.length + 1,\n                  __self: _assertThisInitialized(_this),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1659,\n                    columnNumber: 65\n                  }\n                }, errorMsg.length + 1, \". \", \"Enter Data Table Name.\"));\n                variablename && variablename.getValue() === \"\" && errorMsg.push( /*#__PURE__*/React.createElement(\"div\", {\n                  key: errorMsg.length + 1,\n                  __self: _assertThisInitialized(_this),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1660,\n                    columnNumber: 95\n                  }\n                }, errorMsg.length + 1, \". \", \"Enter Variable Name.\"));\n                errorModal(errorMsg);\n              }\n            } else {\n              var err = [];\n              //!impact.work_exist && (err.push(FormErrorHtmlIfObj(\"The following Works are not available\", impact.NotAvailWorkList)));\n              //Impact error\n              impact.impacted && err.push(FormErrorHtmlIfObj(\"The following blocks are impacted\", impact.ImpactedList));\n\n              //column duplication error due to rename\n              duplicate.length > 0 && err.push(FormErrorIfArray(\"Rename variables should be unique\", duplicate));\n              errorModal(err);\n            }\n          }\n        } else {\n          errorModal(\"Mapping Rule cannot be empty.\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    _this.executeStepMacro = function () {\n      var stepmacro = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var dsname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var varname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      var thisObj = _assertThisInitialized(_this);\n      var work_datasets = thisObj.props.work_datasets;\n      var execmacro = stepmacro;\n      var StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\n      showProgress();\n      var ds = '';\n      ds = dsname;\n      var domain = '';\n      if (_this.props.action == CREATE) {\n        domain = _this.props.selectedTargetObj.TargetDomain;\n      } else if (_this.props.action == UPDATE) {\n        domain = _this.props.MappingConstruct.targetDataSet;\n      }\n      CallServerPost(\"Py/ExecSasWork\", {\n        'program': execmacro,\n        'dataset': ds,\n        'username': JSON.parse(sessionStorage.userProfile).userName,\n        'domain': domain,\n        StudyID: StudyID\n      }).then(function (response) {\n        hideProgress();\n        if (response.status == 1 && 'value' in response) {\n          var res = response.value;\n          if (res != undefined && res != null && res !== \"\") {\n            if (\"LOG\" in res && \"LST\" in res) {\n              thisObj.setState({\n                log: res[\"LOG\"],\n                lstHTML: res[\"LST\"],\n                sasmacro: execmacro\n              });\n            } else if (\"LOG\" in res) {\n              thisObj.setState({\n                log: res[\"LOG\"],\n                sasmacro: execmacro,\n                lstHTML: \"\"\n              });\n            } else {\n              thisObj.setState({\n                sasmacro: execmacro,\n                lstHTML: \"\",\n                log: \"\"\n              });\n            }\n            if (\"dataset\" in res && res[\"dataset\"] != \"\") {\n              var returnJSON = function returnJSON(va) {\n                try {\n                  return JSON.parse(va);\n                } catch (e) {\n                  return [];\n                }\n              };\n              try {\n                thisObj.props.addWorkTable(JSON.parse(res[\"dataset\"]), ds, JSON.parse(res[\"columns\"]), function () {\n                  thisObj.setState({\n                    WORK_BLOCKS: thisObj.workBlocks(thisObj.props.work_datasets)\n                  });\n                });\n              } catch (e) {\n                console.log('invalid json');\n              }\n            }\n          } else {\n            errorModal(\"Something went wrong!\");\n            thisObj.setState({\n              sasmacro: execmacro,\n              lstHTML: \"\",\n              log: res[\"LOG\"]\n            });\n          }\n        } else {\n          errorModal(\"Something went wrong!\");\n          thisObj.setState({\n            sasmacro: execmacro,\n            lstHTML: \"\",\n            log: \"\"\n          });\n        }\n      });\n    };\n    _this.mergeVariables = function (obj) {\n      try {\n        var _thisObj$props$allVal2 = thisObj.props.allValues,\n          SourceDataset = _thisObj$props$allVal2.SourceDataset,\n          Standards = _thisObj$props$allVal2.Standards,\n          MappingList = _thisObj$props$allVal2.MappingList;\n        var merge_name = thisObj.state.merge_name;\n        var work_datasets = thisObj.props.work_datasets;\n        var bothDatasetsPrimaryIds = [];\n\n        //Get Used variable Blocks in Merge block\n        var first_used_dataset = obj.getInputTargetBlock(\"datasets_to_merge\");\n        var second_used_dataset = first_used_dataset.getNextBlock();\n\n        //Get what are all the variable need to Rename  \n        var _GetRenameVariables6 = GetRenameVariables(obj.getDescendants(), SourceDataset, MappingList, work_datasets),\n          variableRenameList = _GetRenameVariables6.variableRenameList,\n          duplicate = _GetRenameVariables6.duplicate;\n        if (duplicate.length == 0) {\n          var getCommonVariavles = function getCommonVariavles(block) {\n            if (block) {\n              if ('data' in block && block.data !== null) {\n                var data = JSON.parse(block.data);\n                switch (data.blockType) {\n                  case \"Source\":\n                    {\n                      bothDatasetsPrimaryIds.push(data.TABLE_NAME);\n\n                      //Rename the variable ,if a rename block exists \n                      var renameVars = variableRenameList[data.TABLE_NAME + \"@_\" + \"SourceVar\"];\n                      var out = {};\n                      SourceDataset.Variable.filter(function (va) {\n                        if (va.TABLE_NAME === data.TABLE_NAME) {\n                          var renameTo = renameVars && renameVars[va.COLUMN_NAME] && renameVars[va.COLUMN_NAME].renameTo;\n                          var col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : va.COLUMN_NAME;\n                          out[col_Name] = _objectSpread(_objectSpread({}, va), {}, {\n                            COLUMN_NAME: col_Name\n                          });\n                        }\n                      });\n                      return out;\n                    }\n                  case \"Target\":\n                    {\n                      var target_variables = {};\n                      var varible = Standards.Variable.filter(function (v) {\n                        return v.cdiscDataStdDomainMetadataID === data.cdiscDataStdDomainMetadataID;\n                      });\n                      bothDatasetsPrimaryIds.push(data.cdiscDataStdDomainMetadataID);\n                      //Rename the variable ,if a rename block exists \n                      var _renameVars = variableRenameList[data.domain + \"@_\" + \"TargetVar\"];\n                      varible.map(function (va) {\n                        var mappingConstruct = MappingDatas.MappingList.find(function (mapper) {\n                          return mapper.cdiscDataStdVariableMetadataID === va.cdiscDataStdVariableMetadataID;\n                        });\n                        if (typeof mappingConstruct === 'object' && mappingConstruct || va.domain && strLowerCase(va.domain).includes('_int')) {\n                          var renameTo = _renameVars && _renameVars[va.variableName] && _renameVars[va.variableName].renameTo;\n                          var col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : va.variableName;\n                          target_variables[col_Name] = _objectSpread(_objectSpread({}, va), {}, {\n                            variableName: col_Name\n                          });\n                        }\n                      });\n                      return target_variables;\n                    }\n                  case \"Work\":\n                    {\n                      var _out = {};\n                      bothDatasetsPrimaryIds.push(data.name);\n                      //Rename the variable ,if a rename block exists \n                      var _renameVars2 = variableRenameList[data.name + \"@_\" + \"WorkVar\"];\n                      work_datasets.filter(function (v) {\n                        if (v.memname.toUpperCase() === data.name.toUpperCase()) {\n                          var renameTo = _renameVars2 && _renameVars2[v.name] && _renameVars2[v.name].renameTo;\n                          var col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : v.name;\n                          _out[col_Name] = _objectSpread(_objectSpread({}, v), {}, {\n                            name: col_Name\n                          });\n                        }\n                      });\n                      return _out;\n                    }\n                }\n              }\n            }\n          };\n          if (first_used_dataset && second_used_dataset) {\n            var firstdataset_data = validJSON(first_used_dataset.data);\n            var firstdataset_name = firstdataset_data.blockType === \"Source\" ? firstdataset_data.TABLE_NAME : firstdataset_data.blockType === \"Target\" ? firstdataset_data.domain : firstdataset_data.name;\n            var seconddataset_data = validJSON(second_used_dataset.data);\n            var seconddataset_name = seconddataset_data.blockType === \"Source\" ? seconddataset_data.TABLE_NAME : seconddataset_data.blockType === \"Target\" ? seconddataset_data.domain : seconddataset_data.name;\n            if (merge_name !== \"Merge(\" + firstdataset_name + \",\" + seconddataset_name + \")\") {\n              //Filter variable here                   \n              var first_datset_variable = getCommonVariavles(first_used_dataset);\n              var second_datset_variable = getCommonVariavles(second_used_dataset);\n              //FInd which dataset is this\n              var F_Dataset_Var_KeyName = firstdataset_data.blockType === \"Source\" ? \"COLUMN_NAME\" : firstdataset_data.blockType === \"Target\" ? \"variableName\" : \"name\";\n              var S_Dataset_Var_KeyName = seconddataset_data.blockType === \"Source\" ? \"COLUMN_NAME\" : seconddataset_data.blockType === \"Target\" ? \"variableName\" : \"name\";\n              //end\n\n              var HTML = [];\n              (Object.keys(first_datset_variable) || []).map(function (fst_dskey) {\n                var vari = first_datset_variable[fst_dskey];\n                if ((Object.keys(second_datset_variable) || []).some(function (sec_dskey) {\n                  return fst_dskey.toLocaleLowerCase() === sec_dskey.toLocaleLowerCase();\n                })) {\n                  var data = vari;\n                  if (data.COLUMN_NAME) {\n                    HTML.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                      key: \"src_fgmt_key_\" + data.TABLE_NAME + data.COLUMN_NAME,\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1864,\n                        columnNumber: 47\n                      }\n                    }, /*#__PURE__*/React.createElement(Block, {\n                      editable: false,\n                      type: \"variable_type_drop_multi\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1865,\n                        columnNumber: 41\n                      }\n                    }, /*#__PURE__*/React.createElement(Field, {\n                      name: \"dropvar_name\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1866,\n                        columnNumber: 45\n                      }\n                    }, data.COLUMN_NAME.toUpperCase()), \"()\", /*#__PURE__*/React.createElement(\"data\", {\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1869,\n                        columnNumber: 33\n                      }\n                    }, JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n                      bothParentDataset: bothDatasetsPrimaryIds.toString()\n                    }))))));\n                  } else if (data.variableName) {\n                    HTML.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                      key: \"tgtfmt_var_\" + data.variableName,\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1874,\n                        columnNumber: 47\n                      }\n                    }, /*#__PURE__*/React.createElement(Block, {\n                      editable: false,\n                      type: \"variable_type_drop_multi\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1875,\n                        columnNumber: 41\n                      }\n                    }, /*#__PURE__*/React.createElement(Field, {\n                      name: \"dropvar_name\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1876,\n                        columnNumber: 45\n                      }\n                    }, data.variableName.toUpperCase()), /*#__PURE__*/React.createElement(\"data\", {\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1879,\n                        columnNumber: 45\n                      }\n                    }, JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n                      bothParentDataset: bothDatasetsPrimaryIds.toString()\n                    }))))));\n                  } else if (data.name) {\n                    HTML.push( /*#__PURE__*/React.createElement(React.Fragment, {\n                      key: data.name + \"work_fgv_key\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1884,\n                        columnNumber: 47\n                      }\n                    }, /*#__PURE__*/React.createElement(Block, {\n                      editable: false,\n                      type: \"variable_type_drop_multi\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1885,\n                        columnNumber: 41\n                      }\n                    }, /*#__PURE__*/React.createElement(Field, {\n                      name: \"dropvar_name\",\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1886,\n                        columnNumber: 45\n                      }\n                    }, data.name.toUpperCase()), /*#__PURE__*/React.createElement(\"data\", {\n                      __self: _assertThisInitialized(_this),\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 1889,\n                        columnNumber: 45\n                      }\n                    }, JSON.stringify(_objectSpread(_objectSpread({}, data), {}, {\n                      bothParentDataset: bothDatasetsPrimaryIds.toString()\n                    }))))));\n                  }\n                  return false;\n                }\n              });\n              thisObj.setState({\n                DROPVAR: [],\n                merge_name: \"\"\n              }, function () {\n                thisObj.setState({\n                  DROPVAR: HTML,\n                  merge_name: \"Merge(\" + firstdataset_name + \",\" + seconddataset_name + \")\"\n                });\n              });\n            } else {\n              thisObj.setState({\n                DROPVAR: [],\n                merge_name: \"\"\n              });\n            }\n          } else {\n            thisObj.setState({\n              DROPVAR: [],\n              merge_name: \"\"\n            });\n          }\n        } else {\n          errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    _this.clearMergeVar = function () {\n      thisObj.setState({\n        DROPVAR: [],\n        merge_name: \"\"\n      });\n    };\n    _this.workspacecancel = function () {\n      var action = _this.props.action;\n      Blockly.DropDownDiv.hide();\n      Blockly.ContextMenu.hide();\n      _this.props.clearWorkSpace(action);\n    };\n    _this.cancelCustom = function () {\n      _this.setState({\n        customVisible: false\n      });\n    };\n    _this.savecustomprogram = function (program) {\n      _this.setState({\n        customVisible: false,\n        customprogram: program\n      });\n    };\n    _this.importFromLibrary = function () {\n      var _this$props = _this.props,\n        MappingConstruct = _this$props.MappingConstruct,\n        action = _this$props.action;\n      _this.props.ImportDataFromMappingLibrary(MappingConstruct, _this.formXMLByMappingLibrary);\n    };\n    _this.formXMLByMappingLibrary = function (importedMappingXML) {\n      Blockly.getMainWorkspace().clear();\n      Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), Blockly.Xml.textToDom(importedMappingXML.constructJson));\n      _this.props.setActiveKey();\n    };\n    _this.getInitxml = function (initialXml, MappingConstruct) {\n      return MappingConstruct && MappingConstruct.constructJson && MappingConstruct.constructJson != \"\" ? MappingConstruct.constructJson : initialXml;\n    };\n    _this.FetchBlocks(_props.mappingBlocks);\n    var actV = _props.activityDetails.find(function (x) {\n      return x.activityText === \"Transformation\" && x.configurationName === \"MappingOutput\";\n    });\n    var progType = 1;\n    if (actV) {\n      progType = parseInt(actV.configurationValue);\n    }\n    _this.state = {\n      initialXml: _this.getInitialXML(_props),\n      SOURCE: _this.sourceBlocks(_props),\n      TARGET: _this.targetBlocks(_props),\n      WORK_BLOCKS: _this.workBlocks(_props.work_datasets),\n      selected_sourceDS: \"\",\n      selected_targetDS: \"\",\n      selected_workDS: \"\",\n      SOURCEVARIABLETYPE1: [],\n      SOURCEVARIABLETYPE2: [],\n      TARGETVARIABLETYPE1: [],\n      TARGETVARIABLETYPE2: [],\n      WORKVARIABLETYPE1: [],\n      WORKVARIABLETYPE2: [],\n      TARGETVARIABLE: [],\n      WORKVARIABLE: [],\n      NCICODELISTDATA: _this.nciCodeListDataBlock(_props.NCICODELISTDATA),\n      bulkMapData: _this.BulkMapDataBlock(_props.bulkMapConfig),\n      DROPVAR: [],\n      merge_name: \"\",\n      showConfirmation: false,\n      blockInit: true,\n      minSize: \"100%\",\n      hasResult: true,\n      log: \"\",\n      resultSet: [],\n      loading: false,\n      lstHTML: \"\",\n      sasmacro: \"\",\n      activeKey: \"1\",\n      dsName: \"\",\n      currentStep: {},\n      toolBox: '',\n      programType: progType,\n      paneSize: {\n        first: \"100%\",\n        second: \"5%\"\n      },\n      showProgramArea: false,\n      viewWorkVariableFrVarStep: [],\n      viewWorkVariableFrDTStep: [],\n      customVisible: false,\n      customprogram: _props.MappingConstruct && _props.MappingConstruct.pythonProgram && _props.MappingConstruct.mappingProgram && _props.MappingConstruct.pythonProgram === _props.MappingConstruct.mappingProgram ? _props.MappingConstruct.mappingProgram : \"\"\n    };\n    thisObj = _assertThisInitialized(_this);\n    //Load workDataset\n    _props.action === UPDATE && _this.GetWorkDatasetWhenLoad();\n    _this.simpleWorkspace = React.createRef();\n    //console.log(Blockly);\n    return _this;\n  }\n  _createClass(BlocklyWorkspace, [{\n    key: \"componentDidUpdate\",\n    value:\n    //componentWillUpdate(nextProps, nextState) {\n    //    //// if (nextProps.action == UPDATE && this.props.action == CREATE) {\n    //    //   Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), nextProps.MappingConstruct.constructJson);\n    //    //  } else if (nextProps.action == CREATE && this.props.action == UPDATE) {\n    //    //      Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), '');\n    //    //  } else if (nextProps.action == UPDATE && nextProps.MappingConstruct.mappingConstructID != this.props.MappingConstruct.mappingConstructID) {\n    //    //      let workspace = Blockly.getMainWorkspace();\n    //    //       Blockly.Xml.domToWorkspace(workspace, nextProps.MappingConstruct.constructJson);\n    //    //   } \n    //}\n    function componentDidUpdate() {\n      var workspace = Blockly.getMainWorkspace();\n\n      //for toolbox highlight after drag the block\n      if (workspace.toolbox_.flyout_.isVisible_) {\n        try {\n          var getCategory = workspace.getToolbox().getToolboxItems()[SelectedCategory.Category];\n          if (getCategory) {\n            getCategory.setSelected(true);\n          }\n        } catch (e) {\n          //console.log(e);\n        }\n      } else {\n        SelectedCategory = {\n          Category: -1\n        };\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Blockly.DropDownDiv.hide();\n      Blockly.ContextMenu.hide();\n    }\n\n    //get Initial XML\n    //Here make xml if rule is empty \n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state = this.state,\n        DROPVAR = _this$state.DROPVAR,\n        merge_name = _this$state.merge_name,\n        WORKVARIABLETYPE1 = _this$state.WORKVARIABLETYPE1,\n        WORKVARIABLETYPE2 = _this$state.WORKVARIABLETYPE2,\n        paneSize = _this$state.paneSize,\n        dsName = _this$state.dsName,\n        sasmacro = _this$state.sasmacro,\n        activeKey = _this$state.activeKey,\n        MappingTitle = _this$state.MappingTitle,\n        SOURCE = _this$state.SOURCE,\n        TARGET = _this$state.TARGET,\n        WORK_BLOCKS = _this$state.WORK_BLOCKS,\n        SOURCEVARIABLETYPE1 = _this$state.SOURCEVARIABLETYPE1,\n        SOURCEVARIABLETYPE2 = _this$state.SOURCEVARIABLETYPE2,\n        TARGETVARIABLETYPE1 = _this$state.TARGETVARIABLETYPE1,\n        TARGETVARIABLETYPE2 = _this$state.TARGETVARIABLETYPE2,\n        selected_sourceDS = _this$state.selected_sourceDS,\n        selected_targetDS = _this$state.selected_targetDS,\n        selected_workDS = _this$state.selected_workDS,\n        showConfirmation = _this$state.showConfirmation,\n        blockInit = _this$state.blockInit,\n        initXML = _this$state.initXML,\n        minSize = _this$state.minSize,\n        log = _this$state.log,\n        resultSet = _this$state.resultSet,\n        loading = _this$state.loading,\n        lstHTML = _this$state.lstHTML,\n        NCICODELISTDATA = _this$state.NCICODELISTDATA,\n        initialXml = _this$state.initialXml,\n        bulkMapData = _this$state.bulkMapData,\n        customVisible = _this$state.customVisible,\n        customprogram = _this$state.customprogram;\n      var _this$props2 = this.props,\n        action = _this$props2.action,\n        showProgramArea = _this$props2.showProgramArea,\n        MappingConstruct = _this$props2.MappingConstruct;\n      var _ref = this.props.action === UPDATE ? MappingConstruct : {},\n        constructJson = _ref.constructJson;\n      var xml = this.props.action === CREATE ? this.getInitxml(initialXml, MappingConstruct) : constructJson && constructJson != \"\" ? constructJson : initialXml;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        id: \"BlocklyWorkspace\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1962,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(SplitPane, {\n        split: \"horizontal\",\n        onChange: function onChange(size) {\n          window.dispatchEvent(new Event('resize'));\n          thisObj.setState({\n            paneSize: {\n              first: size[0] + \"px\",\n              second: size[1] + \"px\"\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1963,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Pane, {\n        initialSize: paneSize.first,\n        minSize: \"10%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1968,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1969,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"100%\",\n          display: blockInit ? \"block\" : \"none\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1970,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(BlocklyComponent, {\n        style: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        ref: this.simpleWorkspace,\n        readOnly: false,\n        move: {\n          scrollbars: true,\n          drag: true,\n          wheel: true\n        },\n        RemoveVariables: this.RemoveVariables,\n        sourceVariableBlocks: this.SourceVariableBlocks,\n        targetVariableBlocks: this.TargetVariableBlocks,\n        workVariableBlocks: this.workVariableBlocks,\n        setCurrentStep: this.setCurrentStep,\n        manualClick: this.manualClick,\n        mergeVariables: this.mergeVariables,\n        clearMergeVar: this.clearMergeVar,\n        initialXml: xml,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1971,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Category, {\n        name: \"Variable Operations\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1989,\n          columnNumber: 37\n        }\n      }, this.props.mappingBlocks.filter(function (b) {\n        return b.view_category === \"variable_ops\";\n      }).map(function (block) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1993,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"data\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1994,\n            columnNumber: 57\n          }\n        }, JSON.stringify({\n          mappingBlockID: block.mappingBlockID,\n          name: block.name,\n          category: block.category,\n          view_category: block.view_category,\n          order: block.order,\n          type: block.type\n        })));\n      })), /*#__PURE__*/React.createElement(Category, {\n        name: \"DataTable Operations\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2000,\n          columnNumber: 37\n        }\n      }, this.props.mappingBlocks.filter(function (b) {\n        return b.view_category === \"datatable_ops\" && b.type.indexOf(\"exec\") === -1;\n      }).map(function (block) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2005,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(\"data\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2006,\n            columnNumber: 61\n          }\n        }, JSON.stringify({\n          mappingBlockID: block.mappingBlockID,\n          name: block.name,\n          category: block.category,\n          view_category: block.view_category,\n          order: block.order,\n          type: block.type\n        })));\n      })), /*#__PURE__*/React.createElement(Category, {\n        name: \"Literals\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2012,\n          columnNumber: 37\n        }\n      }, this.props.mappingBlocks.filter(function (b) {\n        return b.view_category === \"literal_ops\";\n      }).map(function (block) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2016,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"data\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2017,\n            columnNumber: 57\n          }\n        }, JSON.stringify({\n          mappingBlockID: block.mappingBlockID,\n          name: block.name,\n          category: block.category,\n          view_category: block.view_category,\n          order: block.order,\n          type: block.type\n        })));\n      })), /*#__PURE__*/React.createElement(Category, {\n        name: \"Conditions\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2024,\n          columnNumber: 37\n        }\n      }, this.props.mappingBlocks.filter(function (b) {\n        return b.view_category === \"condition_ops\";\n      }).map(function (block) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2028,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"data\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2029,\n            columnNumber: 57\n          }\n        }, JSON.stringify({\n          mappingBlockID: block.mappingBlockID,\n          name: block.name,\n          category: block.category,\n          view_category: block.view_category,\n          order: block.order,\n          type: block.type\n        })));\n      })), /*#__PURE__*/React.createElement(Category, {\n        name: \"Operation Attributes\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2036,\n          columnNumber: 37\n        }\n      }, this.props.mappingBlocks.filter(function (b) {\n        return b.view_category === \"operation_attr_ops\";\n      }).map(function (block) {\n        return /*#__PURE__*/React.createElement(Block, {\n          type: block.type,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2041,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"data\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2042,\n            columnNumber: 57\n          }\n        }, JSON.stringify({\n          mappingBlockID: block.mappingBlockID,\n          name: block.name,\n          category: block.category,\n          view_category: block.view_category,\n          order: block.order,\n          type: block.type\n        })));\n      })), /*#__PURE__*/React.createElement(Category, {\n        name: \"Source DataTable\",\n        colour: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2050,\n          columnNumber: 37\n        }\n      }, SOURCE), /*#__PURE__*/React.createElement(Category, {\n        name: \"Target DataTable\",\n        colour: \"250\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2053,\n          columnNumber: 37\n        }\n      }, TARGET), WORK_BLOCKS.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: \"Work DataTable\",\n        colour: \"250\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2056,\n          columnNumber: 64\n        }\n      }, WORK_BLOCKS), NCICODELISTDATA.block.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: NCICODELISTDATA.name,\n        colour: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2062,\n          columnNumber: 41\n        }\n      }, NCICODELISTDATA.block), bulkMapData.block.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: bulkMapData.name,\n        colour: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2069,\n          columnNumber: 41\n        }\n      }, bulkMapData.block), SOURCEVARIABLETYPE1.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: selected_sourceDS,\n        colour: \"65\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2075,\n          columnNumber: 41\n        }\n      }, SOURCEVARIABLETYPE1), TARGETVARIABLETYPE1.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: selected_targetDS,\n        colour: \"300\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2080,\n          columnNumber: 41\n        }\n      }, TARGETVARIABLETYPE1), WORKVARIABLETYPE1.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: selected_workDS,\n        colour: \"300\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2086,\n          columnNumber: 41\n        }\n      }, WORKVARIABLETYPE1), DROPVAR.length > 0 && /*#__PURE__*/React.createElement(Category, {\n        name: merge_name,\n        colour: \"300\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2092,\n          columnNumber: 41\n        }\n      }, DROPVAR))), /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingTop: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2099,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.workspacecancel(action);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2101,\n          columnNumber: 33\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          float: \"right\"\n        },\n        className: \"ant-btn-primary\",\n        onClick: this.validateRule,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2109,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-save\",\n        style: {\n          paddingRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2114,\n          columnNumber: 37\n        }\n      }), action === CREATE ? CREATE : UPDATE), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          float: \"right\",\n          marginRight: 10\n        },\n        className: \"saveBtn\",\n        disabled: action === CREATE ? true : false,\n        onClick: function onClick() {\n          return _this2.saveRule(\"Progress Save\", true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2117,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-save\",\n        style: {\n          paddingRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2123,\n          columnNumber: 37\n        }\n      }, \" \"), \"Save Progress\"), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          float: \"right\",\n          marginRight: 10,\n          height: 27\n        },\n        className: \"ant-btn-primary\",\n        onClick: function onClick() {\n          _this2.genrateProgram();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2126,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-save\",\n        style: {\n          paddingRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2133,\n          columnNumber: 37\n        }\n      }), \"Generate Program\"), /*#__PURE__*/React.createElement(Button, {\n        className: \"ant-btn tealbtn\",\n        style: {\n          float: \"right\",\n          marginRight: 10,\n          height: 27,\n          backgroundColor: \"#08979C\",\n          color: \"#fff\"\n        },\n        onClick: function onClick() {\n          _this2.importFromLibrary();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2136,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-file-import\",\n        style: {\n          paddingRight: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2149,\n          columnNumber: 37\n        }\n      }), \"Copy From Library\")))), showProgramArea && /*#__PURE__*/React.createElement(Pane, {\n        minSize: \"20px\",\n        initialSize: paneSize.second,\n        style: {\n          display: showProgramArea ? \"block\" : \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2156,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(BlockWorkResult, {\n        log: log,\n        lstHTML: lstHTML,\n        sasmacro: sasmacro,\n        executeMacro: this.executeMacro,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2157,\n          columnNumber: 29\n        }\n      }))), customVisible && /*#__PURE__*/React.createElement(CustomProgram, {\n        targetDomainVariable: this.props.targetDomainVariable,\n        programType: this.state.programType,\n        customVisible: customVisible,\n        saveprogram: this.savecustomprogram,\n        cancelCustom: this.cancelCustom,\n        customprogram: customprogram,\n        activityDetails: this.props.activityDetails,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2162,\n          columnNumber: 38\n        }\n      }), /*#__PURE__*/React.createElement(ConfirmModal, {\n        loading: false,\n        title: \"Update Mapping\",\n        SubmitButtonName: \"Update\",\n        onSubmit: this.saveRule,\n        visible: showConfirmation,\n        handleCancel: function handleCancel() {\n          return _this2.handleChangeReasonCancel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2172,\n          columnNumber: 17\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (!props.showProgramArea && state.showProgramArea) {\n        return {\n          showProgramArea: props.showProgramArea,\n          paneSize: {\n            first: \"100%\",\n            second: \"0%\"\n          }\n        };\n      } else if (props.showProgramArea && !state.showProgramArea) {\n        return {\n          showProgramArea: props.showProgramArea,\n          paneSize: {\n            first: \"70%\",\n            second: \"30%\"\n          }\n        };\n      }\n      return null;\n    }\n  }]);\n  return BlocklyWorkspace;\n}(Component);\nvar WrappedApp = Form.create()(BlocklyWorkspace);\nexport default WrappedApp;","map":{"version":3,"names":["React","Component","ContentTab","Row","Modal","Form","Button","Spin","Icon","Tabs","message","Blockly","FormErrorHtmlIfObj","FormErrorIfArray","checkXML","GetRenameVariables","StepBlockValidation","Get_Var_From_Step","ImpactValidation","WorkDatasetVariableExists","BlocklyComponent","Block","Field","Category","MappingDatas","CREATE","UPDATE","isArray","isNotNull","PostCallWithZone","strLowerCase","successModalCallback","errorModal","errorModalCallback","showProgress","setSessionValue","hideProgress","CallServerPost","validJSON","isObjectCheck","ConfirmModal","axios","Validator","HotTable","HotColumn","SplitPane","BlockWorkResult","CustomProgram","Pane","require","TabPane","thisObj","SelectedCategory","antIcon","fontSize","BlocklyWorkspace","props","getInitialXML","action","MappingConstruct","allValues","SourceDataset","sourceDataset","sourceVariableName","Variable","srcObj","find","va","TABLE_NAME","COLUMN_NAME","JSON","stringify","hideToolBox","workspace","getMainWorkspace","trashcan","flyout","hide","toolbox","getToolbox","getFlyout","autoClose","clearSelection","FetchBlocks","mappingBlocks","thisOb","Promise","resolve","reject","map","mappingBlock","index","validateJSON","json","v","parse","e","blockObj","previousStatement","nextStatement","output","Blocks","type","init","setWarningText","highPriority","category","jsonInit","customContextMenu","options","run_Option","enabled","text","callback","blk","setState","customVisible","scopeType","block","ContextMenuRegistry","ScopeType","BLOCK","unshift","thisBlock","literalValidator","newValue","length","getField","setValidator","tooltip","setTooltip","data","cdiscDefinition","nciPreferredTerm","onchange","name","getBlockById","blockId","setFieldValue","replace","toUpperCase","trim","block_selected","selected","executeStep","run_from_top_Option","executeFromTop","view_WorkVar_Option","GetWorkDatasetWhenManual","then","catch","GetWorkDatasetWhenLoad","constructJson","xml","fnToGetWorkDataset","wds","addWorkDataset","WORK_BLOCKS","workBlocks","WORKVARIABLETYPE1","WORKVARIABLETYPE2","selected_workDS","sel_blk","isCheckAllDataset","getAllConnectedBlock","getDescendants","some","bl","initialxmlcheck","selected_step","NotToValidateBlk","form_work_dataset","err","validationErr","duplicateColumn","impacted_block","combineAllErr","work_datasets","NCICODELISTDATA","Standards","MappingList","tempWorkspce","Workspace","validXML","checkforwhole","validBlcoks","getValidXML","getRootBlock","Xml","domToBlock","blockToDom","workspaceToDom","domToWorkspace","textToDom","errors","dataTableNameVariableNameValidation","Array","from","querySelectorAll","dsfield","textContent","push","varfield","all_Blocks","getAllBlocks","NotAvailWkList","isAllUsedStepValid","all_used_step_blocks","filter","StepBlock","frst_stmt_bk","getChildren","valdteBlk","variableRenameList","duplicate","impact","stepblk","NotValidateWork","ImpactValidationOfUsedBlocks","ImapctNCICodeListValidationWorkspace","usedWKExist","Work_Exist","Not_Avail_WkList","impacted","DataTable","getFieldValue","VariableName","TheFnToGetVariable","StepType","WorkDataTable","ForToGetWorkDataset","SourceOfRule","filter_variable","work_variables","memname","toLowerCase","ImpactedList","Object","keys","console","log","resetWorkDataset","sourceBlocks","Domain","source","dataSource","blockType","primaryID","targetBlocks","mappinglistdomains","findIndex","cdiscDataStdDomainMetadataID","Target","x","dataTarget","domain","includes","workDomains","Set","workBlocks_s","datInfo","workVariableBlocks","obj","state","type1","type2","datasetobj","vaobj","va_str","variable","dataset","rename_obj","renameTo","RemoveVariables","BulkMapDataBlock","BulkMapDataObj","groupBlock","nciblock","b","targetVariable","targetDomain","firstLetter","charAt","match","groupName","nciCodeListDataBlock","nCICODELISTDATA","codelistName","cdiscSubmissionValue","SourceVariableBlocks","selected_sourceDS","VariableList","varBlock","vari","uniqueid","SOURCEVARIABLETYPE1","SOURCEVARIABLETYPE2","TargetVariableBlocks","selected_targetDS","variablesList","mappingConstruct","mapper","cdiscDataStdVariableMetadataID","variableName","col_Name","TARGETVARIABLETYPE1","TARGETVARIABLETYPE2","hideMapperModal","flag","saveRule","ChangeReason","saveProgress","sourceObj","selectedTargetObj","TargetDomainID","TargetVariableID","wrapXMLTag","used_dset_var_from_finalstp","values","ConstructJson","ConstructString","MappingXML","StudyID","sessionStorage","getItem","studyID","CDISCDataStdDomainMetadataID","undefined","CDISCDataStdVariableMetadataID","SourceVariableName","Order","isCheckedOut","Extra1","Extra2","Status","UpdatedDateTimeText","updatedDateTimeText","MappingConstructID","mappingConstructID","customprogram","urltocall","response","responseData","status","destroy","success","showConfirmation","clearWorkSpace","XMLOfAllUsedBlock","tempWorkSpace","result","childNodes","loopToFindIsFinal_step_type_ExistOrNot","blo","nxt","getNextBlock","validBlockChain","XMLSerializer","serializeToString","validateRule","impactedBlkPresent","workspce","AllValidBlocks","getAllSrcBlk","c","getAllTargetBlk","UsedSrcNotAvl","srcblk","srcobj","isaval","UsedTarNotAvl","tarblk","tarobj","targetDataSet","targetVariableName","handleChangeReasonCancel","handleSASResult","lstHTML","resultSet","setProgress","show","loading","genrateProgram","stepxml","cus_pro","getBlocksByType","getParent","dispose","getSASMacro","sasmacro","dsName","fnToShowHideProgramArea","programType","tempxml","XMLValue","value","pythonProgram","mappingProgram","executeMacro","execmacro","ds","TargetDomain","TargetVariable","userProfile","userName","res","addWorkTable","getStep","setCurrentStep","currStep","addNewWorkData","allblocks","selectedXML","children","localName","id","remove","selxml","querySelector","th","dsxml","datasetName","variablename","getValue","xmlfinal","macro","executeStepMacro","errorMsg","tempWorkspce1","validate_sel_blcoks","root_blk","WorkDatatset","stepmacro","dsname","varname","returnJSON","mergeVariables","merge_name","bothDatasetsPrimaryIds","first_used_dataset","getInputTargetBlock","second_used_dataset","getCommonVariavles","renameVars","out","target_variables","varible","firstdataset_data","firstdataset_name","seconddataset_data","seconddataset_name","first_datset_variable","second_datset_variable","F_Dataset_Var_KeyName","S_Dataset_Var_KeyName","HTML","fst_dskey","sec_dskey","toLocaleLowerCase","bothParentDataset","toString","DROPVAR","clearMergeVar","workspacecancel","DropDownDiv","ContextMenu","cancelCustom","savecustomprogram","program","importFromLibrary","ImportDataFromMappingLibrary","formXMLByMappingLibrary","importedMappingXML","clear","setActiveKey","getInitxml","initialXml","actV","activityDetails","activityText","configurationName","progType","parseInt","configurationValue","SOURCE","TARGET","TARGETVARIABLE","WORKVARIABLE","bulkMapData","bulkMapConfig","blockInit","minSize","hasResult","activeKey","currentStep","toolBox","paneSize","first","second","showProgramArea","viewWorkVariableFrVarStep","viewWorkVariableFrDTStep","simpleWorkspace","createRef","toolbox_","flyout_","isVisible_","getCategory","getToolboxItems","setSelected","MappingTitle","initXML","height","size","window","dispatchEvent","Event","display","flexDirection","width","scrollbars","drag","wheel","manualClick","view_category","mappingBlockID","order","indexOf","paddingTop","float","paddingRight","marginRight","backgroundColor","color","targetDomainVariable","WrappedApp","create"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/Mapper/blocklyWorkspace.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport ContentTab from \"../TreeView/contentTab\";\r\nimport {\r\n    Row,\r\n    Modal,\r\n    Form,\r\n    Button,\r\n    Spin,\r\n    Icon,\r\n    Tabs,\r\n    message\r\n} from \"antd\";\r\nimport Blockly from 'blockly/core';\r\nimport { FormErrorHtmlIfObj, FormErrorIfArray, checkXML, GetRenameVariables, StepBlockValidation, Get_Var_From_Step, ImpactValidation, WorkDatasetVariableExists } from './blockValidation';\r\nimport BlocklyComponent, { Block, Field, Category } from './Blockly';\r\nimport { MappingDatas } from '../TreeView/getMappingDatas';\r\nimport { CREATE, UPDATE, isArray, isNotNull, PostCallWithZone, strLowerCase,successModalCallback, errorModal, errorModalCallback, showProgress, setSessionValue, hideProgress, CallServerPost, validJSON, isObjectCheck } from '../Utility/sharedUtility';\r\nimport ConfirmModal from '../Utility/ConfirmModal';\r\nimport axios from 'axios';\r\nimport { Validator } from './validator';\r\nimport { HotTable, HotColumn } from '@handsontable/react';\r\nimport \"handsontable/dist/handsontable.min.css\";\r\nimport SplitPane from 'react-split-pane';\r\nimport BlockWorkResult from './blockWorkResult';\r\nimport CustomProgram from './CustomProgram';\r\n\r\nconst Pane = require('react-split-pane/lib/Pane');\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\nlet thisObj = \"\";\r\nlet SelectedCategory = {};\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nclass BlocklyWorkspace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.FetchBlocks(props.mappingBlocks);\r\n        let actV = props.activityDetails.find(x => x.activityText === \"Transformation\" && x.configurationName === \"MappingOutput\");\r\n        let progType = 1;\r\n        if (actV) {\r\n            progType = parseInt(actV.configurationValue);\r\n        }\r\n        this.state =\r\n        {\r\n            initialXml: this.getInitialXML(props),\r\n            SOURCE: this.sourceBlocks(props),\r\n            TARGET: this.targetBlocks(props),\r\n            WORK_BLOCKS: this.workBlocks(props.work_datasets),\r\n            selected_sourceDS: \"\",\r\n            selected_targetDS: \"\",\r\n            selected_workDS: \"\",\r\n            SOURCEVARIABLETYPE1: [],\r\n            SOURCEVARIABLETYPE2: [],\r\n            TARGETVARIABLETYPE1: [],\r\n            TARGETVARIABLETYPE2: [],\r\n            WORKVARIABLETYPE1: [],\r\n            WORKVARIABLETYPE2: [],\r\n            TARGETVARIABLE: [],\r\n            WORKVARIABLE: [],\r\n            NCICODELISTDATA: this.nciCodeListDataBlock(props.NCICODELISTDATA),\r\n            bulkMapData: this.BulkMapDataBlock(props.bulkMapConfig),\r\n            DROPVAR: [],\r\n            merge_name: \"\",\r\n            showConfirmation: false,\r\n            blockInit: true,\r\n            minSize: \"100%\",\r\n            hasResult: true,\r\n            log: \"\",\r\n            resultSet: [],\r\n            loading: false,\r\n            lstHTML: \"\",\r\n            sasmacro: \"\",\r\n            activeKey: \"1\",\r\n            dsName: \"\",\r\n            currentStep: {},\r\n            toolBox: '',\r\n            programType: progType,\r\n            paneSize: { first: \"100%\", second: \"5%\" },\r\n            showProgramArea: false,\r\n            viewWorkVariableFrVarStep: [],\r\n            viewWorkVariableFrDTStep: [],\r\n            customVisible: false,\r\n            customprogram: props.MappingConstruct && props.MappingConstruct.pythonProgram && props.MappingConstruct.mappingProgram && (props.MappingConstruct.pythonProgram === props.MappingConstruct.mappingProgram) ? props.MappingConstruct.mappingProgram : \"\"\r\n\r\n        };\r\n        thisObj = this;\r\n        //Load workDataset\r\n        props.action === UPDATE && this.GetWorkDatasetWhenLoad();\r\n        this.simpleWorkspace = React.createRef();\r\n        //console.log(Blockly);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (!props.showProgramArea && state.showProgramArea) {\r\n            return {\r\n                showProgramArea: props.showProgramArea,\r\n                paneSize: { first: \"100%\", second: \"0%\" }\r\n            };\r\n        } else if (props.showProgramArea && !state.showProgramArea) {\r\n            return {\r\n                showProgramArea: props.showProgramArea,\r\n                paneSize: { first: \"70%\", second: \"30%\" }\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //componentWillUpdate(nextProps, nextState) {\r\n    //    //// if (nextProps.action == UPDATE && this.props.action == CREATE) {\r\n    //    //   Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), nextProps.MappingConstruct.constructJson);\r\n    //    //  } else if (nextProps.action == CREATE && this.props.action == UPDATE) {\r\n    //    //      Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), '');\r\n    //    //  } else if (nextProps.action == UPDATE && nextProps.MappingConstruct.mappingConstructID != this.props.MappingConstruct.mappingConstructID) {\r\n    //    //      let workspace = Blockly.getMainWorkspace();\r\n    //    //       Blockly.Xml.domToWorkspace(workspace, nextProps.MappingConstruct.constructJson);\r\n    //    //   } \r\n    //}\r\n    componentDidUpdate() {\r\n        let workspace = Blockly.getMainWorkspace();\r\n\r\n        //for toolbox highlight after drag the block\r\n        if (workspace.toolbox_.flyout_.isVisible_) {\r\n            try {\r\n                let getCategory = workspace.getToolbox().getToolboxItems()[SelectedCategory.Category]\r\n                if (getCategory) {\r\n                    getCategory.setSelected(true);\r\n                }\r\n            } catch (e) {\r\n                //console.log(e);\r\n            }\r\n\r\n        } else {\r\n            SelectedCategory = { Category: -1 };\r\n\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        Blockly.DropDownDiv.hide();\r\n        Blockly.ContextMenu.hide();\r\n    }\r\n\r\n    //get Initial XML\r\n    //Here make xml if rule is empty \r\n    getInitialXML = (props) => {\r\n        let { action, MappingConstruct, allValues } = props;\r\n        let { SourceDataset } = allValues;\r\n\r\n\r\n        let { sourceDataset, sourceVariableName } = MappingConstruct;\r\n\r\n        let { Variable } = SourceDataset;\r\n        let srcObj = {};\r\n        srcObj = {\r\n            ...srcObj,\r\n            ...Variable.find(va => va.TABLE_NAME === sourceDataset && va.COLUMN_NAME === sourceVariableName)\r\n        };\r\n\r\n\r\n        srcObj[\"blockType\"] = \"SourceVar\";\r\n        srcObj = JSON.stringify(srcObj);\r\n\r\n        return `<xml xmlns=\"https://developers.google.com/blockly/xml\">\r\n                        <block deletable=\"false\" type=\"final_step_type\" startScrollX=\"30\" startScrollY=\"30\" x=\"30\" y=\"30\" />\r\n                        <block type=\"variable_type_source_multi\" id=\"kkos\" disabled=\"true\" editable=\"false\" x=\"407\" y=\"124\">\r\n                        <field name=\"var_name\">`+ sourceDataset + `.` + sourceVariableName + `</field>\r\n                        <data>`+ srcObj + `</data>\r\n                        </block>\r\n                    </xml>`;\r\n    }\r\n\r\n    hideToolBox = () => {\r\n        var workspace = Blockly.getMainWorkspace();\r\n        // For now the trashcan flyout always autocloses because it overlays the\r\n        // trashcan UI (no trashcan to click to close it).\r\n\r\n        if (workspace.trashcan &&\r\n            workspace.trashcan.flyout) {\r\n            workspace.trashcan.flyout.hide();\r\n        }\r\n        var toolbox = workspace.getToolbox();\r\n        if (toolbox &&\r\n            toolbox.getFlyout() &&\r\n            toolbox.getFlyout().autoClose) {\r\n            toolbox.clearSelection();\r\n        }\r\n    }\r\n\r\n    //Blocks Initialization\r\n    FetchBlocks = (mappingBlocks) => {\r\n        const thisOb = this;\r\n        showProgress();\r\n        new Promise((resolve, reject) => {\r\n            //console.log(mappingBlocks)\r\n            mappingBlocks.map((mappingBlock, index) => {\r\n\r\n                let validateJSON = (json, v = 1) => {\r\n                    try {\r\n                        return JSON.parse(json)\r\n                    } catch (e) {\r\n                        return v === 0 ? json : [];\r\n                    }\r\n\r\n                }\r\n\r\n                var blockObj = {};\r\n                blockObj[\"type\"] = mappingBlock[\"type\"];\r\n                blockObj[\"colour\"] = mappingBlock[\"color\"];\r\n                blockObj[\"args0\"] = validateJSON(mappingBlock[\"args\"]);\r\n                blockObj[\"message0\"] = mappingBlock[\"message\"];\r\n\r\n                if (mappingBlock[\"previousStatement\"]) {\r\n                    blockObj[\"previousStatement\"] = validateJSON(mappingBlock.previousStatement, 0);\r\n                }\r\n                if (mappingBlock[\"nextStatement\"]) {\r\n                    blockObj[\"nextStatement\"] = validateJSON(mappingBlock.nextStatement, 0);\r\n                }\r\n                if (mappingBlock[\"output\"]) {\r\n                    blockObj[\"output\"] = validateJSON(mappingBlock.output, 0);\r\n                }\r\n\r\n                if (mappingBlock[\"inputsInline\"]) {\r\n                    blockObj[\"inputsInline\"] = true;\r\n                }\r\n\r\n                if (mappingBlock[\"type\"] === \"custom_program_type\") {\r\n                    Blockly.Blocks[mappingBlock.type] = {\r\n                        init: function () {\r\n                            //Help Text \r\n                            //set value for help text\r\n                            if (mappingBlock[\"description\"]) {\r\n                                this.setWarningText(mappingBlock[\"description\"])\r\n                            }\r\n\r\n                            //for to enable if it is not used in workspace except step block\r\n                            this.highPriority = mappingBlock.category === \"step\";\r\n                            this.jsonInit(blockObj);\r\n                        },\r\n                        customContextMenu: (options) => {\r\n                            var run_Option = {\r\n                                enabled: true,\r\n                                text: 'Edit Program',\r\n                                callback: function (blk) {\r\n                                    thisOb.setState({ customVisible: true });\r\n                                }\r\n                            }\r\n                            run_Option.scopeType = { block: Blockly.ContextMenuRegistry.ScopeType.BLOCK }\r\n                            options.unshift(run_Option);\r\n\r\n                            return options;\r\n                        },\r\n                    };\r\n                } else if (mappingBlock[\"type\"] !== \"step_type\" && mappingBlock[\"type\"] !== \"step_type_variable\") {\r\n\r\n                    Blockly.Blocks[mappingBlock.type] = {\r\n\r\n                        init: function () {\r\n                            //Help Text \r\n                            //set value for help text\r\n                            if (mappingBlock[\"description\"]) {\r\n                                this.setWarningText(mappingBlock[\"description\"])\r\n                            }\r\n\r\n                            //for to enable if it is not used in workspace except step block\r\n                            this.highPriority = mappingBlock.category === \"step\";\r\n\r\n                            this.jsonInit(blockObj);\r\n\r\n                            var thisBlock = this;\r\n                            if (mappingBlock.type == \"constant_type_multi\") {\r\n                                var literalValidator = function (newValue) {\r\n                                    if (newValue.length > 100) {\r\n                                        return null;\r\n                                    }\r\n                                    return newValue;\r\n                                };\r\n\r\n                                this.getField(\"const_str\").setValidator(literalValidator);\r\n                            }\r\n                            if (mappingBlock.tooltip) {\r\n                                this.setTooltip(function () {\r\n                                    switch (thisBlock.type) {\r\n                                        case \"constant_type_multi\":\r\n                                            {\r\n                                                let data = validJSON(thisBlock.data);\r\n                                                if (data && data.cdiscDefinition && typeof data.cdiscDefinition === \"string\") {\r\n                                                    return data.nciPreferredTerm + \" - \" + data.cdiscDefinition;\r\n                                                }\r\n                                            }\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n\r\n\r\n                        },\r\n                        onchange: function (e) {\r\n                            try {\r\n                                if (typeof (e.name) != \"undefined\") {\r\n                                    switch (e.name) {\r\n                                        case \"input_replace_string_extra\":\r\n                                        case \"input_string_extra\":\r\n                                            {\r\n                                                var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\r\n\r\n                                                if (block) {\r\n                                                    block.setFieldValue(e.newValue.replace(/\\d+/g, ''), e.name);\r\n                                                }\r\n                                                return;\r\n                                            }\r\n                                        //case \"const_str\":\r\n                                        //    var err = [];\r\n                                        //    let txtvalue = e.newValue;\r\n                                        //    let getIFBlk = Blockly.getMainWorkspace().getBlocksByType(\"constant_type_multi\")[0];\r\n                                        //    if (txtvalue.length > 200) {\r\n                                        //        err.push(\"Literal should be less than 200 characters\");\r\n                                        //    } else {\r\n                                        //        getIFBlk.setWarningText(null);\r\n                                        //        if (getIFBlk.warning && getIFBlk.warning.bubble_) {\r\n                                        //            getIFBlk.warning.disposeBubble();\r\n                                        //        }\r\n                                        //    }\r\n                                        //    if (err.length > 0) {\r\n                                               \r\n                                        //        getIFBlk.setWarningText(err.toString());\r\n                                        //        if (getIFBlk.warning && !getIFBlk.warning.bubble_) {\r\n                                        //            getIFBlk.warning.createBubble();\r\n                                        //        }\r\n                                        //        getIFBlk.warning.setVisible(true);\r\n                                        //    }\r\n\r\n                                        //    return;\r\n                                        case \"rename_var\": {\r\n                                            var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\r\n                                            if (block) {\r\n                                                if (e.newValue && typeof e.newValue == \"string\") {\r\n                                                    {\r\n                                                        block.setFieldValue(e.newValue.toUpperCase().trim(), e.name);\r\n                                                    }\r\n                                                }\r\n                                                return;\r\n                                            }\r\n                                        }\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n\r\n                                }\r\n                            } catch (e) {\r\n                                //console.log(e);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (mappingBlock[\"type\"] === \"step_type\" || mappingBlock[\"type\"] === \"step_type_variable\") {\r\n                    Blockly.Blocks[mappingBlock.type] = {\r\n                        init: function () {\r\n                            //Help Text \r\n                            //set value for help text\r\n                            if (mappingBlock[\"description\"]) {\r\n                                this.setWarningText(mappingBlock[\"description\"])\r\n                            }\r\n\r\n                            //for to enable if it is not used in workspace except step block\r\n                            this.highPriority = mappingBlock.category === \"step\";\r\n                            this.jsonInit(blockObj);\r\n                        },\r\n                        onchange: function (e) {\r\n                            try {\r\n                                if (typeof (e.name) != \"undefined\") {\r\n                                    switch (e.name) {\r\n                                        case \"temp_dsname\":\r\n                                        case \"temp_varname\":\r\n                                            {\r\n                                                var block = Blockly.getMainWorkspace().getBlockById(e.blockId);\r\n                                                if (block) {\r\n                                                    if (e.newValue && typeof e.newValue == \"string\") {\r\n                                                        {\r\n                                                            block.setFieldValue(e.newValue.toUpperCase().trim(), e.name);\r\n                                                        }\r\n                                                    }\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n                            catch (e) {\r\n                                //console.log(e);\r\n                            }\r\n                        },\r\n                        customContextMenu: (options) => {\r\n                            var run_Option = {\r\n                                enabled: true,\r\n                                text: 'Run Step',\r\n                                callback: function (blk) {\r\n                                    let block_selected = Blockly.selected;\r\n                                    thisOb.executeStep(block_selected);\r\n                                }\r\n                            }\r\n                            run_Option.scopeType = { block: Blockly.ContextMenuRegistry.ScopeType.BLOCK }\r\n                            options.unshift(run_Option);\r\n\r\n                            var run_from_top_Option = {\r\n                                enabled: true,\r\n                                text: 'Run From Top',\r\n                                callback: function (blk) {\r\n                                    let block_selected = Blockly.selected;\r\n                                    thisOb.executeFromTop(block_selected);\r\n                                }\r\n                            }\r\n                            run_Option.scopeType = { block: Blockly.ContextMenuRegistry.ScopeType.BLOCK }\r\n                            options.unshift(run_from_top_Option);\r\n\r\n                            var view_WorkVar_Option = {\r\n                                enabled: true,\r\n                                text: 'Get Work Dataset',\r\n                                callback: function (blk) {\r\n                                    let block_selected = Blockly.selected;\r\n                                    //Only for step and Final Step\r\n                                    thisOb.GetWorkDatasetWhenManual(block_selected);\r\n                                }\r\n                            }\r\n                            view_WorkVar_Option.scopeType = { block: Blockly.ContextMenuRegistry.ScopeType.BLOCK }\r\n                            options.unshift(view_WorkVar_Option);\r\n\r\n\r\n                            return options;\r\n                        },\r\n                    };\r\n                }\r\n\r\n            });\r\n            resolve();\r\n        }).then(() => {\r\n            hideProgress();\r\n        }).catch(() => {\r\n            hideProgress();\r\n        })\r\n\r\n    }\r\n\r\n    GetWorkDatasetWhenLoad = () => {\r\n        let { MappingConstruct } = this.props;\r\n        const { constructJson } = MappingConstruct;\r\n\r\n        let xml = constructJson && constructJson != \"\" ? constructJson : this.getInitialXML(this.props);\r\n        let { wds } = this.fnToGetWorkDataset(xml);\r\n\r\n        thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n            WORK_BLOCKS: thisObj.workBlocks(wds),\r\n            WORKVARIABLETYPE1: [],\r\n            WORKVARIABLETYPE2: [],\r\n            selected_workDS: \"\"\r\n        }));\r\n\r\n    }\r\n\r\n    GetWorkDatasetWhenManual = (sel_blk) => {\r\n        let { wds } = this.fnToGetWorkDataset(false, sel_blk);\r\n\r\n        thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n            WORK_BLOCKS: thisObj.workBlocks(wds),\r\n            WORKVARIABLETYPE1: [],\r\n            WORKVARIABLETYPE2: [],\r\n            selected_workDS: \"\"\r\n        }));\r\n    }\r\n    //isCheckAllDataset\r\n    isCheckAllDataset = (block) => {\r\n        try {\r\n            let getAllConnectedBlock = block && typeof block === \"object\" ? block.getDescendants() : [];\r\n            return getAllConnectedBlock.some(bl => bl.type === \"final_step_type\");\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    //Fn TO Load Work Dataset \r\n    fnToGetWorkDataset = (initialxmlcheck = false, selected_step = {}, NotToValidateBlk = false) => {\r\n        try {\r\n            let form_work_dataset = [];\r\n            //variable to handle error \r\n            let err = {\r\n                validationErr: [], duplicateColumn: [], impacted_block: {}, combineAllErr: []\r\n            };\r\n            let { validationErr, duplicateColumn, impacted_block, combineAllErr } = err;\r\n            //End\r\n            let { props } = this;\r\n            let { work_datasets, NCICODELISTDATA, MappingConstruct } = props;\r\n            let { SourceDataset, Standards, MappingList } = props.allValues;\r\n\r\n            let tempWorkspce = new Blockly.Workspace();\r\n            let validXML = \"\";\r\n\r\n            //For when click Create/Update \r\n            if (!initialxmlcheck) {\r\n                //check dataset for step alone or whole connected steps\r\n                let checkforwhole = this.isCheckAllDataset(selected_step);\r\n                //Get valid xml before validation\r\n                //AS we pick many blocks and keep them in workspace ,So in that case Valid xml means xml which have final step\r\n                //Following function find the final step and return that block chain alone\r\n                let validBlcoks = checkforwhole ? this.getValidXML() : selected_step.getRootBlock();\r\n\r\n                Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\r\n                //Blocks to xml\r\n                validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\r\n                //Get valid xml End\r\n            }\r\n            //For initial load if action is update\r\n            else {\r\n                //parse xml\r\n                Blockly.Xml.domToWorkspace(tempWorkspce, Blockly.Xml.textToDom(initialxmlcheck));\r\n                validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\r\n            }\r\n\r\n            let errors = [];\r\n            let dataTableNameVariableNameValidation = () => {\r\n                //check if datatable field has no values\r\n                Array.from(validXML.querySelectorAll('[name=\"temp_dsname\"]')).some(dsfield => {\r\n                    return !isNotNull(dsfield.textContent) ? (validationErr.push('Enter Data Table Name'), true) : false;\r\n                });\r\n\r\n                //check if variable field has no values\r\n                Array.from(validXML.querySelectorAll('[name=\"temp_varname\"]')).some(varfield => {\r\n                    return !isNotNull(varfield.textContent) ? (validationErr.push('Enter Variable Name'), true) : false;\r\n                });\r\n            }\r\n            dataTableNameVariableNameValidation();\r\n\r\n            let all_Blocks = tempWorkspce.getAllBlocks();\r\n\r\n            let NotAvailWkList = {};\r\n\r\n            let isAllUsedStepValid = StepBlockValidation(\"partialstep\", all_Blocks);\r\n            !initialxmlcheck && !isAllUsedStepValid && validationErr.push('Mapping Rule cannot be empty');\r\n            //Step Block Validation (FinalStep,Variable step And Datatable step)\r\n            if (validXML) {\r\n                //Validate the used block inside the step\r\n\r\n                //Filter only variable step and datatable step block\r\n                //step_type -> datatable steps\r\n                //step_type_variable -> variable step\r\n                let all_used_step_blocks = isArray(all_Blocks) ? (all_Blocks || []).filter(blk => blk.type === \"step_type\" || blk.type === \"step_type_variable\" || blk.type === \"final_step_type\") : [];\r\n                for (var index = 0; index < all_used_step_blocks.length; index++) {\r\n                    let StepBlock = all_used_step_blocks[index];\r\n                    let frst_stmt_bk = StepBlock.getChildren();\r\n                    //check step have any blocks\r\n                    if (frst_stmt_bk[0]) {\r\n                        //Validate the used block inside the step -- Normal validation(isempty,isvalid)\r\n                        let valdteBlk = !NotToValidateBlk ? checkXML(frst_stmt_bk[0].getDescendants(), true) : [];\r\n                        valdteBlk = isArray(valdteBlk) ? valdteBlk : [];\r\n                        validationErr = !NotToValidateBlk ? [...validationErr, ...valdteBlk] : [];\r\n\r\n                        //First get the List variables going to rename\r\n                        let { variableRenameList, duplicate } = GetRenameVariables(frst_stmt_bk[0].getDescendants(), SourceDataset, MappingList, form_work_dataset);\r\n\r\n                        //Impact Validation \r\n                        let impact = new ImpactValidation(Standards, SourceDataset, validXML);\r\n                        impact.stepblk = frst_stmt_bk[0].getDescendants();\r\n                        impact.MappingList = MappingList;\r\n                        impact.NotValidateWork = true;\r\n                        impact.variableRenameList = variableRenameList;\r\n                        impact.ImpactValidationOfUsedBlocks();\r\n                        impact.NCICODELISTDATA = NCICODELISTDATA;\r\n                        impact.ImapctNCICodeListValidationWorkspace();\r\n                        //Impact validation end\r\n\r\n                        //Work Validation Begins\r\n                        //for to filter all the work ,if that block have no error\r\n                        let usedWKExist = true;\r\n                        //first step check workdataset should be []\r\n                        let { Work_Exist, Not_Avail_WkList } = WorkDatasetVariableExists(StepBlock, form_work_dataset, variableRenameList);\r\n                        if (!Work_Exist) {\r\n                            usedWKExist = false;\r\n                            NotAvailWkList = ({ ...NotAvailWkList, ...Not_Avail_WkList });\r\n                        }\r\n                        //Work validation End\r\n                        if (usedWKExist && !impact.impacted && duplicate.length == 0) {\r\n                            let { type } = StepBlock;\r\n                            switch (type) {\r\n                                //Variable Operation Step\r\n                                case \"step_type_variable\":\r\n                                    {\r\n                                        //Get @DataTable(TextBOX field ) And @VariableName(TextBOX field ) field of the Step\r\n                                        let DataTable = StepBlock.getFieldValue(\"temp_dsname\");\r\n                                        let VariableName = StepBlock.getFieldValue(\"temp_varname\");\r\n                                        if (DataTable && DataTable.trim() != \"\" && VariableName && VariableName.trim() != \"\") {\r\n                                            //Get the Variable from the dataset of the Variable Used\r\n                                            // Initialise the Fn\r\n                                            let TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\r\n                                            //Set value\r\n                                            TheFnToGetVariable.StepBlock = StepBlock;\r\n                                            //For Which step are we going to filter variable \r\n                                            TheFnToGetVariable.StepType = \"VariableStep\";\r\n                                            TheFnToGetVariable.WorkDataTable = DataTable;\r\n                                            TheFnToGetVariable.ForToGetWorkDataset = true;\r\n                                            TheFnToGetVariable.SourceOfRule = MappingConstruct;\r\n                                            TheFnToGetVariable.variableRenameList = variableRenameList;\r\n                                            //Function start here\r\n                                            let filter_variable = TheFnToGetVariable.init();\r\n                                            let work_variables = filter_variable;\r\n\r\n                                            //Add custom variable by @VariableName(TextBOX field ) field of the Step\r\n                                            work_variables.push({ \"name\": VariableName, \"memname\": DataTable });\r\n                                            //End add custom variable \r\n\r\n                                            form_work_dataset = usedWKExist ? [...form_work_dataset.filter(e => (typeof e.memname === \"string\") && e.memname.toLowerCase() !== DataTable.toLowerCase()),\r\n                                            ...work_variables] : form_work_dataset;\r\n\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                //DataTable Operation Step\r\n                                case \"step_type\":\r\n                                    {\r\n                                        //Get @VariableName(TextBOX field ) And @DataTable(TextBOX field ) field of the Step\r\n                                        let DataTable = StepBlock.getFieldValue(\"temp_dsname\");\r\n                                        if (DataTable && (typeof DataTable === \"string\" || DataTable.trim() !== \"\")) {\r\n                                            //Get the Variable from the dataset of the Variable Used\r\n                                            let TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\r\n                                            //For Which step are we going to filter variable \r\n                                            TheFnToGetVariable.StepType = \"DataTableStep\";\r\n                                            TheFnToGetVariable.StepBlock = StepBlock;\r\n                                            TheFnToGetVariable.WorkDataTable = DataTable;\r\n                                            TheFnToGetVariable.ForToGetWorkDataset = true;\r\n                                            TheFnToGetVariable.variableRenameList = variableRenameList;\r\n\r\n                                            //here we filter the var from the dataset of the Variable Used\r\n                                            let work_variables = TheFnToGetVariable.init();\r\n\r\n                                            form_work_dataset = usedWKExist ? [...form_work_dataset.filter(e => (typeof e.memname === \"string\") && e.memname.toLowerCase() !== DataTable.toLowerCase()),\r\n                                            ...work_variables] : form_work_dataset;\r\n                                        }\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"final_step_type\":\r\n                                    {\r\n                                        //Get @VariableName(TextBOX field ) And @DataTable(TextBOX field ) field of the Step\r\n\r\n                                        //Get the Variable from the dataset of the Variable Used\r\n                                        let TheFnToGetVariable = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, form_work_dataset);\r\n                                        //For Which step are we going to filter variable \r\n                                        TheFnToGetVariable.StepType = \"WkFinalStep\";\r\n                                        TheFnToGetVariable.StepBlock = StepBlock;\r\n                                        TheFnToGetVariable.WorkDataTable = \"\";\r\n                                        TheFnToGetVariable.ForToGetWorkDataset = true;\r\n                                        //here we filter the var from the dataset of the Variable Used\r\n                                        let work_variables = TheFnToGetVariable.init();\r\n\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            impact.impacted && (impacted_block = { ...impacted_block, ...impact.ImpactedList });\r\n                            duplicate.length > 0 && duplicateColumn.push(duplicate);\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                combineAllErr = validationErr.length > 0 ? FormErrorIfArray(\"Validation Error\", validationErr) : [];\r\n                //Work error\r\n                isObjectCheck(NotAvailWkList) && combineAllErr.push(FormErrorHtmlIfObj(\"The following Works are not available\", NotAvailWkList));\r\n                //Impact error\r\n                Object.keys(impacted_block).length > 0 && combineAllErr.push(FormErrorHtmlIfObj(\"The following blocks are impacted\", impacted_block));\r\n                //column duplication error due to rename\r\n                duplicateColumn.length > 0 && combineAllErr.push(FormErrorIfArray(\"Rename variables should be unique\", duplicateColumn));\r\n\r\n                combineAllErr.length > 0 && errorModalCallback(combineAllErr);\r\n\r\n                return {\r\n                    wds: form_work_dataset, err: isObjectCheck(combineAllErr)\r\n                }\r\n\r\n            }\r\n            else {\r\n                errorModal(\"XML not valid\");\r\n                return { err: true, wds: form_work_dataset };\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n\r\n            initialxmlcheck && thisObj.resetWorkDataset();\r\n            return { err: true, wds: [] };\r\n\r\n        }\r\n    }\r\n    //Reset Workdataset\r\n    resetWorkDataset = () => {\r\n        thisObj.props.addWorkDataset([], () => thisObj.setState({\r\n            WORK_BLOCKS: thisObj.workBlocks([]),\r\n            WORKVARIABLETYPE1: [],\r\n            WORKVARIABLETYPE2: [],\r\n            selected_workDS: \"\"\r\n        }));\r\n    }\r\n    ////Header Actions\r\n    //MappingTitle = () => {\r\n    //    const { TargetDomain, TargetVariable } = this.props.selectedTargetObj;\r\n    //    //console.log(this.props)\r\n    //    return <div>\r\n    //        <span className=\"selectedOperations\">\r\n    //            <strong>\r\n    //                <span>Mapping:</span>{\" \"}\r\n    //                <span style={{ color: \"#1890ff\" }}>\r\n    //                    {TargetDomain + \".\" + TargetVariable}\r\n    //                </span>\r\n    //            </strong>\r\n    //        </span>\r\n    //        <ContentTab showToggleIcon={false} />\r\n    //    </div>\r\n    //}\r\n\r\n    //Source Block\r\n    sourceBlocks = props => {\r\n        let { SourceDataset } = props.allValues;\r\n        return SourceDataset.Domain.map(source => {\r\n            let dataSource = { ...source, blockType: \"Source\" };\r\n\r\n            return (<React.Fragment key={source.TABLE_NAME + \"_key\"}>\r\n                <Block editable={false} type=\"dataset_type_multi_source\" >\r\n                    <Field name=\"ds_name\">\r\n                        {source.TABLE_NAME}\r\n                    </Field>\r\n                    <data>{JSON.stringify({ ...dataSource, category: \"dataset\", primaryID: source.TABLE_NAME })}</data>\r\n                </Block>\r\n            </React.Fragment>);\r\n        })\r\n    };\r\n\r\n    //Target Block\r\n    targetBlocks = props => {\r\n        let { Standards } = props.allValues;\r\n        let { Domain } = Standards;\r\n        let MappingList = MappingDatas.MappingList;\r\n        let mappinglistdomains = MappingList.map((data, index) => {\r\n            if (MappingList.findIndex(e => e.cdiscDataStdDomainMetadataID == data.cdiscDataStdDomainMetadataID) === index) {\r\n                let Target = Domain.find(x => x.cdiscDataStdDomainMetadataID === data.cdiscDataStdDomainMetadataID);\r\n                if (Target !== null && typeof Target === \"object\") {\r\n                    let dataTarget = { ...Target, blockType: \"Target\" };\r\n                    return (<React.Fragment key={Target.domain + \"_key\"}>\r\n                        <Block editable={false} type=\"dataset_type_multi_target\" >\r\n                            <Field name=\"ds_name\">\r\n                                {Target.domain}\r\n                            </Field>\r\n                            <data>{JSON.stringify({ ...dataTarget, category: \"dataset\", primaryID: data.cdiscDataStdDomainMetadataID })}</data>\r\n                        </Block>\r\n                    </React.Fragment>);\r\n                }\r\n            }\r\n        });\r\n        Domain.map(Target => {\r\n            if (Target.domain.includes(\"_int\")) {\r\n                let dataTarget = { ...Target, blockType: \"Target\" };\r\n                mappinglistdomains.push((<React.Fragment key={Target.domain + \"_key\"}>\r\n                    <Block editable={false} type=\"dataset_type_multi_target\" >\r\n                        <Field name=\"ds_name\">\r\n                            {Target.domain}\r\n                        </Field>\r\n                        <data>{JSON.stringify({ ...dataTarget, category: \"dataset\", primaryID: Target.cdiscDataStdDomainMetadataID })}</data>\r\n                    </Block>\r\n                </React.Fragment>));\r\n            }\r\n        });\r\n        return mappinglistdomains;\r\n    };\r\n\r\n    //Work Blocks\r\n    workBlocks = (work_datasets) => {\r\n        const workDomains = [...new Set(work_datasets.map(x => x.memname))];\r\n        //console.log(workDomains)\r\n        let workBlocks_s = workDomains.map((datInfo) => {\r\n            let dataSource = { blockType: \"Work\", name: datInfo };\r\n\r\n            return (<React.Fragment key={datInfo + \"work_fg_key\"}>\r\n                <Block editable={false} type=\"dataset_type_multi_work\" >\r\n                    <Field name=\"ds_name\">\r\n                        {datInfo}\r\n                    </Field>\r\n                    <data>{JSON.stringify({ ...dataSource, category: \"dataset\", primaryID: datInfo })}</data>\r\n                </Block>\r\n            </React.Fragment>);\r\n        });\r\n        return workBlocks_s;\r\n    }\r\n\r\n    // Work Variable Blocks\r\n    workVariableBlocks = (obj, block) => {\r\n        let { selected_workDS } = this.state;\r\n        //1.filter all the variables that needs to be renamed if Rename block used\r\n        //2.Check Duplication (do not rename multiple columns with the same name).\r\n        let { props } = this;\r\n        let { work_datasets } = props;\r\n        let { SourceDataset, MappingList } = props.allValues;\r\n\r\n        let { variableRenameList, duplicate } = GetRenameVariables([block], SourceDataset, MappingList, work_datasets);\r\n        if (duplicate.length === 0) {\r\n            if (selected_workDS !== obj.name) {\r\n                let type1 = [];\r\n                let type2 = [];\r\n                let datasetobj = this.props.work_datasets.filter(v => v.memname === obj.name);\r\n                if (datasetobj.length > 0) {\r\n                    datasetobj.map((vaobj) => {\r\n                        //Because of the override to source/original value ,you have to stringify and use.\r\n                        let va_str = JSON.stringify(vaobj);\r\n                        let datInfo = validJSON(va_str);\r\n\r\n                        let dataSource =\r\n                        {\r\n                            blockType: \"WorkVar\",\r\n                            type: 'variable',\r\n                            variable: datInfo.name,\r\n                            dataset: obj.name\r\n                        };\r\n\r\n                        //Rename the variable ,if it is in rename. \r\n                        let rename_obj = variableRenameList[obj.name + \"@_\" + \"WorkVar\"];\r\n                        let renameTo = rename_obj && rename_obj[dataSource.variable] && rename_obj[dataSource.variable].renameTo;\r\n                        dataSource.variable = isNotNull(renameTo) ? renameTo.toUpperCase() : dataSource.variable;\r\n\r\n                        type1.push(<React.Fragment key={dataSource.variable + \"work_fgv_key\"}>\r\n                            <Block editable={false} type=\"variable_type_work_multi\" >\r\n                                <Field name=\"var_name\">\r\n                                    {obj.name}.{dataSource.variable.toUpperCase()}\r\n                                </Field>\r\n                                <data>{JSON.stringify({ ...dataSource })}</data>\r\n                            </Block>\r\n                        </React.Fragment>);\r\n                        type2.push(<React.Fragment key={dataSource.variable + \"work_fgv_key\"}>\r\n                            <Block editable={false} type=\"variable_type_work_multi_2\" >\r\n                                <Field name=\"var_name\">\r\n                                    {obj.name}.{dataSource.variable.toUpperCase()}\r\n                                </Field>\r\n                                <data>{JSON.stringify({ ...dataSource })}</data>\r\n                            </Block>\r\n                        </React.Fragment>);\r\n                    });\r\n                    this.setState({ WORKVARIABLETYPE1: type1, WORKVARIABLETYPE2: type2, selected_workDS: obj.name });\r\n                }\r\n\r\n            }\r\n            else {\r\n                thisObj.RemoveVariables(obj);\r\n            }\r\n        } else {\r\n            errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\r\n        }\r\n    }\r\n\r\n\r\n    //BulkMap Block\r\n    BulkMapDataBlock = (BulkMapDataObj) => {\r\n        let groupBlock = {};\r\n        let nciblock = [];\r\n\r\n        //Block creation\r\n        let block = (b) => {\r\n            let dataSource = { blockType: \"BulkMapData\", ...b };\r\n            return (<React.Fragment key={b.targetVariable + \"_key\"}>\r\n                <Block editable={false} type=\"constant_type_multi\">\r\n                    <Field name=\"const_str\">\r\n                        {b.targetDomain + \".\" + b.targetVariable}\r\n                    </Field>\r\n                    <data>{JSON.stringify({ ...dataSource, category: \"dataset\" })}</data>\r\n                </Block>\r\n            </React.Fragment>);\r\n        }\r\n\r\n        if (typeof BulkMapDataObj === \"object\" && BulkMapDataObj.length > 20) {\r\n            BulkMapDataObj.map((data) => {\r\n                let firstLetter = typeof data.targetDomain === \"string\" && data.targetDomain.charAt(0);\r\n                if (firstLetter && firstLetter.match(/^[a-zA-Z]+$/)) {\r\n                    return groupBlock[firstLetter.toUpperCase()] ?\r\n                        groupBlock[firstLetter.toUpperCase()].push(block(data)) :\r\n                        groupBlock[firstLetter.toUpperCase()] = [block(data)];\r\n                } else {\r\n\r\n                    return groupBlock[\"123\"] ?\r\n                        groupBlock[\"123\"].push(block(data)) :\r\n                        groupBlock[\"123\"] = [block(data)];\r\n                }\r\n            });\r\n\r\n            //Category creation\r\n            nciblock = Object.keys(groupBlock).map(groupName => {\r\n                return <Category name={groupName} colour=\"100\">\r\n                    {groupBlock[groupName]}\r\n                </Category>\r\n            })\r\n\r\n        }\r\n        else {\r\n\r\n            nciblock = BulkMapDataObj.map((obj) => {\r\n                return block(obj);\r\n            })\r\n        }\r\n\r\n        return {\r\n            name: \"BulkMapConfig\",\r\n            block: nciblock\r\n        }\r\n    }\r\n\r\n    //NCICODELISTDATA Block\r\n    nciCodeListDataBlock = (nCICODELISTDATA) => {\r\n        let codelistName = \"\";\r\n        let groupBlock = {};\r\n        let nciblock = [];\r\n\r\n        //Block creation\r\n        let block = (b) => {\r\n            let dataSource = { blockType: \"NciCodeListData\", ...b };\r\n            codelistName = b.codelistName;\r\n            return (<React.Fragment key={b.cdiscSubmissionValue + \"_key\"}>\r\n                <Block editable={false} type=\"constant_type_multi\">\r\n                    <Field name=\"const_str\">\r\n                        {b.cdiscSubmissionValue}\r\n                    </Field>\r\n                    <data>{JSON.stringify({ ...dataSource, category: \"dataset\" })}</data>\r\n                </Block>\r\n            </React.Fragment>);\r\n        }\r\n\r\n        if (typeof nCICODELISTDATA === \"object\" && nCICODELISTDATA.length > 20) {\r\n            nCICODELISTDATA.map((data) => {\r\n                let firstLetter = data.cdiscSubmissionValue.charAt(0);\r\n                if (firstLetter.match(/^[a-zA-Z]+$/)) {\r\n                    return groupBlock[firstLetter.toUpperCase()] ?\r\n                        groupBlock[firstLetter.toUpperCase()].push(block(data)) :\r\n                        groupBlock[firstLetter.toUpperCase()] = [block(data)];\r\n                } else {\r\n\r\n                    return groupBlock[\"123\"] ?\r\n                        groupBlock[\"123\"].push(block(data)) :\r\n                        groupBlock[\"123\"] = [block(data)];\r\n                }\r\n            });\r\n\r\n            //Category creation\r\n            nciblock = Object.keys(groupBlock).map(groupName => {\r\n                return <Category name={groupName} colour=\"100\">\r\n                    {groupBlock[groupName]}\r\n                </Category>\r\n            })\r\n\r\n        }\r\n        else {\r\n\r\n            nciblock = nCICODELISTDATA.map((obj) => {\r\n                return block(obj);\r\n            })\r\n        }\r\n\r\n        return {\r\n            name: codelistName,\r\n            block: nciblock\r\n        }\r\n    }\r\n\r\n    // Variable Block for Source\r\n    SourceVariableBlocks = (obj, block) => {\r\n        //1.filter all the variables that needs to be renamed if Rename block used\r\n        //2.Check Duplication (do not rename multiple columns with the same name).\r\n        let { work_datasets } = this.props;\r\n        let { SourceDataset, MappingList } = this.props.allValues;\r\n\r\n        let { variableRenameList, duplicate } = GetRenameVariables([block], SourceDataset, MappingList, work_datasets);\r\n        if (duplicate.length === 0) {\r\n            let { selected_sourceDS } = this.state;\r\n            if (selected_sourceDS !== obj.TABLE_NAME) {\r\n\r\n\r\n                let { SourceDataset } = thisObj.props.allValues;\r\n                let VariableList = SourceDataset.Variable.filter(\r\n                    va => va.TABLE_NAME === obj.TABLE_NAME\r\n                );\r\n\r\n                SelectedCategory = { Category: 5 };\r\n                let type1 = [];\r\n                let type2 = [];\r\n\r\n                let varBlock = VariableList.map(vari => {\r\n                    //Because of the override to source/original value ,you have to stringify and use.\r\n                    let va_str = JSON.stringify(vari);\r\n                    let data = validJSON(va_str);\r\n\r\n                    //Rename the variable ,if a rename block exists \r\n                    let rename_obj = variableRenameList[obj.TABLE_NAME + \"@_\" + \"SourceVar\"];\r\n                    let renameTo = rename_obj && rename_obj[data.COLUMN_NAME] && rename_obj[data.COLUMN_NAME].renameTo;\r\n                    data.COLUMN_NAME = isNotNull(renameTo) ? renameTo.toUpperCase() : data.COLUMN_NAME;\r\n\r\n                    data[\"blockType\"] = \"SourceVar\";\r\n\r\n                    type1.push(<React.Fragment key={\"src_fgmt_key_\" + obj.TABLE_NAME + data.COLUMN_NAME}>\r\n                        <Block editable={false} type=\"variable_type_source_multi\" >\r\n                            <Field name=\"var_name\">\r\n                                {obj.TABLE_NAME}.{data.COLUMN_NAME}\r\n                            </Field>\r\n                            <data>{JSON.stringify({ ...data, uniqueid: obj.TABLE_NAME })}</data>\r\n                        </Block>\r\n                    </React.Fragment>);\r\n\r\n                    type2.push(<React.Fragment key={\"src_fgmt_key_\" + obj.TABLE_NAME + data.COLUMN_NAME}>\r\n                        <Block editable={false} type=\"variable_type_source_multi_2\" >\r\n                            <Field name=\"var_name\">\r\n                                {obj.TABLE_NAME}.{data.COLUMN_NAME}\r\n                            </Field>\r\n                            <data>{JSON.stringify({ ...data, uniqueid: obj.TABLE_NAME })}</data>\r\n                        </Block>\r\n                    </React.Fragment>);\r\n\r\n                });\r\n\r\n                thisObj.setState({ SOURCEVARIABLETYPE1: type1, SOURCEVARIABLETYPE2: type2, selected_sourceDS: obj.TABLE_NAME });\r\n\r\n\r\n            }\r\n            else {\r\n                thisObj.RemoveVariables(obj);\r\n            }\r\n        }\r\n        else {\r\n            errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\r\n        }\r\n    };\r\n\r\n    //Variable Block for Target\r\n    TargetVariableBlocks = (obj, block) => {\r\n\r\n        let { work_datasets } = this.props;\r\n        let { SourceDataset, MappingList } = this.props.allValues;\r\n\r\n        //1.filter all the variables that needs to be renamed if Rename block used\r\n        //2.Check Duplication (do not rename multiple columns with the same name).\r\n        let { variableRenameList, duplicate } = GetRenameVariables([block], SourceDataset, MappingList, work_datasets);\r\n        if (duplicate.length === 0) {\r\n\r\n            let { selected_targetDS } = this.state;\r\n            if (selected_targetDS !== obj.domain) {\r\n                let { Standards } = thisObj.props.allValues;\r\n\r\n                //For HighLight node\r\n                SelectedCategory = { Category: 6 };\r\n\r\n                let variablesList = Standards.Variable.filter(\r\n                    variable =>\r\n                        variable.cdiscDataStdDomainMetadataID ===\r\n                        obj.cdiscDataStdDomainMetadataID\r\n                );\r\n\r\n                let type1 = [];\r\n                let type2 = [];\r\n\r\n                variablesList.map(function (vari) {\r\n                    //Because of the override to source/original value ,you have to stringify and use.\r\n                    let va_str = JSON.stringify(vari);\r\n                    let variable = validJSON(va_str);\r\n\r\n                    let mappingConstruct = MappingDatas.MappingList.filter(\r\n                        mapper =>\r\n                            mapper.cdiscDataStdVariableMetadataID ===\r\n                            variable.cdiscDataStdVariableMetadataID\r\n                    );\r\n\r\n                    //Rename the variable ,if its is in the rename list \r\n                    let rename_obj = variableRenameList[obj.domain + \"@_\" + \"TargetVar\"];\r\n                    let renameTo = rename_obj && rename_obj[variable.variableName] && rename_obj[variable.variableName].renameTo;\r\n                    let col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : variable.variableName;\r\n                    variable.variableName = col_Name;\r\n\r\n                    variable[\"blockType\"] = \"TargetVar\";\r\n\r\n                    if ((typeof mappingConstruct === 'object' && mappingConstruct && mappingConstruct.length > 0) || obj.domain.includes(\"_int\")) {\r\n\r\n                        type1.push(<React.Fragment key={\"tgtfmt_var_\" + col_Name}>\r\n                            <Block editable={false} type=\"variable_type_target_multi\" >\r\n                                <Field name=\"var_name\">\r\n                                    {obj.domain}.{col_Name}\r\n                                </Field>\r\n                                <data>{JSON.stringify({ ...variable, domain: obj.domain, uniqueid: obj.cdiscDataStdDomainMetadataID })}</data>\r\n                            </Block>\r\n                        </React.Fragment>);\r\n\r\n                        type2.push(<React.Fragment key={\"tgtfmt_var_\" + variable.variableName}>\r\n                            <Block editable={false} type=\"variable_type_target_multi_2\" >\r\n                                <Field name=\"var_name\">\r\n                                    {obj.domain}.{col_Name}\r\n                                </Field>\r\n                                <data>{JSON.stringify({ ...variable, domain: obj.domain, uniqueid: obj.cdiscDataStdDomainMetadataID })}</data>\r\n                            </Block>\r\n                        </React.Fragment>);\r\n                    }\r\n                });\r\n\r\n                thisObj.setState({ TARGETVARIABLETYPE1: type1, TARGETVARIABLETYPE2: type2, selected_targetDS: obj.domain });\r\n            }\r\n            else {\r\n                thisObj.RemoveVariables(obj);\r\n            }\r\n        }\r\n        else {\r\n            errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\r\n        }\r\n    };\r\n\r\n    //Remove Variable Blocks When Delete\r\n    RemoveVariables = (obj) => {\r\n        if (obj.blockType === \"Source\") {\r\n            thisObj.setState({ SOURCEVARIABLETYPE1: [], SOURCEVARIABLETYPE2: [], selected_sourceDS: \"\" });\r\n\r\n        } else if (obj.blockType === \"Target\") {\r\n            thisObj.setState({ TARGETVARIABLETYPE1: [], TARGETVARIABLETYPE2: [], selected_targetDS: \"\" });\r\n\r\n        }\r\n        else if (obj.blockType === \"Work\") {\r\n            thisObj.setState({ WORKVARIABLETYPE1: [], WORKVARIABLETYPE2: [], selected_workDS: \"\" });\r\n\r\n        }\r\n    }\r\n\r\n    //Cancel\r\n    hideMapperModal = flag => {\r\n        if (flag === \"Cancel\") {\r\n            this.props.hideMapperModal();\r\n        }\r\n    };\r\n\r\n    //validation \r\n\r\n    // Save Process\r\n    //For Save Rules\r\n    saveRule = (ChangeReason = \"Created\", saveProgress = false) => {\r\n        let { SourceDataset, Standards } = thisObj.props.allValues;\r\n\r\n        let { props } = this;\r\n        let { sourceObj, selectedTargetObj, MappingConstruct, action, work_datasets } = props;\r\n        const { TargetDomainID, TargetVariableID } = selectedTargetObj;\r\n\r\n        //Create and Update \r\n        let xml = this.getValidXML();\r\n        xml = this.wrapXMLTag(xml);\r\n\r\n        if (xml) {\r\n\r\n            let used_dset_var_from_finalstp = new Get_Var_From_Step(SourceDataset, Standards, MappingDatas, work_datasets);\r\n            //For Which step are we going to filter variable \r\n            used_dset_var_from_finalstp.StepType = \"FinalStep\";\r\n\r\n            let values = {\r\n                ConstructJson: xml,\r\n                ConstructString: \"\",\r\n                MappingXML: \"\",\r\n                StudyID: JSON.parse(\r\n                    sessionStorage.getItem(\"studyDetails\")\r\n                ).studyID,\r\n                CDISCDataStdDomainMetadataID: MappingConstruct.cdiscDataStdDomainMetadataID !== undefined ? MappingConstruct.cdiscDataStdDomainMetadataID : TargetDomainID,\r\n                CDISCDataStdVariableMetadataID: MappingConstruct.cdiscDataStdVariableMetadataID !== undefined ? MappingConstruct.cdiscDataStdVariableMetadataID : TargetVariableID,\r\n                SourceDataset: action === UPDATE ? MappingConstruct.sourceDataset : sourceObj.TABLE_NAME,\r\n                SourceVariableName: action === UPDATE ? MappingConstruct.sourceVariableName : sourceObj.COLUMN_NAME,\r\n                ChangeReason: ChangeReason,\r\n                action: thisObj.props.action,\r\n                Order: action === UPDATE ? MappingConstruct.Order : 0,\r\n                isCheckedOut: saveProgress ? 1 : 0,\r\n                Extra1: \"\",\r\n                Extra2: used_dset_var_from_finalstp.init(used_dset_var_from_finalstp),\r\n                impact: saveProgress ? MappingConstruct.impact : 0,\r\n                Status: action === UPDATE ? MappingConstruct.Status : \"\",\r\n                UpdatedDateTimeText: MappingConstruct.updatedDateTimeText,\r\n\r\n            }\r\n            //if (action == UPDATE) {\r\n            values.MappingConstructID = MappingConstruct.mappingConstructID;\r\n            if (xml.includes(\"custom_program_type\")) {\r\n                values[\"MappingProgram\"] = thisObj.state.customprogram;\r\n                values[\"PythonProgram\"] = thisObj.state.customprogram;\r\n            }\r\n            // Loader\r\n            const urltocall = saveProgress ? \"MappingOperations/SaveProgress\" : \"MappingOperations/UpdateMappingOperations\";\r\n            showProgress();\r\n            PostCallWithZone(urltocall, values).then((response) => {\r\n                const responseData = response;\r\n                if (responseData.status == 1) {\r\n                    if (saveProgress) {\r\n                        message.destroy();\r\n                        message.success('Rule progress saved successfully!', 0.5);\r\n                        hideProgress();\r\n                    } else {\r\n                        setSessionValue(\"MappingDeleteIsCheckOut\", null);\r\n                        setSessionValue(\"MappingUpdateIsCheckOut\", null);\r\n                        thisObj.setState({ showConfirmation: false });\r\n                        successModalCallback(response.message, () => thisObj.props.clearWorkSpace(\"refresh\"));\r\n                    }\r\n\r\n                } else {\r\n                    errorModal(response.message);\r\n                }\r\n                hideProgress();\r\n            })\r\n        }\r\n    }\r\n\r\n    //Get valid xml first and the validate\r\n    //we can creat many block .So in that case Valid xml means xml which have final step\r\n    //Following function find the final step and return that block chain alone\r\n    getValidXML = () => {\r\n        let XMLOfAllUsedBlock = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\r\n        //Cretae one temp workspace(@Note:if use actual workspace one copy will create in actual workspace.So create temp workspace)\r\n        let tempWorkSpace = new Blockly.Workspace();\r\n        let validXML = \"\";\r\n\r\n        var result = Array.from(XMLOfAllUsedBlock.childNodes).some(b => {\r\n            let block = Blockly.Xml.domToBlock(tempWorkSpace, b);\r\n            let loopToFindIsFinal_step_type_ExistOrNot = (blo) => {\r\n                var nxt = blo.getNextBlock();\r\n                return blo.type === \"final_step_type\" ? (validXML = block, true) : nxt ? loopToFindIsFinal_step_type_ExistOrNot(nxt) : false;\r\n            }\r\n            return loopToFindIsFinal_step_type_ExistOrNot(block)\r\n        });\r\n\r\n        return result ? validXML : result;\r\n    }\r\n\r\n    wrapXMLTag = (validBlockChain) => {\r\n        return ` <xml xmlns=\"https://developers.google.com/blockly/xml\">` + new XMLSerializer().serializeToString(Blockly.Xml.blockToDom(validBlockChain)) + `</xml>`;\r\n    }\r\n\r\n    //UpdateWithConfirmation\r\n    validateRule = () => {\r\n        let { props } = this;\r\n\r\n        let { action } = props;\r\n        //Create and Update \r\n\r\n        //Get valid xml first and the validate\r\n        //we can creat many block .So in that case Valid xml means xml which have final step\r\n        //Following function find the final step and return that block chain alone\r\n        let validBlcoks = this.getValidXML();\r\n        let tempWorkspce = new Blockly.Workspace();\r\n        Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\r\n\r\n        //Blocks to xml\r\n        let validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\r\n\r\n        //First one is for initial load, Sec param is block and third one is dontShowErrMsg\r\n        let { wds, err } = thisObj.fnToGetWorkDataset(false, validBlcoks, false);\r\n        if (!err) {\r\n            if (action === \"Create\") {\r\n\r\n                thisObj.saveRule();\r\n            }\r\n            else {\r\n                thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                    WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                    WORKVARIABLETYPE1: [],\r\n                    WORKVARIABLETYPE2: [],\r\n                    selected_workDS: \"\",\r\n                    showConfirmation: true\r\n                }));\r\n\r\n            }\r\n        }\r\n        else {\r\n            thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                WORKVARIABLETYPE1: [],\r\n                WORKVARIABLETYPE2: [],\r\n                selected_workDS: \"\",\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Find impact block\r\n    //Check is impact\r\n    impactedBlkPresent = (workspce) => {\r\n        let AllValidBlocks = workspce.getAllBlocks();\r\n        let { SourceDataset, MappingList } = this.props.allValues;\r\n        let { Variable } = SourceDataset;\r\n\r\n        //For Src\r\n        let getAllSrcBlk = AllValidBlocks.filter(c => {\r\n            let data = validJSON(c.data)\r\n            if (data) {\r\n                return data.blockType === \"SourceVar\";\r\n            }\r\n        });\r\n        //For Target\r\n        let getAllTargetBlk = AllValidBlocks.filter(c => {\r\n            let data = validJSON(c.data)\r\n            if (data) {\r\n                return data.blockType === \"TargetVar\";\r\n            }\r\n        });\r\n\r\n        //is used src avl in current study src\r\n        let UsedSrcNotAvl = getAllSrcBlk.map(srcblk => {\r\n            let srcobj = validJSON(srcblk.data);\r\n            //Variable var is actual source variable\r\n            //srcobj is used block srcobj\r\n            return Variable.some(va => {\r\n                return va.TABLE_NAME === srcobj.TABLE_NAME && va.COLUMN_NAME === srcobj.COLUMN_NAME;\r\n            });\r\n        }).some(isaval => !isaval);\r\n\r\n        //is used targ avl in current study version target\r\n        let UsedTarNotAvl = getAllTargetBlk.map(tarblk => {\r\n            let tarobj = validJSON(tarblk.data);\r\n            //Variable var is actual Std variable\r\n            //tarobj is used block target\r\n\r\n            return MappingList.some(va => {\r\n                //let getDomain = Standards.Domain.find(d => d.cdiscDataStdDomainMetadataID === va.cdiscDataStdDomainMetadataID);\r\n                return tarobj.domain === va.targetDataSet && va.targetVariableName === tarobj.variableName;\r\n\r\n            })\r\n        }).some(isaval => !isaval);\r\n\r\n        return UsedSrcNotAvl || UsedTarNotAvl;\r\n    }\r\n\r\n    //Change Reason Cancel\r\n    handleChangeReasonCancel = () => {\r\n        thisObj.setState({ showConfirmation: false });\r\n    }\r\n\r\n    handleSASResult = (response) => {\r\n        this.setState({ log: response[\"LOG\"], lstHTML: response[\"LST\"], resultSet: JSON.parse(response[\"dataset\"]) });\r\n    }\r\n\r\n    setProgress = (show) => {\r\n        this.setState({ loading: show });\r\n    }\r\n\r\n\r\n\r\n    genrateProgram = (stepxml = \"\") => {\r\n        let { props } = this;\r\n        let { selectedTargetObj, allValues, NCICODELISTDATA, work_datasets } = props;\r\n        let { Standards, SourceDataset, MappingList } = allValues;\r\n\r\n        //Code to put validation for Generate Program\r\n        //Transbot 1.0.1\r\n        //Demo update\r\n        let cus_pro = Blockly.getMainWorkspace().getBlocksByType(\"custom_program_type\");\r\n        if (cus_pro.length === 0 || !cus_pro.some(x => x.getParent() && x.getParent().type === \"final_step_type\")) {\r\n            //Create and Update \r\n\r\n            //Get valid xml first and the validate\r\n            //we can creat many block .So in that case Valid xml means xml which have final step\r\n            //Following function find the final step and return that block chain alone\r\n            let validBlcoks = this.getValidXML();\r\n\r\n            let tempWorkspce = new Blockly.Workspace();\r\n            Blockly.Xml.domToBlock(tempWorkspce, Blockly.Xml.blockToDom(validBlcoks));\r\n            //Blocks to xml\r\n            let validXML = Blockly.Xml.workspaceToDom(tempWorkspce);\r\n            //First one is for initial load, Sec param is block and third one is dontShowErrMsg\r\n            let { wds, err } = thisObj.fnToGetWorkDataset(false, validBlcoks, false);\r\n            if (!err) {\r\n                tempWorkspce.dispose();\r\n                thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                    WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                    WORKVARIABLETYPE1: [],\r\n                    WORKVARIABLETYPE2: [],\r\n                    selected_workDS: \"\",\r\n                }, () => thisObj.getSASMacro()));\r\n            }\r\n            else {\r\n                thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                    WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                    WORKVARIABLETYPE1: [],\r\n                    WORKVARIABLETYPE2: [],\r\n                    selected_workDS: \"\",\r\n                }));\r\n            }\r\n\r\n        } else {\r\n            thisObj.setState({\r\n                sasmacro: this.state.customprogram,\r\n                dsName: \"\",\r\n                log: \"\"\r\n            });\r\n            props.fnToShowHideProgramArea(true);\r\n        }\r\n    }\r\n\r\n    getSASMacro = (stepxml = \"\") => {\r\n        let { props } = this;\r\n\r\n        const { programType } = this.state;\r\n        let { sourceObj, selectedTargetObj, MappingConstruct, action, allValues } = props;\r\n        const { TargetDomainID, TargetVariableID } = selectedTargetObj;\r\n\r\n        //Get valid xml first and the validate\r\n        //we can creat many block .So in that case Valid xml means xml which have final step\r\n        //Following function find the final step and return that block chain alone\r\n        let tempxml = this.getValidXML();\r\n        tempxml = this.wrapXMLTag(tempxml);\r\n\r\n        let xml = stepxml === \"\" ? tempxml : true;\r\n\r\n        if (xml) {\r\n            let XMLValue = stepxml === \"\" ? xml : stepxml;\r\n\r\n\r\n            let values = {\r\n                ConstructJson: XMLValue,\r\n                ConstructString: \"\",\r\n                MappingXML: \"\",\r\n                StudyID: JSON.parse(\r\n                    sessionStorage.getItem(\"studyDetails\")\r\n                ).studyID,\r\n                CDISCDataStdDomainMetadataID: action === UPDATE ? MappingConstruct.cdiscDataStdDomainMetadataID : TargetDomainID,\r\n                CDISCDataStdVariableMetadataID: action === UPDATE ? MappingConstruct.cdiscDataStdVariableMetadataID : TargetVariableID,\r\n                SourceDataset: action === UPDATE ? MappingConstruct.sourceDataset : sourceObj.TABLE_NAME,\r\n                SourceVariableName: action === UPDATE ? MappingConstruct.sourceVariableName : sourceObj.COLUMN_NAME\r\n            }\r\n            showProgress();\r\n            if (stepxml === \"\") {\r\n                CallServerPost(\"MappingOperations/GenMacro\", values).then((response) => {\r\n                    const responseData = response;\r\n                    if (responseData.status == 1) {\r\n                        thisObj.setState({\r\n                            sasmacro: programType == 1 ? responseData.value.pythonProgram : responseData.value.mappingProgram,\r\n                            dsName: `${responseData.value.domain}`\r\n                        });\r\n                        props.fnToShowHideProgramArea(true)\r\n                    } else {\r\n                        errorModal(response.message);\r\n                    }\r\n                    hideProgress();\r\n                })\r\n            } else {\r\n                return CallServerPost(\"MappingOperations/GenMacro\", values).then((response) => {\r\n                    const responseData = response;\r\n                    if (responseData.status == 1) {\r\n                        return programType == 1 ? responseData.value.pythonProgram : responseData.value.mappingProgram;\r\n                    }\r\n                    else {\r\n                        return \"\";\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    executeMacro = () => {\r\n        const thisObj = this;\r\n\r\n        const execmacro = this.state.sasmacro;\r\n\r\n        showProgress();\r\n        let ds = ''\r\n        let domain = ''\r\n        if (this.props.action == CREATE) {\r\n            ds = `FX${this.props.selectedTargetObj.TargetDomain}_${this.props.selectedTargetObj.TargetVariable}`;\r\n            domain = this.props.selectedTargetObj.TargetDomain;\r\n        } else if (this.props.action == UPDATE) {\r\n            ds = `FX${this.props.MappingConstruct.targetDataSet}_${this.props.MappingConstruct.targetVariableName}`;\r\n            domain = this.props.MappingConstruct.targetDataSet;\r\n        }\r\n        const StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\r\n        CallServerPost(\"Py/ExecSasTemp\", {\r\n            'program': execmacro,\r\n            'dataset': ds,\r\n            StudyID: StudyID,\r\n            'domain': domain,\r\n            'username': JSON.parse(sessionStorage.userProfile).userName\r\n        }).then((response) => {\r\n            if (response.status == 1) {\r\n                const res = response.value;\r\n                if (res !== null && \"LOG\" in res) {\r\n                    thisObj.setState({ log: res[\"LOG\"], lstHTML: res[\"LST\"] });\r\n                    if (\"dataset\" in res && res[\"dataset\"] != \"\") {\r\n                        thisObj.props.addWorkTable(JSON.parse(res[\"dataset\"]), ds);\r\n                    }\r\n                } else {\r\n                    errorModal(\"Something went wrong!\");\r\n                }\r\n\r\n            }\r\n            hideProgress();\r\n        });\r\n\r\n    }\r\n    getStep = () => {\r\n        // let xml = Blockly.Xml.workspaceToDom(Blockly.getMainWorkspace());\r\n        //console.log(xml.querySelector('[type=\"step_type\"]'));\r\n        return \"Step 1\";\r\n    }\r\n    setCurrentStep = (currStep) => {\r\n        //this.setState({ currentStep: currStep });\r\n    }\r\n\r\n    addNewWorkData = () => {\r\n\r\n    }\r\n    executeFromTop = (block_selected) => {\r\n        try {\r\n            let { allValues } = thisObj.props;\r\n            let allblocks = block_selected.getRootBlock();\r\n\r\n            //Blocks to xml\r\n            const validXML = Blockly.Xml.blockToDom(allblocks);\r\n            //selected block to xml,for to remove next connection\r\n            const selectedXML = Blockly.Xml.blockToDom(block_selected);\r\n\r\n            if (selectedXML.children[selectedXML.children.length - 1].localName == \"next\") {\r\n                if (block_selected.id === validXML.id) {\r\n                    validXML.children[validXML.children.length - 1].remove();\r\n                }\r\n                else {\r\n                    let selxml = validXML.querySelector('[id=\"' + block_selected.id + '\"]');\r\n                    selxml.children[selectedXML.children.length - 1].remove();\r\n                }\r\n            }\r\n            //validate selected block \r\n            //Following function find the step and return that block chain alone\r\n            //Validate selected step block alone\r\n            let tempWorkspce = new Blockly.Workspace();\r\n            Blockly.Xml.domToBlock(tempWorkspce, validXML);\r\n            let validBlcoks = tempWorkspce.getAllBlocks();\r\n            const th = this;\r\n\r\n            //First one is for initial load, Sec param is block and third one is dontShowErrMsg\r\n            let { wds, err } = thisObj.fnToGetWorkDataset(false, validBlcoks[0]);\r\n\r\n            if (!err) {\r\n                const dsxml = validXML.querySelectorAll('[name=\"temp_dsname\"]');\r\n                const datasetName = dsxml[dsxml.length - 1].textContent;\r\n                const variablename = block_selected.getField(\"temp_varname\");\r\n\r\n                if (datasetName !== \"\" && (!variablename || variablename.getValue() !== \"\")) {\r\n                    let XMLValue = new XMLSerializer().serializeToString(validXML);\r\n                    const xmlfinal = `<xml xmlns=\"https://developers.google.com/blockly/xml\">` + XMLValue + `</xml>`;\r\n                    //console.log(xmlfinal);\r\n\r\n\r\n                    thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                        WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                        WORKVARIABLETYPE1: [],\r\n                        WORKVARIABLETYPE2: [],\r\n                        selected_workDS: \"\",\r\n                    }, () => {\r\n                        this.getSASMacro(xmlfinal).then((macro) => {\r\n                            //console.log(macro);\r\n                            if (macro !== \"\") {\r\n                                th.executeStepMacro(macro, datasetName, variablename);\r\n                            } else {\r\n                                hideProgress();\r\n                            }\r\n                        });\r\n                    }));\r\n\r\n                } else {\r\n                    let errorMsg = [];\r\n                    datasetName === \"\" && errorMsg.push(<div key={errorMsg.length + 1}>{errorMsg.length + 1}. {\"Enter Data Table Name.\"}</div>);\r\n                    (variablename && variablename.getValue() === \"\") && errorMsg.push(<div key={errorMsg.length + 1}>{errorMsg.length + 1}. {\"Enter Variable Name.\"}</div>);\r\n                    errorModal(errorMsg);\r\n                }\r\n            } else {\r\n                thisObj.props.addWorkDataset(wds, () => thisObj.setState({\r\n                    WORK_BLOCKS: thisObj.workBlocks(wds),\r\n                    WORKVARIABLETYPE1: [],\r\n                    WORKVARIABLETYPE2: [],\r\n                    selected_workDS: \"\",\r\n                }));\r\n            }\r\n\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    executeStep = (block_selected) => {\r\n        try {\r\n            let { selectedTargetObj, allValues, NCICODELISTDATA, work_datasets } = thisObj.props;\r\n            let { Standards, SourceDataset, MappingList } = allValues;\r\n\r\n            //for selected block to validate that block alone\r\n            const validXML = Blockly.Xml.blockToDom(block_selected);\r\n            if (validXML.children[validXML.children.length - 1].localName == \"next\") {\r\n                validXML.children[validXML.children.length - 1].remove();\r\n            }\r\n\r\n            //validate selected block \r\n            //for selcted \r\n            //Following function find the step and return that block chain alone\r\n            //Validate selected step block alone\r\n            let tempWorkspce1 = new Blockly.Workspace();\r\n            Blockly.Xml.domToBlock(tempWorkspce1, validXML);\r\n            //normal validateion & no work validation\r\n            let validate_sel_blcoks = tempWorkspce1.getAllBlocks();\r\n            const th = this;\r\n\r\n            //for rename\r\n            let root_blk = block_selected.getRootBlock();\r\n            //1.filter all the variables that needs to be renamed if Rename block used\r\n            //2.Check Duplication (do not rename multiple columns with the same name).\r\n            let { variableRenameList, duplicate } = GetRenameVariables(validate_sel_blcoks, SourceDataset, MappingList, work_datasets);\r\n\r\n            let impact = new ImpactValidation(Standards, SourceDataset, validXML);\r\n            impact.stepblk = validate_sel_blcoks;\r\n            impact.MappingList = MappingList;\r\n            impact.WorkDatatset = [];\r\n            impact.variableRenameList = variableRenameList;\r\n            impact.ImpactValidationOfUsedBlocks();\r\n            impact.NCICODELISTDATA = NCICODELISTDATA;\r\n            !impact.impacted && impact.ImapctNCICodeListValidationWorkspace();\r\n\r\n            if (validXML &&\r\n                StepBlockValidation(\"step_type_and_step_type_variable\", validate_sel_blcoks)) {\r\n                if (checkXML(validate_sel_blcoks)) {\r\n                    if (!impact.impacted && duplicate.length == 0) {\r\n\r\n                        const datasetName = validXML.querySelector('[name=\"temp_dsname\"]').textContent;\r\n                        const variablename = block_selected.getField(\"temp_varname\");\r\n\r\n                        if (datasetName !== \"\" && (!variablename || variablename.getValue() !== \"\")) {\r\n                            let XMLValue = new XMLSerializer().serializeToString(validXML);\r\n                            const xmlfinal = `<xml xmlns=\"https://developers.google.com/blockly/xml\">` + XMLValue + `</xml>`;\r\n                            //console.log(xmlfinal);\r\n\r\n                            this.getSASMacro(xmlfinal).then((macro) => {\r\n                                //console.log(macro);\r\n                                if (macro !== \"\") {\r\n                                    th.executeStepMacro(macro, datasetName, variablename);\r\n                                } else {\r\n                                    hideProgress();\r\n                                }\r\n                            });\r\n\r\n                        } else {\r\n                            let errorMsg = [];\r\n                            datasetName === \"\" && errorMsg.push(<div key={errorMsg.length + 1}>{errorMsg.length + 1}. {\"Enter Data Table Name.\"}</div>);\r\n                            (variablename && variablename.getValue() === \"\") && errorMsg.push(<div key={errorMsg.length + 1}>{errorMsg.length + 1}. {\"Enter Variable Name.\"}</div>);\r\n                            errorModal(errorMsg);\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let err = [];\r\n                        //!impact.work_exist && (err.push(FormErrorHtmlIfObj(\"The following Works are not available\", impact.NotAvailWorkList)));\r\n                        //Impact error\r\n                        impact.impacted && (err.push(FormErrorHtmlIfObj(\"The following blocks are impacted\", impact.ImpactedList)));\r\n\r\n                        //column duplication error due to rename\r\n                        duplicate.length > 0 && err.push(FormErrorIfArray(\"Rename variables should be unique\", duplicate));\r\n\r\n                        errorModal(err);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                errorModal(\"Mapping Rule cannot be empty.\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    executeStepMacro = (stepmacro = \"\", dsname = \"\", varname = \"\") => {\r\n        const thisObj = this;\r\n        let { work_datasets } = thisObj.props;\r\n        const execmacro = stepmacro;\r\n        const StudyID = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\r\n        showProgress();\r\n        let ds = ''\r\n        ds = dsname;\r\n        let domain = ''\r\n        if (this.props.action == CREATE) {\r\n            domain = this.props.selectedTargetObj.TargetDomain;\r\n        } else if (this.props.action == UPDATE) {\r\n            domain = this.props.MappingConstruct.targetDataSet;\r\n        }\r\n\r\n        CallServerPost(\"Py/ExecSasWork\", { 'program': execmacro, 'dataset': ds, 'username': JSON.parse(sessionStorage.userProfile).userName, 'domain': domain, StudyID: StudyID }).then((response) => {\r\n            hideProgress();\r\n            if (response.status == 1 && 'value' in response) {\r\n                const res = response.value;\r\n\r\n                if (res != undefined && res != null && res !== \"\") {\r\n                    if (\"LOG\" in res && \"LST\" in res) {\r\n                        thisObj.setState({ log: res[\"LOG\"], lstHTML: res[\"LST\"], sasmacro: execmacro });\r\n                    } else if (\"LOG\" in res) {\r\n                        thisObj.setState({ log: res[\"LOG\"], sasmacro: execmacro, lstHTML: \"\" });\r\n                    } else {\r\n                        thisObj.setState({ sasmacro: execmacro, lstHTML: \"\", log: \"\" });\r\n                    }\r\n                    if (\"dataset\" in res && res[\"dataset\"] != \"\") {\r\n                        let returnJSON = (va) => {\r\n                            try {\r\n                                return JSON.parse(va);\r\n                            }\r\n                            catch (e) {\r\n                                return []\r\n                            }\r\n                        }\r\n                        try {\r\n                            thisObj.props.addWorkTable(JSON.parse(res[\"dataset\"]), ds, JSON.parse(res[\"columns\"]), () => {\r\n                                thisObj.setState({ WORK_BLOCKS: thisObj.workBlocks(thisObj.props.work_datasets) });\r\n                            });\r\n                        } catch (e) {\r\n                            console.log('invalid json');\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    errorModal(\"Something went wrong!\");\r\n                    thisObj.setState({ sasmacro: execmacro, lstHTML: \"\", log: res[\"LOG\"] });\r\n                }\r\n            } else {\r\n                errorModal(\"Something went wrong!\")\r\n                thisObj.setState({ sasmacro: execmacro, lstHTML: \"\", log: \"\" });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n    //For merge \r\n    mergeVariables = (obj) => {\r\n        try {\r\n            let { SourceDataset, Standards, MappingList } = thisObj.props.allValues;\r\n            let { merge_name } = thisObj.state;\r\n            let { work_datasets } = thisObj.props;\r\n\r\n            let bothDatasetsPrimaryIds = [];\r\n\r\n            //Get Used variable Blocks in Merge block\r\n            let first_used_dataset = obj.getInputTargetBlock(\"datasets_to_merge\");\r\n            let second_used_dataset = first_used_dataset.getNextBlock();\r\n\r\n            //Get what are all the variable need to Rename  \r\n            let { variableRenameList, duplicate } = GetRenameVariables(obj.getDescendants(), SourceDataset, MappingList, work_datasets);\r\n            if (duplicate.length == 0) {\r\n                let getCommonVariavles = (block) => {\r\n                    if (block) {\r\n                        if ('data' in block && block.data !== null) {\r\n                            let data = JSON.parse(block.data);\r\n                            switch (data.blockType) {\r\n                                case \"Source\":\r\n                                    {\r\n                                        bothDatasetsPrimaryIds.push(data.TABLE_NAME);\r\n\r\n                                        //Rename the variable ,if a rename block exists \r\n                                        let renameVars = variableRenameList[data.TABLE_NAME + \"@_\" + \"SourceVar\"];\r\n\r\n                                        let out = {};\r\n                                        SourceDataset.Variable.filter(va => {\r\n                                            if (va.TABLE_NAME === data.TABLE_NAME) {\r\n                                                let renameTo = renameVars && renameVars[va.COLUMN_NAME] && renameVars[va.COLUMN_NAME].renameTo;\r\n\r\n                                                let col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : va.COLUMN_NAME;\r\n\r\n                                                out[col_Name] = { ...va, COLUMN_NAME: col_Name };\r\n                                            }\r\n                                        });\r\n                                        return out;\r\n                                    }\r\n                                case \"Target\":\r\n                                    {\r\n                                        let target_variables = {};\r\n\r\n                                        let varible = Standards.Variable.filter(\r\n                                            v =>\r\n                                                v.cdiscDataStdDomainMetadataID ===\r\n                                                data.cdiscDataStdDomainMetadataID\r\n                                        );\r\n\r\n\r\n                                        bothDatasetsPrimaryIds.push(data.cdiscDataStdDomainMetadataID);\r\n                                        //Rename the variable ,if a rename block exists \r\n                                        let renameVars = variableRenameList[data.domain + \"@_\" + \"TargetVar\"];\r\n\r\n                                        varible.map(va => {\r\n                                            let mappingConstruct = MappingDatas.MappingList.find(\r\n                                                mapper =>\r\n                                                    mapper.cdiscDataStdVariableMetadataID ===\r\n                                                    va.cdiscDataStdVariableMetadataID\r\n                                            );\r\n                                            if (typeof mappingConstruct === 'object' &&\r\n                                                mappingConstruct || (va.domain && strLowerCase(va.domain).includes('_int'))) {\r\n\r\n\r\n                                                let renameTo = renameVars && renameVars[va.variableName] && renameVars[va.variableName].renameTo;\r\n                                                let col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : va.variableName;\r\n\r\n                                                target_variables[col_Name] = { ...va, variableName: col_Name };\r\n                                            }\r\n                                        });\r\n                                        return target_variables;\r\n                                    }\r\n                                case \"Work\":\r\n                                    {\r\n                                        let out = {};\r\n                                        bothDatasetsPrimaryIds.push(data.name);\r\n                                        //Rename the variable ,if a rename block exists \r\n                                        let renameVars = variableRenameList[data.name + \"@_\" + \"WorkVar\"];\r\n                                        work_datasets.filter(v => {\r\n                                            if (v.memname.toUpperCase() === data.name.toUpperCase()) {\r\n                                                let renameTo = renameVars && renameVars[v.name] && renameVars[v.name].renameTo;\r\n                                                let col_Name = isNotNull(renameTo) ? renameTo.toUpperCase() : v.name;\r\n                                                out[col_Name] = { ...v, name: col_Name };\r\n                                            }\r\n                                        });\r\n                                        return out;\r\n                                    }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                if (first_used_dataset && second_used_dataset) {\r\n\r\n                    let firstdataset_data = validJSON(first_used_dataset.data);\r\n                    let firstdataset_name = firstdataset_data.blockType === \"Source\" ? firstdataset_data.TABLE_NAME : firstdataset_data.blockType === \"Target\" ? firstdataset_data.domain : firstdataset_data.name;\r\n\r\n                    let seconddataset_data = validJSON(second_used_dataset.data);\r\n                    let seconddataset_name = seconddataset_data.blockType === \"Source\" ? seconddataset_data.TABLE_NAME : seconddataset_data.blockType === \"Target\" ? seconddataset_data.domain : seconddataset_data.name;\r\n\r\n                    if (merge_name !== \"Merge(\" + firstdataset_name + \",\" + seconddataset_name + \")\") {\r\n                        //Filter variable here                   \r\n                        let first_datset_variable = getCommonVariavles(first_used_dataset);\r\n                        let second_datset_variable = getCommonVariavles(second_used_dataset);\r\n                        //FInd which dataset is this\r\n                        let F_Dataset_Var_KeyName = firstdataset_data.blockType === \"Source\" ? \"COLUMN_NAME\" : firstdataset_data.blockType === \"Target\" ? \"variableName\" : \"name\";\r\n                        let S_Dataset_Var_KeyName = seconddataset_data.blockType === \"Source\" ? \"COLUMN_NAME\" : seconddataset_data.blockType === \"Target\" ? \"variableName\" : \"name\";\r\n                        //end\r\n\r\n                        let HTML = [];\r\n                        (Object.keys(first_datset_variable) || []).map(fst_dskey => {\r\n                            let vari = first_datset_variable[fst_dskey];\r\n                            if ((Object.keys(second_datset_variable) || []).some(sec_dskey => fst_dskey.toLocaleLowerCase() === sec_dskey.toLocaleLowerCase())) {\r\n                                let data = vari;\r\n                                if (data.COLUMN_NAME) {\r\n                                    HTML.push(<React.Fragment key={\"src_fgmt_key_\" + data.TABLE_NAME + data.COLUMN_NAME}>\r\n                                        <Block editable={false} type=\"variable_type_drop_multi\" >\r\n                                            <Field name=\"dropvar_name\">\r\n                                                {data.COLUMN_NAME.toUpperCase()}\r\n                                            </Field>()\r\n                                <data>{JSON.stringify({ ...data, bothParentDataset: bothDatasetsPrimaryIds.toString() })}</data>\r\n                                        </Block>\r\n                                    </React.Fragment>)\r\n                                }\r\n                                else if (data.variableName) {\r\n                                    HTML.push(<React.Fragment key={\"tgtfmt_var_\" + data.variableName}>\r\n                                        <Block editable={false} type=\"variable_type_drop_multi\" >\r\n                                            <Field name=\"dropvar_name\">\r\n                                                {data.variableName.toUpperCase()}\r\n                                            </Field>\r\n                                            <data>{JSON.stringify({ ...data, bothParentDataset: bothDatasetsPrimaryIds.toString() })}</data>\r\n                                        </Block>\r\n                                    </React.Fragment>);\r\n                                }\r\n                                else if (data.name) {\r\n                                    HTML.push(<React.Fragment key={data.name + \"work_fgv_key\"}>\r\n                                        <Block editable={false} type=\"variable_type_drop_multi\" >\r\n                                            <Field name=\"dropvar_name\">\r\n                                                {data.name.toUpperCase()}\r\n                                            </Field>\r\n                                            <data>{JSON.stringify({ ...data, bothParentDataset: bothDatasetsPrimaryIds.toString() })}</data>\r\n                                        </Block>\r\n                                    </React.Fragment>);\r\n                                }\r\n                                return false;\r\n                            }\r\n                        });\r\n                        thisObj.setState({ DROPVAR: [], merge_name: \"\" }, () => {\r\n                            thisObj.setState({ DROPVAR: HTML, merge_name: \"Merge(\" + firstdataset_name + \",\" + seconddataset_name + \")\" });\r\n                        })\r\n                    }\r\n                    else {\r\n                        thisObj.setState({ DROPVAR: [], merge_name: \"\" });\r\n                    }\r\n                }\r\n                else {\r\n                    thisObj.setState({ DROPVAR: [], merge_name: \"\" });\r\n\r\n                }\r\n            }\r\n            else {\r\n                errorModal(FormErrorHtmlIfObj(\"Rename variables should be unique\", duplicate));\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    clearMergeVar = () => {\r\n        thisObj.setState({ DROPVAR: [], merge_name: \"\" });\r\n    }\r\n\r\n    workspacecancel = () => {\r\n        let { action } = this.props;\r\n        Blockly.DropDownDiv.hide();\r\n        Blockly.ContextMenu.hide();\r\n\r\n        this.props.clearWorkSpace(action)\r\n    }\r\n    cancelCustom = () => {\r\n        this.setState({ customVisible: false });\r\n    }\r\n    savecustomprogram = (program) => {\r\n        this.setState({ customVisible: false, customprogram: program });\r\n    }\r\n\r\n    //importFromLibrary\r\n    importFromLibrary = () => {\r\n        const { MappingConstruct, action } = this.props;\r\n        this.props.ImportDataFromMappingLibrary(MappingConstruct, this.formXMLByMappingLibrary);\r\n    }\r\n\r\n    formXMLByMappingLibrary = (importedMappingXML) => {\r\n        Blockly.getMainWorkspace().clear();\r\n        Blockly.Xml.domToWorkspace(Blockly.getMainWorkspace(), Blockly.Xml.textToDom(importedMappingXML.constructJson));\r\n        this.props.setActiveKey();\r\n    }\r\n    getInitxml = (initialXml, MappingConstruct) => {\r\n        return MappingConstruct && MappingConstruct.constructJson && MappingConstruct.constructJson != \"\" ? MappingConstruct.constructJson : initialXml\r\n    }\r\n    render() {\r\n        const { DROPVAR, merge_name, WORKVARIABLETYPE1, WORKVARIABLETYPE2,\r\n            paneSize, dsName, sasmacro, activeKey, MappingTitle,\r\n            SOURCE, TARGET, WORK_BLOCKS, SOURCEVARIABLETYPE1, SOURCEVARIABLETYPE2, TARGETVARIABLETYPE1, TARGETVARIABLETYPE2,\r\n            selected_sourceDS, selected_targetDS, selected_workDS,\r\n            showConfirmation, blockInit, initXML, minSize, log, resultSet, loading, lstHTML, NCICODELISTDATA, initialXml, bulkMapData, customVisible, customprogram } = this.state;\r\n        const { action, showProgramArea, MappingConstruct } = this.props;\r\n        const { constructJson } = this.props.action === UPDATE ? MappingConstruct : {};\r\n\r\n\r\n        const xml = this.props.action === CREATE ? this.getInitxml(initialXml, MappingConstruct) : constructJson && constructJson != \"\" ? constructJson : initialXml;\r\n        return (\r\n            <div style={{ height: \"100%\" }} id=\"BlocklyWorkspace\" >\r\n                <SplitPane split=\"horizontal\"\r\n                    onChange={size => {\r\n                        window.dispatchEvent(new Event('resize'));\r\n                        thisObj.setState({ paneSize: { first: size[0] + \"px\", second: size[1] + \"px\" } });\r\n                    }}>\r\n                    <Pane initialSize={paneSize.first} minSize=\"10%\">\r\n                        <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n                            <div style={{ height: \"100%\", display: blockInit ? \"block\" : \"none\", flexDirection: \"column\" }}>\r\n                                <BlocklyComponent\r\n                                    style={{ height: \"100%\", width: \"100%\" }}\r\n                                    ref={this.simpleWorkspace}\r\n                                    readOnly={false}\r\n                                    move={{\r\n                                        scrollbars: true,\r\n                                        drag: true,\r\n                                        wheel: true\r\n                                    }}\r\n                                    RemoveVariables={this.RemoveVariables}\r\n                                    sourceVariableBlocks={this.SourceVariableBlocks}\r\n                                    targetVariableBlocks={this.TargetVariableBlocks}\r\n                                    workVariableBlocks={this.workVariableBlocks}\r\n                                    setCurrentStep={this.setCurrentStep}\r\n                                    manualClick={this.manualClick}\r\n                                    mergeVariables={this.mergeVariables}\r\n                                    clearMergeVar={this.clearMergeVar}\r\n                                    initialXml={xml}>\r\n                                    <Category name=\"Variable Operations\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                                        {\r\n                                            this.props.mappingBlocks.filter(b => b.view_category === \"variable_ops\").map((block) => {\r\n                                                return (\r\n                                                    <Block type={block.type} >\r\n                                                        <data>{JSON.stringify({ mappingBlockID: block.mappingBlockID, name: block.name, category: block.category, view_category: block.view_category, order: block.order, type: block.type })}\r\n                                                        </data>\r\n                                                    </Block>);\r\n                                            })\r\n                                        }\r\n                                    </Category>\r\n                                    <Category name=\"DataTable Operations\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                                        {\r\n                                            this.props.mappingBlocks.filter(b => b.view_category === \"datatable_ops\" &&\r\n                                                b.type.indexOf(\"exec\") === -1).map((block) => {\r\n                                                    return (\r\n                                                        <Block type={block.type} >\r\n                                                            <data>{JSON.stringify({ mappingBlockID: block.mappingBlockID, name: block.name, category: block.category, view_category: block.view_category, order: block.order, type: block.type })}\r\n                                                            </data>\r\n                                                        </Block>);\r\n                                                })\r\n                                        }\r\n                                    </Category>\r\n                                    <Category name=\"Literals\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                                        {\r\n                                            this.props.mappingBlocks.filter(b => b.view_category === \"literal_ops\").map((block) => {\r\n                                                return (\r\n                                                    <Block type={block.type} >\r\n                                                        <data>{JSON.stringify({ mappingBlockID: block.mappingBlockID, name: block.name, category: block.category, view_category: block.view_category, order: block.order, type: block.type })}\r\n                                                        </data>\r\n                                                    </Block>);\r\n\r\n                                            })\r\n                                        }\r\n                                    </Category>\r\n                                    <Category name=\"Conditions\" colour=\"%{BKY_LOGIC_HUE}\">\r\n                                        {\r\n                                            this.props.mappingBlocks.filter(b => b.view_category === \"condition_ops\").map((block) => {\r\n                                                return (\r\n                                                    <Block type={block.type} >\r\n                                                        <data>{JSON.stringify({ mappingBlockID: block.mappingBlockID, name: block.name, category: block.category, view_category: block.view_category, order: block.order, type: block.type })}\r\n                                                        </data>\r\n                                                    </Block>);\r\n\r\n                                            })\r\n                                        }\r\n                                    </Category>\r\n                                    <Category name=\"Operation Attributes\" colour=\"%{BKY_LOGIC_HUE}\">\r\n\r\n                                        {\r\n                                            this.props.mappingBlocks.filter(b => b.view_category === \"operation_attr_ops\").map((block) => {\r\n                                                return (\r\n                                                    <Block type={block.type} >\r\n                                                        <data>{JSON.stringify({ mappingBlockID: block.mappingBlockID, name: block.name, category: block.category, view_category: block.view_category, order: block.order, type: block.type })}\r\n                                                        </data>\r\n                                                    </Block>);\r\n\r\n                                            })\r\n                                        }\r\n                                    </Category>\r\n\r\n                                    <Category name=\"Source DataTable\" colour=\"20\">\r\n                                        {SOURCE}\r\n                                    </Category>\r\n                                    <Category name=\"Target DataTable\" colour=\"250\">\r\n                                        {TARGET}\r\n                                    </Category>\r\n                                    {WORK_BLOCKS.length > 0 && <Category name=\"Work DataTable\" colour=\"250\">\r\n                                        {WORK_BLOCKS}\r\n                                    </Category>\r\n                                    }\r\n                                    {\r\n                                        NCICODELISTDATA.block.length > 0 &&\r\n                                        <Category name={NCICODELISTDATA.name} colour=\"100\">\r\n                                            {NCICODELISTDATA.block}\r\n                                        </Category>\r\n                                    }\r\n\r\n                                    {\r\n                                        bulkMapData.block.length > 0 &&\r\n                                        <Category name={bulkMapData.name} colour=\"100\">\r\n                                            {bulkMapData.block}\r\n                                        </Category>\r\n                                    }\r\n\r\n                                    {SOURCEVARIABLETYPE1.length > 0 &&\r\n                                        <Category name={selected_sourceDS} colour=\"65\">\r\n                                            {SOURCEVARIABLETYPE1}\r\n                                        </Category>}\r\n\r\n                                    {TARGETVARIABLETYPE1.length > 0 &&\r\n                                        <Category name={selected_targetDS} colour=\"300\">\r\n                                            {TARGETVARIABLETYPE1}\r\n                                        </Category>\r\n                                    }\r\n                                    {\r\n                                        WORKVARIABLETYPE1.length > 0 &&\r\n                                        <Category name={selected_workDS} colour=\"300\">\r\n                                            {WORKVARIABLETYPE1}\r\n                                        </Category>\r\n                                    }\r\n                                    {\r\n                                        DROPVAR.length > 0 &&\r\n                                        <Category name={merge_name} colour=\"300\">\r\n                                            {DROPVAR}\r\n                                        </Category>\r\n                                    }\r\n                                </BlocklyComponent>\r\n\r\n                            </div>\r\n                            <Row style={{ paddingTop: 10 }}>\r\n\r\n                                <Button\r\n                                    type=\"danger\"\r\n                                    onClick={() => this.workspacecancel(action)}\r\n                                >\r\n                                    {\"Cancel\"}\r\n                                </Button>\r\n\r\n\r\n                                <Button\r\n                                    style={{ float: \"right\" }}\r\n                                    className=\"ant-btn-primary\"\r\n                                    onClick={this.validateRule}\r\n                                >\r\n                                    <i className=\"fas fa-save\" style={{ paddingRight: 5 }}></i>\r\n                                    {action === CREATE ? CREATE : UPDATE}\r\n                                </Button>\r\n                                <Button\r\n                                    style={{ float: \"right\", marginRight: 10 }}\r\n                                    className=\"saveBtn\"\r\n                                    disabled={action === CREATE ? true : false}\r\n                                    onClick={() => this.saveRule(\"Progress Save\", true)}\r\n                                >\r\n                                    <i className=\"fas fa-save\" style={{ paddingRight: 5 }}> </i>\r\n                                    {\"Save Progress\"}\r\n                                </Button>\r\n                                <Button\r\n                                    style={{ float: \"right\", marginRight: 10, height: 27 }}\r\n                                    className=\"ant-btn-primary\"\r\n                                    onClick={() => {\r\n                                        this.genrateProgram();\r\n                                    }}\r\n                                >\r\n                                    <i className=\"fas fa-save\" style={{ paddingRight: 5 }}></i>\r\n                                    {\"Generate Program\"}\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"ant-btn tealbtn\"\r\n                                    style={{\r\n                                        float: \"right\",\r\n                                        marginRight: 10,\r\n                                        height: 27,\r\n                                        backgroundColor: \"#08979C\",\r\n                                        color: \"#fff\"\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        this.importFromLibrary();\r\n                                    }}\r\n                                >\r\n                                    <i className=\"fas fa-file-import\" style={{ paddingRight: 5 }} ></i>\r\n                                    {\"Copy From Library\"}\r\n                                </Button>\r\n                            </Row>\r\n                        </div>\r\n                    </Pane>\r\n                    {showProgramArea &&\r\n                        <Pane minSize={\"20px\"} initialSize={paneSize.second} style={{ display: showProgramArea ? \"block\" : \"none\" }}>\r\n                            <BlockWorkResult log={log} lstHTML={lstHTML} sasmacro={sasmacro} executeMacro={this.executeMacro} />\r\n                        </Pane>\r\n                    }\r\n                </SplitPane>\r\n                {\r\n                    customVisible && <CustomProgram\r\n                        targetDomainVariable={this.props.targetDomainVariable}\r\n                        programType={this.state.programType}\r\n                        customVisible={customVisible}\r\n                        saveprogram={this.savecustomprogram}\r\n                        cancelCustom={this.cancelCustom}\r\n                        customprogram={customprogram}\r\n                        activityDetails={this.props.activityDetails}\r\n                    />\r\n                }\r\n                <ConfirmModal loading={false} title=\"Update Mapping\" SubmitButtonName=\"Update\" onSubmit={this.saveRule} visible={showConfirmation} handleCancel={() => this.handleChangeReasonCancel()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst WrappedApp = Form.create()(BlocklyWorkspace);\r\n\r\nexport default WrappedApp;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}