{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar Lazy = /** @class */function () {\n  function Lazy(executor) {\n    this.executor = executor;\n    this._didRun = false;\n  }\n  /**\r\n   * Get the wrapped value.\r\n   *\r\n   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\r\n   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\r\n   */\n  Lazy.prototype.getValue = function () {\n    if (!this._didRun) {\n      try {\n        this._value = this.executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    }\n    if (this._error) {\n      throw this._error;\n    }\n    return this._value;\n  };\n  Object.defineProperty(Lazy.prototype, \"rawValue\", {\n    /**\r\n     * Get the wrapped value without forcing evaluation.\r\n     */\n    get: function get() {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Lazy;\n}();\nexport { Lazy };","map":{"version":3,"names":["Lazy","executor","_didRun","prototype","getValue","_value","err","_error","Object","defineProperty","get","enumerable","configurable"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/lazy.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar Lazy = /** @class */ (function () {\r\n    function Lazy(executor) {\r\n        this.executor = executor;\r\n        this._didRun = false;\r\n    }\r\n    /**\r\n     * Get the wrapped value.\r\n     *\r\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\r\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\r\n     */\r\n    Lazy.prototype.getValue = function () {\r\n        if (!this._didRun) {\r\n            try {\r\n                this._value = this.executor();\r\n            }\r\n            catch (err) {\r\n                this._error = err;\r\n            }\r\n            finally {\r\n                this._didRun = true;\r\n            }\r\n        }\r\n        if (this._error) {\r\n            throw this._error;\r\n        }\r\n        return this._value;\r\n    };\r\n    Object.defineProperty(Lazy.prototype, \"rawValue\", {\r\n        /**\r\n         * Get the wrapped value without forcing evaluation.\r\n         */\r\n        get: function () { return this._value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Lazy;\r\n}());\r\nexport { Lazy };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAG,aAAe,YAAY;EAClC,SAASA,IAAI,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIF,IAAI,CAACG,SAAS,CAACC,QAAQ,GAAG,YAAY;IAClC,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACf,IAAI;QACA,IAAI,CAACG,MAAM,GAAG,IAAI,CAACJ,QAAQ,EAAE;MACjC,CAAC,CACD,OAAOK,GAAG,EAAE;QACR,IAAI,CAACC,MAAM,GAAGD,GAAG;MACrB,CAAC,SACO;QACJ,IAAI,CAACJ,OAAO,GAAG,IAAI;MACvB;IACJ;IACA,IAAI,IAAI,CAACK,MAAM,EAAE;MACb,MAAM,IAAI,CAACA,MAAM;IACrB;IACA,OAAO,IAAI,CAACF,MAAM;EACtB,CAAC;EACDG,MAAM,CAACC,cAAc,CAACT,IAAI,CAACG,SAAS,EAAE,UAAU,EAAE;IAC9C;AACR;AACA;IACQO,GAAG,EAAE,eAAY;MAAE,OAAO,IAAI,CAACL,MAAM;IAAE,CAAC;IACxCM,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOZ,IAAI;AACf,CAAC,EAAG;AACJ,SAASA,IAAI"},"metadata":{},"sourceType":"module"}