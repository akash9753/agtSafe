{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport * as types from '../../../base/common/types.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { values } from '../../../base/common/map.js';\nexport var Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport var allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nvar ConfigurationRegistry = /** @class */function () {\n  function ConfigurationRegistry() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultOverridesConfigurationNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultOverridesConfigurationNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n  }\n  ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\n    if (validate === void 0) {\n      validate = true;\n    }\n    this.registerConfigurations([configuration], validate);\n  };\n  ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\n    var _this = this;\n    if (validate === void 0) {\n      validate = true;\n    }\n    var properties = [];\n    configurations.forEach(function (configuration) {\n      properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n      _this.configurationContributors.push(configuration);\n      _this.registerJSONConfiguration(configuration);\n    });\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire(properties);\n  };\n  ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\n    for (var _i = 0, overrideIdentifiers_1 = overrideIdentifiers; _i < overrideIdentifiers_1.length; _i++) {\n      var overrideIdentifier = overrideIdentifiers_1[_i];\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    this.updateOverridePropertyPatternKey();\n  };\n  ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope) {\n    if (validate === void 0) {\n      validate = true;\n    }\n    if (scope === void 0) {\n      scope = 3 /* WINDOW */;\n    }\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    var propertyKeys = [];\n    var properties = configuration.properties;\n    if (properties) {\n      for (var key in properties) {\n        if (validate && validateProperty(key)) {\n          delete properties[key];\n          continue;\n        }\n        // fill in default values\n        var property = properties[key];\n        var defaultValue = property.default;\n        if (types.isUndefined(defaultValue)) {\n          property.default = getDefaultValue(property.type);\n        }\n        if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n        }\n        // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n        propertyKeys.push(key);\n      }\n    }\n    var subNodes = configuration.allOf;\n    if (subNodes) {\n      for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\n        var node = subNodes_1[_i];\n        propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope));\n      }\n    }\n    return propertyKeys;\n  };\n  ConfigurationRegistry.prototype.getConfigurationProperties = function () {\n    return this.configurationProperties;\n  };\n  ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\n    var _this = this;\n    var register = function register(configuration) {\n      var properties = configuration.properties;\n      if (properties) {\n        for (var key in properties) {\n          allSettings.properties[key] = properties[key];\n          switch (properties[key].scope) {\n            case 1 /* APPLICATION */:\n              applicationSettings.properties[key] = properties[key];\n              break;\n            case 2 /* MACHINE */:\n              machineSettings.properties[key] = properties[key];\n              break;\n            case 6 /* MACHINE_OVERRIDABLE */:\n              machineOverridableSettings.properties[key] = properties[key];\n              break;\n            case 3 /* WINDOW */:\n              windowSettings.properties[key] = properties[key];\n              break;\n            case 4 /* RESOURCE */:\n              resourceSettings.properties[key] = properties[key];\n              break;\n            case 5 /* LANGUAGE_OVERRIDABLE */:\n              resourceSettings.properties[key] = properties[key];\n              _this.resourceLanguageSettingsSchema.properties[key] = properties[key];\n              break;\n          }\n        }\n      }\n      var subNodes = configuration.allOf;\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    };\n    register(configuration);\n  };\n  ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\n    var _a;\n    for (var _i = 0, _b = values(this.overrideIdentifiers); _i < _b.length; _i++) {\n      var overrideIdentifier = _b[_i];\n      var overrideIdentifierProperty = \"[\" + overrideIdentifier + \"]\";\n      var resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId,\n        default: (_a = this.defaultOverridesConfigurationNode.properties[overrideIdentifierProperty]) === null || _a === void 0 ? void 0 : _a.default\n      };\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n    this._onDidSchemaChange.fire();\n  };\n  return ConfigurationRegistry;\n}();\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function getDefaultValue(type) {\n  var t = Array.isArray(type) ? type[0] : type;\n  switch (t) {\n    case 'boolean':\n      return false;\n    case 'integer':\n    case 'number':\n      return 0;\n    case 'string':\n      return '';\n    case 'array':\n      return [];\n    case 'object':\n      return {};\n    default:\n      return null;\n  }\n}\nvar configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n  return null;\n}","map":{"version":3,"names":["nls","Emitter","Registry","types","Extensions","JSONExtensions","values","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","defaultOverridesConfigurationNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","prototype","registerConfiguration","configuration","validate","registerConfigurations","configurations","_this","forEach","push","apply","validateAndRegisterProperties","registerJSONConfiguration","fire","registerOverrideIdentifiers","_i","overrideIdentifiers_1","length","overrideIdentifier","add","updateOverridePropertyPatternKey","scope","isUndefinedOrNull","propertyKeys","key","validateProperty","property","defaultValue","default","isUndefined","getDefaultValue","type","OVERRIDE_PROPERTY_PATTERN","test","undefined","hasOwnProperty","included","subNodes","allOf","subNodes_1","node","getConfigurationProperties","register","_a","_b","overrideIdentifierProperty","resourceLanguagePropertiesSchema","description","$ref","OVERRIDE_PROPERTY","RegExp","t","Array","isArray","configurationRegistry"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nimport { values } from '../../../base/common/map.js';\r\nexport var Extensions = {\r\n    Configuration: 'base.contributions.configuration'\r\n};\r\nexport var allSettings = { properties: {}, patternProperties: {} };\r\nexport var applicationSettings = { properties: {}, patternProperties: {} };\r\nexport var machineSettings = { properties: {}, patternProperties: {} };\r\nexport var machineOverridableSettings = { properties: {}, patternProperties: {} };\r\nexport var windowSettings = { properties: {}, patternProperties: {} };\r\nexport var resourceSettings = { properties: {}, patternProperties: {} };\r\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\r\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\r\nvar ConfigurationRegistry = /** @class */ (function () {\r\n    function ConfigurationRegistry() {\r\n        this.overrideIdentifiers = new Set();\r\n        this._onDidSchemaChange = new Emitter();\r\n        this._onDidUpdateConfiguration = new Emitter();\r\n        this.defaultOverridesConfigurationNode = {\r\n            id: 'defaultOverrides',\r\n            title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\r\n            properties: {}\r\n        };\r\n        this.configurationContributors = [this.defaultOverridesConfigurationNode];\r\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\r\n        this.configurationProperties = {};\r\n        this.excludedConfigurationProperties = {};\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n    }\r\n    ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\r\n        if (validate === void 0) { validate = true; }\r\n        this.registerConfigurations([configuration], validate);\r\n    };\r\n    ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\r\n        var _this = this;\r\n        if (validate === void 0) { validate = true; }\r\n        var properties = [];\r\n        configurations.forEach(function (configuration) {\r\n            properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\r\n            _this.configurationContributors.push(configuration);\r\n            _this.registerJSONConfiguration(configuration);\r\n        });\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n        this._onDidSchemaChange.fire();\r\n        this._onDidUpdateConfiguration.fire(properties);\r\n    };\r\n    ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\r\n        for (var _i = 0, overrideIdentifiers_1 = overrideIdentifiers; _i < overrideIdentifiers_1.length; _i++) {\r\n            var overrideIdentifier = overrideIdentifiers_1[_i];\r\n            this.overrideIdentifiers.add(overrideIdentifier);\r\n        }\r\n        this.updateOverridePropertyPatternKey();\r\n    };\r\n    ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope) {\r\n        if (validate === void 0) { validate = true; }\r\n        if (scope === void 0) { scope = 3 /* WINDOW */; }\r\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\r\n        var propertyKeys = [];\r\n        var properties = configuration.properties;\r\n        if (properties) {\r\n            for (var key in properties) {\r\n                if (validate && validateProperty(key)) {\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                // fill in default values\r\n                var property = properties[key];\r\n                var defaultValue = property.default;\r\n                if (types.isUndefined(defaultValue)) {\r\n                    property.default = getDefaultValue(property.type);\r\n                }\r\n                if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\r\n                }\r\n                else {\r\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\r\n                }\r\n                // Add to properties maps\r\n                // Property is included by default if 'included' is unspecified\r\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\r\n                    this.excludedConfigurationProperties[key] = properties[key];\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.configurationProperties[key] = properties[key];\r\n                }\r\n                propertyKeys.push(key);\r\n            }\r\n        }\r\n        var subNodes = configuration.allOf;\r\n        if (subNodes) {\r\n            for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\r\n                var node = subNodes_1[_i];\r\n                propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope));\r\n            }\r\n        }\r\n        return propertyKeys;\r\n    };\r\n    ConfigurationRegistry.prototype.getConfigurationProperties = function () {\r\n        return this.configurationProperties;\r\n    };\r\n    ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\r\n        var _this = this;\r\n        var register = function (configuration) {\r\n            var properties = configuration.properties;\r\n            if (properties) {\r\n                for (var key in properties) {\r\n                    allSettings.properties[key] = properties[key];\r\n                    switch (properties[key].scope) {\r\n                        case 1 /* APPLICATION */:\r\n                            applicationSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 2 /* MACHINE */:\r\n                            machineSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 6 /* MACHINE_OVERRIDABLE */:\r\n                            machineOverridableSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 3 /* WINDOW */:\r\n                            windowSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 4 /* RESOURCE */:\r\n                            resourceSettings.properties[key] = properties[key];\r\n                            break;\r\n                        case 5 /* LANGUAGE_OVERRIDABLE */:\r\n                            resourceSettings.properties[key] = properties[key];\r\n                            _this.resourceLanguageSettingsSchema.properties[key] = properties[key];\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            var subNodes = configuration.allOf;\r\n            if (subNodes) {\r\n                subNodes.forEach(register);\r\n            }\r\n        };\r\n        register(configuration);\r\n    };\r\n    ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\r\n        var _a;\r\n        for (var _i = 0, _b = values(this.overrideIdentifiers); _i < _b.length; _i++) {\r\n            var overrideIdentifier = _b[_i];\r\n            var overrideIdentifierProperty = \"[\" + overrideIdentifier + \"]\";\r\n            var resourceLanguagePropertiesSchema = {\r\n                type: 'object',\r\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\r\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\r\n                $ref: resourceLanguageSettingsSchemaId,\r\n                default: (_a = this.defaultOverridesConfigurationNode.properties[overrideIdentifierProperty]) === null || _a === void 0 ? void 0 : _a.default\r\n            };\r\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n        }\r\n        this._onDidSchemaChange.fire();\r\n    };\r\n    return ConfigurationRegistry;\r\n}());\r\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\r\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\r\nexport function getDefaultValue(type) {\r\n    var t = Array.isArray(type) ? type[0] : type;\r\n    switch (t) {\r\n        case 'boolean':\r\n            return false;\r\n        case 'integer':\r\n        case 'number':\r\n            return 0;\r\n        case 'string':\r\n            return '';\r\n        case 'array':\r\n            return [];\r\n        case 'object':\r\n            return {};\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nvar configurationRegistry = new ConfigurationRegistry();\r\nRegistry.add(Extensions.Configuration, configurationRegistry);\r\nexport function validateProperty(property) {\r\n    if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\r\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\r\n    }\r\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\r\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}