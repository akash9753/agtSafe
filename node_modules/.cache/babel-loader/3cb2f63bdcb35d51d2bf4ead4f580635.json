{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\User\\\\TelephoneComponent.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport PhoneInput, { formatPhoneNumber, formatPhoneNumberIntl, isValidPhoneNumber } from 'react-phone-number-input';\nimport { checkNullorbalnk } from '../Utility/validator';\nimport TelephoneInput from 'react-phone-number-input/input';\nimport labels from 'react-phone-number-input/locale/ru';\nimport { Form } from 'antd';\nimport { isSupportedCountry } from 'react-phone-number-input';\nvar FormItem = Form.Item;\nexport function Telephone(property) {\n  var field = property.field,\n    SelCountry = property.SelCountry,\n    allData = property.allData,\n    getFieldDecorator = property.getFieldDecorator;\n  var _useState = useState(field.defaultValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  var setvalue = function setvalue(value) {\n    setValue(value);\n  };\n  var telephoneValidation = function telephoneValidation() {\n    if (value) {\n      var form = allData.props.form;\n      //get error\n      var _field = form.getFieldInstance(\"Telephone\");\n      var error = _field.getAttribute(\"error\");\n      if (error) {\n        allData.props.form.setFields({\n          Telephone: {\n            value: value,\n            errors: [new Error(error)]\n          }\n        });\n      } else {\n        form.setFields({\n          Telephone: {\n            value: value\n          }\n        });\n      }\n    }\n  };\n  var validation = function validation(rule, value, callback) {\n    if (value) {\n      var form = allData.props.form;\n      //get error\n      var _field2 = form.getFieldInstance(\"Telephone\");\n      var error = _field2.getAttribute(\"error\");\n      if (error) {\n        callback('');\n      } else {\n        callback();\n        return;\n      }\n    } else {\n      callback();\n      return;\n    }\n  };\n  //when keyup\n  useEffect(function () {\n    if (field.editable) {\n      telephoneValidation();\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(FormItem, {\n    label: field.displayName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }\n  }, getFieldDecorator(field.attributeName, {\n    onKeyDown: setvalue,\n    rules: [{\n      regExPattern: \"/^(?!.*  )[A-Za-z0-9 ]+$/\",\n      validator: validation,\n      message: \"Enter valid number\"\n    }],\n    initialValue: field.defaultValue,\n    value: value,\n    //validateTrigger: ['onKeyup', 'onBlur'],\n    valuePropName: 'value'\n  })( /*#__PURE__*/React.createElement(TelephoneInput, {\n    size: \"small\",\n    className: \"ant-input ant-input-sm\",\n    country: isSupportedCountry(SelCountry) ? SelCountry : \"IN\",\n    countryName: isSupportedCountry(SelCountry) ? SelCountry : \"IN\",\n    onChange: setValue,\n    tabIndex: 0,\n    international: true,\n    withCountryCallingCode: true,\n    error: value ? isValidPhoneNumber(value) ? undefined : field.inputTypeErrorMessage : '',\n    id: field.attributeName,\n    disabled: !field.editable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","useEffect","PhoneInput","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","checkNullorbalnk","TelephoneInput","labels","Form","isSupportedCountry","FormItem","Item","Telephone","property","field","SelCountry","allData","getFieldDecorator","defaultValue","value","setValue","setvalue","telephoneValidation","form","props","getFieldInstance","error","getAttribute","setFields","errors","Error","validation","rule","callback","editable","displayName","attributeName","onKeyDown","rules","regExPattern","validator","message","initialValue","valuePropName","undefined","inputTypeErrorMessage"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/User/TelephoneComponent.js"],"sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport PhoneInput, { formatPhoneNumber, formatPhoneNumberIntl, isValidPhoneNumber } from 'react-phone-number-input'\r\nimport {\r\n\r\n    checkNullorbalnk\r\n} from '../Utility/validator';\r\nimport TelephoneInput from 'react-phone-number-input/input'\r\nimport labels from 'react-phone-number-input/locale/ru'\r\nimport { Form } from 'antd';\r\nimport { isSupportedCountry } from 'react-phone-number-input'\r\n\r\n\r\nconst FormItem = Form.Item;\r\nexport function Telephone(property) {\r\n    let { field, SelCountry, allData, getFieldDecorator } = property;\r\n\r\n    let [value, setValue] = useState(field.defaultValue);\r\n    const setvalue = (value) => {\r\n\r\n        setValue(value)\r\n    }\r\n\r\n    const telephoneValidation = () => {\r\n        if (value) {\r\n            let { form } = allData.props;\r\n            //get error\r\n            let field = form.getFieldInstance(\"Telephone\");\r\n            let error = field.getAttribute(\"error\");\r\n            if (error) {\r\n                allData.props.form.setFields({\r\n                    Telephone: {\r\n                        value: value,\r\n                        errors: [new Error(error)],\r\n                    },\r\n                });\r\n            } else {\r\n                form.setFields({\r\n                    Telephone: {\r\n                        value: value,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const validation = (rule, value, callback) => {\r\n        if (value) {\r\n            let { form } = allData.props;\r\n            //get error\r\n            let field = form.getFieldInstance(\"Telephone\");\r\n            let error = field.getAttribute(\"error\");\r\n            if (error) {\r\n                callback('');\r\n            } else {\r\n                callback();\r\n                return;\r\n            }\r\n        } else {\r\n            callback();\r\n            return;\r\n        }\r\n    }\r\n    //when keyup\r\n    useEffect(() => {\r\n        if (field.editable) {\r\n            telephoneValidation();\r\n        }\r\n    }, [value])\r\n\r\n\r\n\r\n    return <FormItem\r\n        label={field.displayName}\r\n    >\r\n        {\r\n            getFieldDecorator(field.attributeName, {\r\n                onKeyDown: setvalue,\r\n                rules: [{\r\n                        regExPattern: \"/^(?!.*  )[A-Za-z0-9 ]+$/\",\r\n                    validator: validation, message: \"Enter valid number\"}],\r\n                initialValue: field.defaultValue,\r\n                value: value,\r\n                //validateTrigger: ['onKeyup', 'onBlur'],\r\n                valuePropName: 'value',\r\n            })(<TelephoneInput\r\n                size=\"small\"\r\n                className={\"ant-input ant-input-sm\"}\r\n                country={isSupportedCountry(SelCountry) ? SelCountry : \"IN\"}\r\n                countryName={isSupportedCountry(SelCountry) ? SelCountry : \"IN\"}\r\n                onChange={setValue}\r\n                tabIndex={0}\r\n                international\r\n                withCountryCallingCode\r\n                error={value ? (isValidPhoneNumber(value) ? undefined : field.inputTypeErrorMessage) : ''}\r\n                id={field.attributeName}\r\n                disabled={(!field.editable)}\r\n            />)}\r\n    </FormItem>\r\n\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}