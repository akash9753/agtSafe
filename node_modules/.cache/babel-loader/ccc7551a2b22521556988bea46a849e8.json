{"ast":null,"code":"//import React, { Component } from 'react';\n//import { Document, Page, pdfjs } from 'react-pdf/dist/entry.webpack';\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\n//const highlightPattern = (text, pattern) => {\n\n//    //const regex = new RegExp(highlightWords.join('|'), 'gi')\n//    const splitText = text.split(pattern);\n\n//    if (splitText.length <= 1) {\n//        return text;\n//    }\n\n//    const matches = text.match(pattern);\n//    //const matches = pattern;\n\n//    return splitText.reduce((arr, element, index) => (matches[index] ? [\n//        ...arr,\n//        element,\n//        <mark>\n//            {matches[index]}\n//        </mark>,\n//    ] : [...arr, element]), []);\n//};\n\n//export default class AnnotatedCRFModalContent extends Component {\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            numPages: null,\n//            pageNumber: 1,\n//            searchText: '',\n//        };\n//    }\n//    componentDidMount() {\n\n//        document.getElementById('pdfContainer').addEventListener('wheel', this.onScrollPDF.bind(this));\n//    }\n\n//    //componentWillUnmount() {\n//    //    document.getElementById('pdfContainer').removeEventListener('wheel', this.onScrollPDF.bind(this));\n//    //}\n\n//    onDocumentLoadSuccess = ({ numPages }) => {\n//        this.setState({ numPages });\n//    }\n//    changePage = (event) => {\n//        this.setState({\n//            pageNumber: parseInt(event.target.childNodes[0].dataset.pageNumber)\n//        });\n//    }\n//   // makeTextRenderer = searchText => textItem => highlightPattern(textItem.str, searchText);\n//    makeTextRenderer(searchText) {\n//        return function (textItem) {\n//            return highlightPattern(textItem.str, searchText);\n//        }\n//    }\n//    onChange = event => this.setState({ searchText: event.target.value });\n\n//    onScrollPDF = (event) => {\n//        var containerHeight = document.getElementById(\"pdfContainer\").getBoundingClientRect().height;\n//        var containerMargin = containerHeight / 2;\n//        var greaterPage = 0;\n//        for (var i = 1; i <= this.state.numPages; i++) {\n//            var topPos = document.getElementById(\"page_\" + i).getBoundingClientRect().top;\n//            var bottomPos = topPos + document.getElementById(\"page_\" + i).getBoundingClientRect().height;\n//            if ((topPos >= 0 && topPos <= containerMargin) || (bottomPos > 0 && bottomPos >= containerMargin && bottomPos <= containerHeight)) {\n//                if (i > greaterPage) {\n//                    greaterPage = i;\n//                }\n//            }\n//        }\n//        if (greaterPage > 0 && this.state.pageNumber != greaterPage) {\n//            this.setState({ pageNumber: greaterPage })\n//        }\n//    }\n//    getCurrPagNum = (event) => {\n//        const thisObj = this;\n//        var page = parseInt(event.target.value);\n//        if (page >= 1 && page <= thisObj.state.numPages) {\n//            var scrollDiv = document.getElementById('pdfContainer');\n//            var topPos = document.getElementById('page_' + page).getBoundingClientRect().top;\n//            scrollDiv.scrollTop = topPos;\n//            thisObj.setState({\n//                pageNumber: page\n//            });\n//        } else {\n//            thisObj.setState({\n//                pageNumber: \"\"\n//            });\n//        }\n//    };\n//    render() {\n//        const { pageNumber, numPages, searchText } = this.state;\n//        var fileName = this.props.fileName;\n\n//        return (\n//            <div>\n//                <nav style={{ marginBottom: '15px' }}>\n//                    <input style={{ width: '60px' }} type=\"text\" id=\"currPgNum\" value={pageNumber} onChange={this.getCurrPagNum} />\n//                    <span> / {numPages}</span>\n//                    <div style={{ float: 'right' }}>\n//                        <label htmlFor=\"search\">Search:</label>\n//                        <input type=\"search\" id=\"search\" value={searchText} onChange={this.onChange} />\n//                    </div>\n//                </nav>\n//                <div id=\"pdfContainer\" style={{ height: 'calc(100vh - 120px)', overflow: 'scroll' }}\n//                >\n//                    <Document file={window.location.origin + '/Annotation/' + fileName} onLoadSuccess={this.onDocumentLoadSuccess} >\n//                        {Array.from(new Array(numPages), (el, index) => (\n//                            <Page key={`page_${index + 1}`} pageNumber={index + 1} customTextRenderer={this.makeTextRenderer(searchText)} renderInteractiveForms={true} >\n//                                <p>Page {index + 1} of {numPages}</p>\n//                            </Page>\n\n//                        ))}\n//                    </Document>\n//                </div>\n//            </div>\n//        );\n//    }\n//}","map":{"version":3,"names":[],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/TreeView/AnnotatedCRFModalContent.js"],"sourcesContent":["//import React, { Component } from 'react';\r\n//import { Document, Page, pdfjs } from 'react-pdf/dist/entry.webpack';\r\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n//const highlightPattern = (text, pattern) => {\r\n\r\n//    //const regex = new RegExp(highlightWords.join('|'), 'gi')\r\n//    const splitText = text.split(pattern);\r\n\r\n//    if (splitText.length <= 1) {\r\n//        return text;\r\n//    }\r\n\r\n//    const matches = text.match(pattern);\r\n//    //const matches = pattern;\r\n\r\n//    return splitText.reduce((arr, element, index) => (matches[index] ? [\r\n//        ...arr,\r\n//        element,\r\n//        <mark>\r\n//            {matches[index]}\r\n//        </mark>,\r\n//    ] : [...arr, element]), []);\r\n//};\r\n\r\n//export default class AnnotatedCRFModalContent extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            numPages: null,\r\n//            pageNumber: 1,\r\n//            searchText: '',\r\n//        };\r\n//    }\r\n//    componentDidMount() {\r\n\r\n//        document.getElementById('pdfContainer').addEventListener('wheel', this.onScrollPDF.bind(this));\r\n//    }\r\n\r\n//    //componentWillUnmount() {\r\n//    //    document.getElementById('pdfContainer').removeEventListener('wheel', this.onScrollPDF.bind(this));\r\n//    //}\r\n\r\n//    onDocumentLoadSuccess = ({ numPages }) => {\r\n//        this.setState({ numPages });\r\n//    }\r\n//    changePage = (event) => {\r\n//        this.setState({\r\n//            pageNumber: parseInt(event.target.childNodes[0].dataset.pageNumber)\r\n//        });\r\n//    }\r\n//   // makeTextRenderer = searchText => textItem => highlightPattern(textItem.str, searchText);\r\n//    makeTextRenderer(searchText) {\r\n//        return function (textItem) {\r\n//            return highlightPattern(textItem.str, searchText);\r\n//        }\r\n//    }\r\n//    onChange = event => this.setState({ searchText: event.target.value });\r\n\r\n//    onScrollPDF = (event) => {\r\n//        var containerHeight = document.getElementById(\"pdfContainer\").getBoundingClientRect().height;\r\n//        var containerMargin = containerHeight / 2;\r\n//        var greaterPage = 0;\r\n//        for (var i = 1; i <= this.state.numPages; i++) {\r\n//            var topPos = document.getElementById(\"page_\" + i).getBoundingClientRect().top;\r\n//            var bottomPos = topPos + document.getElementById(\"page_\" + i).getBoundingClientRect().height;\r\n//            if ((topPos >= 0 && topPos <= containerMargin) || (bottomPos > 0 && bottomPos >= containerMargin && bottomPos <= containerHeight)) {\r\n//                if (i > greaterPage) {\r\n//                    greaterPage = i;\r\n//                }\r\n//            }\r\n//        }\r\n//        if (greaterPage > 0 && this.state.pageNumber != greaterPage) {\r\n//            this.setState({ pageNumber: greaterPage })\r\n//        }\r\n//    }\r\n//    getCurrPagNum = (event) => {\r\n//        const thisObj = this;\r\n//        var page = parseInt(event.target.value);\r\n//        if (page >= 1 && page <= thisObj.state.numPages) {\r\n//            var scrollDiv = document.getElementById('pdfContainer');\r\n//            var topPos = document.getElementById('page_' + page).getBoundingClientRect().top;\r\n//            scrollDiv.scrollTop = topPos;\r\n//            thisObj.setState({\r\n//                pageNumber: page\r\n//            });\r\n//        } else {\r\n//            thisObj.setState({\r\n//                pageNumber: \"\"\r\n//            });\r\n//        }\r\n//    };\r\n//    render() {\r\n//        const { pageNumber, numPages, searchText } = this.state;\r\n//        var fileName = this.props.fileName;\r\n\r\n//        return (\r\n//            <div>\r\n//                <nav style={{ marginBottom: '15px' }}>\r\n//                    <input style={{ width: '60px' }} type=\"text\" id=\"currPgNum\" value={pageNumber} onChange={this.getCurrPagNum} />\r\n//                    <span> / {numPages}</span>\r\n//                    <div style={{ float: 'right' }}>\r\n//                        <label htmlFor=\"search\">Search:</label>\r\n//                        <input type=\"search\" id=\"search\" value={searchText} onChange={this.onChange} />\r\n//                    </div>\r\n//                </nav>\r\n//                <div id=\"pdfContainer\" style={{ height: 'calc(100vh - 120px)', overflow: 'scroll' }}\r\n//                >\r\n//                    <Document file={window.location.origin + '/Annotation/' + fileName} onLoadSuccess={this.onDocumentLoadSuccess} >\r\n//                        {Array.from(new Array(numPages), (el, index) => (\r\n//                            <Page key={`page_${index + 1}`} pageNumber={index + 1} customTextRenderer={this.makeTextRenderer(searchText)} renderInteractiveForms={true} >\r\n//                                <p>Page {index + 1} of {numPages}</p>\r\n//                            </Page>\r\n\r\n//                        ))}\r\n//                    </Document>\r\n//                </div>\r\n//            </div>\r\n//        );\r\n//    }\r\n//}"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}