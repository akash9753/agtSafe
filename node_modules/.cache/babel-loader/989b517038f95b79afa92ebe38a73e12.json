{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorColumns, CursorConfiguration, CursorContext, CursorState, EditOperationResult } from './cursorCommon.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport * as editorCommon from '../editorCommon.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { dispose } from '../../../base/common/lifecycle.js';\nfunction containsLineMappingChanged(events) {\n  for (var i = 0, len = events.length; i < len; i++) {\n    if (events[i].type === 8 /* ViewLineMappingChanged */) {\n      return true;\n    }\n  }\n  return false;\n}\nvar CursorStateChangedEvent = /** @class */function () {\n  function CursorStateChangedEvent(selections, modelVersionId, oldSelections, oldModelVersionId, source, reason) {\n    this.selections = selections;\n    this.modelVersionId = modelVersionId;\n    this.oldSelections = oldSelections;\n    this.oldModelVersionId = oldModelVersionId;\n    this.source = source;\n    this.reason = reason;\n  }\n  return CursorStateChangedEvent;\n}();\nexport { CursorStateChangedEvent };\n/**\r\n * A snapshot of the cursor and the model state\r\n */\nvar CursorModelState = /** @class */function () {\n  function CursorModelState(model, cursor) {\n    this.modelVersionId = model.getVersionId();\n    this.cursorState = cursor.getAll();\n  }\n  CursorModelState.prototype.equals = function (other) {\n    if (!other) {\n      return false;\n    }\n    if (this.modelVersionId !== other.modelVersionId) {\n      return false;\n    }\n    if (this.cursorState.length !== other.cursorState.length) {\n      return false;\n    }\n    for (var i = 0, len = this.cursorState.length; i < len; i++) {\n      if (!this.cursorState[i].equals(other.cursorState[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return CursorModelState;\n}();\nexport { CursorModelState };\nvar AutoClosedAction = /** @class */function () {\n  function AutoClosedAction(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\n    this._model = model;\n    this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n    this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n  }\n  AutoClosedAction.getAllAutoClosedCharacters = function (autoClosedActions) {\n    var autoClosedCharacters = [];\n    for (var _i = 0, autoClosedActions_1 = autoClosedActions; _i < autoClosedActions_1.length; _i++) {\n      var autoClosedAction = autoClosedActions_1[_i];\n      autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n    }\n    return autoClosedCharacters;\n  };\n  AutoClosedAction.prototype.dispose = function () {\n    this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n    this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n  };\n  AutoClosedAction.prototype.getAutoClosedCharactersRanges = function () {\n    var result = [];\n    for (var i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n      var decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n      if (decorationRange) {\n        result.push(decorationRange);\n      }\n    }\n    return result;\n  };\n  AutoClosedAction.prototype.isValid = function (selections) {\n    var enclosingRanges = [];\n    for (var i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n      var decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n      if (decorationRange) {\n        enclosingRanges.push(decorationRange);\n        if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n          // Stop tracking if the range becomes multiline...\n          return false;\n        }\n      }\n    }\n    enclosingRanges.sort(Range.compareRangesUsingStarts);\n    selections.sort(Range.compareRangesUsingStarts);\n    for (var i = 0; i < selections.length; i++) {\n      if (i >= enclosingRanges.length) {\n        return false;\n      }\n      if (!enclosingRanges[i].strictContainsRange(selections[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return AutoClosedAction;\n}();\nvar Cursor = /** @class */function (_super) {\n  __extends(Cursor, _super);\n  function Cursor(configuration, model, viewModel) {\n    var _this = _super.call(this) || this;\n    _this._onDidReachMaxCursorCount = _this._register(new Emitter());\n    _this.onDidReachMaxCursorCount = _this._onDidReachMaxCursorCount.event;\n    _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\n    _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._configuration = configuration;\n    _this._model = model;\n    _this._knownModelVersionId = _this._model.getVersionId();\n    _this._viewModel = viewModel;\n    _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\n    _this._cursors = new CursorCollection(_this.context);\n    _this._isHandling = false;\n    _this._isDoingComposition = false;\n    _this._selectionsWhenCompositionStarted = null;\n    _this._columnSelectData = null;\n    _this._autoClosedActions = [];\n    _this._prevEditOperationType = 0 /* Other */;\n    _this._register(_this._model.onDidChangeRawContent(function (e) {\n      _this._knownModelVersionId = e.versionId;\n      if (_this._isHandling) {\n        return;\n      }\n      var hadFlushEvent = e.containsEvent(1 /* Flush */);\n      _this._onModelContentChanged(hadFlushEvent);\n    }));\n    _this._register(viewModel.addEventListener(function (events) {\n      if (!containsLineMappingChanged(events)) {\n        return;\n      }\n      if (_this._knownModelVersionId !== _this._model.getVersionId()) {\n        // There are model change events that I didn't yet receive.\n        //\n        // This can happen when editing the model, and the view model receives the change events first,\n        // and the view model emits line mapping changed events, all before the cursor gets a chance to\n        // recover from markers.\n        //\n        // The model change listener above will be called soon and we'll ensure a valid cursor state there.\n        return;\n      }\n      // Ensure valid state\n      _this.setStates('viewModel', 0 /* NotSet */, _this.getAll());\n    }));\n    var updateCursorContext = function updateCursorContext() {\n      _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\n      _this._cursors.updateContext(_this.context);\n    };\n    _this._register(_this._model.onDidChangeLanguage(function (e) {\n      updateCursorContext();\n    }));\n    _this._register(_this._model.onDidChangeLanguageConfiguration(function () {\n      updateCursorContext();\n    }));\n    _this._register(_this._model.onDidChangeOptions(function () {\n      updateCursorContext();\n    }));\n    _this._register(_this._configuration.onDidChange(function (e) {\n      if (CursorConfiguration.shouldRecreate(e)) {\n        updateCursorContext();\n      }\n    }));\n    return _this;\n  }\n  Cursor.prototype.dispose = function () {\n    this._cursors.dispose();\n    this._autoClosedActions = dispose(this._autoClosedActions);\n    _super.prototype.dispose.call(this);\n  };\n  Cursor.prototype._validateAutoClosedActions = function () {\n    if (this._autoClosedActions.length > 0) {\n      var selections = this._cursors.getSelections();\n      for (var i = 0; i < this._autoClosedActions.length; i++) {\n        var autoClosedAction = this._autoClosedActions[i];\n        if (!autoClosedAction.isValid(selections)) {\n          autoClosedAction.dispose();\n          this._autoClosedActions.splice(i, 1);\n          i--;\n        }\n      }\n    }\n  };\n  // ------ some getters/setters\n  Cursor.prototype.getPrimaryCursor = function () {\n    return this._cursors.getPrimaryCursor();\n  };\n  Cursor.prototype.getLastAddedCursorIndex = function () {\n    return this._cursors.getLastAddedCursorIndex();\n  };\n  Cursor.prototype.getAll = function () {\n    return this._cursors.getAll();\n  };\n  Cursor.prototype.setStates = function (source, reason, states) {\n    if (states !== null && states.length > Cursor.MAX_CURSOR_COUNT) {\n      states = states.slice(0, Cursor.MAX_CURSOR_COUNT);\n      this._onDidReachMaxCursorCount.fire(undefined);\n    }\n    var oldState = new CursorModelState(this._model, this);\n    this._cursors.setStates(states);\n    this._cursors.normalize();\n    this._columnSelectData = null;\n    this._validateAutoClosedActions();\n    this._emitStateChangedIfNecessary(source, reason, oldState);\n  };\n  Cursor.prototype.setColumnSelectData = function (columnSelectData) {\n    this._columnSelectData = columnSelectData;\n  };\n  Cursor.prototype.reveal = function (source, horizontal, target, scrollType) {\n    this._revealRange(source, target, 0 /* Simple */, horizontal, scrollType);\n  };\n  Cursor.prototype.revealRange = function (source, revealHorizontal, viewRange, verticalType, scrollType) {\n    this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\n  };\n  Cursor.prototype.scrollTo = function (desiredScrollTop) {\n    this._viewModel.viewLayout.setScrollPositionSmooth({\n      scrollTop: desiredScrollTop\n    });\n  };\n  Cursor.prototype.saveState = function () {\n    var result = [];\n    var selections = this._cursors.getSelections();\n    for (var i = 0, len = selections.length; i < len; i++) {\n      var selection = selections[i];\n      result.push({\n        inSelectionMode: !selection.isEmpty(),\n        selectionStart: {\n          lineNumber: selection.selectionStartLineNumber,\n          column: selection.selectionStartColumn\n        },\n        position: {\n          lineNumber: selection.positionLineNumber,\n          column: selection.positionColumn\n        }\n      });\n    }\n    return result;\n  };\n  Cursor.prototype.restoreState = function (states) {\n    var desiredSelections = [];\n    for (var i = 0, len = states.length; i < len; i++) {\n      var state = states[i];\n      var positionLineNumber = 1;\n      var positionColumn = 1;\n      // Avoid missing properties on the literal\n      if (state.position && state.position.lineNumber) {\n        positionLineNumber = state.position.lineNumber;\n      }\n      if (state.position && state.position.column) {\n        positionColumn = state.position.column;\n      }\n      var selectionStartLineNumber = positionLineNumber;\n      var selectionStartColumn = positionColumn;\n      // Avoid missing properties on the literal\n      if (state.selectionStart && state.selectionStart.lineNumber) {\n        selectionStartLineNumber = state.selectionStart.lineNumber;\n      }\n      if (state.selectionStart && state.selectionStart.column) {\n        selectionStartColumn = state.selectionStart.column;\n      }\n      desiredSelections.push({\n        selectionStartLineNumber: selectionStartLineNumber,\n        selectionStartColumn: selectionStartColumn,\n        positionLineNumber: positionLineNumber,\n        positionColumn: positionColumn\n      });\n    }\n    this.setStates('restoreState', 0 /* NotSet */, CursorState.fromModelSelections(desiredSelections));\n    this.reveal('restoreState', true, 0 /* Primary */, 1 /* Immediate */);\n  };\n\n  Cursor.prototype._onModelContentChanged = function (hadFlushEvent) {\n    this._prevEditOperationType = 0 /* Other */;\n    if (hadFlushEvent) {\n      // a model.setValue() was called\n      this._cursors.dispose();\n      this._cursors = new CursorCollection(this.context);\n      this._validateAutoClosedActions();\n      this._emitStateChangedIfNecessary('model', 1 /* ContentFlush */, null);\n    } else {\n      var selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n      this.setStates('modelChange', 2 /* RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\n    }\n  };\n  Cursor.prototype.getSelection = function () {\n    return this._cursors.getPrimaryCursor().modelState.selection;\n  };\n  Cursor.prototype.getColumnSelectData = function () {\n    if (this._columnSelectData) {\n      return this._columnSelectData;\n    }\n    var primaryCursor = this._cursors.getPrimaryCursor();\n    var primaryPos = primaryCursor.viewState.selectionStart.getStartPosition();\n    var viewLineNumber = primaryPos.lineNumber;\n    var viewVisualColumn = CursorColumns.visibleColumnFromColumn2(this.context.config, this.context.viewModel, primaryPos);\n    return {\n      isReal: false,\n      fromViewLineNumber: viewLineNumber,\n      fromViewVisualColumn: viewVisualColumn,\n      toViewLineNumber: viewLineNumber,\n      toViewVisualColumn: viewVisualColumn\n    };\n  };\n  Cursor.prototype.getSelections = function () {\n    return this._cursors.getSelections();\n  };\n  Cursor.prototype.getViewSelections = function () {\n    return this._cursors.getViewSelections();\n  };\n  Cursor.prototype.getPosition = function () {\n    return this._cursors.getPrimaryCursor().modelState.position;\n  };\n  Cursor.prototype.setSelections = function (source, selections) {\n    this.setStates(source, 0 /* NotSet */, CursorState.fromModelSelections(selections));\n  };\n  Cursor.prototype.getPrevEditOperationType = function () {\n    return this._prevEditOperationType;\n  };\n  Cursor.prototype.setPrevEditOperationType = function (type) {\n    this._prevEditOperationType = type;\n  };\n  // ------ auxiliary handling logic\n  Cursor.prototype._pushAutoClosedAction = function (autoClosedCharactersRanges, autoClosedEnclosingRanges) {\n    var autoClosedCharactersDeltaDecorations = [];\n    var autoClosedEnclosingDeltaDecorations = [];\n    for (var i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n      autoClosedCharactersDeltaDecorations.push({\n        range: autoClosedCharactersRanges[i],\n        options: {\n          inlineClassName: 'auto-closed-character',\n          stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\n        }\n      });\n\n      autoClosedEnclosingDeltaDecorations.push({\n        range: autoClosedEnclosingRanges[i],\n        options: {\n          stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\n        }\n      });\n    }\n\n    var autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n    var autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n    this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n  };\n  Cursor.prototype._executeEditOperation = function (opResult) {\n    if (!opResult) {\n      // Nothing to execute\n      return;\n    }\n    if (opResult.shouldPushStackElementBefore) {\n      this._model.pushStackElement();\n    }\n    var result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n    if (result) {\n      // The commands were applied correctly\n      this._interpretCommandResult(result);\n      // Check for auto-closing closed characters\n      var autoClosedCharactersRanges = [];\n      var autoClosedEnclosingRanges = [];\n      for (var i = 0; i < opResult.commands.length; i++) {\n        var command = opResult.commands[i];\n        if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n          autoClosedCharactersRanges.push(command.closeCharacterRange);\n          autoClosedEnclosingRanges.push(command.enclosingRange);\n        }\n      }\n      if (autoClosedCharactersRanges.length > 0) {\n        this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n      }\n      this._prevEditOperationType = opResult.type;\n    }\n    if (opResult.shouldPushStackElementAfter) {\n      this._model.pushStackElement();\n    }\n  };\n  Cursor.prototype._interpretCommandResult = function (cursorState) {\n    if (!cursorState || cursorState.length === 0) {\n      cursorState = this._cursors.readSelectionFromMarkers();\n    }\n    this._columnSelectData = null;\n    this._cursors.setSelections(cursorState);\n    this._cursors.normalize();\n  };\n  // -----------------------------------------------------------------------------------------------------------\n  // ----- emitting events\n  Cursor.prototype._emitStateChangedIfNecessary = function (source, reason, oldState) {\n    var newState = new CursorModelState(this._model, this);\n    if (newState.equals(oldState)) {\n      return false;\n    }\n    var selections = this._cursors.getSelections();\n    var viewSelections = this._cursors.getViewSelections();\n    // Let the view get the event first.\n    try {\n      var eventsCollector = this._beginEmit();\n      eventsCollector.emit(new viewEvents.ViewCursorStateChangedEvent(viewSelections, selections));\n    } finally {\n      this._endEmit();\n    }\n    // Only after the view has been notified, let the rest of the world know...\n    if (!oldState || oldState.cursorState.length !== newState.cursorState.length || newState.cursorState.some(function (newCursorState, i) {\n      return !newCursorState.modelState.equals(oldState.cursorState[i].modelState);\n    })) {\n      var oldSelections = oldState ? oldState.cursorState.map(function (s) {\n        return s.modelState.selection;\n      }) : null;\n      var oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n      this._onDidChange.fire(new CursorStateChangedEvent(selections, newState.modelVersionId, oldSelections, oldModelVersionId, source || 'keyboard', reason));\n    }\n    return true;\n  };\n  Cursor.prototype._revealRange = function (source, revealTarget, verticalType, revealHorizontal, scrollType) {\n    var viewPositions = this._cursors.getViewPositions();\n    var viewPosition = viewPositions[0];\n    if (revealTarget === 1 /* TopMost */) {\n      for (var i = 1; i < viewPositions.length; i++) {\n        if (viewPositions[i].isBefore(viewPosition)) {\n          viewPosition = viewPositions[i];\n        }\n      }\n    } else if (revealTarget === 2 /* BottomMost */) {\n      for (var i = 1; i < viewPositions.length; i++) {\n        if (viewPosition.isBeforeOrEqual(viewPositions[i])) {\n          viewPosition = viewPositions[i];\n        }\n      }\n    } else {\n      if (viewPositions.length > 1) {\n        // no revealing!\n        return;\n      }\n    }\n    var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n    this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\n  };\n  Cursor.prototype.emitCursorRevealRange = function (source, viewRange, verticalType, revealHorizontal, scrollType) {\n    try {\n      var eventsCollector = this._beginEmit();\n      eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, verticalType, revealHorizontal, scrollType));\n    } finally {\n      this._endEmit();\n    }\n  };\n  // -----------------------------------------------------------------------------------------------------------\n  // ----- handlers beyond this point\n  Cursor.prototype._findAutoClosingPairs = function (edits) {\n    if (!edits.length) {\n      return null;\n    }\n    var indices = [];\n    for (var i = 0, len = edits.length; i < len; i++) {\n      var edit = edits[i];\n      if (!edit.text || edit.text.indexOf('\\n') >= 0) {\n        return null;\n      }\n      var m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n      if (!m) {\n        return null;\n      }\n      var closeChar = m[1];\n      var autoClosingPairsCandidates = this.context.config.autoClosingPairsClose2.get(closeChar);\n      if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n        return null;\n      }\n      var openChar = autoClosingPairsCandidates[0].open;\n      var closeCharIndex = edit.text.length - m[2].length - 1;\n      var openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n      if (openCharIndex === -1) {\n        return null;\n      }\n      indices.push([openCharIndex, closeCharIndex]);\n    }\n    return indices;\n  };\n  Cursor.prototype.executeEdits = function (source, edits, cursorStateComputer) {\n    var _this = this;\n    var autoClosingIndices = null;\n    if (source === 'snippet') {\n      autoClosingIndices = this._findAutoClosingPairs(edits);\n    }\n    if (autoClosingIndices) {\n      edits[0]._isTracked = true;\n    }\n    var autoClosedCharactersRanges = [];\n    var autoClosedEnclosingRanges = [];\n    var selections = this._model.pushEditOperations(this.getSelections(), edits, function (undoEdits) {\n      if (autoClosingIndices) {\n        for (var i = 0, len = autoClosingIndices.length; i < len; i++) {\n          var _a = autoClosingIndices[i],\n            openCharInnerIndex = _a[0],\n            closeCharInnerIndex = _a[1];\n          var undoEdit = undoEdits[i];\n          var lineNumber = undoEdit.range.startLineNumber;\n          var openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n          var closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n          autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n          autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n        }\n      }\n      var selections = cursorStateComputer(undoEdits);\n      if (selections) {\n        // Don't recover the selection from markers because\n        // we know what it should be.\n        _this._isHandling = true;\n      }\n      return selections;\n    });\n    if (selections) {\n      this._isHandling = false;\n      this.setSelections(source, selections);\n    }\n    if (autoClosedCharactersRanges.length > 0) {\n      this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n    }\n  };\n  Cursor.prototype.trigger = function (source, handlerId, payload) {\n    var H = editorCommon.Handler;\n    if (handlerId === H.CompositionStart) {\n      this._isDoingComposition = true;\n      this._selectionsWhenCompositionStarted = this.getSelections().slice(0);\n      return;\n    }\n    if (handlerId === H.CompositionEnd) {\n      this._isDoingComposition = false;\n    }\n    if (this._configuration.options.get(68 /* readOnly */)) {\n      // All the remaining handlers will try to edit the model,\n      // but we cannot edit when read only...\n      this._onDidAttemptReadOnlyEdit.fire(undefined);\n      return;\n    }\n    var oldState = new CursorModelState(this._model, this);\n    var cursorChangeReason = 0 /* NotSet */;\n    if (handlerId !== H.Undo && handlerId !== H.Redo) {\n      // TODO@Alex: if the undo/redo stack contains non-null selections\n      // it would also be OK to stop tracking selections here\n      this._cursors.stopTrackingSelections();\n    }\n    // ensure valid state on all cursors\n    this._cursors.ensureValidState();\n    this._isHandling = true;\n    try {\n      switch (handlerId) {\n        case H.Type:\n          this._type(source, payload.text);\n          break;\n        case H.ReplacePreviousChar:\n          this._replacePreviousChar(payload.text, payload.replaceCharCnt);\n          break;\n        case H.Paste:\n          cursorChangeReason = 4 /* Paste */;\n          this._paste(payload.text, payload.pasteOnNewLine, payload.multicursorText || []);\n          break;\n        case H.Cut:\n          this._cut();\n          break;\n        case H.Undo:\n          cursorChangeReason = 5 /* Undo */;\n          this._interpretCommandResult(this._model.undo());\n          break;\n        case H.Redo:\n          cursorChangeReason = 6 /* Redo */;\n          this._interpretCommandResult(this._model.redo());\n          break;\n        case H.ExecuteCommand:\n          this._externalExecuteCommand(payload);\n          break;\n        case H.ExecuteCommands:\n          this._externalExecuteCommands(payload);\n          break;\n        case H.CompositionEnd:\n          this._interpretCompositionEnd(source);\n          break;\n      }\n    } catch (err) {\n      onUnexpectedError(err);\n    }\n    this._isHandling = false;\n    if (handlerId !== H.Undo && handlerId !== H.Redo) {\n      this._cursors.startTrackingSelections();\n    }\n    this._validateAutoClosedActions();\n    if (this._emitStateChangedIfNecessary(source, cursorChangeReason, oldState)) {\n      this._revealRange(source, 0 /* Primary */, 0 /* Simple */, true, 0 /* Smooth */);\n    }\n  };\n\n  Cursor.prototype._interpretCompositionEnd = function (source) {\n    if (!this._isDoingComposition && source === 'keyboard') {\n      // composition finishes, let's check if we need to auto complete if necessary.\n      var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n      this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this._selectionsWhenCompositionStarted, this.getSelections(), autoClosedCharacters));\n      this._selectionsWhenCompositionStarted = null;\n    }\n  };\n  Cursor.prototype._type = function (source, text) {\n    if (!this._isDoingComposition && source === 'keyboard') {\n      // If this event is coming straight from the keyboard, look for electric characters and enter\n      var len = text.length;\n      var offset = 0;\n      while (offset < len) {\n        var charLength = strings.nextCharLength(text, offset);\n        var chr = text.substr(offset, charLength);\n        // Here we must interpret each typed character individually\n        var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n        this._executeEditOperation(TypeOperations.typeWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), autoClosedCharacters, chr));\n        offset += charLength;\n      }\n    } else {\n      this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text));\n    }\n  };\n  Cursor.prototype._replacePreviousChar = function (text, replaceCharCnt) {\n    this._executeEditOperation(TypeOperations.replacePreviousChar(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text, replaceCharCnt));\n  };\n  Cursor.prototype._paste = function (text, pasteOnNewLine, multicursorText) {\n    this._executeEditOperation(TypeOperations.paste(this.context.config, this.context.model, this.getSelections(), text, pasteOnNewLine, multicursorText));\n  };\n  Cursor.prototype._cut = function () {\n    this._executeEditOperation(DeleteOperations.cut(this.context.config, this.context.model, this.getSelections()));\n  };\n  Cursor.prototype._externalExecuteCommand = function (command) {\n    this._cursors.killSecondaryCursors();\n    this._executeEditOperation(new EditOperationResult(0 /* Other */, [command], {\n      shouldPushStackElementBefore: false,\n      shouldPushStackElementAfter: false\n    }));\n  };\n  Cursor.prototype._externalExecuteCommands = function (commands) {\n    this._executeEditOperation(new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: false,\n      shouldPushStackElementAfter: false\n    }));\n  };\n  Cursor.MAX_CURSOR_COUNT = 10000;\n  return Cursor;\n}(viewEvents.ViewEventEmitter);\nexport { Cursor };\nvar CommandExecutor = /** @class */function () {\n  function CommandExecutor() {}\n  CommandExecutor.executeCommands = function (model, selectionsBefore, commands) {\n    var ctx = {\n      model: model,\n      selectionsBefore: selectionsBefore,\n      trackedRanges: [],\n      trackedRangesDirection: []\n    };\n    var result = this._innerExecuteCommands(ctx, commands);\n    for (var i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n      ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\n    }\n\n    return result;\n  };\n  CommandExecutor._innerExecuteCommands = function (ctx, commands) {\n    if (this._arrayIsEmpty(commands)) {\n      return null;\n    }\n    var commandsData = this._getEditOperations(ctx, commands);\n    if (commandsData.operations.length === 0) {\n      return null;\n    }\n    var rawOperations = commandsData.operations;\n    var loserCursorsMap = this._getLoserCursorMap(rawOperations);\n    if (loserCursorsMap.hasOwnProperty('0')) {\n      // These commands are very messed up\n      console.warn('Ignoring commands');\n      return null;\n    }\n    // Remove operations belonging to losing cursors\n    var filteredOperations = [];\n    for (var i = 0, len = rawOperations.length; i < len; i++) {\n      if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\n        filteredOperations.push(rawOperations[i]);\n      }\n    }\n    // TODO@Alex: find a better way to do this.\n    // give the hint that edit operations are tracked to the model\n    if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n      filteredOperations[0]._isTracked = true;\n    }\n    var selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, function (inverseEditOperations) {\n      var groupedInverseEditOperations = [];\n      for (var i = 0; i < ctx.selectionsBefore.length; i++) {\n        groupedInverseEditOperations[i] = [];\n      }\n      for (var _i = 0, inverseEditOperations_1 = inverseEditOperations; _i < inverseEditOperations_1.length; _i++) {\n        var op = inverseEditOperations_1[_i];\n        if (!op.identifier) {\n          // perhaps auto whitespace trim edits\n          continue;\n        }\n        groupedInverseEditOperations[op.identifier.major].push(op);\n      }\n      var minorBasedSorter = function minorBasedSorter(a, b) {\n        return a.identifier.minor - b.identifier.minor;\n      };\n      var cursorSelections = [];\n      var _loop_1 = function _loop_1(i) {\n        if (groupedInverseEditOperations[i].length > 0) {\n          groupedInverseEditOperations[i].sort(minorBasedSorter);\n          cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\n            getInverseEditOperations: function getInverseEditOperations() {\n              return groupedInverseEditOperations[i];\n            },\n            getTrackedSelection: function getTrackedSelection(id) {\n              var idx = parseInt(id, 10);\n              var range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\n              if (ctx.trackedRangesDirection[idx] === 0 /* LTR */) {\n                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n              }\n              return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n            }\n          });\n        } else {\n          cursorSelections[i] = ctx.selectionsBefore[i];\n        }\n      };\n      for (var i = 0; i < ctx.selectionsBefore.length; i++) {\n        _loop_1(i);\n      }\n      return cursorSelections;\n    });\n    if (!selectionsAfter) {\n      selectionsAfter = ctx.selectionsBefore;\n    }\n    // Extract losing cursors\n    var losingCursors = [];\n    for (var losingCursorIndex in loserCursorsMap) {\n      if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n        losingCursors.push(parseInt(losingCursorIndex, 10));\n      }\n    }\n    // Sort losing cursors descending\n    losingCursors.sort(function (a, b) {\n      return b - a;\n    });\n    // Remove losing cursors\n    for (var _i = 0, losingCursors_1 = losingCursors; _i < losingCursors_1.length; _i++) {\n      var losingCursor = losingCursors_1[_i];\n      selectionsAfter.splice(losingCursor, 1);\n    }\n    return selectionsAfter;\n  };\n  CommandExecutor._arrayIsEmpty = function (commands) {\n    for (var i = 0, len = commands.length; i < len; i++) {\n      if (commands[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  CommandExecutor._getEditOperations = function (ctx, commands) {\n    var operations = [];\n    var hadTrackedEditOperation = false;\n    for (var i = 0, len = commands.length; i < len; i++) {\n      var command = commands[i];\n      if (command) {\n        var r = this._getEditOperationsFromCommand(ctx, i, command);\n        operations = operations.concat(r.operations);\n        hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n      }\n    }\n    return {\n      operations: operations,\n      hadTrackedEditOperation: hadTrackedEditOperation\n    };\n  };\n  CommandExecutor._getEditOperationsFromCommand = function (ctx, majorIdentifier, command) {\n    // This method acts as a transaction, if the command fails\n    // everything it has done is ignored\n    var operations = [];\n    var operationMinor = 0;\n    var addEditOperation = function addEditOperation(selection, text, forceMoveMarkers) {\n      if (forceMoveMarkers === void 0) {\n        forceMoveMarkers = false;\n      }\n      if (selection.isEmpty() && text === '') {\n        // This command wants to add a no-op => no thank you\n        return;\n      }\n      operations.push({\n        identifier: {\n          major: majorIdentifier,\n          minor: operationMinor++\n        },\n        range: selection,\n        text: text,\n        forceMoveMarkers: forceMoveMarkers,\n        isAutoWhitespaceEdit: command.insertsAutoWhitespace\n      });\n    };\n    var hadTrackedEditOperation = false;\n    var addTrackedEditOperation = function addTrackedEditOperation(selection, text, forceMoveMarkers) {\n      hadTrackedEditOperation = true;\n      addEditOperation(selection, text, forceMoveMarkers);\n    };\n    var trackSelection = function trackSelection(selection, trackPreviousOnEmpty) {\n      var stickiness;\n      if (selection.isEmpty()) {\n        if (typeof trackPreviousOnEmpty === 'boolean') {\n          if (trackPreviousOnEmpty) {\n            stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\n          } else {\n            stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\n          }\n        } else {\n          // Try to lock it with surrounding text\n          var maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n          if (selection.startColumn === maxLineColumn) {\n            stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\n          } else {\n            stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\n          }\n        }\n      } else {\n        stickiness = 1 /* NeverGrowsWhenTypingAtEdges */;\n      }\n\n      var l = ctx.trackedRanges.length;\n      var id = ctx.model._setTrackedRange(null, selection, stickiness);\n      ctx.trackedRanges[l] = id;\n      ctx.trackedRangesDirection[l] = selection.getDirection();\n      return l.toString();\n    };\n    var editOperationBuilder = {\n      addEditOperation: addEditOperation,\n      addTrackedEditOperation: addTrackedEditOperation,\n      trackSelection: trackSelection\n    };\n    try {\n      command.getEditOperations(ctx.model, editOperationBuilder);\n    } catch (e) {\n      // TODO@Alex use notification service if this should be user facing\n      // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n      onUnexpectedError(e);\n      return {\n        operations: [],\n        hadTrackedEditOperation: false\n      };\n    }\n    return {\n      operations: operations,\n      hadTrackedEditOperation: hadTrackedEditOperation\n    };\n  };\n  CommandExecutor._getLoserCursorMap = function (operations) {\n    // This is destructive on the array\n    operations = operations.slice(0);\n    // Sort operations with last one first\n    operations.sort(function (a, b) {\n      // Note the minus!\n      return -Range.compareRangesUsingEnds(a.range, b.range);\n    });\n    // Operations can not overlap!\n    var loserCursorsMap = {};\n    for (var i = 1; i < operations.length; i++) {\n      var previousOp = operations[i - 1];\n      var currentOp = operations[i];\n      if (previousOp.range.getStartPosition().isBefore(currentOp.range.getEndPosition())) {\n        var loserMajor = void 0;\n        if (previousOp.identifier.major > currentOp.identifier.major) {\n          // previousOp loses the battle\n          loserMajor = previousOp.identifier.major;\n        } else {\n          loserMajor = currentOp.identifier.major;\n        }\n        loserCursorsMap[loserMajor.toString()] = true;\n        for (var j = 0; j < operations.length; j++) {\n          if (operations[j].identifier.major === loserMajor) {\n            operations.splice(j, 1);\n            if (j < i) {\n              i--;\n            }\n            j--;\n          }\n        }\n        if (i > 0) {\n          i--;\n        }\n      }\n    }\n    return loserCursorsMap;\n  };\n  return CommandExecutor;\n}();","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","Emitter","strings","CursorCollection","CursorColumns","CursorConfiguration","CursorContext","CursorState","EditOperationResult","DeleteOperations","TypeOperations","TypeWithAutoClosingCommand","Range","Selection","editorCommon","viewEvents","dispose","containsLineMappingChanged","events","i","len","length","type","CursorStateChangedEvent","selections","modelVersionId","oldSelections","oldModelVersionId","source","reason","CursorModelState","model","cursor","getVersionId","cursorState","getAll","equals","other","AutoClosedAction","autoClosedCharactersDecorations","autoClosedEnclosingDecorations","_model","_autoClosedCharactersDecorations","_autoClosedEnclosingDecorations","getAllAutoClosedCharacters","autoClosedActions","autoClosedCharacters","_i","autoClosedActions_1","autoClosedAction","concat","getAutoClosedCharactersRanges","deltaDecorations","result","decorationRange","getDecorationRange","push","isValid","enclosingRanges","startLineNumber","endLineNumber","sort","compareRangesUsingStarts","strictContainsRange","Cursor","_super","configuration","viewModel","_this","call","_onDidReachMaxCursorCount","_register","onDidReachMaxCursorCount","event","_onDidAttemptReadOnlyEdit","onDidAttemptReadOnlyEdit","_onDidChange","onDidChange","_configuration","_knownModelVersionId","_viewModel","context","_cursors","_isHandling","_isDoingComposition","_selectionsWhenCompositionStarted","_columnSelectData","_autoClosedActions","_prevEditOperationType","onDidChangeRawContent","e","versionId","hadFlushEvent","containsEvent","_onModelContentChanged","addEventListener","setStates","updateCursorContext","updateContext","onDidChangeLanguage","onDidChangeLanguageConfiguration","onDidChangeOptions","shouldRecreate","_validateAutoClosedActions","getSelections","splice","getPrimaryCursor","getLastAddedCursorIndex","states","MAX_CURSOR_COUNT","slice","fire","undefined","oldState","normalize","_emitStateChangedIfNecessary","setColumnSelectData","columnSelectData","reveal","horizontal","target","scrollType","_revealRange","revealRange","revealHorizontal","viewRange","verticalType","emitCursorRevealRange","scrollTo","desiredScrollTop","viewLayout","setScrollPositionSmooth","scrollTop","saveState","selection","inSelectionMode","isEmpty","selectionStart","lineNumber","selectionStartLineNumber","column","selectionStartColumn","position","positionLineNumber","positionColumn","restoreState","desiredSelections","state","fromModelSelections","selectionsFromMarkers","readSelectionFromMarkers","getSelection","modelState","getColumnSelectData","primaryCursor","primaryPos","viewState","getStartPosition","viewLineNumber","viewVisualColumn","visibleColumnFromColumn2","config","isReal","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","toViewVisualColumn","getViewSelections","getPosition","setSelections","getPrevEditOperationType","setPrevEditOperationType","_pushAutoClosedAction","autoClosedCharactersRanges","autoClosedEnclosingRanges","autoClosedCharactersDeltaDecorations","autoClosedEnclosingDeltaDecorations","range","options","inlineClassName","stickiness","_executeEditOperation","opResult","shouldPushStackElementBefore","pushStackElement","CommandExecutor","executeCommands","commands","_interpretCommandResult","command","enclosingRange","closeCharacterRange","shouldPushStackElementAfter","newState","viewSelections","eventsCollector","_beginEmit","emit","ViewCursorStateChangedEvent","_endEmit","some","newCursorState","map","s","revealTarget","viewPositions","getViewPositions","viewPosition","isBefore","isBeforeOrEqual","ViewRevealRangeRequestEvent","_findAutoClosingPairs","edits","indices","edit","text","indexOf","m","match","closeChar","autoClosingPairsCandidates","autoClosingPairsClose2","get","openChar","open","closeCharIndex","openCharIndex","lastIndexOf","executeEdits","cursorStateComputer","autoClosingIndices","_isTracked","pushEditOperations","undoEdits","_a","openCharInnerIndex","closeCharInnerIndex","undoEdit","startColumn","trigger","handlerId","payload","H","Handler","CompositionStart","CompositionEnd","cursorChangeReason","Undo","Redo","stopTrackingSelections","ensureValidState","Type","_type","ReplacePreviousChar","_replacePreviousChar","replaceCharCnt","Paste","_paste","pasteOnNewLine","multicursorText","Cut","_cut","undo","redo","ExecuteCommand","_externalExecuteCommand","ExecuteCommands","_externalExecuteCommands","_interpretCompositionEnd","err","startTrackingSelections","compositionEndWithInterceptors","offset","charLength","nextCharLength","chr","substr","typeWithInterceptors","typeWithoutInterceptors","replacePreviousChar","paste","cut","killSecondaryCursors","ViewEventEmitter","selectionsBefore","ctx","trackedRanges","trackedRangesDirection","_innerExecuteCommands","_setTrackedRange","_arrayIsEmpty","commandsData","_getEditOperations","operations","rawOperations","loserCursorsMap","_getLoserCursorMap","console","warn","filteredOperations","identifier","major","toString","hadTrackedEditOperation","selectionsAfter","inverseEditOperations","groupedInverseEditOperations","inverseEditOperations_1","op","minorBasedSorter","a","minor","cursorSelections","_loop_1","computeCursorState","getInverseEditOperations","getTrackedSelection","id","idx","parseInt","_getTrackedRange","endColumn","losingCursors","losingCursorIndex","losingCursors_1","losingCursor","r","_getEditOperationsFromCommand","majorIdentifier","operationMinor","addEditOperation","forceMoveMarkers","isAutoWhitespaceEdit","insertsAutoWhitespace","addTrackedEditOperation","trackSelection","trackPreviousOnEmpty","maxLineColumn","getLineMaxColumn","l","getDirection","editOperationBuilder","getEditOperations","compareRangesUsingEnds","previousOp","currentOp","getEndPosition","loserMajor","j"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CursorCollection } from './cursorCollection.js';\r\nimport { CursorColumns, CursorConfiguration, CursorContext, CursorState, EditOperationResult } from './cursorCommon.js';\r\nimport { DeleteOperations } from './cursorDeleteOperations.js';\r\nimport { TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport * as editorCommon from '../editorCommon.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { dispose } from '../../../base/common/lifecycle.js';\r\nfunction containsLineMappingChanged(events) {\r\n    for (var i = 0, len = events.length; i < len; i++) {\r\n        if (events[i].type === 8 /* ViewLineMappingChanged */) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nvar CursorStateChangedEvent = /** @class */ (function () {\r\n    function CursorStateChangedEvent(selections, modelVersionId, oldSelections, oldModelVersionId, source, reason) {\r\n        this.selections = selections;\r\n        this.modelVersionId = modelVersionId;\r\n        this.oldSelections = oldSelections;\r\n        this.oldModelVersionId = oldModelVersionId;\r\n        this.source = source;\r\n        this.reason = reason;\r\n    }\r\n    return CursorStateChangedEvent;\r\n}());\r\nexport { CursorStateChangedEvent };\r\n/**\r\n * A snapshot of the cursor and the model state\r\n */\r\nvar CursorModelState = /** @class */ (function () {\r\n    function CursorModelState(model, cursor) {\r\n        this.modelVersionId = model.getVersionId();\r\n        this.cursorState = cursor.getAll();\r\n    }\r\n    CursorModelState.prototype.equals = function (other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.modelVersionId !== other.modelVersionId) {\r\n            return false;\r\n        }\r\n        if (this.cursorState.length !== other.cursorState.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = this.cursorState.length; i < len; i++) {\r\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return CursorModelState;\r\n}());\r\nexport { CursorModelState };\r\nvar AutoClosedAction = /** @class */ (function () {\r\n    function AutoClosedAction(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\r\n        this._model = model;\r\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\r\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\r\n    }\r\n    AutoClosedAction.getAllAutoClosedCharacters = function (autoClosedActions) {\r\n        var autoClosedCharacters = [];\r\n        for (var _i = 0, autoClosedActions_1 = autoClosedActions; _i < autoClosedActions_1.length; _i++) {\r\n            var autoClosedAction = autoClosedActions_1[_i];\r\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\r\n        }\r\n        return autoClosedCharacters;\r\n    };\r\n    AutoClosedAction.prototype.dispose = function () {\r\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\r\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\r\n    };\r\n    AutoClosedAction.prototype.getAutoClosedCharactersRanges = function () {\r\n        var result = [];\r\n        for (var i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\r\n            if (decorationRange) {\r\n                result.push(decorationRange);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    AutoClosedAction.prototype.isValid = function (selections) {\r\n        var enclosingRanges = [];\r\n        for (var i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\r\n            if (decorationRange) {\r\n                enclosingRanges.push(decorationRange);\r\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\r\n                    // Stop tracking if the range becomes multiline...\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        for (var i = 0; i < selections.length; i++) {\r\n            if (i >= enclosingRanges.length) {\r\n                return false;\r\n            }\r\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return AutoClosedAction;\r\n}());\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    function Cursor(configuration, model, viewModel) {\r\n        var _this = _super.call(this) || this;\r\n        _this._onDidReachMaxCursorCount = _this._register(new Emitter());\r\n        _this.onDidReachMaxCursorCount = _this._onDidReachMaxCursorCount.event;\r\n        _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\r\n        _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\r\n        _this._onDidChange = _this._register(new Emitter());\r\n        _this.onDidChange = _this._onDidChange.event;\r\n        _this._configuration = configuration;\r\n        _this._model = model;\r\n        _this._knownModelVersionId = _this._model.getVersionId();\r\n        _this._viewModel = viewModel;\r\n        _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n        _this._cursors = new CursorCollection(_this.context);\r\n        _this._isHandling = false;\r\n        _this._isDoingComposition = false;\r\n        _this._selectionsWhenCompositionStarted = null;\r\n        _this._columnSelectData = null;\r\n        _this._autoClosedActions = [];\r\n        _this._prevEditOperationType = 0 /* Other */;\r\n        _this._register(_this._model.onDidChangeRawContent(function (e) {\r\n            _this._knownModelVersionId = e.versionId;\r\n            if (_this._isHandling) {\r\n                return;\r\n            }\r\n            var hadFlushEvent = e.containsEvent(1 /* Flush */);\r\n            _this._onModelContentChanged(hadFlushEvent);\r\n        }));\r\n        _this._register(viewModel.addEventListener(function (events) {\r\n            if (!containsLineMappingChanged(events)) {\r\n                return;\r\n            }\r\n            if (_this._knownModelVersionId !== _this._model.getVersionId()) {\r\n                // There are model change events that I didn't yet receive.\r\n                //\r\n                // This can happen when editing the model, and the view model receives the change events first,\r\n                // and the view model emits line mapping changed events, all before the cursor gets a chance to\r\n                // recover from markers.\r\n                //\r\n                // The model change listener above will be called soon and we'll ensure a valid cursor state there.\r\n                return;\r\n            }\r\n            // Ensure valid state\r\n            _this.setStates('viewModel', 0 /* NotSet */, _this.getAll());\r\n        }));\r\n        var updateCursorContext = function () {\r\n            _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n            _this._cursors.updateContext(_this.context);\r\n        };\r\n        _this._register(_this._model.onDidChangeLanguage(function (e) {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeLanguageConfiguration(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeOptions(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._configuration.onDidChange(function (e) {\r\n            if (CursorConfiguration.shouldRecreate(e)) {\r\n                updateCursorContext();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    Cursor.prototype.dispose = function () {\r\n        this._cursors.dispose();\r\n        this._autoClosedActions = dispose(this._autoClosedActions);\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Cursor.prototype._validateAutoClosedActions = function () {\r\n        if (this._autoClosedActions.length > 0) {\r\n            var selections = this._cursors.getSelections();\r\n            for (var i = 0; i < this._autoClosedActions.length; i++) {\r\n                var autoClosedAction = this._autoClosedActions[i];\r\n                if (!autoClosedAction.isValid(selections)) {\r\n                    autoClosedAction.dispose();\r\n                    this._autoClosedActions.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // ------ some getters/setters\r\n    Cursor.prototype.getPrimaryCursor = function () {\r\n        return this._cursors.getPrimaryCursor();\r\n    };\r\n    Cursor.prototype.getLastAddedCursorIndex = function () {\r\n        return this._cursors.getLastAddedCursorIndex();\r\n    };\r\n    Cursor.prototype.getAll = function () {\r\n        return this._cursors.getAll();\r\n    };\r\n    Cursor.prototype.setStates = function (source, reason, states) {\r\n        if (states !== null && states.length > Cursor.MAX_CURSOR_COUNT) {\r\n            states = states.slice(0, Cursor.MAX_CURSOR_COUNT);\r\n            this._onDidReachMaxCursorCount.fire(undefined);\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        this._cursors.setStates(states);\r\n        this._cursors.normalize();\r\n        this._columnSelectData = null;\r\n        this._validateAutoClosedActions();\r\n        this._emitStateChangedIfNecessary(source, reason, oldState);\r\n    };\r\n    Cursor.prototype.setColumnSelectData = function (columnSelectData) {\r\n        this._columnSelectData = columnSelectData;\r\n    };\r\n    Cursor.prototype.reveal = function (source, horizontal, target, scrollType) {\r\n        this._revealRange(source, target, 0 /* Simple */, horizontal, scrollType);\r\n    };\r\n    Cursor.prototype.revealRange = function (source, revealHorizontal, viewRange, verticalType, scrollType) {\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.scrollTo = function (desiredScrollTop) {\r\n        this._viewModel.viewLayout.setScrollPositionSmooth({\r\n            scrollTop: desiredScrollTop\r\n        });\r\n    };\r\n    Cursor.prototype.saveState = function () {\r\n        var result = [];\r\n        var selections = this._cursors.getSelections();\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            result.push({\r\n                inSelectionMode: !selection.isEmpty(),\r\n                selectionStart: {\r\n                    lineNumber: selection.selectionStartLineNumber,\r\n                    column: selection.selectionStartColumn,\r\n                },\r\n                position: {\r\n                    lineNumber: selection.positionLineNumber,\r\n                    column: selection.positionColumn,\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    Cursor.prototype.restoreState = function (states) {\r\n        var desiredSelections = [];\r\n        for (var i = 0, len = states.length; i < len; i++) {\r\n            var state = states[i];\r\n            var positionLineNumber = 1;\r\n            var positionColumn = 1;\r\n            // Avoid missing properties on the literal\r\n            if (state.position && state.position.lineNumber) {\r\n                positionLineNumber = state.position.lineNumber;\r\n            }\r\n            if (state.position && state.position.column) {\r\n                positionColumn = state.position.column;\r\n            }\r\n            var selectionStartLineNumber = positionLineNumber;\r\n            var selectionStartColumn = positionColumn;\r\n            // Avoid missing properties on the literal\r\n            if (state.selectionStart && state.selectionStart.lineNumber) {\r\n                selectionStartLineNumber = state.selectionStart.lineNumber;\r\n            }\r\n            if (state.selectionStart && state.selectionStart.column) {\r\n                selectionStartColumn = state.selectionStart.column;\r\n            }\r\n            desiredSelections.push({\r\n                selectionStartLineNumber: selectionStartLineNumber,\r\n                selectionStartColumn: selectionStartColumn,\r\n                positionLineNumber: positionLineNumber,\r\n                positionColumn: positionColumn\r\n            });\r\n        }\r\n        this.setStates('restoreState', 0 /* NotSet */, CursorState.fromModelSelections(desiredSelections));\r\n        this.reveal('restoreState', true, 0 /* Primary */, 1 /* Immediate */);\r\n    };\r\n    Cursor.prototype._onModelContentChanged = function (hadFlushEvent) {\r\n        this._prevEditOperationType = 0 /* Other */;\r\n        if (hadFlushEvent) {\r\n            // a model.setValue() was called\r\n            this._cursors.dispose();\r\n            this._cursors = new CursorCollection(this.context);\r\n            this._validateAutoClosedActions();\r\n            this._emitStateChangedIfNecessary('model', 1 /* ContentFlush */, null);\r\n        }\r\n        else {\r\n            var selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\r\n            this.setStates('modelChange', 2 /* RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\r\n        }\r\n    };\r\n    Cursor.prototype.getSelection = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.selection;\r\n    };\r\n    Cursor.prototype.getColumnSelectData = function () {\r\n        if (this._columnSelectData) {\r\n            return this._columnSelectData;\r\n        }\r\n        var primaryCursor = this._cursors.getPrimaryCursor();\r\n        var primaryPos = primaryCursor.viewState.selectionStart.getStartPosition();\r\n        var viewLineNumber = primaryPos.lineNumber;\r\n        var viewVisualColumn = CursorColumns.visibleColumnFromColumn2(this.context.config, this.context.viewModel, primaryPos);\r\n        return {\r\n            isReal: false,\r\n            fromViewLineNumber: viewLineNumber,\r\n            fromViewVisualColumn: viewVisualColumn,\r\n            toViewLineNumber: viewLineNumber,\r\n            toViewVisualColumn: viewVisualColumn,\r\n        };\r\n    };\r\n    Cursor.prototype.getSelections = function () {\r\n        return this._cursors.getSelections();\r\n    };\r\n    Cursor.prototype.getViewSelections = function () {\r\n        return this._cursors.getViewSelections();\r\n    };\r\n    Cursor.prototype.getPosition = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.position;\r\n    };\r\n    Cursor.prototype.setSelections = function (source, selections) {\r\n        this.setStates(source, 0 /* NotSet */, CursorState.fromModelSelections(selections));\r\n    };\r\n    Cursor.prototype.getPrevEditOperationType = function () {\r\n        return this._prevEditOperationType;\r\n    };\r\n    Cursor.prototype.setPrevEditOperationType = function (type) {\r\n        this._prevEditOperationType = type;\r\n    };\r\n    // ------ auxiliary handling logic\r\n    Cursor.prototype._pushAutoClosedAction = function (autoClosedCharactersRanges, autoClosedEnclosingRanges) {\r\n        var autoClosedCharactersDeltaDecorations = [];\r\n        var autoClosedEnclosingDeltaDecorations = [];\r\n        for (var i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\r\n            autoClosedCharactersDeltaDecorations.push({\r\n                range: autoClosedCharactersRanges[i],\r\n                options: {\r\n                    inlineClassName: 'auto-closed-character',\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n            autoClosedEnclosingDeltaDecorations.push({\r\n                range: autoClosedEnclosingRanges[i],\r\n                options: {\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n        }\r\n        var autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\r\n        var autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\r\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\r\n    };\r\n    Cursor.prototype._executeEditOperation = function (opResult) {\r\n        if (!opResult) {\r\n            // Nothing to execute\r\n            return;\r\n        }\r\n        if (opResult.shouldPushStackElementBefore) {\r\n            this._model.pushStackElement();\r\n        }\r\n        var result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\r\n        if (result) {\r\n            // The commands were applied correctly\r\n            this._interpretCommandResult(result);\r\n            // Check for auto-closing closed characters\r\n            var autoClosedCharactersRanges = [];\r\n            var autoClosedEnclosingRanges = [];\r\n            for (var i = 0; i < opResult.commands.length; i++) {\r\n                var command = opResult.commands[i];\r\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\r\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\r\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\r\n                }\r\n            }\r\n            if (autoClosedCharactersRanges.length > 0) {\r\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n            }\r\n            this._prevEditOperationType = opResult.type;\r\n        }\r\n        if (opResult.shouldPushStackElementAfter) {\r\n            this._model.pushStackElement();\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCommandResult = function (cursorState) {\r\n        if (!cursorState || cursorState.length === 0) {\r\n            cursorState = this._cursors.readSelectionFromMarkers();\r\n        }\r\n        this._columnSelectData = null;\r\n        this._cursors.setSelections(cursorState);\r\n        this._cursors.normalize();\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- emitting events\r\n    Cursor.prototype._emitStateChangedIfNecessary = function (source, reason, oldState) {\r\n        var newState = new CursorModelState(this._model, this);\r\n        if (newState.equals(oldState)) {\r\n            return false;\r\n        }\r\n        var selections = this._cursors.getSelections();\r\n        var viewSelections = this._cursors.getViewSelections();\r\n        // Let the view get the event first.\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewCursorStateChangedEvent(viewSelections, selections));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n        // Only after the view has been notified, let the rest of the world know...\r\n        if (!oldState\r\n            || oldState.cursorState.length !== newState.cursorState.length\r\n            || newState.cursorState.some(function (newCursorState, i) { return !newCursorState.modelState.equals(oldState.cursorState[i].modelState); })) {\r\n            var oldSelections = oldState ? oldState.cursorState.map(function (s) { return s.modelState.selection; }) : null;\r\n            var oldModelVersionId = oldState ? oldState.modelVersionId : 0;\r\n            this._onDidChange.fire(new CursorStateChangedEvent(selections, newState.modelVersionId, oldSelections, oldModelVersionId, source || 'keyboard', reason));\r\n        }\r\n        return true;\r\n    };\r\n    Cursor.prototype._revealRange = function (source, revealTarget, verticalType, revealHorizontal, scrollType) {\r\n        var viewPositions = this._cursors.getViewPositions();\r\n        var viewPosition = viewPositions[0];\r\n        if (revealTarget === 1 /* TopMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPositions[i].isBefore(viewPosition)) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else if (revealTarget === 2 /* BottomMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPosition.isBeforeOrEqual(viewPositions[i])) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (viewPositions.length > 1) {\r\n                // no revealing!\r\n                return;\r\n            }\r\n        }\r\n        var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.emitCursorRevealRange = function (source, viewRange, verticalType, revealHorizontal, scrollType) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, verticalType, revealHorizontal, scrollType));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- handlers beyond this point\r\n    Cursor.prototype._findAutoClosingPairs = function (edits) {\r\n        if (!edits.length) {\r\n            return null;\r\n        }\r\n        var indices = [];\r\n        for (var i = 0, len = edits.length; i < len; i++) {\r\n            var edit = edits[i];\r\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\r\n                return null;\r\n            }\r\n            var m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            var closeChar = m[1];\r\n            var autoClosingPairsCandidates = this.context.config.autoClosingPairsClose2.get(closeChar);\r\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\r\n                return null;\r\n            }\r\n            var openChar = autoClosingPairsCandidates[0].open;\r\n            var closeCharIndex = edit.text.length - m[2].length - 1;\r\n            var openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\r\n            if (openCharIndex === -1) {\r\n                return null;\r\n            }\r\n            indices.push([openCharIndex, closeCharIndex]);\r\n        }\r\n        return indices;\r\n    };\r\n    Cursor.prototype.executeEdits = function (source, edits, cursorStateComputer) {\r\n        var _this = this;\r\n        var autoClosingIndices = null;\r\n        if (source === 'snippet') {\r\n            autoClosingIndices = this._findAutoClosingPairs(edits);\r\n        }\r\n        if (autoClosingIndices) {\r\n            edits[0]._isTracked = true;\r\n        }\r\n        var autoClosedCharactersRanges = [];\r\n        var autoClosedEnclosingRanges = [];\r\n        var selections = this._model.pushEditOperations(this.getSelections(), edits, function (undoEdits) {\r\n            if (autoClosingIndices) {\r\n                for (var i = 0, len = autoClosingIndices.length; i < len; i++) {\r\n                    var _a = autoClosingIndices[i], openCharInnerIndex = _a[0], closeCharInnerIndex = _a[1];\r\n                    var undoEdit = undoEdits[i];\r\n                    var lineNumber = undoEdit.range.startLineNumber;\r\n                    var openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\r\n                    var closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\r\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                }\r\n            }\r\n            var selections = cursorStateComputer(undoEdits);\r\n            if (selections) {\r\n                // Don't recover the selection from markers because\r\n                // we know what it should be.\r\n                _this._isHandling = true;\r\n            }\r\n            return selections;\r\n        });\r\n        if (selections) {\r\n            this._isHandling = false;\r\n            this.setSelections(source, selections);\r\n        }\r\n        if (autoClosedCharactersRanges.length > 0) {\r\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n        }\r\n    };\r\n    Cursor.prototype.trigger = function (source, handlerId, payload) {\r\n        var H = editorCommon.Handler;\r\n        if (handlerId === H.CompositionStart) {\r\n            this._isDoingComposition = true;\r\n            this._selectionsWhenCompositionStarted = this.getSelections().slice(0);\r\n            return;\r\n        }\r\n        if (handlerId === H.CompositionEnd) {\r\n            this._isDoingComposition = false;\r\n        }\r\n        if (this._configuration.options.get(68 /* readOnly */)) {\r\n            // All the remaining handlers will try to edit the model,\r\n            // but we cannot edit when read only...\r\n            this._onDidAttemptReadOnlyEdit.fire(undefined);\r\n            return;\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        var cursorChangeReason = 0 /* NotSet */;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            // TODO@Alex: if the undo/redo stack contains non-null selections\r\n            // it would also be OK to stop tracking selections here\r\n            this._cursors.stopTrackingSelections();\r\n        }\r\n        // ensure valid state on all cursors\r\n        this._cursors.ensureValidState();\r\n        this._isHandling = true;\r\n        try {\r\n            switch (handlerId) {\r\n                case H.Type:\r\n                    this._type(source, payload.text);\r\n                    break;\r\n                case H.ReplacePreviousChar:\r\n                    this._replacePreviousChar(payload.text, payload.replaceCharCnt);\r\n                    break;\r\n                case H.Paste:\r\n                    cursorChangeReason = 4 /* Paste */;\r\n                    this._paste(payload.text, payload.pasteOnNewLine, payload.multicursorText || []);\r\n                    break;\r\n                case H.Cut:\r\n                    this._cut();\r\n                    break;\r\n                case H.Undo:\r\n                    cursorChangeReason = 5 /* Undo */;\r\n                    this._interpretCommandResult(this._model.undo());\r\n                    break;\r\n                case H.Redo:\r\n                    cursorChangeReason = 6 /* Redo */;\r\n                    this._interpretCommandResult(this._model.redo());\r\n                    break;\r\n                case H.ExecuteCommand:\r\n                    this._externalExecuteCommand(payload);\r\n                    break;\r\n                case H.ExecuteCommands:\r\n                    this._externalExecuteCommands(payload);\r\n                    break;\r\n                case H.CompositionEnd:\r\n                    this._interpretCompositionEnd(source);\r\n                    break;\r\n            }\r\n        }\r\n        catch (err) {\r\n            onUnexpectedError(err);\r\n        }\r\n        this._isHandling = false;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            this._cursors.startTrackingSelections();\r\n        }\r\n        this._validateAutoClosedActions();\r\n        if (this._emitStateChangedIfNecessary(source, cursorChangeReason, oldState)) {\r\n            this._revealRange(source, 0 /* Primary */, 0 /* Simple */, true, 0 /* Smooth */);\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCompositionEnd = function (source) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // composition finishes, let's check if we need to auto complete if necessary.\r\n            var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n            this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this._selectionsWhenCompositionStarted, this.getSelections(), autoClosedCharacters));\r\n            this._selectionsWhenCompositionStarted = null;\r\n        }\r\n    };\r\n    Cursor.prototype._type = function (source, text) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // If this event is coming straight from the keyboard, look for electric characters and enter\r\n            var len = text.length;\r\n            var offset = 0;\r\n            while (offset < len) {\r\n                var charLength = strings.nextCharLength(text, offset);\r\n                var chr = text.substr(offset, charLength);\r\n                // Here we must interpret each typed character individually\r\n                var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n                this._executeEditOperation(TypeOperations.typeWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), autoClosedCharacters, chr));\r\n                offset += charLength;\r\n            }\r\n        }\r\n        else {\r\n            this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text));\r\n        }\r\n    };\r\n    Cursor.prototype._replacePreviousChar = function (text, replaceCharCnt) {\r\n        this._executeEditOperation(TypeOperations.replacePreviousChar(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text, replaceCharCnt));\r\n    };\r\n    Cursor.prototype._paste = function (text, pasteOnNewLine, multicursorText) {\r\n        this._executeEditOperation(TypeOperations.paste(this.context.config, this.context.model, this.getSelections(), text, pasteOnNewLine, multicursorText));\r\n    };\r\n    Cursor.prototype._cut = function () {\r\n        this._executeEditOperation(DeleteOperations.cut(this.context.config, this.context.model, this.getSelections()));\r\n    };\r\n    Cursor.prototype._externalExecuteCommand = function (command) {\r\n        this._cursors.killSecondaryCursors();\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, [command], {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.prototype._externalExecuteCommands = function (commands) {\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.MAX_CURSOR_COUNT = 10000;\r\n    return Cursor;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { Cursor };\r\nvar CommandExecutor = /** @class */ (function () {\r\n    function CommandExecutor() {\r\n    }\r\n    CommandExecutor.executeCommands = function (model, selectionsBefore, commands) {\r\n        var ctx = {\r\n            model: model,\r\n            selectionsBefore: selectionsBefore,\r\n            trackedRanges: [],\r\n            trackedRangesDirection: []\r\n        };\r\n        var result = this._innerExecuteCommands(ctx, commands);\r\n        for (var i = 0, len = ctx.trackedRanges.length; i < len; i++) {\r\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n        }\r\n        return result;\r\n    };\r\n    CommandExecutor._innerExecuteCommands = function (ctx, commands) {\r\n        if (this._arrayIsEmpty(commands)) {\r\n            return null;\r\n        }\r\n        var commandsData = this._getEditOperations(ctx, commands);\r\n        if (commandsData.operations.length === 0) {\r\n            return null;\r\n        }\r\n        var rawOperations = commandsData.operations;\r\n        var loserCursorsMap = this._getLoserCursorMap(rawOperations);\r\n        if (loserCursorsMap.hasOwnProperty('0')) {\r\n            // These commands are very messed up\r\n            console.warn('Ignoring commands');\r\n            return null;\r\n        }\r\n        // Remove operations belonging to losing cursors\r\n        var filteredOperations = [];\r\n        for (var i = 0, len = rawOperations.length; i < len; i++) {\r\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\r\n                filteredOperations.push(rawOperations[i]);\r\n            }\r\n        }\r\n        // TODO@Alex: find a better way to do this.\r\n        // give the hint that edit operations are tracked to the model\r\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\r\n            filteredOperations[0]._isTracked = true;\r\n        }\r\n        var selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, function (inverseEditOperations) {\r\n            var groupedInverseEditOperations = [];\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                groupedInverseEditOperations[i] = [];\r\n            }\r\n            for (var _i = 0, inverseEditOperations_1 = inverseEditOperations; _i < inverseEditOperations_1.length; _i++) {\r\n                var op = inverseEditOperations_1[_i];\r\n                if (!op.identifier) {\r\n                    // perhaps auto whitespace trim edits\r\n                    continue;\r\n                }\r\n                groupedInverseEditOperations[op.identifier.major].push(op);\r\n            }\r\n            var minorBasedSorter = function (a, b) {\r\n                return a.identifier.minor - b.identifier.minor;\r\n            };\r\n            var cursorSelections = [];\r\n            var _loop_1 = function (i) {\r\n                if (groupedInverseEditOperations[i].length > 0) {\r\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\r\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\r\n                        getInverseEditOperations: function () {\r\n                            return groupedInverseEditOperations[i];\r\n                        },\r\n                        getTrackedSelection: function (id) {\r\n                            var idx = parseInt(id, 10);\r\n                            var range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\r\n                            if (ctx.trackedRangesDirection[idx] === 0 /* LTR */) {\r\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n                            }\r\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    cursorSelections[i] = ctx.selectionsBefore[i];\r\n                }\r\n            };\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            return cursorSelections;\r\n        });\r\n        if (!selectionsAfter) {\r\n            selectionsAfter = ctx.selectionsBefore;\r\n        }\r\n        // Extract losing cursors\r\n        var losingCursors = [];\r\n        for (var losingCursorIndex in loserCursorsMap) {\r\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\r\n                losingCursors.push(parseInt(losingCursorIndex, 10));\r\n            }\r\n        }\r\n        // Sort losing cursors descending\r\n        losingCursors.sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n        // Remove losing cursors\r\n        for (var _i = 0, losingCursors_1 = losingCursors; _i < losingCursors_1.length; _i++) {\r\n            var losingCursor = losingCursors_1[_i];\r\n            selectionsAfter.splice(losingCursor, 1);\r\n        }\r\n        return selectionsAfter;\r\n    };\r\n    CommandExecutor._arrayIsEmpty = function (commands) {\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            if (commands[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    CommandExecutor._getEditOperations = function (ctx, commands) {\r\n        var operations = [];\r\n        var hadTrackedEditOperation = false;\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            var command = commands[i];\r\n            if (command) {\r\n                var r = this._getEditOperationsFromCommand(ctx, i, command);\r\n                operations = operations.concat(r.operations);\r\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\r\n            }\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getEditOperationsFromCommand = function (ctx, majorIdentifier, command) {\r\n        // This method acts as a transaction, if the command fails\r\n        // everything it has done is ignored\r\n        var operations = [];\r\n        var operationMinor = 0;\r\n        var addEditOperation = function (selection, text, forceMoveMarkers) {\r\n            if (forceMoveMarkers === void 0) { forceMoveMarkers = false; }\r\n            if (selection.isEmpty() && text === '') {\r\n                // This command wants to add a no-op => no thank you\r\n                return;\r\n            }\r\n            operations.push({\r\n                identifier: {\r\n                    major: majorIdentifier,\r\n                    minor: operationMinor++\r\n                },\r\n                range: selection,\r\n                text: text,\r\n                forceMoveMarkers: forceMoveMarkers,\r\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\r\n            });\r\n        };\r\n        var hadTrackedEditOperation = false;\r\n        var addTrackedEditOperation = function (selection, text, forceMoveMarkers) {\r\n            hadTrackedEditOperation = true;\r\n            addEditOperation(selection, text, forceMoveMarkers);\r\n        };\r\n        var trackSelection = function (selection, trackPreviousOnEmpty) {\r\n            var stickiness;\r\n            if (selection.isEmpty()) {\r\n                if (typeof trackPreviousOnEmpty === 'boolean') {\r\n                    if (trackPreviousOnEmpty) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n                else {\r\n                    // Try to lock it with surrounding text\r\n                    var maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn === maxLineColumn) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                stickiness = 1 /* NeverGrowsWhenTypingAtEdges */;\r\n            }\r\n            var l = ctx.trackedRanges.length;\r\n            var id = ctx.model._setTrackedRange(null, selection, stickiness);\r\n            ctx.trackedRanges[l] = id;\r\n            ctx.trackedRangesDirection[l] = selection.getDirection();\r\n            return l.toString();\r\n        };\r\n        var editOperationBuilder = {\r\n            addEditOperation: addEditOperation,\r\n            addTrackedEditOperation: addTrackedEditOperation,\r\n            trackSelection: trackSelection\r\n        };\r\n        try {\r\n            command.getEditOperations(ctx.model, editOperationBuilder);\r\n        }\r\n        catch (e) {\r\n            // TODO@Alex use notification service if this should be user facing\r\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\r\n            onUnexpectedError(e);\r\n            return {\r\n                operations: [],\r\n                hadTrackedEditOperation: false\r\n            };\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getLoserCursorMap = function (operations) {\r\n        // This is destructive on the array\r\n        operations = operations.slice(0);\r\n        // Sort operations with last one first\r\n        operations.sort(function (a, b) {\r\n            // Note the minus!\r\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\r\n        });\r\n        // Operations can not overlap!\r\n        var loserCursorsMap = {};\r\n        for (var i = 1; i < operations.length; i++) {\r\n            var previousOp = operations[i - 1];\r\n            var currentOp = operations[i];\r\n            if (previousOp.range.getStartPosition().isBefore(currentOp.range.getEndPosition())) {\r\n                var loserMajor = void 0;\r\n                if (previousOp.identifier.major > currentOp.identifier.major) {\r\n                    // previousOp loses the battle\r\n                    loserMajor = previousOp.identifier.major;\r\n                }\r\n                else {\r\n                    loserMajor = currentOp.identifier.major;\r\n                }\r\n                loserCursorsMap[loserMajor.toString()] = true;\r\n                for (var j = 0; j < operations.length; j++) {\r\n                    if (operations[j].identifier.major === loserMajor) {\r\n                        operations.splice(j, 1);\r\n                        if (j < i) {\r\n                            i--;\r\n                        }\r\n                        j--;\r\n                    }\r\n                }\r\n                if (i > 0) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return loserCursorsMap;\r\n    };\r\n    return CommandExecutor;\r\n}());\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}