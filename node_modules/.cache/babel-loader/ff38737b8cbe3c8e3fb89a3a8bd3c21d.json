{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\n/**\r\n * Creates character renderers. It takes a 'scale' that determines how large\r\n * characters should be drawn. Using this, it draws data into a canvas and\r\n * then downsamples the characters as necessary for the current display.\r\n * This makes rendering more efficient, rather than drawing a full (tiny)\r\n * font, or downsampling in real-time.\r\n */\nvar MinimapCharRendererFactory = /** @class */function () {\n  function MinimapCharRendererFactory() {}\n  /**\r\n   * Creates a new character renderer factory with the given scale.\r\n   */\n  MinimapCharRendererFactory.create = function (scale, fontFamily) {\n    // renderers are immutable. By default we'll 'create' a new minimap\n    // character renderer whenever we switch editors, no need to do extra work.\n    if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n      return this.lastCreated;\n    }\n    var factory;\n    if (prebakedMiniMaps[scale]) {\n      factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n    } else {\n      factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n    }\n    this.lastFontFamily = fontFamily;\n    this.lastCreated = factory;\n    return factory;\n  };\n  /**\r\n   * Creates the font sample data, writing to a canvas.\r\n   */\n  MinimapCharRendererFactory.createSampleData = function (fontFamily) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    canvas.style.height = 16 /* SAMPLED_CHAR_HEIGHT */ + \"px\";\n    canvas.height = 16 /* SAMPLED_CHAR_HEIGHT */;\n    canvas.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */;\n    canvas.style.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */ + 'px';\n    ctx.fillStyle = '#ffffff';\n    ctx.font = \"bold \" + 16 /* SAMPLED_CHAR_HEIGHT */ + \"px \" + fontFamily;\n    ctx.textBaseline = 'middle';\n    var x = 0;\n    for (var _i = 0, allCharCodes_1 = allCharCodes; _i < allCharCodes_1.length; _i++) {\n      var code = allCharCodes_1[_i];\n      ctx.fillText(String.fromCharCode(code), x, 16 /* SAMPLED_CHAR_HEIGHT */ / 2);\n      x += 10 /* SAMPLED_CHAR_WIDTH */;\n    }\n\n    return ctx.getImageData(0, 0, 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */, 16 /* SAMPLED_CHAR_HEIGHT */);\n  };\n  /**\r\n   * Creates a character renderer from the canvas sample data.\r\n   */\n  MinimapCharRendererFactory.createFromSampleData = function (source, scale) {\n    var expectedLength = 16 /* SAMPLED_CHAR_HEIGHT */ * 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */ * 96 /* CHAR_COUNT */;\n    if (source.length !== expectedLength) {\n      throw new Error('Unexpected source in MinimapCharRenderer');\n    }\n    var charData = MinimapCharRendererFactory._downsample(source, scale);\n    return new MinimapCharRenderer(charData, scale);\n  };\n  MinimapCharRendererFactory._downsampleChar = function (source, sourceOffset, dest, destOffset, scale) {\n    var width = 1 /* BASE_CHAR_WIDTH */ * scale;\n    var height = 2 /* BASE_CHAR_HEIGHT */ * scale;\n    var targetIndex = destOffset;\n    var brightest = 0;\n    // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n    // like bicubic interpolation are awesome for scaling between image sizes,\n    // but don't work so well when scaling to very small pixel values, we end\n    // up with blurry, indistinct forms.\n    //\n    // The approach taken here is simply mapping each source pixel to the target\n    // pixels, and taking the weighted values for all pixels in each, and then\n    // averaging them out. Finally we apply an intensity boost in _downsample,\n    // since when scaling to the smallest pixel sizes there's more black space\n    // which causes characters to be much less distinct.\n    for (var y = 0; y < height; y++) {\n      // 1. For this destination pixel, get the source pixels we're sampling\n      // from (x1, y1) to the next pixel (x2, y2)\n      var sourceY1 = y / height * 16 /* SAMPLED_CHAR_HEIGHT */;\n      var sourceY2 = (y + 1) / height * 16 /* SAMPLED_CHAR_HEIGHT */;\n      for (var x = 0; x < width; x++) {\n        var sourceX1 = x / width * 10 /* SAMPLED_CHAR_WIDTH */;\n        var sourceX2 = (x + 1) / width * 10 /* SAMPLED_CHAR_WIDTH */;\n        // 2. Sample all of them, summing them up and weighting them. Similar\n        // to bilinear interpolation.\n        var value = 0;\n        var samples = 0;\n        for (var sy = sourceY1; sy < sourceY2; sy++) {\n          var sourceRow = sourceOffset + Math.floor(sy) * 3840 /* RGBA_SAMPLED_ROW_WIDTH */;\n          var yBalance = 1 - (sy - Math.floor(sy));\n          for (var sx = sourceX1; sx < sourceX2; sx++) {\n            var xBalance = 1 - (sx - Math.floor(sx));\n            var sourceIndex = sourceRow + Math.floor(sx) * 4 /* RGBA_CHANNELS_CNT */;\n            var weight = xBalance * yBalance;\n            samples += weight;\n            value += source[sourceIndex] * source[sourceIndex + 3] / 255 * weight;\n          }\n        }\n        var final = value / samples;\n        brightest = Math.max(brightest, final);\n        dest[targetIndex++] = final;\n      }\n    }\n    return brightest;\n  };\n  MinimapCharRendererFactory._downsample = function (data, scale) {\n    var pixelsPerCharacter = 2 /* BASE_CHAR_HEIGHT */ * scale * 1 /* BASE_CHAR_WIDTH */ * scale;\n    var resultLen = pixelsPerCharacter * 96 /* CHAR_COUNT */;\n    var result = new Uint8ClampedArray(resultLen);\n    var resultOffset = 0;\n    var sourceOffset = 0;\n    var brightest = 0;\n    for (var charIndex = 0; charIndex < 96 /* CHAR_COUNT */; charIndex++) {\n      brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n      resultOffset += pixelsPerCharacter;\n      sourceOffset += 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */;\n    }\n\n    if (brightest > 0) {\n      var adjust = 255 / brightest;\n      for (var i = 0; i < resultLen; i++) {\n        result[i] *= adjust;\n      }\n    }\n    return result;\n  };\n  return MinimapCharRendererFactory;\n}();\nexport { MinimapCharRendererFactory };","map":{"version":3,"names":["MinimapCharRenderer","allCharCodes","prebakedMiniMaps","MinimapCharRendererFactory","create","scale","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","data","canvas","document","createElement","ctx","getContext","style","height","width","fillStyle","font","textBaseline","x","_i","allCharCodes_1","length","code","fillText","String","fromCharCode","getImageData","source","expectedLength","Error","charData","_downsample","_downsampleChar","sourceOffset","dest","destOffset","targetIndex","brightest","y","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","Math","floor","yBalance","sx","xBalance","sourceIndex","weight","final","max","pixelsPerCharacter","resultLen","result","Uint8ClampedArray","resultOffset","charIndex","adjust","i"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\r\nimport { allCharCodes } from './minimapCharSheet.js';\r\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\r\n/**\r\n * Creates character renderers. It takes a 'scale' that determines how large\r\n * characters should be drawn. Using this, it draws data into a canvas and\r\n * then downsamples the characters as necessary for the current display.\r\n * This makes rendering more efficient, rather than drawing a full (tiny)\r\n * font, or downsampling in real-time.\r\n */\r\nvar MinimapCharRendererFactory = /** @class */ (function () {\r\n    function MinimapCharRendererFactory() {\r\n    }\r\n    /**\r\n     * Creates a new character renderer factory with the given scale.\r\n     */\r\n    MinimapCharRendererFactory.create = function (scale, fontFamily) {\r\n        // renderers are immutable. By default we'll 'create' a new minimap\r\n        // character renderer whenever we switch editors, no need to do extra work.\r\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\r\n            return this.lastCreated;\r\n        }\r\n        var factory;\r\n        if (prebakedMiniMaps[scale]) {\r\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\r\n        }\r\n        else {\r\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\r\n        }\r\n        this.lastFontFamily = fontFamily;\r\n        this.lastCreated = factory;\r\n        return factory;\r\n    };\r\n    /**\r\n     * Creates the font sample data, writing to a canvas.\r\n     */\r\n    MinimapCharRendererFactory.createSampleData = function (fontFamily) {\r\n        var canvas = document.createElement('canvas');\r\n        var ctx = canvas.getContext('2d');\r\n        canvas.style.height = 16 /* SAMPLED_CHAR_HEIGHT */ + \"px\";\r\n        canvas.height = 16 /* SAMPLED_CHAR_HEIGHT */;\r\n        canvas.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */;\r\n        canvas.style.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */ + 'px';\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.font = \"bold \" + 16 /* SAMPLED_CHAR_HEIGHT */ + \"px \" + fontFamily;\r\n        ctx.textBaseline = 'middle';\r\n        var x = 0;\r\n        for (var _i = 0, allCharCodes_1 = allCharCodes; _i < allCharCodes_1.length; _i++) {\r\n            var code = allCharCodes_1[_i];\r\n            ctx.fillText(String.fromCharCode(code), x, 16 /* SAMPLED_CHAR_HEIGHT */ / 2);\r\n            x += 10 /* SAMPLED_CHAR_WIDTH */;\r\n        }\r\n        return ctx.getImageData(0, 0, 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */, 16 /* SAMPLED_CHAR_HEIGHT */);\r\n    };\r\n    /**\r\n     * Creates a character renderer from the canvas sample data.\r\n     */\r\n    MinimapCharRendererFactory.createFromSampleData = function (source, scale) {\r\n        var expectedLength = 16 /* SAMPLED_CHAR_HEIGHT */ * 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */ * 96 /* CHAR_COUNT */;\r\n        if (source.length !== expectedLength) {\r\n            throw new Error('Unexpected source in MinimapCharRenderer');\r\n        }\r\n        var charData = MinimapCharRendererFactory._downsample(source, scale);\r\n        return new MinimapCharRenderer(charData, scale);\r\n    };\r\n    MinimapCharRendererFactory._downsampleChar = function (source, sourceOffset, dest, destOffset, scale) {\r\n        var width = 1 /* BASE_CHAR_WIDTH */ * scale;\r\n        var height = 2 /* BASE_CHAR_HEIGHT */ * scale;\r\n        var targetIndex = destOffset;\r\n        var brightest = 0;\r\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\r\n        // like bicubic interpolation are awesome for scaling between image sizes,\r\n        // but don't work so well when scaling to very small pixel values, we end\r\n        // up with blurry, indistinct forms.\r\n        //\r\n        // The approach taken here is simply mapping each source pixel to the target\r\n        // pixels, and taking the weighted values for all pixels in each, and then\r\n        // averaging them out. Finally we apply an intensity boost in _downsample,\r\n        // since when scaling to the smallest pixel sizes there's more black space\r\n        // which causes characters to be much less distinct.\r\n        for (var y = 0; y < height; y++) {\r\n            // 1. For this destination pixel, get the source pixels we're sampling\r\n            // from (x1, y1) to the next pixel (x2, y2)\r\n            var sourceY1 = (y / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\r\n            var sourceY2 = ((y + 1) / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\r\n            for (var x = 0; x < width; x++) {\r\n                var sourceX1 = (x / width) * 10 /* SAMPLED_CHAR_WIDTH */;\r\n                var sourceX2 = ((x + 1) / width) * 10 /* SAMPLED_CHAR_WIDTH */;\r\n                // 2. Sample all of them, summing them up and weighting them. Similar\r\n                // to bilinear interpolation.\r\n                var value = 0;\r\n                var samples = 0;\r\n                for (var sy = sourceY1; sy < sourceY2; sy++) {\r\n                    var sourceRow = sourceOffset + Math.floor(sy) * 3840 /* RGBA_SAMPLED_ROW_WIDTH */;\r\n                    var yBalance = 1 - (sy - Math.floor(sy));\r\n                    for (var sx = sourceX1; sx < sourceX2; sx++) {\r\n                        var xBalance = 1 - (sx - Math.floor(sx));\r\n                        var sourceIndex = sourceRow + Math.floor(sx) * 4 /* RGBA_CHANNELS_CNT */;\r\n                        var weight = xBalance * yBalance;\r\n                        samples += weight;\r\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\r\n                    }\r\n                }\r\n                var final = value / samples;\r\n                brightest = Math.max(brightest, final);\r\n                dest[targetIndex++] = final;\r\n            }\r\n        }\r\n        return brightest;\r\n    };\r\n    MinimapCharRendererFactory._downsample = function (data, scale) {\r\n        var pixelsPerCharacter = 2 /* BASE_CHAR_HEIGHT */ * scale * 1 /* BASE_CHAR_WIDTH */ * scale;\r\n        var resultLen = pixelsPerCharacter * 96 /* CHAR_COUNT */;\r\n        var result = new Uint8ClampedArray(resultLen);\r\n        var resultOffset = 0;\r\n        var sourceOffset = 0;\r\n        var brightest = 0;\r\n        for (var charIndex = 0; charIndex < 96 /* CHAR_COUNT */; charIndex++) {\r\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\r\n            resultOffset += pixelsPerCharacter;\r\n            sourceOffset += 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */;\r\n        }\r\n        if (brightest > 0) {\r\n            var adjust = 255 / brightest;\r\n            for (var i = 0; i < resultLen; i++) {\r\n                result[i] *= adjust;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return MinimapCharRendererFactory;\r\n}());\r\nexport { MinimapCharRendererFactory };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}