{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\Mapper\\\\mapperWorkSpace.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { Row, Modal, Form, Button, Tabs, Col } from \"antd\";\nimport LayoutContent from \"../../components/utility/layoutContent\";\nimport ReactTable from \"../Utility/reactTable\";\nimport { MappingData } from \"../TreeView/getMappingDatas\";\nimport ButtonWithToolTip from \"../Tooltip/ButtonWithToolTip\";\nimport MonacoEditor from '@uiw/react-monacoeditor';\nimport MappingList from \"./mappingList\";\nimport BlocklyWorkspace from \"./blocklyWorkspace\";\nimport { CREATE, UPDATE, getUserID, getStudyID, errorModal, showProgress, hideProgress, getProjectRole, setSessionValue, CallServerPost, PostCallWithZone, errorModalCallback, successModalCallback } from \"../Utility/sharedUtility\";\nimport { HotTable, HotColumn } from '@handsontable/react';\nimport ImportMappingLibrary from \"./ImportMappingLibrary\";\nimport \"handsontable/dist/handsontable.min.css\";\nimport { SOURCE, WORK } from \"../Utility/commonUtils\";\nimport { lib } from \"crypto-js\";\nvar TabPane = Tabs.TabPane;\nvar thisObj;\nvar alreadyunmount = false;\nvar projectRole = getProjectRole();\nvar MapperWorkSpace = /*#__PURE__*/function (_Component) {\n  _inherits(MapperWorkSpace, _Component);\n  var _super = _createSuper(MapperWorkSpace);\n  function MapperWorkSpace(props) {\n    var _this;\n    _classCallCheck(this, MapperWorkSpace);\n    _this = _super.call(this, props);\n    _this.tabChanged = function (value) {\n      _this.setState({\n        activeKey: value\n      });\n    };\n    _this.addMapping = function (values) {\n      thisObj = _assertThisInitialized(_this);\n      var isCopy = Object.keys(values.SelectedMapping).length > 0;\n      var _values$variable = values.variable,\n        cdiscDataStdDomainMetadataID = _values$variable.cdiscDataStdDomainMetadataID,\n        cdiscDataStdVariableMetadataID = _values$variable.cdiscDataStdVariableMetadataID;\n      var sourceTableName = !isCopy ? thisObj.props.sourceObj.TABLE_NAME : values.SelectedMapping.sourceDataset;\n      var sourceVariableName = !isCopy ? thisObj.props.sourceObj.COLUMN_NAME : values.SelectedMapping.sourceVariableName;\n      var data = {\n        studyID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID,\n        cDISCDataStdID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).standardID,\n        cDISCDataStdDomainMetadataID: cdiscDataStdDomainMetadataID,\n        cDISCDataStdVariableMetadataID: cdiscDataStdVariableMetadataID,\n        SourceDataset: sourceTableName,\n        SourceVariableName: sourceVariableName,\n        TimeZone: \"IST\",\n        UpdatedBy: projectRole.userProfile.userID,\n        IsCheckedOut: 1\n      };\n      showProgress();\n      CallServerPost(\"MappingOperations/CreateMappingOperations\", data).then(function (response) {\n        if (response.status === 1) {\n          // if not created,delete the record. when overall refresh \n          setSessionValue(\"MappingDeleteIsCheckOut\", response.value[0]);\n          var mappingConst = response.value[0];\n          if (isCopy) {\n            mappingConst.constructJson = values.SelectedMapping.constructJson;\n          }\n          alreadyunmount = false;\n          thisObj.addMappingData(values);\n          thisObj.setState({\n            showProgramArea: false,\n            isCopy: isCopy,\n            MappingConstruct: mappingConst,\n            ShowImportListFromLibrary: false,\n            ImportFromMappingLibrary_Data: []\n          });\n        } else {\n          errorModal(response.message);\n        }\n        hideProgress();\n      });\n    };\n    _this.addMappingData = function (values) {\n      thisObj = _assertThisInitialized(_this);\n      var _values$variable2 = values.variable,\n        cdiscDataStdVersionID = _values$variable2.cdiscDataStdVersionID,\n        cdiscDataStdDomainMetadataID = _values$variable2.cdiscDataStdDomainMetadataID,\n        cdiscDataStdVariableMetadataID = _values$variable2.cdiscDataStdVariableMetadataID;\n      var data = _objectSpread({\n        cDISCDataStdID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).standardID\n      }, values.variable);\n      data[\"StudyID\"] = JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID;\n      //showProgress();\n      CallServerPost(\"NCICodeList/GetNCIByDatasetVariable\", data).then(function (response) {\n        if (response.status === 1) {\n          var val = response.value;\n          thisObj.setState({\n            activeKey: \"work_map_list\",\n            addMapValues: {},\n            action: \"\"\n          }, function () {\n            thisObj.setState({\n              activeKey: \"workpace_key\",\n              nciCodelistData: val,\n              addMapValues: values,\n              action: CREATE\n            }); //changes made as per T#31\n          });\n        } else {\n          errorModal(response.message);\n        }\n        hideProgress();\n      });\n    };\n    _this.MappingEdit = function (mappingOperation) {\n      thisObj = _assertThisInitialized(_this);\n      var cdiscDataStdVersionID = mappingOperation.cdiscDataStdVersionID,\n        cdiscDataStdDomainMetadataID = mappingOperation.cdiscDataStdDomainMetadataID,\n        cdiscDataStdVariableMetadataID = mappingOperation.cdiscDataStdVariableMetadataID;\n      var data = {\n        StudyID: JSON.parse(sessionStorage.getItem(\"studyDetails\")).studyID,\n        cDISCDataStdID: 1,\n        cdiscDataStdDomainMetadataID: cdiscDataStdDomainMetadataID,\n        cdiscDataStdVariableMetadataID: cdiscDataStdVariableMetadataID\n      };\n      mappingOperation.unsavedOrder = mappingOperation.unsavedOrder ? 1 : 0;\n      mappingOperation.isCheckedOut = 1;\n      mappingOperation.updatedBy = projectRole.userProfile.userID;\n      var data1 = mappingOperation;\n      showProgress();\n      //console.log(alreadyunmount)\n      CallServerPost(\"MappingOperations/UpdateCheckInCheckOut\", data1).then(function (response) {\n        if (response.status === 1) {\n          setSessionValue(\"MappingUpdateIsCheckOut\", response.value);\n          alreadyunmount = false;\n\n          // use latest record\n          //so we can see the latest update by other user\n          var latestRecord = response.value;\n\n          //For updating impact record\n          if (latestRecord.impact === 1) {\n            latestRecord.sourceDataset = mappingOperation.sourceDataset;\n            latestRecord.sourceVariableName = mappingOperation.sourceVariableName;\n          }\n          CallServerPost(\"NCICodeList/GetNCIByDatasetVariable\", data).then(function (response) {\n            hideProgress();\n            if (response.status === 1) {\n              var val = response.value;\n              thisObj.setState({\n                activeKey: \"work_map_list\",\n                addMapValues: {},\n                action: \"\"\n              }, function () {\n                thisObj.setState({\n                  isCopy: false,\n                  showProgramArea: false,\n                  MappingConstruct: latestRecord,\n                  nciCodelistData: val,\n                  action: UPDATE,\n                  activeKey: \"workpace_key\",\n                  ShowImportListFromLibrary: false,\n                  ImportFromMappingLibrary_Data: []\n                });\n              });\n            } else {\n              errorModal(response.message);\n            }\n          }).catch(function (e) {\n            //console.log(e);\n            hideProgress();\n          });\n        } else if (response.status === 0) {\n          hideProgress();\n          if (response.value === \"Refresh\") {\n            errorModalCallback(response.message, function () {\n              return _this.clearWorkSpace(\"refresh\");\n            });\n          } else {\n            errorModal(response.message);\n          }\n        }\n      }).catch(function (e) {\n        //console.log(e);\n        hideProgress();\n      });\n    };\n    _this.clearWorkSpace = function () {\n      var nextStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      thisObj = _assertThisInitialized(_this);\n      if (nextStep === \"refresh\") {\n        alreadyunmount = true;\n        var MappinDatas = new MappingData();\n        showProgress();\n        MappinDatas.CallBack = function (_, mappingList) {\n          thisObj.props.updateState({\n            mappingDataList: mappingList\n          });\n          thisObj.setState({\n            activeKey: \"work_map_list\",\n            addMapValues: {},\n            action: \"\",\n            showProgramArea: false,\n            MappingConstruct: {},\n            ShowImportListFromLibrary: false,\n            ImportFromMappingLibrary_Data: []\n          });\n          hideProgress();\n        };\n        MappinDatas.RefreshMapping({});\n        thisObj.props.addWorkDataset([]);\n      } else if (nextStep === \"noChange\") {\n        // alreadyunmount = true;\n        thisObj.props.addWorkDataset([]);\n        thisObj.setState({\n          activeKey: \"work_map_list\",\n          addMapValues: {},\n          action: \"\",\n          showProgramArea: false,\n          ShowImportListFromLibrary: false,\n          ImportFromMappingLibrary_Data: []\n        });\n      } else {\n        if (Object.keys(thisObj.state.MappingConstruct).length > 0) {\n          var mapOperations = thisObj.state.MappingConstruct[0] !== undefined ? thisObj.state.MappingConstruct[0] : thisObj.state.MappingConstruct;\n          //add\n          if (nextStep !== \"Update\" && mapOperations.constructString === null) {\n            showProgress();\n            CallServerPost(\"MappingOperations/Delete\", mapOperations).then(function (response) {\n              if (response.status === 1) {\n                //Remove stored record in session\n                setSessionValue(\"MappingUpdateIsCheckOut\", null);\n                setSessionValue(\"MappingDeleteIsCheckOut\", null);\n                //end\n\n                thisObj.setState({\n                  isCopy: false,\n                  MappingConstruct: {},\n                  ShowImportListFromLibrary: false,\n                  ImportFromMappingLibrary_Data: []\n                });\n                //console.log(\"success\");\n              } else {\n                thisObj.setState({\n                  isCopy: false,\n                  MappingConstruct: {},\n                  ShowImportListFromLibrary: false,\n                  ImportFromMappingLibrary_Data: []\n                });\n                // errorModal(response.message);\n              }\n\n              hideProgress();\n            });\n          }\n          //update\n          else if (mapOperations.constructString !== null) {\n            var mappingOperations = mapOperations;\n            mappingOperations.unsavedOrder = mappingOperations.unsavedOrder ? 1 : 0;\n            mappingOperations.isCheckedOut = 0;\n            var data1 = mappingOperations;\n            showProgress();\n            CallServerPost(\"MappingOperations/UpdateCheckInCheckOut\", data1).then(function (response) {\n              if (response.status === 1) {\n                alreadyunmount = true;\n\n                //Remove stored record in session\n                setSessionValue(\"MappingUpdateIsCheckOut\", null);\n                setSessionValue(\"MappingDeleteIsCheckOut\", null);\n                //end\n\n                var _MappinDatas = new MappingData();\n                _MappinDatas.CallBack = function (_, mappingList) {\n                  thisObj.props.updateState({\n                    mappingDataList: mappingList\n                  });\n                  thisObj.setState({\n                    MappingConstruct: {},\n                    activeKey: \"work_map_list\",\n                    addMapValues: {},\n                    action: \"\",\n                    showProgramArea: false,\n                    ShowImportListFromLibrary: false,\n                    ImportFromMappingLibrary_Data: []\n                  });\n                  hideProgress();\n                };\n                _MappinDatas.RefreshMapping({});\n              } else {\n                hideProgress();\n                errorModal(response.message);\n              }\n            }).catch(function (e) {\n              return hideProgress();\n            });\n          }\n        }\n        thisObj.props.addWorkDataset([]);\n        thisObj.setState({\n          activeKey: \"work_map_list\",\n          addMapValues: {},\n          action: \"\",\n          showProgramArea: false\n        });\n      }\n    };\n    _this.refreshMapping = function () {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      showProgress();\n      var MappinDatas = new MappingData();\n      MappinDatas.CallBack = function (_, mappingList) {\n        if (type === \"ALL\") {\n          //for import from lib\n          //we have to select all tab in tree datasettree.js\n          _this.props.updateState({\n            sourceObj: {},\n            truemappingDataList: mappingList,\n            type: \"ALL\"\n          });\n        } else {\n          _this.props.updateState({\n            mappingDataList: mappingList\n          });\n        }\n        hideProgress();\n      };\n      MappinDatas.RefreshMapping({});\n    };\n    _this.getTable = function (valueObj, type) {\n      var getColHeaders = function getColHeaders() {\n        var cols = [];\n        if (valueObj.values.length > 0) {\n          Object.keys(valueObj.values[0]).map(function (key) {\n            cols.push(key);\n          });\n        }\n        return cols;\n      };\n      return /*#__PURE__*/React.createElement(HotTable, {\n        width: \"100%\",\n        height: \"100%\",\n        key: valueObj.name + \"_hottable_\" + type,\n        data: valueObj.values,\n        licenseKey: \"non-commercial-and-evaluation\",\n        settings: {\n          stretchH: 'all',\n          colHeaders: getColHeaders(),\n          rowHeaders: true,\n          readOnly: true,\n          filters: true,\n          editor: false,\n          dropdownMenu: ['filter_by_condition', 'filter_by_value', 'filter_action_bar']\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }\n      });\n    };\n    _this.onTabsEdit = function (targetKey, action) {\n      if (action == \"remove\") {\n        if (_this.state.activeKey == targetKey) {\n          _this.setState({\n            activeKey: \"work_map_list\"\n          });\n        }\n        var keys = targetKey.split(\"!!\");\n        if (keys[2] == WORK) {\n          _this.props.removeWorkTable(keys[0]);\n        } else if (targetKey === \"importmappinglibrary\") {\n          _this.setState({\n            ShowImportListFromLibrary: false,\n            ImportFromMappingLibrary_Data: []\n          });\n        } else {\n          _this.props.removeTable(keys[0], keys[2]);\n        }\n      }\n    };\n    _this.arrowChangeFunc = function () {\n      _this.setState({\n        iconClassChange: !_this.state.iconClassChange\n      });\n    };\n    _this.programAreShowHide = function (value) {\n      _this.setState({\n        showProgramArea: value\n      });\n    };\n    _this.ImportDataFromMappingLibrary = function () {\n      var mappingOperation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.ImportCreate;\n      thisObj = _assertThisInitialized(_this);\n      var data = {};\n\n      //If mappingOperation  false means get all\n      //Get only by cDISCDataStdDomainMetadataID and cDISCDataStdVariableMetadataID\n      if (mappingOperation) {\n        var targetDataSet = mappingOperation.targetDataSet,\n          targetVariableName = mappingOperation.targetVariableName;\n        data.targetDataSet = targetDataSet;\n        data.targetVariableName = targetVariableName;\n        data.mappingLibraryID = 0;\n      } else {\n        data.mappingLibraryID = -1;\n      }\n      showProgress();\n      thisObj.setState({\n        importLib_State: \"reLoading\"\n      });\n      CallServerPost(\"MappingLibrary/GetAll\", data).then(function (res) {\n        hideProgress();\n        if (res.status === 1) {\n          var libraryRecord = res.value;\n          var filterValueByAvailable_Source = [];\n          var SourceDataset = thisObj.props.allValues.SourceDataset;\n          var Src_Variable = SourceDataset.Variable;\n          libraryRecord && typeof libraryRecord === \"object\" && libraryRecord.map(function (lib_rec) {\n            lib_rec.source = lib_rec.sourceDataset + \".\" + lib_rec.sourceVariableName;\n            lib_rec.target = lib_rec.targetDataSet + \".\" + lib_rec.targetVariableName;\n            //For checkbox check \n            lib_rec.Row_Selection = false;\n            filterValueByAvailable_Source.push(lib_rec);\n          });\n          if (filterValueByAvailable_Source.length > 0) {\n            thisObj.setState({\n              importLib_State: \"reLoaded\",\n              activeKey: \"importmappinglibrary\",\n              ShowImportListFromLibrary: true,\n              Import_ShowAll: !mappingOperation,\n              ImportFromMappingLibrary_Data: filterValueByAvailable_Source,\n              fnImporting: callback\n            });\n            return;\n          }\n        }\n        thisObj.setState({\n          ShowImportListFromLibrary: false,\n          ImportFromMappingLibrary_Data: []\n        });\n        //!mappingOperation means show all\n        //else show record by stddomain and variable\n        if (!mappingOperation) {\n          errorModal(\"No Rule available\");\n        } else {\n          errorModal(\"No Rules available For \" + mappingOperation.targetDataSet + \".\" + mappingOperation.targetVariableName);\n        }\n      }).catch(function (e) {\n        //console.log(e);\n        hideProgress();\n      });\n    };\n    _this.ImportCreate = function (mappingoperationlist) {\n      var mappingoperation_list = mappingoperationlist.map(function (mappingoperation) {\n        mappingoperation.StudyID = getStudyID();\n        mappingoperation.ChangeReason = \"Copied From Library\";\n        mappingoperation.isCheckedOut = 0;\n        mappingoperation.UpdatedBy = getUserID();\n        return mappingoperation;\n      });\n      showProgress();\n      //Save reocrd to MappingConstruct table\n      PostCallWithZone(\"MappingOperations/CreateMultipleMappingOperation\", mappingoperation_list).then(function (response) {\n        var responseData = response;\n        if (responseData.status === 1) {\n          successModalCallback(response.message, function () {\n            thisObj.setState({\n              activeKey: \"work_map_list\",\n              ShowImportListFromLibrary: false,\n              ImportFromMappingLibrary_Data: []\n            }, function () {\n              return thisObj.refreshMapping(\"ALL\");\n            });\n          });\n        } else {\n          errorModal(response.message);\n        }\n        hideProgress();\n      });\n    };\n    _this.setActiveKey = function () {\n      _this.setState({\n        activeKey: \"workpace_key\"\n      });\n    };\n    _this.importcancel = function () {\n      _this.setState(function (state) {\n        return {\n          activeKey: state.Import_ShowAll ? \"work_map_list\" : \"workpace_key\",\n          ShowImportListFromLibrary: false,\n          ImportFromMappingLibrary_Data: []\n        };\n      });\n    };\n    _this.state = {\n      activeKey: \"work_map_list\",\n      addMapValues: {},\n      action: \"\",\n      MappingConstruct: {},\n      iconClassChange: true,\n      contentTabOpen: false,\n      showProgramArea: false,\n      nciCodelistData: [],\n      ImportFromMappingLibrary_Data: [],\n      ImportDataFromMappingLibrary_Column: [],\n      Import_ShowAll: false,\n      fnImporting: false,\n      importLib_State: \"\",\n      isCopy: false\n    };\n    thisObj = _assertThisInitialized(_this);\n    return _this;\n  }\n  _createClass(MapperWorkSpace, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextProps.sourceObj.TABLE_NAME !== this.props.sourceObj.TABLE_NAME || nextProps.sourceObj.COLUMN_NAME !== this.props.sourceObj.COLUMN_NAME) {\n        this.clearWorkSpace(\"noChange\");\n      } else if (nextProps.showMapTab) {\n        this.setState({\n          activeKey: \"work_map_list\"\n        });\n      } else if (nextProps.actkey != undefined && nextProps.actkey != \"\") {\n        this.setState({\n          activeKey: nextProps.actkey\n        });\n      }\n    }\n\n    //Have to change the checkedout status if unmount\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      //console.log(alreadyunmount)\n\n      if (!alreadyunmount) {\n        thisObj.clearWorkSpace();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state = this.state,\n        action = _this$state.action,\n        activeKey = _this$state.activeKey,\n        nciCodelistData = _this$state.nciCodelistData,\n        addMapValues = _this$state.addMapValues,\n        Import_ShowAll = _this$state.Import_ShowAll,\n        MappingConstruct = _this$state.MappingConstruct,\n        ShowImportListFromLibrary = _this$state.ShowImportListFromLibrary,\n        ImportFromMappingLibrary_Data = _this$state.ImportFromMappingLibrary_Data,\n        importLib_State = _this$state.importLib_State,\n        isCopy = _this$state.isCopy;\n      var _this$props = this.props,\n        sourceTables = _this$props.sourceTables,\n        sourceObj = _this$props.sourceObj,\n        activityWrkflowStatus = _this$props.activityWrkflowStatus,\n        allValues = _this$props.allValues,\n        isHeaderContentShowing = _this$props.isHeaderContentShowing;\n      var targetDomainVariable = \"\";\n      if (action == CREATE) {\n        targetDomainVariable = \"\".concat(addMapValues.TargetDomain, \".\").concat(addMapValues.TargetVariable);\n      } else if (action == UPDATE) {\n        targetDomainVariable = \"\".concat(MappingConstruct.targetDataSet, \".\").concat(MappingConstruct.targetVariableName);\n      }\n      var onMapping = action !== \"\";\n      var srcVariable = 'TABLE_NAME' in sourceObj ? \"(\".concat(sourceObj.TABLE_NAME, \".\").concat(sourceObj.COLUMN_NAME, \")\") : \"\";\n      var srcVar2 = isCopy ? \"\".concat(MappingConstruct.sourceDataset, \".\").concat(MappingConstruct.sourceVariableName) : 'TABLE_NAME' in sourceObj ? \"\".concat(sourceObj.TABLE_NAME, \".\").concat(sourceObj.COLUMN_NAME) : \"\";\n      var tabTitle = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"sideToggleBtn\",\n        onClick: function onClick(e) {\n          _this2.props.fnToHideShowTreeView();\n          _this2.arrowChangeFunc();\n          e.stopPropagation();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: this.state.iconClassChange ? \" fas fa-chevron-circle-left\" : \"fas fa-chevron-circle-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          marginLeft: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 13\n        }\n      }, \"Mapping List \".concat(srcVariable)));\n      var contenttabbtn = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginRight: 10\n        },\n        className: \"sideToggleBtn\",\n        onClick: function onClick() {\n          _this2.setState({\n            contentTabOpen: !_this2.state.contentTabOpen\n          }, function () {\n            _this2.props.changeContentTab();\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: this.state.contentTabOpen ? \" fas fa-chevron-circle-up\" : \"fas fa-chevron-circle-down\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }\n      })), activeKey == \"workpace_key\" && /*#__PURE__*/React.createElement(Button, {\n        className: \"sideToggleBtn\",\n        onClick: function onClick() {\n          _this2.setState({\n            showProgramArea: !_this2.state.showProgramArea\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: this.state.showProgramArea ? \" fas fa-caret-square-down\" : \"fas fa-caret-square-up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 25\n        }\n      })));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        hideAdd: true,\n        onChange: this.tabChanged,\n        activeKey: activeKey,\n        type: \"editable-card\",\n        key: \"work_tabs_key\",\n        closable: true,\n        onEdit: this.onTabsEdit,\n        style: {\n          height: \"100%\"\n        },\n        tabBarExtraContent: activeKey == \"workpace_key\" ? /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 55\n          }\n        }, action == CREATE && /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontWeight: 500,\n            marginRight: 25\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 33\n          }\n        }, \"Source: \".concat(srcVar2, \" | Target : \").concat(addMapValues.TargetDomain, \".\").concat(addMapValues.TargetVariable)), action == UPDATE && /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            fontWeight: 500,\n            marginRight: 25\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 33\n          }\n        }, \"Source: \".concat(MappingConstruct.sourceDataset, \".\").concat(MappingConstruct.sourceVariableName, \" | Target: \").concat(MappingConstruct.targetDataSet, \".\").concat(MappingConstruct.targetVariableName)), contenttabbtn) : contenttabbtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TabPane, {\n        closable: false,\n        tab: tabTitle,\n        key: \"work_map_list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        span: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(LayoutContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(MappingList, {\n        isHeaderContentShowing: isHeaderContentShowing,\n        activityWrkflowStatus: activityWrkflowStatus,\n        activityDetails: this.props.activityDetails,\n        MappingEdit: this.MappingEdit,\n        sourceObj: this.props.sourceObj,\n        targetObj: this.props.targetObj,\n        mappingData: this.props.mappingData,\n        allValues: this.props.allValues,\n        type: this.props.type,\n        addNewMapping: this.addMapping,\n        onMapping: onMapping,\n        refreshMapping: this.refreshMapping,\n        ImportFromMappingLibrary: this.ImportDataFromMappingLibrary,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 37\n        }\n      }))))), (Object.keys(addMapValues).length > 0 || action == UPDATE) && /*#__PURE__*/React.createElement(TabPane, {\n        closable: false,\n        tab: \"WorkSpace\",\n        key: \"workpace_key\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(BlocklyWorkspace, {\n        activityWrkflowStatus: activityWrkflowStatus,\n        activityDetails: this.props.activityDetails,\n        MappingConstruct: MappingConstruct,\n        clearWorkSpace: this.clearWorkSpace,\n        action: action,\n        allValues: this.props.allValues,\n        selectedTargetObj: addMapValues,\n        work_datasets: this.props.work_datasets,\n        mappingBlocks: this.props.mappingBlocks,\n        sourceObj: isCopy ? {\n          TABLE_NAME: MappingConstruct.sourceDataset,\n          COLUMN_NAME: MappingConstruct.sourceVariableName\n        } : this.props.sourceObj,\n        addWorkTable: this.props.addWorkTable,\n        addWorkDataset: this.props.addWorkDataset,\n        showProgramArea: this.state.showProgramArea,\n        fnToShowHideProgramArea: this.programAreShowHide,\n        NCICODELISTDATA: nciCodelistData,\n        ImportDataFromMappingLibrary: this.ImportDataFromMappingLibrary,\n        setActiveKey: this.setActiveKey,\n        bulkMapConfig: this.props.bulkMapConfig,\n        targetDomainVariable: targetDomainVariable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 29\n        }\n      })), sourceTables.map(function (tableObj) {\n        return /*#__PURE__*/React.createElement(TabPane, {\n          tab: tableObj.name,\n          key: tableObj.name + \"!!tabkey!!\" + SOURCE,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 36\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: isHeaderContentShowing ? \"calc(100vh - 294px)\" : \"calc(100vh - 170px)\",\n            width: \"100%\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 33\n          }\n        }, _this2.getTable(tableObj, SOURCE)));\n      }), this.props.workTables.map(function (tableObj) {\n        return /*#__PURE__*/React.createElement(TabPane, {\n          tab: tableObj.name,\n          key: tableObj.name + \"!!tabkey!!\" + \"work\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 36\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: isHeaderContentShowing ? \"calc(100vh - 294px)\" : \"calc(100vh - 170px)\",\n            width: \"100%\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 33\n          }\n        }, _this2.getTable(tableObj, WORK)));\n      }), ShowImportListFromLibrary && /*#__PURE__*/React.createElement(TabPane, {\n        tab: \"Copy Rule\",\n        key: \"importmappinglibrary\",\n        style: {\n          paddingBottom: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ImportMappingLibrary, {\n        Standards: allValues.Standards,\n        SourceDataset: allValues.SourceDataset,\n        MappingList: allValues.MappingList,\n        ShowAll: Import_ShowAll,\n        libRecord: ImportFromMappingLibrary_Data,\n        import: this.state.fnImporting,\n        cancel: this.importcancel,\n        contentTabOpen: this.state.contentTabOpen,\n        importLib_State: importLib_State,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 29\n        }\n      }))));\n    }\n  }]);\n  return MapperWorkSpace;\n}(Component);\nexport { MapperWorkSpace as default };","map":{"version":3,"names":["React","Component","axios","Row","Modal","Form","Button","Tabs","Col","LayoutContent","ReactTable","MappingData","ButtonWithToolTip","MonacoEditor","MappingList","BlocklyWorkspace","CREATE","UPDATE","getUserID","getStudyID","errorModal","showProgress","hideProgress","getProjectRole","setSessionValue","CallServerPost","PostCallWithZone","errorModalCallback","successModalCallback","HotTable","HotColumn","ImportMappingLibrary","SOURCE","WORK","lib","TabPane","thisObj","alreadyunmount","projectRole","MapperWorkSpace","props","tabChanged","value","setState","activeKey","addMapping","values","isCopy","Object","keys","SelectedMapping","length","variable","cdiscDataStdDomainMetadataID","cdiscDataStdVariableMetadataID","sourceTableName","sourceObj","TABLE_NAME","sourceDataset","sourceVariableName","COLUMN_NAME","data","studyID","JSON","parse","sessionStorage","getItem","cDISCDataStdID","standardID","cDISCDataStdDomainMetadataID","cDISCDataStdVariableMetadataID","SourceDataset","SourceVariableName","TimeZone","UpdatedBy","userProfile","userID","IsCheckedOut","then","response","status","mappingConst","constructJson","addMappingData","showProgramArea","MappingConstruct","ShowImportListFromLibrary","ImportFromMappingLibrary_Data","message","cdiscDataStdVersionID","val","addMapValues","action","nciCodelistData","MappingEdit","mappingOperation","StudyID","unsavedOrder","isCheckedOut","updatedBy","data1","latestRecord","impact","catch","e","clearWorkSpace","nextStep","MappinDatas","CallBack","_","mappingList","updateState","mappingDataList","RefreshMapping","addWorkDataset","state","mapOperations","undefined","constructString","mappingOperations","refreshMapping","type","truemappingDataList","getTable","valueObj","getColHeaders","cols","map","key","push","name","stretchH","colHeaders","rowHeaders","readOnly","filters","editor","dropdownMenu","onTabsEdit","targetKey","split","removeWorkTable","removeTable","arrowChangeFunc","iconClassChange","programAreShowHide","ImportDataFromMappingLibrary","callback","ImportCreate","targetDataSet","targetVariableName","mappingLibraryID","importLib_State","res","libraryRecord","filterValueByAvailable_Source","allValues","Src_Variable","Variable","lib_rec","source","target","Row_Selection","Import_ShowAll","fnImporting","mappingoperationlist","mappingoperation_list","mappingoperation","ChangeReason","responseData","setActiveKey","importcancel","contentTabOpen","ImportDataFromMappingLibrary_Column","nextProps","nextState","showMapTab","actkey","sourceTables","activityWrkflowStatus","isHeaderContentShowing","targetDomainVariable","TargetDomain","TargetVariable","onMapping","srcVariable","srcVar2","tabTitle","fnToHideShowTreeView","stopPropagation","marginLeft","contenttabbtn","marginRight","changeContentTab","width","height","display","fontWeight","activityDetails","targetObj","mappingData","work_datasets","mappingBlocks","addWorkTable","bulkMapConfig","tableObj","workTables","paddingBottom","Standards"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/Mapper/mapperWorkSpace.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport {\r\n    Row,\r\n    Modal,\r\n    Form,\r\n    Button,\r\n    Tabs,\r\n    Col\r\n} from \"antd\";\r\nimport LayoutContent from \"../../components/utility/layoutContent\";\r\nimport ReactTable from \"../Utility/reactTable\";\r\nimport { MappingData } from \"../TreeView/getMappingDatas\";\r\nimport ButtonWithToolTip from \"../Tooltip/ButtonWithToolTip\";\r\nimport MonacoEditor from '@uiw/react-monacoeditor';\r\nimport MappingList from \"./mappingList\";\r\nimport BlocklyWorkspace from \"./blocklyWorkspace\"\r\nimport {\r\n    CREATE,\r\n    UPDATE,\r\n    getUserID,\r\n    getStudyID,\r\n    errorModal,\r\n    showProgress,\r\n    hideProgress,\r\n    getProjectRole,\r\n    setSessionValue,\r\n    CallServerPost,\r\n    PostCallWithZone,\r\n    errorModalCallback,\r\n    successModalCallback,\r\n} from \"../Utility/sharedUtility\";\r\nimport { HotTable, HotColumn } from '@handsontable/react';\r\nimport ImportMappingLibrary from \"./ImportMappingLibrary\";\r\nimport \"handsontable/dist/handsontable.min.css\";\r\nimport { SOURCE, WORK } from \"../Utility/commonUtils\";\r\nimport { lib } from \"crypto-js\";\r\nconst { TabPane } = Tabs;\r\nvar thisObj;\r\nlet alreadyunmount = false;\r\nconst projectRole = getProjectRole();\r\n\r\nexport default class MapperWorkSpace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeKey: \"work_map_list\",\r\n            addMapValues: {},\r\n            action: \"\",\r\n            MappingConstruct: {},\r\n            iconClassChange: true,\r\n            contentTabOpen: false,\r\n            showProgramArea: false,\r\n            nciCodelistData: [],\r\n            ImportFromMappingLibrary_Data: [],\r\n            ImportDataFromMappingLibrary_Column: [],\r\n            Import_ShowAll: false,\r\n            fnImporting: false,\r\n            importLib_State: \"\",\r\n            isCopy: false\r\n        };\r\n        thisObj = this;\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n\r\n        if (nextProps.sourceObj.TABLE_NAME !== this.props.sourceObj.TABLE_NAME || nextProps.sourceObj.COLUMN_NAME !== this.props.sourceObj.COLUMN_NAME) {\r\n            this.clearWorkSpace(\"noChange\");\r\n        } else if (nextProps.showMapTab) {\r\n            this.setState({\r\n                activeKey: \"work_map_list\"\r\n            });\r\n        } else if (nextProps.actkey != undefined && nextProps.actkey != \"\") {\r\n            this.setState({\r\n                activeKey: nextProps.actkey\r\n            });\r\n        }\r\n    }\r\n\r\n    //Have to change the checkedout status if unmount\r\n    componentWillUnmount() {\r\n        //console.log(alreadyunmount)\r\n\r\n        if (!alreadyunmount) {\r\n            thisObj.clearWorkSpace();\r\n        }\r\n    }\r\n\r\n\r\n    tabChanged = value => {\r\n        this.setState({ activeKey: value });\r\n    };\r\n\r\n\r\n    //create one record to make Ischeckedout is 1\r\n    addMapping = (values) => {\r\n        thisObj = this;\r\n        const isCopy = Object.keys(values.SelectedMapping).length > 0;\r\n        let { cdiscDataStdDomainMetadataID, cdiscDataStdVariableMetadataID } = values.variable;\r\n        let sourceTableName = !isCopy ? thisObj.props.sourceObj.TABLE_NAME : values.SelectedMapping.sourceDataset;\r\n        let sourceVariableName = !isCopy ? thisObj.props.sourceObj.COLUMN_NAME : values.SelectedMapping.sourceVariableName;\r\n\r\n\r\n\r\n        let data = {\r\n            studyID: JSON.parse(\r\n                sessionStorage.getItem(\"studyDetails\")\r\n            ).studyID,\r\n            cDISCDataStdID: JSON.parse(\r\n                sessionStorage.getItem(\"studyDetails\")\r\n            ).standardID,\r\n            cDISCDataStdDomainMetadataID: cdiscDataStdDomainMetadataID,\r\n            cDISCDataStdVariableMetadataID: cdiscDataStdVariableMetadataID,\r\n            SourceDataset: sourceTableName,\r\n            SourceVariableName: sourceVariableName,\r\n            TimeZone: \"IST\",\r\n            UpdatedBy: projectRole.userProfile.userID,\r\n            IsCheckedOut: 1\r\n        }\r\n        showProgress();\r\n        CallServerPost(\"MappingOperations/CreateMappingOperations\", data).then((response) => {\r\n            if (response.status === 1) {\r\n\r\n                // if not created,delete the record. when overall refresh \r\n                setSessionValue(\"MappingDeleteIsCheckOut\", response.value[0]);\r\n                let mappingConst = response.value[0];\r\n                if (isCopy) {\r\n                    mappingConst.constructJson = values.SelectedMapping.constructJson;\r\n                }\r\n                alreadyunmount = false;\r\n                thisObj.addMappingData(values);\r\n                thisObj.setState({\r\n                    showProgramArea: false,\r\n                    isCopy: isCopy,\r\n                    MappingConstruct: mappingConst,\r\n                    ShowImportListFromLibrary: false,\r\n                    ImportFromMappingLibrary_Data: []\r\n                })\r\n            } else {\r\n                errorModal(response.message);\r\n            }\r\n            hideProgress();\r\n        });\r\n\r\n    }\r\n\r\n\r\n    //Mapping add\r\n    addMappingData = (values) => {\r\n        thisObj = this;\r\n        let { cdiscDataStdVersionID, cdiscDataStdDomainMetadataID, cdiscDataStdVariableMetadataID } = values.variable;\r\n\r\n        let data = {\r\n            cDISCDataStdID: JSON.parse(\r\n                sessionStorage.getItem(\"studyDetails\")\r\n            ).standardID,\r\n            ...values.variable\r\n        }\r\n        data[\"StudyID\"] = JSON.parse(\r\n            sessionStorage.getItem(\"studyDetails\")\r\n        ).studyID;\r\n        //showProgress();\r\n        CallServerPost(\"NCICodeList/GetNCIByDatasetVariable\", data).then((response) => {\r\n            if (response.status === 1) {\r\n                let val = response.value;\r\n                thisObj.setState({\r\n                    activeKey: \"work_map_list\", addMapValues: {}, action: \"\" }, () => {\r\n                    thisObj.setState({ activeKey: \"workpace_key\", nciCodelistData: val, addMapValues: values, action: CREATE });//changes made as per T#31\r\n                });\r\n            } else {\r\n                errorModal(response.message);\r\n            }\r\n            hideProgress();\r\n        });\r\n\r\n    }\r\n    //Mapping Edit\r\n    MappingEdit = (mappingOperation) => {\r\n        thisObj = this;\r\n        let { cdiscDataStdVersionID, cdiscDataStdDomainMetadataID, cdiscDataStdVariableMetadataID } = mappingOperation;\r\n\r\n        let data = {\r\n            StudyID: JSON.parse(\r\n                sessionStorage.getItem(\"studyDetails\")\r\n            ).studyID,\r\n            cDISCDataStdID: 1,\r\n            cdiscDataStdDomainMetadataID: cdiscDataStdDomainMetadataID,\r\n            cdiscDataStdVariableMetadataID: cdiscDataStdVariableMetadataID\r\n        }\r\n        mappingOperation.unsavedOrder = mappingOperation.unsavedOrder ? 1 : 0;\r\n        mappingOperation.isCheckedOut = 1;\r\n        mappingOperation.updatedBy = projectRole.userProfile.userID;\r\n        let data1 = mappingOperation;\r\n        showProgress();\r\n        //console.log(alreadyunmount)\r\n        CallServerPost(\"MappingOperations/UpdateCheckInCheckOut\", data1).then((response) => {\r\n            if (response.status === 1) {\r\n                setSessionValue(\"MappingUpdateIsCheckOut\", response.value);\r\n                alreadyunmount = false;\r\n\r\n                // use latest record\r\n                //so we can see the latest update by other user\r\n                let latestRecord = response.value;\r\n\r\n                //For updating impact record\r\n                if (latestRecord.impact === 1) {\r\n                    latestRecord.sourceDataset = mappingOperation.sourceDataset;\r\n                    latestRecord.sourceVariableName = mappingOperation.sourceVariableName;\r\n                }\r\n\r\n                CallServerPost(\"NCICodeList/GetNCIByDatasetVariable\", data).then((response) => {\r\n                    hideProgress();\r\n\r\n                    if (response.status === 1) {\r\n                        let val = response.value;\r\n                        thisObj.setState({ activeKey: \"work_map_list\", addMapValues: {}, action: \"\" }, () => {\r\n                            thisObj.setState({\r\n                                isCopy: false,\r\n                                showProgramArea:false,\r\n                                MappingConstruct: latestRecord,\r\n                                nciCodelistData: val,\r\n                                action: UPDATE,\r\n                                activeKey: \"workpace_key\",\r\n                                ShowImportListFromLibrary: false,\r\n                                ImportFromMappingLibrary_Data: []\r\n                            })\r\n                        });\r\n                    } else {\r\n                        errorModal(response.message);\r\n                    }\r\n\r\n                }).catch((e) => {\r\n                    //console.log(e);\r\n                    hideProgress();\r\n                });\r\n            } else if (response.status === 0) {\r\n\r\n                hideProgress();\r\n                if (response.value === \"Refresh\") {\r\n                    errorModalCallback(response.message, () => this.clearWorkSpace(\"refresh\"));\r\n                } else {\r\n                    errorModal(response.message);\r\n\r\n                }\r\n            }\r\n\r\n        }).catch((e) => {\r\n            //console.log(e);\r\n            hideProgress();\r\n        });\r\n\r\n    }\r\n\r\n    //Clear Workspace\r\n    clearWorkSpace = (nextStep = \"\") => {\r\n        thisObj = this;\r\n        if (nextStep === \"refresh\") {\r\n            alreadyunmount = true;\r\n            let MappinDatas = new MappingData();\r\n            showProgress();\r\n            MappinDatas.CallBack = (_, mappingList) => {\r\n                thisObj.props.updateState({ mappingDataList: mappingList });\r\n                thisObj.setState({\r\n                    activeKey: \"work_map_list\",\r\n                    addMapValues: {},\r\n                    action: \"\",\r\n                    showProgramArea: false,\r\n                    MappingConstruct: {},\r\n                    ShowImportListFromLibrary: false,\r\n                    ImportFromMappingLibrary_Data: []\r\n                });\r\n                hideProgress();\r\n            };\r\n            MappinDatas.RefreshMapping({});\r\n            thisObj.props.addWorkDataset([]);\r\n        } else if (nextStep === \"noChange\") {\r\n            // alreadyunmount = true;\r\n            thisObj.props.addWorkDataset([]);\r\n\r\n            thisObj.setState({\r\n                activeKey: \"work_map_list\",\r\n                addMapValues: {},\r\n                action: \"\",\r\n                showProgramArea: false,\r\n                ShowImportListFromLibrary: false,\r\n                ImportFromMappingLibrary_Data: []\r\n            });\r\n        }\r\n        else {\r\n            if (Object.keys(thisObj.state.MappingConstruct).length > 0) {\r\n                let mapOperations = thisObj.state.MappingConstruct[0] !== undefined ? thisObj.state.MappingConstruct[0] : thisObj.state.MappingConstruct;\r\n                //add\r\n                if (nextStep !== \"Update\" && mapOperations.constructString === null) {\r\n                    showProgress();\r\n                    CallServerPost(\"MappingOperations/Delete\", mapOperations).then((response) => {\r\n                        if (response.status === 1) {\r\n\r\n                            //Remove stored record in session\r\n                            setSessionValue(\"MappingUpdateIsCheckOut\", null);\r\n                            setSessionValue(\"MappingDeleteIsCheckOut\", null);\r\n                            //end\r\n\r\n                            thisObj.setState({\r\n                                isCopy: false,\r\n                                MappingConstruct: {},\r\n                                ShowImportListFromLibrary: false,\r\n                                ImportFromMappingLibrary_Data: []\r\n                            });\r\n                            //console.log(\"success\");\r\n                        } else {\r\n                            thisObj.setState({\r\n                                isCopy: false,\r\n                                MappingConstruct: {},\r\n                                ShowImportListFromLibrary: false,\r\n                                ImportFromMappingLibrary_Data: []\r\n                            });\r\n                            // errorModal(response.message);\r\n                        }\r\n                        hideProgress();\r\n                    });\r\n                }\r\n                //update\r\n                else if (mapOperations.constructString !== null) {\r\n                    let mappingOperations = mapOperations;\r\n                    mappingOperations.unsavedOrder = mappingOperations.unsavedOrder ? 1 : 0;\r\n                    mappingOperations.isCheckedOut = 0;\r\n                    let data1 = mappingOperations;\r\n                    showProgress();\r\n                    CallServerPost(\"MappingOperations/UpdateCheckInCheckOut\", data1).then((response) => {\r\n                        if (response.status === 1) {\r\n                            alreadyunmount = true;\r\n\r\n                            //Remove stored record in session\r\n                            setSessionValue(\"MappingUpdateIsCheckOut\", null);\r\n                            setSessionValue(\"MappingDeleteIsCheckOut\", null);\r\n                            //end\r\n\r\n                            let MappinDatas = new MappingData();\r\n                            MappinDatas.CallBack = (_, mappingList) => {\r\n                                thisObj.props.updateState({ mappingDataList: mappingList });\r\n                                thisObj.setState({\r\n                                    MappingConstruct: {},\r\n                                    activeKey: \"work_map_list\",\r\n                                    addMapValues: {},\r\n                                    action: \"\",\r\n                                    showProgramArea: false,\r\n                                    ShowImportListFromLibrary: false,\r\n                                    ImportFromMappingLibrary_Data: []\r\n                                });\r\n                                hideProgress();\r\n                            };\r\n                            MappinDatas.RefreshMapping({});\r\n                        } else {\r\n                            hideProgress();\r\n                            errorModal(response.message);\r\n                        }\r\n\r\n                    }).catch((e) => hideProgress());\r\n                }\r\n\r\n            }\r\n            thisObj.props.addWorkDataset([]);\r\n\r\n            thisObj.setState({ activeKey: \"work_map_list\", addMapValues: {}, action: \"\", showProgramArea: false });\r\n        }\r\n\r\n    }\r\n    refreshMapping = (type = \"\") => {\r\n        showProgress();\r\n        let MappinDatas = new MappingData();\r\n        MappinDatas.CallBack = (_, mappingList) => {\r\n            if (type === \"ALL\") {\r\n                //for import from lib\r\n                //we have to select all tab in tree datasettree.js\r\n                this.props.updateState({\r\n                    sourceObj: {},\r\n                    truemappingDataList: mappingList, type: \"ALL\"\r\n                });\r\n\r\n            } else {\r\n                this.props.updateState({ mappingDataList: mappingList });\r\n            }\r\n            hideProgress();\r\n        };\r\n        MappinDatas.RefreshMapping({});\r\n    }\r\n\r\n\r\n\r\n    getTable = (valueObj, type) => {\r\n        const getColHeaders = () => {\r\n            let cols = [];\r\n            if (valueObj.values.length > 0) {\r\n                Object.keys(valueObj.values[0]).map(key => {\r\n                    cols.push(key);\r\n                });\r\n            }\r\n            return cols;\r\n        }\r\n        return (<HotTable\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            key={valueObj.name + \"_hottable_\" + type}\r\n            data={valueObj.values}\r\n            licenseKey=\"non-commercial-and-evaluation\"\r\n            settings={\r\n                {\r\n                    stretchH: 'all',\r\n                    colHeaders: getColHeaders(),\r\n                    rowHeaders: true,\r\n                    readOnly: true,\r\n                    filters: true,\r\n                    editor: false,\r\n                    dropdownMenu: ['filter_by_condition', 'filter_by_value', 'filter_action_bar'],\r\n                }\r\n            }\r\n        />)\r\n    }\r\n    onTabsEdit = (targetKey, action) => {\r\n        if (action == \"remove\") {\r\n            if (this.state.activeKey == targetKey) {\r\n                this.setState({ activeKey: \"work_map_list\" });\r\n            }\r\n            const keys = targetKey.split(\"!!\");\r\n            if (keys[2] == WORK) {\r\n                this.props.removeWorkTable(keys[0]);\r\n            } else if (targetKey === \"importmappinglibrary\") {\r\n                this.setState({ ShowImportListFromLibrary: false, ImportFromMappingLibrary_Data: [] });\r\n            }\r\n            else {\r\n                this.props.removeTable(keys[0], keys[2]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //Icon ClassName Change Func when SideToggle Button clicked\r\n    arrowChangeFunc = () => {\r\n        this.setState({ iconClassChange: !this.state.iconClassChange });\r\n    }\r\n\r\n    programAreShowHide = (value) => {\r\n        this.setState({ showProgramArea: value });\r\n    }\r\n\r\n    //Import from Mapping Library\r\n\r\n    ImportDataFromMappingLibrary = (mappingOperation = false, callback = this.ImportCreate) => {\r\n        thisObj = this;\r\n\r\n        let data = {};\r\n\r\n        //If mappingOperation  false means get all\r\n        //Get only by cDISCDataStdDomainMetadataID and cDISCDataStdVariableMetadataID\r\n        if (mappingOperation) {\r\n            let {\r\n                targetDataSet,\r\n                targetVariableName\r\n            } = mappingOperation;\r\n\r\n            data.targetDataSet = targetDataSet;\r\n            data.targetVariableName = targetVariableName\r\n            data.mappingLibraryID = 0;\r\n\r\n        }\r\n        else {\r\n            data.mappingLibraryID = -1;\r\n        }\r\n\r\n        showProgress();\r\n        thisObj.setState(\r\n            {\r\n                importLib_State: \"reLoading\"\r\n            });\r\n        CallServerPost(\"MappingLibrary/GetAll\", data).then((res) => {\r\n            hideProgress();\r\n            if (res.status === 1) {\r\n\r\n                let libraryRecord = res.value;\r\n\r\n                let filterValueByAvailable_Source = [];\r\n                let { SourceDataset } = thisObj.props.allValues;\r\n                let Src_Variable = SourceDataset.Variable;\r\n\r\n                libraryRecord && typeof libraryRecord === \"object\" && libraryRecord.map(lib_rec => {\r\n\r\n                    lib_rec.source = lib_rec.sourceDataset + \".\" + lib_rec.sourceVariableName;\r\n                    lib_rec.target = lib_rec.targetDataSet + \".\" + lib_rec.targetVariableName;\r\n                    //For checkbox check \r\n                    lib_rec.Row_Selection = false;\r\n                    filterValueByAvailable_Source.push(lib_rec);\r\n                });\r\n\r\n                if (filterValueByAvailable_Source.length > 0) {\r\n                    thisObj.setState(\r\n                        {\r\n                            importLib_State: \"reLoaded\",\r\n                            activeKey: \"importmappinglibrary\",\r\n                            ShowImportListFromLibrary: true,\r\n                            Import_ShowAll: !mappingOperation,\r\n                            ImportFromMappingLibrary_Data: filterValueByAvailable_Source,\r\n                            fnImporting: callback\r\n                        });\r\n                    return;\r\n                }\r\n            }\r\n            thisObj.setState({ ShowImportListFromLibrary: false, ImportFromMappingLibrary_Data: [] });\r\n            //!mappingOperation means show all\r\n            //else show record by stddomain and variable\r\n            if (!mappingOperation) {\r\n                errorModal(\"No Rule available\");\r\n            } else {\r\n                errorModal(\"No Rules available For \" + mappingOperation.targetDataSet + \".\" + mappingOperation.targetVariableName);\r\n\r\n            }\r\n\r\n\r\n        }).catch((e) => {\r\n            //console.log(e);\r\n            hideProgress();\r\n        });\r\n    }\r\n\r\n    //Get record from lib\r\n    ImportCreate = (mappingoperationlist) => {\r\n        let mappingoperation_list = mappingoperationlist.map(mappingoperation => {\r\n            mappingoperation.StudyID = getStudyID();\r\n            mappingoperation.ChangeReason = \"Copied From Library\";\r\n            mappingoperation.isCheckedOut = 0;\r\n            mappingoperation.UpdatedBy = getUserID();\r\n            return mappingoperation;\r\n        });\r\n\r\n        showProgress();\r\n        //Save reocrd to MappingConstruct table\r\n        PostCallWithZone(\"MappingOperations/CreateMultipleMappingOperation\", mappingoperation_list).then((response) => {\r\n            const responseData = response;\r\n            if (responseData.status === 1) {\r\n\r\n                successModalCallback(response.message, () => {\r\n                    thisObj.setState({\r\n                        activeKey: \"work_map_list\",\r\n                        ShowImportListFromLibrary: false,\r\n                        ImportFromMappingLibrary_Data: []\r\n                    }, () => thisObj.refreshMapping(\"ALL\"));\r\n                })\r\n            } else {\r\n                errorModal(response.message);\r\n            }\r\n            hideProgress();\r\n        })\r\n    }\r\n\r\n\r\n    //Set activeKey\r\n    setActiveKey = () => {\r\n        this.setState({ activeKey: \"workpace_key\" });\r\n    }\r\n    importcancel = () => {\r\n        this.setState((state) => ({\r\n            activeKey: state.Import_ShowAll ? \"work_map_list\" : \"workpace_key\",\r\n            ShowImportListFromLibrary: false, ImportFromMappingLibrary_Data: []\r\n        }));\r\n\r\n    }\r\n    render() {\r\n        const { action,\r\n            activeKey,\r\n            nciCodelistData,\r\n            addMapValues,\r\n            Import_ShowAll,\r\n            MappingConstruct,\r\n            ShowImportListFromLibrary,\r\n            ImportFromMappingLibrary_Data,\r\n            importLib_State,\r\n            isCopy\r\n        } = this.state;\r\n\r\n        const { sourceTables, sourceObj, activityWrkflowStatus, allValues, isHeaderContentShowing } = this.props;\r\n        let targetDomainVariable = \"\";\r\n        if (action == CREATE) {\r\n            targetDomainVariable = `${addMapValues.TargetDomain}.${addMapValues.TargetVariable}`;\r\n        } else if (action == UPDATE) {\r\n            targetDomainVariable = `${MappingConstruct.targetDataSet}.${MappingConstruct.targetVariableName}`;\r\n        }\r\n\r\n        const onMapping = action !== \"\";\r\n        const srcVariable = 'TABLE_NAME' in sourceObj ? `(${sourceObj.TABLE_NAME}.${sourceObj.COLUMN_NAME})` : \"\";\r\n        const srcVar2 = isCopy ? `${MappingConstruct.sourceDataset}.${MappingConstruct.sourceVariableName}` : 'TABLE_NAME' in sourceObj ? `${sourceObj.TABLE_NAME}.${sourceObj.COLUMN_NAME}` : \"\";\r\n        const tabTitle = (<div><Button className=\"sideToggleBtn\"\r\n            onClick={(e) => {\r\n                this.props.fnToHideShowTreeView();\r\n                this.arrowChangeFunc();\r\n                e.stopPropagation();\r\n            }}>\r\n            <i className={this.state.iconClassChange ? \" fas fa-chevron-circle-left\" : \"fas fa-chevron-circle-right\"} />\r\n        </Button>\r\n            <span style={{ marginLeft: 10 }}>{`Mapping List ${srcVariable}`}</span>\r\n        </div>);\r\n        const contenttabbtn = (\r\n            <div>\r\n                <Button style={{ marginRight: 10 }} className=\"sideToggleBtn\" onClick={() => { this.setState({ contentTabOpen: !this.state.contentTabOpen }, () => { this.props.changeContentTab() }); }}>\r\n                    <i className={this.state.contentTabOpen ? \" fas fa-chevron-circle-up\" : \"fas fa-chevron-circle-down\"} />\r\n                </Button>\r\n                {\r\n                    activeKey == \"workpace_key\" &&\r\n                    <Button className=\"sideToggleBtn\" onClick={() => { this.setState({ showProgramArea: !this.state.showProgramArea }); }}>\r\n                        <i className={this.state.showProgramArea ? \" fas fa-caret-square-down\" : \"fas fa-caret-square-up\"} />\r\n                    </Button>\r\n                }\r\n            </div>\r\n        )\r\n        return (\r\n            <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                <Tabs\r\n                    hideAdd\r\n                    onChange={this.tabChanged}\r\n                    activeKey={activeKey}\r\n                    type=\"editable-card\"\r\n                    key=\"work_tabs_key\"\r\n                    closable={true}\r\n                    onEdit={this.onTabsEdit}\r\n                    style={{ height: \"100%\" }}\r\n                    tabBarExtraContent={\r\n                        activeKey == \"workpace_key\" ? <div style={{ display: \"flex\" }}>\r\n                            {\r\n                                action == CREATE &&\r\n                                < span style={{ fontWeight: 500, marginRight: 25 }}>\r\n                                    {`Source: ${srcVar2} | Target : ${addMapValues.TargetDomain}.${addMapValues.TargetVariable}`}\r\n                                </span>\r\n                            }\r\n                            {\r\n                                action == UPDATE &&\r\n                                < span style={{ fontWeight: 500, marginRight: 25 }}>\r\n                                    {`Source: ${MappingConstruct.sourceDataset}.${MappingConstruct.sourceVariableName} | Target: ${MappingConstruct.targetDataSet}.${MappingConstruct.targetVariableName}`}\r\n                                </span>\r\n                            }\r\n                            {contenttabbtn}\r\n                        </div>\r\n\r\n                            : contenttabbtn}\r\n                >\r\n                    <TabPane closable={false} tab={tabTitle} key={\"work_map_list\"}>\r\n                        <Row >\r\n                            <Col span={24}>\r\n                                <LayoutContent>\r\n\r\n                                    <MappingList\r\n                                        isHeaderContentShowing={isHeaderContentShowing}\r\n                                        activityWrkflowStatus={activityWrkflowStatus}\r\n                                        activityDetails={this.props.activityDetails}\r\n                                        MappingEdit={this.MappingEdit}\r\n                                        sourceObj={this.props.sourceObj}\r\n                                        targetObj={this.props.targetObj}\r\n                                        mappingData={this.props.mappingData}\r\n                                        allValues={this.props.allValues}\r\n                                        type={this.props.type}\r\n                                        addNewMapping={this.addMapping}\r\n                                        onMapping={onMapping}\r\n                                        refreshMapping={this.refreshMapping}\r\n                                        ImportFromMappingLibrary={this.ImportDataFromMappingLibrary}\r\n                                    />\r\n\r\n\r\n                                </LayoutContent>\r\n                            </Col>\r\n                        </Row>\r\n                    </TabPane>\r\n                    {\r\n                        (Object.keys(addMapValues).length > 0 || action == UPDATE) &&\r\n                        <TabPane closable={false} tab={\"WorkSpace\"} key={\"workpace_key\"}>\r\n\r\n                            <BlocklyWorkspace\r\n                                    activityWrkflowStatus={activityWrkflowStatus}\r\n                                    activityDetails={this.props.activityDetails}\r\n                                    MappingConstruct={MappingConstruct}\r\n                                    clearWorkSpace={this.clearWorkSpace}\r\n                                    action={action}\r\n                                    allValues={this.props.allValues}\r\n                                    selectedTargetObj={addMapValues}\r\n                                    work_datasets={this.props.work_datasets}\r\n                                    mappingBlocks={this.props.mappingBlocks}\r\n                                    sourceObj={isCopy ? { TABLE_NAME: MappingConstruct.sourceDataset, COLUMN_NAME: MappingConstruct.sourceVariableName } : this.props.sourceObj}\r\n                                    addWorkTable={this.props.addWorkTable}\r\n                                    addWorkDataset={this.props.addWorkDataset}\r\n                                    showProgramArea={this.state.showProgramArea}\r\n                                    fnToShowHideProgramArea={this.programAreShowHide}\r\n                                    NCICODELISTDATA={nciCodelistData}\r\n                                    ImportDataFromMappingLibrary={this.ImportDataFromMappingLibrary}\r\n                                    setActiveKey={this.setActiveKey}\r\n                                    bulkMapConfig={this.props.bulkMapConfig}\r\n                                    targetDomainVariable={targetDomainVariable }\r\n                            />\r\n                        </TabPane>\r\n                    }\r\n                    {\r\n                        sourceTables.map((tableObj) => {\r\n                            return <TabPane tab={tableObj.name} key={tableObj.name + \"!!tabkey!!\" + SOURCE}>\r\n                                <div style={{ height: isHeaderContentShowing ? \"calc(100vh - 294px)\" : \"calc(100vh - 170px)\", width: \"100%\" }}>\r\n                                    {this.getTable(tableObj, SOURCE)}\r\n                                </div>\r\n                            </TabPane>\r\n                        })\r\n                    }\r\n                    {\r\n                        this.props.workTables.map((tableObj) => {\r\n                            return <TabPane tab={tableObj.name} key={tableObj.name + \"!!tabkey!!\" + \"work\"}>\r\n                                <div style={{ height: isHeaderContentShowing ? \"calc(100vh - 294px)\" : \"calc(100vh - 170px)\", width: \"100%\" }}>\r\n                                    {this.getTable(tableObj, WORK)}\r\n                                </div>\r\n                            </TabPane>\r\n                        })\r\n                    }\r\n                    {\r\n                        ShowImportListFromLibrary &&\r\n                        <TabPane tab={\"Copy Rule\"} key={\"importmappinglibrary\"} style={{ paddingBottom: 5 }}>\r\n                            <ImportMappingLibrary\r\n                                Standards={allValues.Standards}\r\n                                SourceDataset={allValues.SourceDataset}\r\n                                MappingList={allValues.MappingList}\r\n                                ShowAll={Import_ShowAll}\r\n                                libRecord={ImportFromMappingLibrary_Data}\r\n                                import={this.state.fnImporting}\r\n                                cancel={this.importcancel}\r\n                                contentTabOpen={this.state.contentTabOpen}\r\n                                importLib_State={importLib_State}\r\n                            />\r\n                        </TabPane>\r\n\r\n                    }\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}