{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { groupBy } from '../../../base/common/arrays.js';\nimport { dispose } from '../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { IWorkspaceContextService } from '../../../platform/workspace/common/workspace.js';\nimport { optional } from '../../../platform/instantiation/common/instantiation.js';\nimport { Choice, Placeholder, SnippetParser, Text } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, CommentBasedVariableResolver, WorkspaceBasedVariableResolver, RandomBasedVariableResolver } from './snippetVariables.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport * as colors from '../../../platform/theme/common/colorRegistry.js';\nimport { ILabelService } from '../../../platform/label/common/label.js';\nregisterThemingParticipant(function (theme, collector) {\n  function getColorGraceful(name) {\n    var color = theme.getColor(name);\n    return color ? color.toString() : 'transparent';\n  }\n  collector.addRule(\".monaco-editor .snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetTabstopHighlightBorder) + \"; }\");\n  collector.addRule(\".monaco-editor .finish-snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBorder) + \"; }\");\n});\nvar OneSnippet = /** @class */function () {\n  function OneSnippet(editor, snippet, offset) {\n    this._nestingLevel = 1;\n    this._editor = editor;\n    this._snippet = snippet;\n    this._offset = offset;\n    this._placeholderGroups = groupBy(snippet.placeholders, Placeholder.compareByIndex);\n    this._placeholderGroupsIdx = -1;\n  }\n  OneSnippet.prototype.dispose = function () {\n    if (this._placeholderDecorations) {\n      var toRemove_1 = [];\n      this._placeholderDecorations.forEach(function (handle) {\n        return toRemove_1.push(handle);\n      });\n      this._editor.deltaDecorations(toRemove_1, []);\n    }\n    this._placeholderGroups.length = 0;\n  };\n  OneSnippet.prototype._initDecorations = function () {\n    var _this = this;\n    if (this._placeholderDecorations) {\n      // already initialized\n      return;\n    }\n    this._placeholderDecorations = new Map();\n    var model = this._editor.getModel();\n    this._editor.changeDecorations(function (accessor) {\n      // create a decoration for each placeholder\n      for (var _i = 0, _a = _this._snippet.placeholders; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n        var placeholderOffset = _this._snippet.offset(placeholder);\n        var placeholderLen = _this._snippet.fullLen(placeholder);\n        var range = Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));\n        var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n        var handle = accessor.addDecoration(range, options);\n        _this._placeholderDecorations.set(placeholder, handle);\n      }\n    });\n  };\n  OneSnippet.prototype.move = function (fwd) {\n    var _this = this;\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n    this._initDecorations();\n    // Transform placeholder text if necessary\n    if (this._placeholderGroupsIdx >= 0) {\n      var operations = [];\n      for (var _i = 0, _a = this._placeholderGroups[this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n        // Check if the placeholder has a transformation\n        if (placeholder.transform) {\n          var id = this._placeholderDecorations.get(placeholder);\n          var range = this._editor.getModel().getDecorationRange(id);\n          var currentValue = this._editor.getModel().getValueInRange(range);\n          operations.push(EditOperation.replaceMove(range, placeholder.transform.resolve(currentValue)));\n        }\n      }\n      if (operations.length > 0) {\n        this._editor.executeEdits('snippet.placeholderTransform', operations);\n      }\n    }\n    var couldSkipThisPlaceholder = false;\n    if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n      this._placeholderGroupsIdx += 1;\n      couldSkipThisPlaceholder = true;\n    } else if (fwd === false && this._placeholderGroupsIdx > 0) {\n      this._placeholderGroupsIdx -= 1;\n      couldSkipThisPlaceholder = true;\n    } else {\n      // the selection of the current placeholder might\n      // not acurate any more -> simply restore it\n    }\n    var newSelections = this._editor.getModel().changeDecorations(function (accessor) {\n      var activePlaceholders = new Set();\n      // change stickiness to always grow when typing at its edges\n      // because these decorations represent the currently active\n      // tabstop.\n      // Special case #1: reaching the final tabstop\n      // Special case #2: placeholders enclosing active placeholders\n      var selections = [];\n      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n        var id = _this._placeholderDecorations.get(placeholder);\n        var range = _this._editor.getModel().getDecorationRange(id);\n        selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n        // consider to skip this placeholder index when the decoration\n        // range is empty but when the placeholder wasn't. that's a strong\n        // hint that the placeholder has been deleted. (all placeholder must match this)\n        couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);\n        accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n        activePlaceholders.add(placeholder);\n        for (var _b = 0, _c = _this._snippet.enclosingPlaceholders(placeholder); _b < _c.length; _b++) {\n          var enclosingPlaceholder = _c[_b];\n          var id_1 = _this._placeholderDecorations.get(enclosingPlaceholder);\n          accessor.changeDecorationOptions(id_1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n          activePlaceholders.add(enclosingPlaceholder);\n        }\n      }\n      // change stickness to never grow when typing at its edges\n      // so that in-active tabstops never grow\n      _this._placeholderDecorations.forEach(function (id, placeholder) {\n        if (!activePlaceholders.has(placeholder)) {\n          accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n        }\n      });\n      return selections;\n    });\n    return !couldSkipThisPlaceholder ? newSelections : this.move(fwd);\n  };\n  OneSnippet.prototype._hasPlaceholderBeenCollapsed = function (placeholder) {\n    // A placeholder is empty when it wasn't empty when authored but\n    // when its tracking decoration is empty. This also applies to all\n    // potential parent placeholders\n    var marker = placeholder;\n    while (marker) {\n      if (marker instanceof Placeholder) {\n        var id = this._placeholderDecorations.get(marker);\n        var range = this._editor.getModel().getDecorationRange(id);\n        if (range.isEmpty() && marker.toString().length > 0) {\n          return true;\n        }\n      }\n      marker = marker.parent;\n    }\n    return false;\n  };\n  Object.defineProperty(OneSnippet.prototype, \"isAtFirstPlaceholder\", {\n    get: function get() {\n      return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OneSnippet.prototype, \"isAtLastPlaceholder\", {\n    get: function get() {\n      return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OneSnippet.prototype, \"hasPlaceholder\", {\n    get: function get() {\n      return this._snippet.placeholders.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  OneSnippet.prototype.computePossibleSelections = function () {\n    var result = new Map();\n    for (var _i = 0, _a = this._placeholderGroups; _i < _a.length; _i++) {\n      var placeholdersWithEqualIndex = _a[_i];\n      var ranges = void 0;\n      for (var _b = 0, placeholdersWithEqualIndex_1 = placeholdersWithEqualIndex; _b < placeholdersWithEqualIndex_1.length; _b++) {\n        var placeholder = placeholdersWithEqualIndex_1[_b];\n        if (placeholder.isFinalTabstop) {\n          // ignore those\n          break;\n        }\n        if (!ranges) {\n          ranges = [];\n          result.set(placeholder.index, ranges);\n        }\n        var id = this._placeholderDecorations.get(placeholder);\n        var range = this._editor.getModel().getDecorationRange(id);\n        if (!range) {\n          // one of the placeholder lost its decoration and\n          // therefore we bail out and pretend the placeholder\n          // (with its mirrors) doesn't exist anymore.\n          result.delete(placeholder.index);\n          break;\n        }\n        ranges.push(range);\n      }\n    }\n    return result;\n  };\n  Object.defineProperty(OneSnippet.prototype, \"choice\", {\n    get: function get() {\n      return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  OneSnippet.prototype.merge = function (others) {\n    var _this = this;\n    var model = this._editor.getModel();\n    this._nestingLevel *= 10;\n    this._editor.changeDecorations(function (accessor) {\n      // For each active placeholder take one snippet and merge it\n      // in that the placeholder (can be many for `$1foo$1foo`). Because\n      // everything is sorted by editor selection we can simply remove\n      // elements from the beginning of the array\n      for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\n        var placeholder = _a[_i];\n        var nested = others.shift();\n        console.assert(!nested._placeholderDecorations);\n        // Massage placeholder-indicies of the nested snippet to be\n        // sorted right after the insertion point. This ensures we move\n        // through the placeholders in the correct order\n        var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\n        for (var _b = 0, _c = nested._snippet.placeholderInfo.all; _b < _c.length; _b++) {\n          var nestedPlaceholder = _c[_b];\n          if (nestedPlaceholder.isFinalTabstop) {\n            nestedPlaceholder.index = placeholder.index + (indexLastPlaceholder + 1) / _this._nestingLevel;\n          } else {\n            nestedPlaceholder.index = placeholder.index + nestedPlaceholder.index / _this._nestingLevel;\n          }\n        }\n        _this._snippet.replace(placeholder, nested._snippet.children);\n        // Remove the placeholder at which position are inserting\n        // the snippet and also remove its decoration.\n        var id = _this._placeholderDecorations.get(placeholder);\n        accessor.removeDecoration(id);\n        _this._placeholderDecorations.delete(placeholder);\n        // For each *new* placeholder we create decoration to monitor\n        // how and if it grows/shrinks.\n        for (var _d = 0, _e = nested._snippet.placeholders; _d < _e.length; _d++) {\n          var placeholder_1 = _e[_d];\n          var placeholderOffset = nested._snippet.offset(placeholder_1);\n          var placeholderLen = nested._snippet.fullLen(placeholder_1);\n          var range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\n          var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n          _this._placeholderDecorations.set(placeholder_1, handle);\n        }\n      }\n      // Last, re-create the placeholder groups by sorting placeholders by their index.\n      _this._placeholderGroups = groupBy(_this._snippet.placeholders, Placeholder.compareByIndex);\n    });\n  };\n  OneSnippet._decor = {\n    active: ModelDecorationOptions.register({\n      stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */,\n      className: 'snippet-placeholder'\n    }),\n    inactive: ModelDecorationOptions.register({\n      stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n      className: 'snippet-placeholder'\n    }),\n    activeFinal: ModelDecorationOptions.register({\n      stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n      className: 'finish-snippet-placeholder'\n    }),\n    inactiveFinal: ModelDecorationOptions.register({\n      stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n      className: 'finish-snippet-placeholder'\n    })\n  };\n  return OneSnippet;\n}();\nexport { OneSnippet };\nvar _defaultOptions = {\n  overwriteBefore: 0,\n  overwriteAfter: 0,\n  adjustWhitespace: true,\n  clipboardText: undefined\n};\nvar SnippetSession = /** @class */function () {\n  function SnippetSession(editor, template, options) {\n    if (options === void 0) {\n      options = _defaultOptions;\n    }\n    this._templateMerges = [];\n    this._snippets = [];\n    this._editor = editor;\n    this._template = template;\n    this._options = options;\n  }\n  SnippetSession.adjustWhitespace = function (model, position, snippet, adjustIndentation, adjustNewlines) {\n    var line = model.getLineContent(position.lineNumber);\n    var lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n    snippet.walk(function (marker) {\n      if (marker instanceof Text && !(marker.parent instanceof Choice)) {\n        // adjust indentation of text markers, except for choise elements\n        // which get adjusted when being selected\n        var lines = marker.value.split(/\\r\\n|\\r|\\n/);\n        if (adjustIndentation) {\n          for (var i = 1; i < lines.length; i++) {\n            var templateLeadingWhitespace = getLeadingWhitespace(lines[i]);\n            lines[i] = model.normalizeIndentation(lineLeadingWhitespace + templateLeadingWhitespace) + lines[i].substr(templateLeadingWhitespace.length);\n          }\n        }\n        if (adjustNewlines) {\n          var newValue = lines.join(model.getEOL());\n          if (newValue !== marker.value) {\n            marker.parent.replace(marker, [new Text(newValue)]);\n          }\n        }\n      }\n      return true;\n    });\n  };\n  SnippetSession.adjustSelection = function (model, selection, overwriteBefore, overwriteAfter) {\n    if (overwriteBefore !== 0 || overwriteAfter !== 0) {\n      // overwrite[Before|After] is compute using the position, not the whole\n      // selection. therefore we adjust the selection around that position\n      var positionLineNumber = selection.positionLineNumber,\n        positionColumn = selection.positionColumn;\n      var positionColumnBefore = positionColumn - overwriteBefore;\n      var positionColumnAfter = positionColumn + overwriteAfter;\n      var range = model.validateRange({\n        startLineNumber: positionLineNumber,\n        startColumn: positionColumnBefore,\n        endLineNumber: positionLineNumber,\n        endColumn: positionColumnAfter\n      });\n      selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\n    }\n    return selection;\n  };\n  SnippetSession.createEditsAndSnippets = function (editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText) {\n    var edits = [];\n    var snippets = [];\n    if (!editor.hasModel()) {\n      return {\n        edits: edits,\n        snippets: snippets\n      };\n    }\n    var model = editor.getModel();\n    var workspaceService = editor.invokeWithinContext(function (accessor) {\n      return accessor.get(IWorkspaceContextService, optional);\n    });\n    var modelBasedVariableResolver = editor.invokeWithinContext(function (accessor) {\n      return new ModelBasedVariableResolver(accessor.get(ILabelService, optional), model);\n    });\n    var clipboardService = editor.invokeWithinContext(function (accessor) {\n      return accessor.get(IClipboardService, optional);\n    });\n    var readClipboardText = function readClipboardText() {\n      return clipboardText || clipboardService && clipboardService.readTextSync();\n    };\n    var delta = 0;\n    // know what text the overwrite[Before|After] extensions\n    // of the primary curser have selected because only when\n    // secondary selections extend to the same text we can grow them\n    var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n    var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n    // remember the first non-whitespace column to decide if\n    // `keepWhitespace` should be overruled for secondary selections\n    var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n    // sort selections by their start position but remeber\n    // the original index. that allows you to create correct\n    // offset-based selection logic without changing the\n    // primary selection\n    var indexedSelections = editor.getSelections().map(function (selection, idx) {\n      return {\n        selection: selection,\n        idx: idx\n      };\n    }).sort(function (a, b) {\n      return Range.compareRangesUsingStarts(a.selection, b.selection);\n    });\n    for (var _i = 0, indexedSelections_1 = indexedSelections; _i < indexedSelections_1.length; _i++) {\n      var _a = indexedSelections_1[_i],\n        selection = _a.selection,\n        idx = _a.idx;\n      // extend selection with the `overwriteBefore` and `overwriteAfter` and then\n      // compare if this matches the extensions of the primary selection\n      var extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n      var extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n      if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n        extensionBefore = selection;\n      }\n      if (firstAfterText !== model.getValueInRange(extensionAfter)) {\n        extensionAfter = selection;\n      }\n      // merge the before and after selection into one\n      var snippetSelection = selection.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn).setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n      var snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n      // adjust the template string to match the indentation and\n      // whitespace rules of this insert location (can be different for each cursor)\n      // happens when being asked for (default) or when this is a secondary\n      // cursor and the leading whitespace is different\n      var start = snippetSelection.getStartPosition();\n      SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber), true);\n      snippet.resolveVariables(new CompositeSnippetVariableResolver([modelBasedVariableResolver, new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(60 /* multiCursorPaste */) === 'spread'), new SelectionBasedVariableResolver(model, selection), new CommentBasedVariableResolver(model), new TimeBasedVariableResolver(), new WorkspaceBasedVariableResolver(workspaceService), new RandomBasedVariableResolver()]));\n      var offset = model.getOffsetAt(start) + delta;\n      delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection);\n      // store snippets with the index of their originating selection.\n      // that ensures the primiary cursor stays primary despite not being\n      // the one with lowest start position\n      edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n      snippets[idx] = new OneSnippet(editor, snippet, offset);\n    }\n    return {\n      edits: edits,\n      snippets: snippets\n    };\n  };\n  SnippetSession.prototype.dispose = function () {\n    dispose(this._snippets);\n  };\n  SnippetSession.prototype._logInfo = function () {\n    return \"template=\\\"\" + this._template + \"\\\", merged_templates=\\\"\" + this._templateMerges.join(' -> ') + \"\\\"\";\n  };\n  SnippetSession.prototype.insert = function () {\n    var _this = this;\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    // make insert edit and start with first selections\n    var _a = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText),\n      edits = _a.edits,\n      snippets = _a.snippets;\n    this._snippets = snippets;\n    this._editor.executeEdits('snippet', edits, function (undoEdits) {\n      if (_this._snippets[0].hasPlaceholder) {\n        return _this._move(true);\n      } else {\n        return undoEdits.map(function (edit) {\n          return Selection.fromPositions(edit.range.getEndPosition());\n        });\n      }\n    });\n    this._editor.revealRange(this._editor.getSelections()[0]);\n  };\n  SnippetSession.prototype.merge = function (template, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = _defaultOptions;\n    }\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n    var _a = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText),\n      edits = _a.edits,\n      snippets = _a.snippets;\n    this._editor.executeEdits('snippet', edits, function (undoEdits) {\n      for (var _i = 0, _a = _this._snippets; _i < _a.length; _i++) {\n        var snippet = _a[_i];\n        snippet.merge(snippets);\n      }\n      console.assert(snippets.length === 0);\n      if (_this._snippets[0].hasPlaceholder) {\n        return _this._move(undefined);\n      } else {\n        return undoEdits.map(function (edit) {\n          return Selection.fromPositions(edit.range.getEndPosition());\n        });\n      }\n    });\n  };\n  SnippetSession.prototype.next = function () {\n    var newSelections = this._move(true);\n    this._editor.setSelections(newSelections);\n    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n  };\n  SnippetSession.prototype.prev = function () {\n    var newSelections = this._move(false);\n    this._editor.setSelections(newSelections);\n    this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n  };\n  SnippetSession.prototype._move = function (fwd) {\n    var selections = [];\n    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\n      var snippet = _a[_i];\n      var oneSelection = snippet.move(fwd);\n      selections.push.apply(selections, oneSelection);\n    }\n    return selections;\n  };\n  Object.defineProperty(SnippetSession.prototype, \"isAtFirstPlaceholder\", {\n    get: function get() {\n      return this._snippets[0].isAtFirstPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"isAtLastPlaceholder\", {\n    get: function get() {\n      return this._snippets[0].isAtLastPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"hasPlaceholder\", {\n    get: function get() {\n      return this._snippets[0].hasPlaceholder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SnippetSession.prototype, \"choice\", {\n    get: function get() {\n      return this._snippets[0].choice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SnippetSession.prototype.isSelectionWithinPlaceholders = function () {\n    if (!this.hasPlaceholder) {\n      return false;\n    }\n    var selections = this._editor.getSelections();\n    if (selections.length < this._snippets.length) {\n      // this means we started snippet mode with N\n      // selections and have M (N > M) selections.\n      // So one snippet is without selection -> cancel\n      return false;\n    }\n    var allPossibleSelections = new Map();\n    var _loop_1 = function _loop_1(snippet) {\n      var possibleSelections = snippet.computePossibleSelections();\n      // for the first snippet find the placeholder (and its ranges)\n      // that contain at least one selection. for all remaining snippets\n      // the same placeholder (and their ranges) must be used.\n      if (allPossibleSelections.size === 0) {\n        possibleSelections.forEach(function (ranges, index) {\n          ranges.sort(Range.compareRangesUsingStarts);\n          for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n            if (ranges[0].containsRange(selection)) {\n              allPossibleSelections.set(index, []);\n              break;\n            }\n          }\n        });\n      }\n      if (allPossibleSelections.size === 0) {\n        return {\n          value: false\n        };\n      }\n      // add selections from 'this' snippet so that we know all\n      // selections for this placeholder\n      allPossibleSelections.forEach(function (array, index) {\n        array.push.apply(array, possibleSelections.get(index));\n      });\n    };\n    for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\n      var snippet = _a[_i];\n      var state_1 = _loop_1(snippet);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    // sort selections (and later placeholder-ranges). then walk both\n    // arrays and make sure the placeholder-ranges contain the corresponding\n    // selection\n    selections.sort(Range.compareRangesUsingStarts);\n    allPossibleSelections.forEach(function (ranges, index) {\n      if (ranges.length !== selections.length) {\n        allPossibleSelections.delete(index);\n        return;\n      }\n      ranges.sort(Range.compareRangesUsingStarts);\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].containsRange(selections[i])) {\n          allPossibleSelections.delete(index);\n          return;\n        }\n      }\n    });\n    // from all possible selections we have deleted those\n    // that don't match with the current selection. if we don't\n    // have any left, we don't have a selection anymore\n    return allPossibleSelections.size > 0;\n  };\n  return SnippetSession;\n}();\nexport { SnippetSession };","map":{"version":3,"names":["groupBy","dispose","getLeadingWhitespace","EditOperation","Range","Selection","ModelDecorationOptions","IClipboardService","IWorkspaceContextService","optional","Choice","Placeholder","SnippetParser","Text","ClipboardBasedVariableResolver","CompositeSnippetVariableResolver","ModelBasedVariableResolver","SelectionBasedVariableResolver","TimeBasedVariableResolver","CommentBasedVariableResolver","WorkspaceBasedVariableResolver","RandomBasedVariableResolver","registerThemingParticipant","colors","ILabelService","theme","collector","getColorGraceful","name","color","getColor","toString","addRule","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","OneSnippet","editor","snippet","offset","_nestingLevel","_editor","_snippet","_offset","_placeholderGroups","placeholders","compareByIndex","_placeholderGroupsIdx","prototype","_placeholderDecorations","toRemove_1","forEach","handle","push","deltaDecorations","length","_initDecorations","_this","Map","model","getModel","changeDecorations","accessor","_i","_a","placeholder","placeholderOffset","placeholderLen","fullLen","range","fromPositions","getPositionAt","options","isFinalTabstop","_decor","inactiveFinal","inactive","addDecoration","set","move","fwd","hasModel","operations","transform","id","get","getDecorationRange","currentValue","getValueInRange","replaceMove","resolve","executeEdits","couldSkipThisPlaceholder","newSelections","activePlaceholders","Set","selections","startLineNumber","startColumn","endLineNumber","endColumn","_hasPlaceholderBeenCollapsed","changeDecorationOptions","activeFinal","active","add","_b","_c","enclosingPlaceholders","enclosingPlaceholder","id_1","has","marker","isEmpty","parent","Object","defineProperty","enumerable","configurable","computePossibleSelections","result","placeholdersWithEqualIndex","ranges","placeholdersWithEqualIndex_1","index","delete","choice","merge","others","nested","shift","console","assert","indexLastPlaceholder","placeholderInfo","last","all","nestedPlaceholder","replace","children","removeDecoration","_d","_e","placeholder_1","register","stickiness","className","_defaultOptions","overwriteBefore","overwriteAfter","adjustWhitespace","clipboardText","undefined","SnippetSession","template","_templateMerges","_snippets","_template","_options","position","adjustIndentation","adjustNewlines","line","getLineContent","lineNumber","lineLeadingWhitespace","column","walk","lines","value","split","i","templateLeadingWhitespace","normalizeIndentation","substr","newValue","join","getEOL","adjustSelection","selection","positionLineNumber","positionColumn","positionColumnBefore","positionColumnAfter","validateRange","createWithDirection","getDirection","createEditsAndSnippets","enforceFinalTabstop","edits","snippets","workspaceService","invokeWithinContext","modelBasedVariableResolver","clipboardService","readClipboardText","readTextSync","delta","firstBeforeText","getSelection","firstAfterText","firstLineFirstNonWhitespace","getLineFirstNonWhitespaceColumn","indexedSelections","getSelections","map","idx","sort","a","b","compareRangesUsingStarts","indexedSelections_1","extensionBefore","extensionAfter","snippetSelection","setStartPosition","setEndPosition","parse","start","getStartPosition","resolveVariables","getOption","getOffsetAt","getValueLengthInRange","_logInfo","insert","undoEdits","hasPlaceholder","_move","edit","getEndPosition","revealRange","next","setSelections","revealPositionInCenterIfOutsideViewport","getPosition","prev","oneSelection","apply","isAtFirstPlaceholder","isAtLastPlaceholder","isSelectionWithinPlaceholders","allPossibleSelections","_loop_1","possibleSelections","size","selections_1","containsRange","array","state_1"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetSession.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { groupBy } from '../../../base/common/arrays.js';\r\nimport { dispose } from '../../../base/common/lifecycle.js';\r\nimport { getLeadingWhitespace } from '../../../base/common/strings.js';\r\nimport './snippetSession.css';\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\r\nimport { IWorkspaceContextService } from '../../../platform/workspace/common/workspace.js';\r\nimport { optional } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { Choice, Placeholder, SnippetParser, Text } from './snippetParser.js';\r\nimport { ClipboardBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, CommentBasedVariableResolver, WorkspaceBasedVariableResolver, RandomBasedVariableResolver } from './snippetVariables.js';\r\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\r\nimport * as colors from '../../../platform/theme/common/colorRegistry.js';\r\nimport { ILabelService } from '../../../platform/label/common/label.js';\r\nregisterThemingParticipant(function (theme, collector) {\r\n    function getColorGraceful(name) {\r\n        var color = theme.getColor(name);\r\n        return color ? color.toString() : 'transparent';\r\n    }\r\n    collector.addRule(\".monaco-editor .snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetTabstopHighlightBorder) + \"; }\");\r\n    collector.addRule(\".monaco-editor .finish-snippet-placeholder { background-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBackground) + \"; outline-color: \" + getColorGraceful(colors.snippetFinalTabstopHighlightBorder) + \"; }\");\r\n});\r\nvar OneSnippet = /** @class */ (function () {\r\n    function OneSnippet(editor, snippet, offset) {\r\n        this._nestingLevel = 1;\r\n        this._editor = editor;\r\n        this._snippet = snippet;\r\n        this._offset = offset;\r\n        this._placeholderGroups = groupBy(snippet.placeholders, Placeholder.compareByIndex);\r\n        this._placeholderGroupsIdx = -1;\r\n    }\r\n    OneSnippet.prototype.dispose = function () {\r\n        if (this._placeholderDecorations) {\r\n            var toRemove_1 = [];\r\n            this._placeholderDecorations.forEach(function (handle) { return toRemove_1.push(handle); });\r\n            this._editor.deltaDecorations(toRemove_1, []);\r\n        }\r\n        this._placeholderGroups.length = 0;\r\n    };\r\n    OneSnippet.prototype._initDecorations = function () {\r\n        var _this = this;\r\n        if (this._placeholderDecorations) {\r\n            // already initialized\r\n            return;\r\n        }\r\n        this._placeholderDecorations = new Map();\r\n        var model = this._editor.getModel();\r\n        this._editor.changeDecorations(function (accessor) {\r\n            // create a decoration for each placeholder\r\n            for (var _i = 0, _a = _this._snippet.placeholders; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var placeholderOffset = _this._snippet.offset(placeholder);\r\n                var placeholderLen = _this._snippet.fullLen(placeholder);\r\n                var range = Range.fromPositions(model.getPositionAt(_this._offset + placeholderOffset), model.getPositionAt(_this._offset + placeholderOffset + placeholderLen));\r\n                var options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\r\n                var handle = accessor.addDecoration(range, options);\r\n                _this._placeholderDecorations.set(placeholder, handle);\r\n            }\r\n        });\r\n    };\r\n    OneSnippet.prototype.move = function (fwd) {\r\n        var _this = this;\r\n        if (!this._editor.hasModel()) {\r\n            return [];\r\n        }\r\n        this._initDecorations();\r\n        // Transform placeholder text if necessary\r\n        if (this._placeholderGroupsIdx >= 0) {\r\n            var operations = [];\r\n            for (var _i = 0, _a = this._placeholderGroups[this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                // Check if the placeholder has a transformation\r\n                if (placeholder.transform) {\r\n                    var id = this._placeholderDecorations.get(placeholder);\r\n                    var range = this._editor.getModel().getDecorationRange(id);\r\n                    var currentValue = this._editor.getModel().getValueInRange(range);\r\n                    operations.push(EditOperation.replaceMove(range, placeholder.transform.resolve(currentValue)));\r\n                }\r\n            }\r\n            if (operations.length > 0) {\r\n                this._editor.executeEdits('snippet.placeholderTransform', operations);\r\n            }\r\n        }\r\n        var couldSkipThisPlaceholder = false;\r\n        if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\r\n            this._placeholderGroupsIdx += 1;\r\n            couldSkipThisPlaceholder = true;\r\n        }\r\n        else if (fwd === false && this._placeholderGroupsIdx > 0) {\r\n            this._placeholderGroupsIdx -= 1;\r\n            couldSkipThisPlaceholder = true;\r\n        }\r\n        else {\r\n            // the selection of the current placeholder might\r\n            // not acurate any more -> simply restore it\r\n        }\r\n        var newSelections = this._editor.getModel().changeDecorations(function (accessor) {\r\n            var activePlaceholders = new Set();\r\n            // change stickiness to always grow when typing at its edges\r\n            // because these decorations represent the currently active\r\n            // tabstop.\r\n            // Special case #1: reaching the final tabstop\r\n            // Special case #2: placeholders enclosing active placeholders\r\n            var selections = [];\r\n            for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var id = _this._placeholderDecorations.get(placeholder);\r\n                var range = _this._editor.getModel().getDecorationRange(id);\r\n                selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\r\n                // consider to skip this placeholder index when the decoration\r\n                // range is empty but when the placeholder wasn't. that's a strong\r\n                // hint that the placeholder has been deleted. (all placeholder must match this)\r\n                couldSkipThisPlaceholder = couldSkipThisPlaceholder && _this._hasPlaceholderBeenCollapsed(placeholder);\r\n                accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\r\n                activePlaceholders.add(placeholder);\r\n                for (var _b = 0, _c = _this._snippet.enclosingPlaceholders(placeholder); _b < _c.length; _b++) {\r\n                    var enclosingPlaceholder = _c[_b];\r\n                    var id_1 = _this._placeholderDecorations.get(enclosingPlaceholder);\r\n                    accessor.changeDecorationOptions(id_1, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\r\n                    activePlaceholders.add(enclosingPlaceholder);\r\n                }\r\n            }\r\n            // change stickness to never grow when typing at its edges\r\n            // so that in-active tabstops never grow\r\n            _this._placeholderDecorations.forEach(function (id, placeholder) {\r\n                if (!activePlaceholders.has(placeholder)) {\r\n                    accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\r\n                }\r\n            });\r\n            return selections;\r\n        });\r\n        return !couldSkipThisPlaceholder ? newSelections : this.move(fwd);\r\n    };\r\n    OneSnippet.prototype._hasPlaceholderBeenCollapsed = function (placeholder) {\r\n        // A placeholder is empty when it wasn't empty when authored but\r\n        // when its tracking decoration is empty. This also applies to all\r\n        // potential parent placeholders\r\n        var marker = placeholder;\r\n        while (marker) {\r\n            if (marker instanceof Placeholder) {\r\n                var id = this._placeholderDecorations.get(marker);\r\n                var range = this._editor.getModel().getDecorationRange(id);\r\n                if (range.isEmpty() && marker.toString().length > 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            marker = marker.parent;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(OneSnippet.prototype, \"isAtFirstPlaceholder\", {\r\n        get: function () {\r\n            return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OneSnippet.prototype, \"isAtLastPlaceholder\", {\r\n        get: function () {\r\n            return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OneSnippet.prototype, \"hasPlaceholder\", {\r\n        get: function () {\r\n            return this._snippet.placeholders.length > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    OneSnippet.prototype.computePossibleSelections = function () {\r\n        var result = new Map();\r\n        for (var _i = 0, _a = this._placeholderGroups; _i < _a.length; _i++) {\r\n            var placeholdersWithEqualIndex = _a[_i];\r\n            var ranges = void 0;\r\n            for (var _b = 0, placeholdersWithEqualIndex_1 = placeholdersWithEqualIndex; _b < placeholdersWithEqualIndex_1.length; _b++) {\r\n                var placeholder = placeholdersWithEqualIndex_1[_b];\r\n                if (placeholder.isFinalTabstop) {\r\n                    // ignore those\r\n                    break;\r\n                }\r\n                if (!ranges) {\r\n                    ranges = [];\r\n                    result.set(placeholder.index, ranges);\r\n                }\r\n                var id = this._placeholderDecorations.get(placeholder);\r\n                var range = this._editor.getModel().getDecorationRange(id);\r\n                if (!range) {\r\n                    // one of the placeholder lost its decoration and\r\n                    // therefore we bail out and pretend the placeholder\r\n                    // (with its mirrors) doesn't exist anymore.\r\n                    result.delete(placeholder.index);\r\n                    break;\r\n                }\r\n                ranges.push(range);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    Object.defineProperty(OneSnippet.prototype, \"choice\", {\r\n        get: function () {\r\n            return this._placeholderGroups[this._placeholderGroupsIdx][0].choice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    OneSnippet.prototype.merge = function (others) {\r\n        var _this = this;\r\n        var model = this._editor.getModel();\r\n        this._nestingLevel *= 10;\r\n        this._editor.changeDecorations(function (accessor) {\r\n            // For each active placeholder take one snippet and merge it\r\n            // in that the placeholder (can be many for `$1foo$1foo`). Because\r\n            // everything is sorted by editor selection we can simply remove\r\n            // elements from the beginning of the array\r\n            for (var _i = 0, _a = _this._placeholderGroups[_this._placeholderGroupsIdx]; _i < _a.length; _i++) {\r\n                var placeholder = _a[_i];\r\n                var nested = others.shift();\r\n                console.assert(!nested._placeholderDecorations);\r\n                // Massage placeholder-indicies of the nested snippet to be\r\n                // sorted right after the insertion point. This ensures we move\r\n                // through the placeholders in the correct order\r\n                var indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\r\n                for (var _b = 0, _c = nested._snippet.placeholderInfo.all; _b < _c.length; _b++) {\r\n                    var nestedPlaceholder = _c[_b];\r\n                    if (nestedPlaceholder.isFinalTabstop) {\r\n                        nestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / _this._nestingLevel);\r\n                    }\r\n                    else {\r\n                        nestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / _this._nestingLevel);\r\n                    }\r\n                }\r\n                _this._snippet.replace(placeholder, nested._snippet.children);\r\n                // Remove the placeholder at which position are inserting\r\n                // the snippet and also remove its decoration.\r\n                var id = _this._placeholderDecorations.get(placeholder);\r\n                accessor.removeDecoration(id);\r\n                _this._placeholderDecorations.delete(placeholder);\r\n                // For each *new* placeholder we create decoration to monitor\r\n                // how and if it grows/shrinks.\r\n                for (var _d = 0, _e = nested._snippet.placeholders; _d < _e.length; _d++) {\r\n                    var placeholder_1 = _e[_d];\r\n                    var placeholderOffset = nested._snippet.offset(placeholder_1);\r\n                    var placeholderLen = nested._snippet.fullLen(placeholder_1);\r\n                    var range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\r\n                    var handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\r\n                    _this._placeholderDecorations.set(placeholder_1, handle);\r\n                }\r\n            }\r\n            // Last, re-create the placeholder groups by sorting placeholders by their index.\r\n            _this._placeholderGroups = groupBy(_this._snippet.placeholders, Placeholder.compareByIndex);\r\n        });\r\n    };\r\n    OneSnippet._decor = {\r\n        active: ModelDecorationOptions.register({ stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\r\n        inactive: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\r\n        activeFinal: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\r\n        inactiveFinal: ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\r\n    };\r\n    return OneSnippet;\r\n}());\r\nexport { OneSnippet };\r\nvar _defaultOptions = {\r\n    overwriteBefore: 0,\r\n    overwriteAfter: 0,\r\n    adjustWhitespace: true,\r\n    clipboardText: undefined\r\n};\r\nvar SnippetSession = /** @class */ (function () {\r\n    function SnippetSession(editor, template, options) {\r\n        if (options === void 0) { options = _defaultOptions; }\r\n        this._templateMerges = [];\r\n        this._snippets = [];\r\n        this._editor = editor;\r\n        this._template = template;\r\n        this._options = options;\r\n    }\r\n    SnippetSession.adjustWhitespace = function (model, position, snippet, adjustIndentation, adjustNewlines) {\r\n        var line = model.getLineContent(position.lineNumber);\r\n        var lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\r\n        snippet.walk(function (marker) {\r\n            if (marker instanceof Text && !(marker.parent instanceof Choice)) {\r\n                // adjust indentation of text markers, except for choise elements\r\n                // which get adjusted when being selected\r\n                var lines = marker.value.split(/\\r\\n|\\r|\\n/);\r\n                if (adjustIndentation) {\r\n                    for (var i = 1; i < lines.length; i++) {\r\n                        var templateLeadingWhitespace = getLeadingWhitespace(lines[i]);\r\n                        lines[i] = model.normalizeIndentation(lineLeadingWhitespace + templateLeadingWhitespace) + lines[i].substr(templateLeadingWhitespace.length);\r\n                    }\r\n                }\r\n                if (adjustNewlines) {\r\n                    var newValue = lines.join(model.getEOL());\r\n                    if (newValue !== marker.value) {\r\n                        marker.parent.replace(marker, [new Text(newValue)]);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    };\r\n    SnippetSession.adjustSelection = function (model, selection, overwriteBefore, overwriteAfter) {\r\n        if (overwriteBefore !== 0 || overwriteAfter !== 0) {\r\n            // overwrite[Before|After] is compute using the position, not the whole\r\n            // selection. therefore we adjust the selection around that position\r\n            var positionLineNumber = selection.positionLineNumber, positionColumn = selection.positionColumn;\r\n            var positionColumnBefore = positionColumn - overwriteBefore;\r\n            var positionColumnAfter = positionColumn + overwriteAfter;\r\n            var range = model.validateRange({\r\n                startLineNumber: positionLineNumber,\r\n                startColumn: positionColumnBefore,\r\n                endLineNumber: positionLineNumber,\r\n                endColumn: positionColumnAfter\r\n            });\r\n            selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\r\n        }\r\n        return selection;\r\n    };\r\n    SnippetSession.createEditsAndSnippets = function (editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText) {\r\n        var edits = [];\r\n        var snippets = [];\r\n        if (!editor.hasModel()) {\r\n            return { edits: edits, snippets: snippets };\r\n        }\r\n        var model = editor.getModel();\r\n        var workspaceService = editor.invokeWithinContext(function (accessor) { return accessor.get(IWorkspaceContextService, optional); });\r\n        var modelBasedVariableResolver = editor.invokeWithinContext(function (accessor) { return new ModelBasedVariableResolver(accessor.get(ILabelService, optional), model); });\r\n        var clipboardService = editor.invokeWithinContext(function (accessor) { return accessor.get(IClipboardService, optional); });\r\n        var readClipboardText = function () { return clipboardText || clipboardService && clipboardService.readTextSync(); };\r\n        var delta = 0;\r\n        // know what text the overwrite[Before|After] extensions\r\n        // of the primary curser have selected because only when\r\n        // secondary selections extend to the same text we can grow them\r\n        var firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\r\n        var firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\r\n        // remember the first non-whitespace column to decide if\r\n        // `keepWhitespace` should be overruled for secondary selections\r\n        var firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\r\n        // sort selections by their start position but remeber\r\n        // the original index. that allows you to create correct\r\n        // offset-based selection logic without changing the\r\n        // primary selection\r\n        var indexedSelections = editor.getSelections()\r\n            .map(function (selection, idx) { return ({ selection: selection, idx: idx }); })\r\n            .sort(function (a, b) { return Range.compareRangesUsingStarts(a.selection, b.selection); });\r\n        for (var _i = 0, indexedSelections_1 = indexedSelections; _i < indexedSelections_1.length; _i++) {\r\n            var _a = indexedSelections_1[_i], selection = _a.selection, idx = _a.idx;\r\n            // extend selection with the `overwriteBefore` and `overwriteAfter` and then\r\n            // compare if this matches the extensions of the primary selection\r\n            var extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\r\n            var extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\r\n            if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\r\n                extensionBefore = selection;\r\n            }\r\n            if (firstAfterText !== model.getValueInRange(extensionAfter)) {\r\n                extensionAfter = selection;\r\n            }\r\n            // merge the before and after selection into one\r\n            var snippetSelection = selection\r\n                .setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\r\n                .setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\r\n            var snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\r\n            // adjust the template string to match the indentation and\r\n            // whitespace rules of this insert location (can be different for each cursor)\r\n            // happens when being asked for (default) or when this is a secondary\r\n            // cursor and the leading whitespace is different\r\n            var start = snippetSelection.getStartPosition();\r\n            SnippetSession.adjustWhitespace(model, start, snippet, adjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)), true);\r\n            snippet.resolveVariables(new CompositeSnippetVariableResolver([\r\n                modelBasedVariableResolver,\r\n                new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(60 /* multiCursorPaste */) === 'spread'),\r\n                new SelectionBasedVariableResolver(model, selection),\r\n                new CommentBasedVariableResolver(model),\r\n                new TimeBasedVariableResolver,\r\n                new WorkspaceBasedVariableResolver(workspaceService),\r\n                new RandomBasedVariableResolver,\r\n            ]));\r\n            var offset = model.getOffsetAt(start) + delta;\r\n            delta += snippet.toString().length - model.getValueLengthInRange(snippetSelection);\r\n            // store snippets with the index of their originating selection.\r\n            // that ensures the primiary cursor stays primary despite not being\r\n            // the one with lowest start position\r\n            edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\r\n            snippets[idx] = new OneSnippet(editor, snippet, offset);\r\n        }\r\n        return { edits: edits, snippets: snippets };\r\n    };\r\n    SnippetSession.prototype.dispose = function () {\r\n        dispose(this._snippets);\r\n    };\r\n    SnippetSession.prototype._logInfo = function () {\r\n        return \"template=\\\"\" + this._template + \"\\\", merged_templates=\\\"\" + this._templateMerges.join(' -> ') + \"\\\"\";\r\n    };\r\n    SnippetSession.prototype.insert = function () {\r\n        var _this = this;\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        // make insert edit and start with first selections\r\n        var _a = SnippetSession.createEditsAndSnippets(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText), edits = _a.edits, snippets = _a.snippets;\r\n        this._snippets = snippets;\r\n        this._editor.executeEdits('snippet', edits, function (undoEdits) {\r\n            if (_this._snippets[0].hasPlaceholder) {\r\n                return _this._move(true);\r\n            }\r\n            else {\r\n                return undoEdits.map(function (edit) { return Selection.fromPositions(edit.range.getEndPosition()); });\r\n            }\r\n        });\r\n        this._editor.revealRange(this._editor.getSelections()[0]);\r\n    };\r\n    SnippetSession.prototype.merge = function (template, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = _defaultOptions; }\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\r\n        var _a = SnippetSession.createEditsAndSnippets(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText), edits = _a.edits, snippets = _a.snippets;\r\n        this._editor.executeEdits('snippet', edits, function (undoEdits) {\r\n            for (var _i = 0, _a = _this._snippets; _i < _a.length; _i++) {\r\n                var snippet = _a[_i];\r\n                snippet.merge(snippets);\r\n            }\r\n            console.assert(snippets.length === 0);\r\n            if (_this._snippets[0].hasPlaceholder) {\r\n                return _this._move(undefined);\r\n            }\r\n            else {\r\n                return undoEdits.map(function (edit) { return Selection.fromPositions(edit.range.getEndPosition()); });\r\n            }\r\n        });\r\n    };\r\n    SnippetSession.prototype.next = function () {\r\n        var newSelections = this._move(true);\r\n        this._editor.setSelections(newSelections);\r\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\r\n    };\r\n    SnippetSession.prototype.prev = function () {\r\n        var newSelections = this._move(false);\r\n        this._editor.setSelections(newSelections);\r\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\r\n    };\r\n    SnippetSession.prototype._move = function (fwd) {\r\n        var selections = [];\r\n        for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\r\n            var snippet = _a[_i];\r\n            var oneSelection = snippet.move(fwd);\r\n            selections.push.apply(selections, oneSelection);\r\n        }\r\n        return selections;\r\n    };\r\n    Object.defineProperty(SnippetSession.prototype, \"isAtFirstPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].isAtFirstPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"isAtLastPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].isAtLastPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"hasPlaceholder\", {\r\n        get: function () {\r\n            return this._snippets[0].hasPlaceholder;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SnippetSession.prototype, \"choice\", {\r\n        get: function () {\r\n            return this._snippets[0].choice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SnippetSession.prototype.isSelectionWithinPlaceholders = function () {\r\n        if (!this.hasPlaceholder) {\r\n            return false;\r\n        }\r\n        var selections = this._editor.getSelections();\r\n        if (selections.length < this._snippets.length) {\r\n            // this means we started snippet mode with N\r\n            // selections and have M (N > M) selections.\r\n            // So one snippet is without selection -> cancel\r\n            return false;\r\n        }\r\n        var allPossibleSelections = new Map();\r\n        var _loop_1 = function (snippet) {\r\n            var possibleSelections = snippet.computePossibleSelections();\r\n            // for the first snippet find the placeholder (and its ranges)\r\n            // that contain at least one selection. for all remaining snippets\r\n            // the same placeholder (and their ranges) must be used.\r\n            if (allPossibleSelections.size === 0) {\r\n                possibleSelections.forEach(function (ranges, index) {\r\n                    ranges.sort(Range.compareRangesUsingStarts);\r\n                    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n                        var selection = selections_1[_i];\r\n                        if (ranges[0].containsRange(selection)) {\r\n                            allPossibleSelections.set(index, []);\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (allPossibleSelections.size === 0) {\r\n                return { value: false };\r\n            }\r\n            // add selections from 'this' snippet so that we know all\r\n            // selections for this placeholder\r\n            allPossibleSelections.forEach(function (array, index) {\r\n                array.push.apply(array, possibleSelections.get(index));\r\n            });\r\n        };\r\n        for (var _i = 0, _a = this._snippets; _i < _a.length; _i++) {\r\n            var snippet = _a[_i];\r\n            var state_1 = _loop_1(snippet);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        // sort selections (and later placeholder-ranges). then walk both\r\n        // arrays and make sure the placeholder-ranges contain the corresponding\r\n        // selection\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        allPossibleSelections.forEach(function (ranges, index) {\r\n            if (ranges.length !== selections.length) {\r\n                allPossibleSelections.delete(index);\r\n                return;\r\n            }\r\n            ranges.sort(Range.compareRangesUsingStarts);\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (!ranges[i].containsRange(selections[i])) {\r\n                    allPossibleSelections.delete(index);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        // from all possible selections we have deleted those\r\n        // that don't match with the current selection. if we don't\r\n        // have any left, we don't have a selection anymore\r\n        return allPossibleSelections.size > 0;\r\n    };\r\n    return SnippetSession;\r\n}());\r\nexport { SnippetSession };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}