{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../model/wordHelper.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nvar RichEditSupport = /** @class */function () {\n  function RichEditSupport(languageIdentifier, previous, rawConf) {\n    this._languageIdentifier = languageIdentifier;\n    this._brackets = null;\n    this._electricCharacter = null;\n    var prev = null;\n    if (previous) {\n      prev = previous._conf;\n    }\n    this._conf = RichEditSupport._mergeConf(prev, rawConf);\n    this._onEnterSupport = this._conf.brackets || this._conf.indentationRules || this._conf.onEnterRules ? new OnEnterSupport(this._conf) : null;\n    this.comments = RichEditSupport._handleComments(this._conf);\n    this.characterPair = new CharacterPairSupport(this._conf);\n    this.wordDefinition = this._conf.wordPattern || DEFAULT_WORD_REGEXP;\n    this.indentationRules = this._conf.indentationRules;\n    if (this._conf.indentationRules) {\n      this.indentRulesSupport = new IndentRulesSupport(this._conf.indentationRules);\n    } else {\n      this.indentRulesSupport = null;\n    }\n    this.foldingRules = this._conf.folding || {};\n  }\n  Object.defineProperty(RichEditSupport.prototype, \"brackets\", {\n    get: function get() {\n      if (!this._brackets && this._conf.brackets) {\n        this._brackets = new RichEditBrackets(this._languageIdentifier, this._conf.brackets);\n      }\n      return this._brackets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RichEditSupport.prototype, \"electricCharacter\", {\n    get: function get() {\n      if (!this._electricCharacter) {\n        this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n      }\n      return this._electricCharacter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  RichEditSupport.prototype.onEnter = function (autoIndent, oneLineAboveText, beforeEnterText, afterEnterText) {\n    if (!this._onEnterSupport) {\n      return null;\n    }\n    return this._onEnterSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\n  };\n  RichEditSupport._mergeConf = function (prev, current) {\n    return {\n      comments: prev ? current.comments || prev.comments : current.comments,\n      brackets: prev ? current.brackets || prev.brackets : current.brackets,\n      wordPattern: prev ? current.wordPattern || prev.wordPattern : current.wordPattern,\n      indentationRules: prev ? current.indentationRules || prev.indentationRules : current.indentationRules,\n      onEnterRules: prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules,\n      autoClosingPairs: prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs,\n      surroundingPairs: prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs,\n      autoCloseBefore: prev ? current.autoCloseBefore || prev.autoCloseBefore : current.autoCloseBefore,\n      folding: prev ? current.folding || prev.folding : current.folding,\n      __electricCharacterSupport: prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport\n    };\n  };\n  RichEditSupport._handleComments = function (conf) {\n    var commentRule = conf.comments;\n    if (!commentRule) {\n      return null;\n    }\n    // comment configuration\n    var comments = {};\n    if (commentRule.lineComment) {\n      comments.lineCommentToken = commentRule.lineComment;\n    }\n    if (commentRule.blockComment) {\n      var _a = commentRule.blockComment,\n        blockStart = _a[0],\n        blockEnd = _a[1];\n      comments.blockCommentStartToken = blockStart;\n      comments.blockCommentEndToken = blockEnd;\n    }\n    return comments;\n  };\n  return RichEditSupport;\n}();\nexport { RichEditSupport };\nvar LanguageConfigurationChangeEvent = /** @class */function () {\n  function LanguageConfigurationChangeEvent(languageIdentifier) {\n    this.languageIdentifier = languageIdentifier;\n  }\n  return LanguageConfigurationChangeEvent;\n}();\nexport { LanguageConfigurationChangeEvent };\nvar LanguageConfigurationRegistryImpl = /** @class */function () {\n  function LanguageConfigurationRegistryImpl() {\n    this._entries = new Map();\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n  LanguageConfigurationRegistryImpl.prototype.register = function (languageIdentifier, configuration) {\n    var _this = this;\n    var previous = this._getRichEditSupport(languageIdentifier.id);\n    var current = new RichEditSupport(languageIdentifier, previous, configuration);\n    this._entries.set(languageIdentifier.id, current);\n    this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n    return toDisposable(function () {\n      if (_this._entries.get(languageIdentifier.id) === current) {\n        _this._entries.set(languageIdentifier.id, previous);\n        _this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\n      }\n    });\n  };\n  LanguageConfigurationRegistryImpl.prototype._getRichEditSupport = function (languageId) {\n    return this._entries.get(languageId);\n  };\n  // begin electricCharacter\n  LanguageConfigurationRegistryImpl.prototype._getElectricCharacterSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return null;\n    }\n    return value.electricCharacter || null;\n  };\n  LanguageConfigurationRegistryImpl.prototype.getElectricCharacters = function (languageId) {\n    var electricCharacterSupport = this._getElectricCharacterSupport(languageId);\n    if (!electricCharacterSupport) {\n      return [];\n    }\n    return electricCharacterSupport.getElectricCharacters();\n  };\n  /**\r\n   * Should return opening bracket type to match indentation with\r\n   */\n  LanguageConfigurationRegistryImpl.prototype.onElectricCharacter = function (character, context, column) {\n    var scopedLineTokens = createScopedLineTokens(context, column - 1);\n    var electricCharacterSupport = this._getElectricCharacterSupport(scopedLineTokens.languageId);\n    if (!electricCharacterSupport) {\n      return null;\n    }\n    return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  };\n  // end electricCharacter\n  LanguageConfigurationRegistryImpl.prototype.getComments = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return null;\n    }\n    return value.comments || null;\n  };\n  // begin characterPair\n  LanguageConfigurationRegistryImpl.prototype._getCharacterPairSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return null;\n    }\n    return value.characterPair || null;\n  };\n  LanguageConfigurationRegistryImpl.prototype.getAutoClosingPairs = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n    if (!characterPairSupport) {\n      return [];\n    }\n    return characterPairSupport.getAutoClosingPairs();\n  };\n  LanguageConfigurationRegistryImpl.prototype.getAutoCloseBeforeSet = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n    if (!characterPairSupport) {\n      return CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    }\n    return characterPairSupport.getAutoCloseBeforeSet();\n  };\n  LanguageConfigurationRegistryImpl.prototype.getSurroundingPairs = function (languageId) {\n    var characterPairSupport = this._getCharacterPairSupport(languageId);\n    if (!characterPairSupport) {\n      return [];\n    }\n    return characterPairSupport.getSurroundingPairs();\n  };\n  LanguageConfigurationRegistryImpl.prototype.shouldAutoClosePair = function (autoClosingPair, context, column) {\n    var scopedLineTokens = createScopedLineTokens(context, column - 1);\n    return CharacterPairSupport.shouldAutoClosePair(autoClosingPair, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n  };\n  // end characterPair\n  LanguageConfigurationRegistryImpl.prototype.getWordDefinition = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return ensureValidWordDefinition(null);\n    }\n    return ensureValidWordDefinition(value.wordDefinition || null);\n  };\n  LanguageConfigurationRegistryImpl.prototype.getFoldingRules = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return {};\n    }\n    return value.foldingRules;\n  };\n  // begin Indent Rules\n  LanguageConfigurationRegistryImpl.prototype.getIndentRulesSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return null;\n    }\n    return value.indentRulesSupport || null;\n  };\n  /**\r\n   * Get nearest preceiding line which doesn't match unIndentPattern or contains all whitespace.\r\n   * Result:\r\n   * -1: run into the boundary of embedded languages\r\n   * 0: every line above are invalid\r\n   * else: nearest preceding line of the same language\r\n   */\n  LanguageConfigurationRegistryImpl.prototype.getPrecedingValidLine = function (model, lineNumber, indentRulesSupport) {\n    var languageID = model.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n      var lastLineNumber = void 0;\n      var resultLineNumber = -1;\n      for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n        if (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageID) {\n          return resultLineNumber;\n        }\n        var text = model.getLineContent(lastLineNumber);\n        if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n          resultLineNumber = lastLineNumber;\n          continue;\n        }\n        return lastLineNumber;\n      }\n    }\n    return -1;\n  };\n  /**\r\n   * Get inherited indentation from above lines.\r\n   * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\r\n   * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\r\n   * 3. If this line doesn't match any indent rules\r\n   *   a. check whether the line above it matches indentNextLinePattern\r\n   *   b. If not, the indent level of this line is the result\r\n   *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\r\n   * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\r\n   *\r\n   * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\r\n   */\n  LanguageConfigurationRegistryImpl.prototype.getInheritIndentForLine = function (autoIndent, model, lineNumber, honorIntentialIndent) {\n    if (honorIntentialIndent === void 0) {\n      honorIntentialIndent = true;\n    }\n    if (autoIndent < 4 /* Full */) {\n      return null;\n    }\n    var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n    if (!indentRulesSupport) {\n      return null;\n    }\n    if (lineNumber <= 1) {\n      return {\n        indentation: '',\n        action: null\n      };\n    }\n    var precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n      return null;\n    } else if (precedingUnIgnoredLine < 1) {\n      return {\n        indentation: '',\n        action: null\n      };\n    }\n    var precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n      return {\n        indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n        action: IndentAction.Indent,\n        line: precedingUnIgnoredLine\n      };\n    } else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n      return {\n        indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n        action: null,\n        line: precedingUnIgnoredLine\n      };\n    } else {\n      // precedingUnIgnoredLine can not be ignored.\n      // it doesn't increase indent of following lines\n      // it doesn't increase just next line\n      // so current line is not affect by precedingUnIgnoredLine\n      // and then we should get a correct inheritted indentation from above lines\n      if (precedingUnIgnoredLine === 1) {\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n          action: null,\n          line: precedingUnIgnoredLine\n        };\n      }\n      var previousLine = precedingUnIgnoredLine - 1;\n      var previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n      if (!(previousLineIndentMetadata & (1 /* INCREASE_MASK */ | 2 /* DECREASE_MASK */)) && previousLineIndentMetadata & 4 /* INDENT_NEXTLINE_MASK */) {\n        var stopLine = 0;\n        for (var i = previousLine - 1; i > 0; i--) {\n          if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n            continue;\n          }\n          stopLine = i;\n          break;\n        }\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n          action: null,\n          line: stopLine + 1\n        };\n      }\n      if (honorIntentialIndent) {\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n          action: null,\n          line: precedingUnIgnoredLine\n        };\n      } else {\n        // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n        for (var i = precedingUnIgnoredLine; i > 0; i--) {\n          var lineContent = model.getLineContent(i);\n          if (indentRulesSupport.shouldIncrease(lineContent)) {\n            return {\n              indentation: strings.getLeadingWhitespace(lineContent),\n              action: IndentAction.Indent,\n              line: i\n            };\n          } else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n            var stopLine = 0;\n            for (var j = i - 1; j > 0; j--) {\n              if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                continue;\n              }\n              stopLine = j;\n              break;\n            }\n            return {\n              indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n              action: null,\n              line: stopLine + 1\n            };\n          } else if (indentRulesSupport.shouldDecrease(lineContent)) {\n            return {\n              indentation: strings.getLeadingWhitespace(lineContent),\n              action: null,\n              line: i\n            };\n          }\n        }\n        return {\n          indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n          action: null,\n          line: 1\n        };\n      }\n    }\n  };\n  LanguageConfigurationRegistryImpl.prototype.getGoodIndentForLine = function (autoIndent, virtualModel, languageId, lineNumber, indentConverter) {\n    if (autoIndent < 4 /* Full */) {\n      return null;\n    }\n    var richEditSupport = this._getRichEditSupport(languageId);\n    if (!richEditSupport) {\n      return null;\n    }\n    var indentRulesSupport = this.getIndentRulesSupport(languageId);\n    if (!indentRulesSupport) {\n      return null;\n    }\n    var indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\n    var lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n      var inheritLine = indent.line;\n      if (inheritLine !== undefined) {\n        var enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n        if (enterResult) {\n          var indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n          if (enterResult.removeText) {\n            indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n          }\n          if (enterResult.indentAction === IndentAction.Indent || enterResult.indentAction === IndentAction.IndentOutdent) {\n            indentation = indentConverter.shiftIndent(indentation);\n          } else if (enterResult.indentAction === IndentAction.Outdent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n          if (indentRulesSupport.shouldDecrease(lineContent)) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n          if (enterResult.appendText) {\n            indentation += enterResult.appendText;\n          }\n          return strings.getLeadingWhitespace(indentation);\n        }\n      }\n      if (indentRulesSupport.shouldDecrease(lineContent)) {\n        if (indent.action === IndentAction.Indent) {\n          return indent.indentation;\n        } else {\n          return indentConverter.unshiftIndent(indent.indentation);\n        }\n      } else {\n        if (indent.action === IndentAction.Indent) {\n          return indentConverter.shiftIndent(indent.indentation);\n        } else {\n          return indent.indentation;\n        }\n      }\n    }\n    return null;\n  };\n  LanguageConfigurationRegistryImpl.prototype.getIndentForEnter = function (autoIndent, model, range, indentConverter) {\n    if (autoIndent < 4 /* Full */) {\n      return null;\n    }\n    model.forceTokenization(range.startLineNumber);\n    var lineTokens = model.getLineTokens(range.startLineNumber);\n    var scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var embeddedLanguage = false;\n    var beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n      // we are in the embeded language content\n      embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n      beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    var afterEnterText;\n    if (range.isEmpty()) {\n      afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n    if (!indentRulesSupport) {\n      return null;\n    }\n    var beforeEnterResult = beforeEnterText;\n    var beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    var virtualModel = {\n      getLineTokens: function getLineTokens(lineNumber) {\n        return model.getLineTokens(lineNumber);\n      },\n      getLanguageIdentifier: function getLanguageIdentifier() {\n        return model.getLanguageIdentifier();\n      },\n      getLanguageIdAtPosition: function getLanguageIdAtPosition(lineNumber, column) {\n        return model.getLanguageIdAtPosition(lineNumber, column);\n      },\n      getLineContent: function getLineContent(lineNumber) {\n        if (lineNumber === range.startLineNumber) {\n          return beforeEnterResult;\n        } else {\n          return model.getLineContent(lineNumber);\n        }\n      }\n    };\n    var currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    var afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\n    if (!afterEnterAction) {\n      var beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n      return {\n        beforeEnter: beforeEnter,\n        afterEnter: beforeEnter\n      };\n    }\n    var afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n      afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n      afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n      beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n      afterEnter: afterEnterIndent\n    };\n  };\n  /**\r\n   * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\r\n   * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\r\n   */\n  LanguageConfigurationRegistryImpl.prototype.getIndentActionForType = function (autoIndent, model, range, ch, indentConverter) {\n    if (autoIndent < 4 /* Full */) {\n      return null;\n    }\n    var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n    if (!indentRulesSupport) {\n      return null;\n    }\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    var afterTypeText;\n    if (range.isEmpty()) {\n      afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n      // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n      // 1. Get inherited indent action\n      var r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\n      if (!r) {\n        return null;\n      }\n      var indentation = r.indentation;\n      if (r.action !== IndentAction.Indent) {\n        indentation = indentConverter.unshiftIndent(indentation);\n      }\n      return indentation;\n    }\n    return null;\n  };\n  LanguageConfigurationRegistryImpl.prototype.getIndentMetadata = function (model, lineNumber) {\n    var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\n    if (!indentRulesSupport) {\n      return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n      return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n  };\n  // end Indent Rules\n  // begin onEnter\n  LanguageConfigurationRegistryImpl.prototype.getEnterAction = function (autoIndent, model, range) {\n    var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    var richEditSupport = this._getRichEditSupport(scopedLineTokens.languageId);\n    if (!richEditSupport) {\n      return null;\n    }\n    var scopedLineText = scopedLineTokens.getLineContent();\n    var beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    var afterEnterText;\n    if (range.isEmpty()) {\n      afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    } else {\n      var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n      afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    var oneLineAboveText = '';\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n      // This is not the first line and the entire line belongs to this mode\n      var oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\n      if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n        // The line above ends with text belonging to the same mode\n        oneLineAboveText = oneLineAboveScopedLineTokens.getLineContent();\n      }\n    }\n    var enterResult = richEditSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n      return null;\n    }\n    var indentAction = enterResult.indentAction;\n    var appendText = enterResult.appendText;\n    var removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n      if (indentAction === IndentAction.Indent || indentAction === IndentAction.IndentOutdent) {\n        appendText = '\\t';\n      } else {\n        appendText = '';\n      }\n    }\n    var indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n      indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n      indentAction: indentAction,\n      appendText: appendText,\n      removeText: removeText,\n      indentation: indentation\n    };\n  };\n  LanguageConfigurationRegistryImpl.prototype.getIndentationAtPosition = function (model, lineNumber, column) {\n    var lineText = model.getLineContent(lineNumber);\n    var indentation = strings.getLeadingWhitespace(lineText);\n    if (indentation.length > column - 1) {\n      indentation = indentation.substring(0, column - 1);\n    }\n    return indentation;\n  };\n  LanguageConfigurationRegistryImpl.prototype.getScopedLineTokens = function (model, lineNumber, columnNumber) {\n    model.forceTokenization(lineNumber);\n    var lineTokens = model.getLineTokens(lineNumber);\n    var column = typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1;\n    return createScopedLineTokens(lineTokens, column);\n  };\n  // end onEnter\n  LanguageConfigurationRegistryImpl.prototype.getBracketsSupport = function (languageId) {\n    var value = this._getRichEditSupport(languageId);\n    if (!value) {\n      return null;\n    }\n    return value.brackets || null;\n  };\n  return LanguageConfigurationRegistryImpl;\n}();\nexport { LanguageConfigurationRegistryImpl };\nexport var LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();","map":{"version":3,"names":["Emitter","toDisposable","strings","DEFAULT_WORD_REGEXP","ensureValidWordDefinition","IndentAction","createScopedLineTokens","CharacterPairSupport","BracketElectricCharacterSupport","IndentRulesSupport","OnEnterSupport","RichEditBrackets","RichEditSupport","languageIdentifier","previous","rawConf","_languageIdentifier","_brackets","_electricCharacter","prev","_conf","_mergeConf","_onEnterSupport","brackets","indentationRules","onEnterRules","comments","_handleComments","characterPair","wordDefinition","wordPattern","indentRulesSupport","foldingRules","folding","Object","defineProperty","prototype","get","enumerable","configurable","onEnter","autoIndent","oneLineAboveText","beforeEnterText","afterEnterText","current","autoClosingPairs","surroundingPairs","autoCloseBefore","__electricCharacterSupport","conf","commentRule","lineComment","lineCommentToken","blockComment","_a","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","LanguageConfigurationChangeEvent","LanguageConfigurationRegistryImpl","_entries","Map","_onDidChange","onDidChange","event","register","configuration","_this","_getRichEditSupport","id","set","fire","languageId","_getElectricCharacterSupport","value","electricCharacter","getElectricCharacters","electricCharacterSupport","onElectricCharacter","character","context","column","scopedLineTokens","firstCharOffset","getComments","_getCharacterPairSupport","getAutoClosingPairs","characterPairSupport","getAutoCloseBeforeSet","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","getSurroundingPairs","shouldAutoClosePair","autoClosingPair","getWordDefinition","getFoldingRules","getIndentRulesSupport","getPrecedingValidLine","model","lineNumber","languageID","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","text","getLineContent","shouldIgnore","test","getInheritIndentForLine","honorIntentialIndent","getLanguageIdentifier","indentation","action","precedingUnIgnoredLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","getLeadingWhitespace","Indent","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","richEditSupport","indent","inheritLine","undefined","enterResult","removeText","substring","length","indentAction","IndentOutdent","shiftIndent","Outdent","unshiftIndent","appendText","getIndentForEnter","range","forceTokenization","startLineNumber","lineTokens","getLineTokens","startColumn","scopedLineText","embeddedLanguage","getLanguageId","substr","isEmpty","endScopedLineTokens","getScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","beforeTypeText","afterTypeText","r","getLineCount","getEnterAction","oneLineAboveScopedLineTokens","getIndentationAtPosition","lineText","columnNumber","getLineMaxColumn","getBracketsSupport","LanguageConfigurationRegistry"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfigurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../model/wordHelper.js';\r\nimport { IndentAction } from './languageConfiguration.js';\r\nimport { createScopedLineTokens } from './supports.js';\r\nimport { CharacterPairSupport } from './supports/characterPair.js';\r\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\r\nimport { IndentRulesSupport } from './supports/indentRules.js';\r\nimport { OnEnterSupport } from './supports/onEnter.js';\r\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\r\nvar RichEditSupport = /** @class */ (function () {\r\n    function RichEditSupport(languageIdentifier, previous, rawConf) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._brackets = null;\r\n        this._electricCharacter = null;\r\n        var prev = null;\r\n        if (previous) {\r\n            prev = previous._conf;\r\n        }\r\n        this._conf = RichEditSupport._mergeConf(prev, rawConf);\r\n        this._onEnterSupport = (this._conf.brackets || this._conf.indentationRules || this._conf.onEnterRules ? new OnEnterSupport(this._conf) : null);\r\n        this.comments = RichEditSupport._handleComments(this._conf);\r\n        this.characterPair = new CharacterPairSupport(this._conf);\r\n        this.wordDefinition = this._conf.wordPattern || DEFAULT_WORD_REGEXP;\r\n        this.indentationRules = this._conf.indentationRules;\r\n        if (this._conf.indentationRules) {\r\n            this.indentRulesSupport = new IndentRulesSupport(this._conf.indentationRules);\r\n        }\r\n        else {\r\n            this.indentRulesSupport = null;\r\n        }\r\n        this.foldingRules = this._conf.folding || {};\r\n    }\r\n    Object.defineProperty(RichEditSupport.prototype, \"brackets\", {\r\n        get: function () {\r\n            if (!this._brackets && this._conf.brackets) {\r\n                this._brackets = new RichEditBrackets(this._languageIdentifier, this._conf.brackets);\r\n            }\r\n            return this._brackets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RichEditSupport.prototype, \"electricCharacter\", {\r\n        get: function () {\r\n            if (!this._electricCharacter) {\r\n                this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\r\n            }\r\n            return this._electricCharacter;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RichEditSupport.prototype.onEnter = function (autoIndent, oneLineAboveText, beforeEnterText, afterEnterText) {\r\n        if (!this._onEnterSupport) {\r\n            return null;\r\n        }\r\n        return this._onEnterSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\r\n    };\r\n    RichEditSupport._mergeConf = function (prev, current) {\r\n        return {\r\n            comments: (prev ? current.comments || prev.comments : current.comments),\r\n            brackets: (prev ? current.brackets || prev.brackets : current.brackets),\r\n            wordPattern: (prev ? current.wordPattern || prev.wordPattern : current.wordPattern),\r\n            indentationRules: (prev ? current.indentationRules || prev.indentationRules : current.indentationRules),\r\n            onEnterRules: (prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules),\r\n            autoClosingPairs: (prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs),\r\n            surroundingPairs: (prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs),\r\n            autoCloseBefore: (prev ? current.autoCloseBefore || prev.autoCloseBefore : current.autoCloseBefore),\r\n            folding: (prev ? current.folding || prev.folding : current.folding),\r\n            __electricCharacterSupport: (prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport),\r\n        };\r\n    };\r\n    RichEditSupport._handleComments = function (conf) {\r\n        var commentRule = conf.comments;\r\n        if (!commentRule) {\r\n            return null;\r\n        }\r\n        // comment configuration\r\n        var comments = {};\r\n        if (commentRule.lineComment) {\r\n            comments.lineCommentToken = commentRule.lineComment;\r\n        }\r\n        if (commentRule.blockComment) {\r\n            var _a = commentRule.blockComment, blockStart = _a[0], blockEnd = _a[1];\r\n            comments.blockCommentStartToken = blockStart;\r\n            comments.blockCommentEndToken = blockEnd;\r\n        }\r\n        return comments;\r\n    };\r\n    return RichEditSupport;\r\n}());\r\nexport { RichEditSupport };\r\nvar LanguageConfigurationChangeEvent = /** @class */ (function () {\r\n    function LanguageConfigurationChangeEvent(languageIdentifier) {\r\n        this.languageIdentifier = languageIdentifier;\r\n    }\r\n    return LanguageConfigurationChangeEvent;\r\n}());\r\nexport { LanguageConfigurationChangeEvent };\r\nvar LanguageConfigurationRegistryImpl = /** @class */ (function () {\r\n    function LanguageConfigurationRegistryImpl() {\r\n        this._entries = new Map();\r\n        this._onDidChange = new Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n    }\r\n    LanguageConfigurationRegistryImpl.prototype.register = function (languageIdentifier, configuration) {\r\n        var _this = this;\r\n        var previous = this._getRichEditSupport(languageIdentifier.id);\r\n        var current = new RichEditSupport(languageIdentifier, previous, configuration);\r\n        this._entries.set(languageIdentifier.id, current);\r\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\r\n        return toDisposable(function () {\r\n            if (_this._entries.get(languageIdentifier.id) === current) {\r\n                _this._entries.set(languageIdentifier.id, previous);\r\n                _this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageIdentifier));\r\n            }\r\n        });\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype._getRichEditSupport = function (languageId) {\r\n        return this._entries.get(languageId);\r\n    };\r\n    // begin electricCharacter\r\n    LanguageConfigurationRegistryImpl.prototype._getElectricCharacterSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.electricCharacter || null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getElectricCharacters = function (languageId) {\r\n        var electricCharacterSupport = this._getElectricCharacterSupport(languageId);\r\n        if (!electricCharacterSupport) {\r\n            return [];\r\n        }\r\n        return electricCharacterSupport.getElectricCharacters();\r\n    };\r\n    /**\r\n     * Should return opening bracket type to match indentation with\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.onElectricCharacter = function (character, context, column) {\r\n        var scopedLineTokens = createScopedLineTokens(context, column - 1);\r\n        var electricCharacterSupport = this._getElectricCharacterSupport(scopedLineTokens.languageId);\r\n        if (!electricCharacterSupport) {\r\n            return null;\r\n        }\r\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\r\n    };\r\n    // end electricCharacter\r\n    LanguageConfigurationRegistryImpl.prototype.getComments = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.comments || null;\r\n    };\r\n    // begin characterPair\r\n    LanguageConfigurationRegistryImpl.prototype._getCharacterPairSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.characterPair || null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getAutoClosingPairs = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return [];\r\n        }\r\n        return characterPairSupport.getAutoClosingPairs();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getAutoCloseBeforeSet = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        }\r\n        return characterPairSupport.getAutoCloseBeforeSet();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getSurroundingPairs = function (languageId) {\r\n        var characterPairSupport = this._getCharacterPairSupport(languageId);\r\n        if (!characterPairSupport) {\r\n            return [];\r\n        }\r\n        return characterPairSupport.getSurroundingPairs();\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.shouldAutoClosePair = function (autoClosingPair, context, column) {\r\n        var scopedLineTokens = createScopedLineTokens(context, column - 1);\r\n        return CharacterPairSupport.shouldAutoClosePair(autoClosingPair, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\r\n    };\r\n    // end characterPair\r\n    LanguageConfigurationRegistryImpl.prototype.getWordDefinition = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return ensureValidWordDefinition(null);\r\n        }\r\n        return ensureValidWordDefinition(value.wordDefinition || null);\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getFoldingRules = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return {};\r\n        }\r\n        return value.foldingRules;\r\n    };\r\n    // begin Indent Rules\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentRulesSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.indentRulesSupport || null;\r\n    };\r\n    /**\r\n     * Get nearest preceiding line which doesn't match unIndentPattern or contains all whitespace.\r\n     * Result:\r\n     * -1: run into the boundary of embedded languages\r\n     * 0: every line above are invalid\r\n     * else: nearest preceding line of the same language\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getPrecedingValidLine = function (model, lineNumber, indentRulesSupport) {\r\n        var languageID = model.getLanguageIdAtPosition(lineNumber, 0);\r\n        if (lineNumber > 1) {\r\n            var lastLineNumber = void 0;\r\n            var resultLineNumber = -1;\r\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\r\n                if (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageID) {\r\n                    return resultLineNumber;\r\n                }\r\n                var text = model.getLineContent(lastLineNumber);\r\n                if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\r\n                    resultLineNumber = lastLineNumber;\r\n                    continue;\r\n                }\r\n                return lastLineNumber;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Get inherited indentation from above lines.\r\n     * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\r\n     * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\r\n     * 3. If this line doesn't match any indent rules\r\n     *   a. check whether the line above it matches indentNextLinePattern\r\n     *   b. If not, the indent level of this line is the result\r\n     *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\r\n     * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\r\n     *\r\n     * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getInheritIndentForLine = function (autoIndent, model, lineNumber, honorIntentialIndent) {\r\n        if (honorIntentialIndent === void 0) { honorIntentialIndent = true; }\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        if (lineNumber <= 1) {\r\n            return {\r\n                indentation: '',\r\n                action: null\r\n            };\r\n        }\r\n        var precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\r\n        if (precedingUnIgnoredLine < 0) {\r\n            return null;\r\n        }\r\n        else if (precedingUnIgnoredLine < 1) {\r\n            return {\r\n                indentation: '',\r\n                action: null\r\n            };\r\n        }\r\n        var precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\r\n        if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\r\n            return {\r\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\r\n                action: IndentAction.Indent,\r\n                line: precedingUnIgnoredLine\r\n            };\r\n        }\r\n        else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\r\n            return {\r\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\r\n                action: null,\r\n                line: precedingUnIgnoredLine\r\n            };\r\n        }\r\n        else {\r\n            // precedingUnIgnoredLine can not be ignored.\r\n            // it doesn't increase indent of following lines\r\n            // it doesn't increase just next line\r\n            // so current line is not affect by precedingUnIgnoredLine\r\n            // and then we should get a correct inheritted indentation from above lines\r\n            if (precedingUnIgnoredLine === 1) {\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\r\n                    action: null,\r\n                    line: precedingUnIgnoredLine\r\n                };\r\n            }\r\n            var previousLine = precedingUnIgnoredLine - 1;\r\n            var previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\r\n            if (!(previousLineIndentMetadata & (1 /* INCREASE_MASK */ | 2 /* DECREASE_MASK */)) &&\r\n                (previousLineIndentMetadata & 4 /* INDENT_NEXTLINE_MASK */)) {\r\n                var stopLine = 0;\r\n                for (var i = previousLine - 1; i > 0; i--) {\r\n                    if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\r\n                        continue;\r\n                    }\r\n                    stopLine = i;\r\n                    break;\r\n                }\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\r\n                    action: null,\r\n                    line: stopLine + 1\r\n                };\r\n            }\r\n            if (honorIntentialIndent) {\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\r\n                    action: null,\r\n                    line: precedingUnIgnoredLine\r\n                };\r\n            }\r\n            else {\r\n                // search from precedingUnIgnoredLine until we find one whose indent is not temporary\r\n                for (var i = precedingUnIgnoredLine; i > 0; i--) {\r\n                    var lineContent = model.getLineContent(i);\r\n                    if (indentRulesSupport.shouldIncrease(lineContent)) {\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(lineContent),\r\n                            action: IndentAction.Indent,\r\n                            line: i\r\n                        };\r\n                    }\r\n                    else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\r\n                        var stopLine = 0;\r\n                        for (var j = i - 1; j > 0; j--) {\r\n                            if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\r\n                                continue;\r\n                            }\r\n                            stopLine = j;\r\n                            break;\r\n                        }\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\r\n                            action: null,\r\n                            line: stopLine + 1\r\n                        };\r\n                    }\r\n                    else if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                        return {\r\n                            indentation: strings.getLeadingWhitespace(lineContent),\r\n                            action: null,\r\n                            line: i\r\n                        };\r\n                    }\r\n                }\r\n                return {\r\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\r\n                    action: null,\r\n                    line: 1\r\n                };\r\n            }\r\n        }\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getGoodIndentForLine = function (autoIndent, virtualModel, languageId, lineNumber, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var richEditSupport = this._getRichEditSupport(languageId);\r\n        if (!richEditSupport) {\r\n            return null;\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\r\n        var lineContent = virtualModel.getLineContent(lineNumber);\r\n        if (indent) {\r\n            var inheritLine = indent.line;\r\n            if (inheritLine !== undefined) {\r\n                var enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\r\n                if (enterResult) {\r\n                    var indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\r\n                    if (enterResult.removeText) {\r\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\r\n                    }\r\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\r\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\r\n                        indentation = indentConverter.shiftIndent(indentation);\r\n                    }\r\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\r\n                        indentation = indentConverter.unshiftIndent(indentation);\r\n                    }\r\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                        indentation = indentConverter.unshiftIndent(indentation);\r\n                    }\r\n                    if (enterResult.appendText) {\r\n                        indentation += enterResult.appendText;\r\n                    }\r\n                    return strings.getLeadingWhitespace(indentation);\r\n                }\r\n            }\r\n            if (indentRulesSupport.shouldDecrease(lineContent)) {\r\n                if (indent.action === IndentAction.Indent) {\r\n                    return indent.indentation;\r\n                }\r\n                else {\r\n                    return indentConverter.unshiftIndent(indent.indentation);\r\n                }\r\n            }\r\n            else {\r\n                if (indent.action === IndentAction.Indent) {\r\n                    return indentConverter.shiftIndent(indent.indentation);\r\n                }\r\n                else {\r\n                    return indent.indentation;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentForEnter = function (autoIndent, model, range, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        model.forceTokenization(range.startLineNumber);\r\n        var lineTokens = model.getLineTokens(range.startLineNumber);\r\n        var scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var embeddedLanguage = false;\r\n        var beforeEnterText;\r\n        if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\r\n            // we are in the embeded language content\r\n            embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\r\n            beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\r\n        }\r\n        var afterEnterText;\r\n        if (range.isEmpty()) {\r\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var beforeEnterResult = beforeEnterText;\r\n        var beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\r\n        var virtualModel = {\r\n            getLineTokens: function (lineNumber) {\r\n                return model.getLineTokens(lineNumber);\r\n            },\r\n            getLanguageIdentifier: function () {\r\n                return model.getLanguageIdentifier();\r\n            },\r\n            getLanguageIdAtPosition: function (lineNumber, column) {\r\n                return model.getLanguageIdAtPosition(lineNumber, column);\r\n            },\r\n            getLineContent: function (lineNumber) {\r\n                if (lineNumber === range.startLineNumber) {\r\n                    return beforeEnterResult;\r\n                }\r\n                else {\r\n                    return model.getLineContent(lineNumber);\r\n                }\r\n            }\r\n        };\r\n        var currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\r\n        var afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\r\n        if (!afterEnterAction) {\r\n            var beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\r\n            return {\r\n                beforeEnter: beforeEnter,\r\n                afterEnter: beforeEnter\r\n            };\r\n        }\r\n        var afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\r\n        if (afterEnterAction.action === IndentAction.Indent) {\r\n            afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\r\n        }\r\n        if (indentRulesSupport.shouldDecrease(afterEnterText)) {\r\n            afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\r\n        }\r\n        return {\r\n            beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\r\n            afterEnter: afterEnterIndent\r\n        };\r\n    };\r\n    /**\r\n     * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\r\n     * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\r\n     */\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentActionForType = function (autoIndent, model, range, ch, indentConverter) {\r\n        if (autoIndent < 4 /* Full */) {\r\n            return null;\r\n        }\r\n        var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\r\n        var indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        // selection support\r\n        var afterTypeText;\r\n        if (range.isEmpty()) {\r\n            afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\r\n        // Users might change the indentation by purpose and we should honor that instead of readjusting.\r\n        if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\r\n            // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\r\n            // 1. Get inherited indent action\r\n            var r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\r\n            if (!r) {\r\n                return null;\r\n            }\r\n            var indentation = r.indentation;\r\n            if (r.action !== IndentAction.Indent) {\r\n                indentation = indentConverter.unshiftIndent(indentation);\r\n            }\r\n            return indentation;\r\n        }\r\n        return null;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentMetadata = function (model, lineNumber) {\r\n        var indentRulesSupport = this.getIndentRulesSupport(model.getLanguageIdentifier().id);\r\n        if (!indentRulesSupport) {\r\n            return null;\r\n        }\r\n        if (lineNumber < 1 || lineNumber > model.getLineCount()) {\r\n            return null;\r\n        }\r\n        return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\r\n    };\r\n    // end Indent Rules\r\n    // begin onEnter\r\n    LanguageConfigurationRegistryImpl.prototype.getEnterAction = function (autoIndent, model, range) {\r\n        var scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\r\n        var richEditSupport = this._getRichEditSupport(scopedLineTokens.languageId);\r\n        if (!richEditSupport) {\r\n            return null;\r\n        }\r\n        var scopedLineText = scopedLineTokens.getLineContent();\r\n        var beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        // selection support\r\n        var afterEnterText;\r\n        if (range.isEmpty()) {\r\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        else {\r\n            var endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\r\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\r\n        }\r\n        var oneLineAboveText = '';\r\n        if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\r\n            // This is not the first line and the entire line belongs to this mode\r\n            var oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\r\n            if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\r\n                // The line above ends with text belonging to the same mode\r\n                oneLineAboveText = oneLineAboveScopedLineTokens.getLineContent();\r\n            }\r\n        }\r\n        var enterResult = richEditSupport.onEnter(autoIndent, oneLineAboveText, beforeEnterText, afterEnterText);\r\n        if (!enterResult) {\r\n            return null;\r\n        }\r\n        var indentAction = enterResult.indentAction;\r\n        var appendText = enterResult.appendText;\r\n        var removeText = enterResult.removeText || 0;\r\n        // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\r\n        if (!appendText) {\r\n            if ((indentAction === IndentAction.Indent) ||\r\n                (indentAction === IndentAction.IndentOutdent)) {\r\n                appendText = '\\t';\r\n            }\r\n            else {\r\n                appendText = '';\r\n            }\r\n        }\r\n        var indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\r\n        if (removeText) {\r\n            indentation = indentation.substring(0, indentation.length - removeText);\r\n        }\r\n        return {\r\n            indentAction: indentAction,\r\n            appendText: appendText,\r\n            removeText: removeText,\r\n            indentation: indentation\r\n        };\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getIndentationAtPosition = function (model, lineNumber, column) {\r\n        var lineText = model.getLineContent(lineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText);\r\n        if (indentation.length > column - 1) {\r\n            indentation = indentation.substring(0, column - 1);\r\n        }\r\n        return indentation;\r\n    };\r\n    LanguageConfigurationRegistryImpl.prototype.getScopedLineTokens = function (model, lineNumber, columnNumber) {\r\n        model.forceTokenization(lineNumber);\r\n        var lineTokens = model.getLineTokens(lineNumber);\r\n        var column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\r\n        return createScopedLineTokens(lineTokens, column);\r\n    };\r\n    // end onEnter\r\n    LanguageConfigurationRegistryImpl.prototype.getBracketsSupport = function (languageId) {\r\n        var value = this._getRichEditSupport(languageId);\r\n        if (!value) {\r\n            return null;\r\n        }\r\n        return value.brackets || null;\r\n    };\r\n    return LanguageConfigurationRegistryImpl;\r\n}());\r\nexport { LanguageConfigurationRegistryImpl };\r\nexport var LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,+BAA+B;AACvD,SAASC,YAAY,QAAQ,mCAAmC;AAChE,OAAO,KAAKC,OAAO,MAAM,iCAAiC;AAC1D,SAASC,mBAAmB,EAAEC,yBAAyB,QAAQ,wBAAwB;AACvF,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,sBAAsB,QAAQ,eAAe;AACtD,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,+BAA+B,QAAQ,iCAAiC;AACjF,SAASC,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,IAAIC,eAAe,GAAG,aAAe,YAAY;EAC7C,SAASA,eAAe,CAACC,kBAAkB,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAC5D,IAAI,CAACC,mBAAmB,GAAGH,kBAAkB;IAC7C,IAAI,CAACI,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIL,QAAQ,EAAE;MACVK,IAAI,GAAGL,QAAQ,CAACM,KAAK;IACzB;IACA,IAAI,CAACA,KAAK,GAAGR,eAAe,CAACS,UAAU,CAACF,IAAI,EAAEJ,OAAO,CAAC;IACtD,IAAI,CAACO,eAAe,GAAI,IAAI,CAACF,KAAK,CAACG,QAAQ,IAAI,IAAI,CAACH,KAAK,CAACI,gBAAgB,IAAI,IAAI,CAACJ,KAAK,CAACK,YAAY,GAAG,IAAIf,cAAc,CAAC,IAAI,CAACU,KAAK,CAAC,GAAG,IAAK;IAC9I,IAAI,CAACM,QAAQ,GAAGd,eAAe,CAACe,eAAe,CAAC,IAAI,CAACP,KAAK,CAAC;IAC3D,IAAI,CAACQ,aAAa,GAAG,IAAIrB,oBAAoB,CAAC,IAAI,CAACa,KAAK,CAAC;IACzD,IAAI,CAACS,cAAc,GAAG,IAAI,CAACT,KAAK,CAACU,WAAW,IAAI3B,mBAAmB;IACnE,IAAI,CAACqB,gBAAgB,GAAG,IAAI,CAACJ,KAAK,CAACI,gBAAgB;IACnD,IAAI,IAAI,CAACJ,KAAK,CAACI,gBAAgB,EAAE;MAC7B,IAAI,CAACO,kBAAkB,GAAG,IAAItB,kBAAkB,CAAC,IAAI,CAACW,KAAK,CAACI,gBAAgB,CAAC;IACjF,CAAC,MACI;MACD,IAAI,CAACO,kBAAkB,GAAG,IAAI;IAClC;IACA,IAAI,CAACC,YAAY,GAAG,IAAI,CAACZ,KAAK,CAACa,OAAO,IAAI,CAAC,CAAC;EAChD;EACAC,MAAM,CAACC,cAAc,CAACvB,eAAe,CAACwB,SAAS,EAAE,UAAU,EAAE;IACzDC,GAAG,EAAE,eAAY;MACb,IAAI,CAAC,IAAI,CAACpB,SAAS,IAAI,IAAI,CAACG,KAAK,CAACG,QAAQ,EAAE;QACxC,IAAI,CAACN,SAAS,GAAG,IAAIN,gBAAgB,CAAC,IAAI,CAACK,mBAAmB,EAAE,IAAI,CAACI,KAAK,CAACG,QAAQ,CAAC;MACxF;MACA,OAAO,IAAI,CAACN,SAAS;IACzB,CAAC;IACDqB,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFL,MAAM,CAACC,cAAc,CAACvB,eAAe,CAACwB,SAAS,EAAE,mBAAmB,EAAE;IAClEC,GAAG,EAAE,eAAY;MACb,IAAI,CAAC,IAAI,CAACnB,kBAAkB,EAAE;QAC1B,IAAI,CAACA,kBAAkB,GAAG,IAAIV,+BAA+B,CAAC,IAAI,CAACe,QAAQ,CAAC;MAChF;MACA,OAAO,IAAI,CAACL,kBAAkB;IAClC,CAAC;IACDoB,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF3B,eAAe,CAACwB,SAAS,CAACI,OAAO,GAAG,UAAUC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,EAAE;IACzG,IAAI,CAAC,IAAI,CAACtB,eAAe,EAAE;MACvB,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACA,eAAe,CAACkB,OAAO,CAACC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,CAAC;EACtG,CAAC;EACDhC,eAAe,CAACS,UAAU,GAAG,UAAUF,IAAI,EAAE0B,OAAO,EAAE;IAClD,OAAO;MACHnB,QAAQ,EAAGP,IAAI,GAAG0B,OAAO,CAACnB,QAAQ,IAAIP,IAAI,CAACO,QAAQ,GAAGmB,OAAO,CAACnB,QAAS;MACvEH,QAAQ,EAAGJ,IAAI,GAAG0B,OAAO,CAACtB,QAAQ,IAAIJ,IAAI,CAACI,QAAQ,GAAGsB,OAAO,CAACtB,QAAS;MACvEO,WAAW,EAAGX,IAAI,GAAG0B,OAAO,CAACf,WAAW,IAAIX,IAAI,CAACW,WAAW,GAAGe,OAAO,CAACf,WAAY;MACnFN,gBAAgB,EAAGL,IAAI,GAAG0B,OAAO,CAACrB,gBAAgB,IAAIL,IAAI,CAACK,gBAAgB,GAAGqB,OAAO,CAACrB,gBAAiB;MACvGC,YAAY,EAAGN,IAAI,GAAG0B,OAAO,CAACpB,YAAY,IAAIN,IAAI,CAACM,YAAY,GAAGoB,OAAO,CAACpB,YAAa;MACvFqB,gBAAgB,EAAG3B,IAAI,GAAG0B,OAAO,CAACC,gBAAgB,IAAI3B,IAAI,CAAC2B,gBAAgB,GAAGD,OAAO,CAACC,gBAAiB;MACvGC,gBAAgB,EAAG5B,IAAI,GAAG0B,OAAO,CAACE,gBAAgB,IAAI5B,IAAI,CAAC4B,gBAAgB,GAAGF,OAAO,CAACE,gBAAiB;MACvGC,eAAe,EAAG7B,IAAI,GAAG0B,OAAO,CAACG,eAAe,IAAI7B,IAAI,CAAC6B,eAAe,GAAGH,OAAO,CAACG,eAAgB;MACnGf,OAAO,EAAGd,IAAI,GAAG0B,OAAO,CAACZ,OAAO,IAAId,IAAI,CAACc,OAAO,GAAGY,OAAO,CAACZ,OAAQ;MACnEgB,0BAA0B,EAAG9B,IAAI,GAAG0B,OAAO,CAACI,0BAA0B,IAAI9B,IAAI,CAAC8B,0BAA0B,GAAGJ,OAAO,CAACI;IACxH,CAAC;EACL,CAAC;EACDrC,eAAe,CAACe,eAAe,GAAG,UAAUuB,IAAI,EAAE;IAC9C,IAAIC,WAAW,GAAGD,IAAI,CAACxB,QAAQ;IAC/B,IAAI,CAACyB,WAAW,EAAE;MACd,OAAO,IAAI;IACf;IACA;IACA,IAAIzB,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAIyB,WAAW,CAACC,WAAW,EAAE;MACzB1B,QAAQ,CAAC2B,gBAAgB,GAAGF,WAAW,CAACC,WAAW;IACvD;IACA,IAAID,WAAW,CAACG,YAAY,EAAE;MAC1B,IAAIC,EAAE,GAAGJ,WAAW,CAACG,YAAY;QAAEE,UAAU,GAAGD,EAAE,CAAC,CAAC,CAAC;QAAEE,QAAQ,GAAGF,EAAE,CAAC,CAAC,CAAC;MACvE7B,QAAQ,CAACgC,sBAAsB,GAAGF,UAAU;MAC5C9B,QAAQ,CAACiC,oBAAoB,GAAGF,QAAQ;IAC5C;IACA,OAAO/B,QAAQ;EACnB,CAAC;EACD,OAAOd,eAAe;AAC1B,CAAC,EAAG;AACJ,SAASA,eAAe;AACxB,IAAIgD,gCAAgC,GAAG,aAAe,YAAY;EAC9D,SAASA,gCAAgC,CAAC/C,kBAAkB,EAAE;IAC1D,IAAI,CAACA,kBAAkB,GAAGA,kBAAkB;EAChD;EACA,OAAO+C,gCAAgC;AAC3C,CAAC,EAAG;AACJ,SAASA,gCAAgC;AACzC,IAAIC,iCAAiC,GAAG,aAAe,YAAY;EAC/D,SAASA,iCAAiC,GAAG;IACzC,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,EAAE;IACzB,IAAI,CAACC,YAAY,GAAG,IAAIhE,OAAO,EAAE;IACjC,IAAI,CAACiE,WAAW,GAAG,IAAI,CAACD,YAAY,CAACE,KAAK;EAC9C;EACAL,iCAAiC,CAACzB,SAAS,CAAC+B,QAAQ,GAAG,UAAUtD,kBAAkB,EAAEuD,aAAa,EAAE;IAChG,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIvD,QAAQ,GAAG,IAAI,CAACwD,mBAAmB,CAACzD,kBAAkB,CAAC0D,EAAE,CAAC;IAC9D,IAAI1B,OAAO,GAAG,IAAIjC,eAAe,CAACC,kBAAkB,EAAEC,QAAQ,EAAEsD,aAAa,CAAC;IAC9E,IAAI,CAACN,QAAQ,CAACU,GAAG,CAAC3D,kBAAkB,CAAC0D,EAAE,EAAE1B,OAAO,CAAC;IACjD,IAAI,CAACmB,YAAY,CAACS,IAAI,CAAC,IAAIb,gCAAgC,CAAC/C,kBAAkB,CAAC,CAAC;IAChF,OAAOZ,YAAY,CAAC,YAAY;MAC5B,IAAIoE,KAAK,CAACP,QAAQ,CAACzB,GAAG,CAACxB,kBAAkB,CAAC0D,EAAE,CAAC,KAAK1B,OAAO,EAAE;QACvDwB,KAAK,CAACP,QAAQ,CAACU,GAAG,CAAC3D,kBAAkB,CAAC0D,EAAE,EAAEzD,QAAQ,CAAC;QACnDuD,KAAK,CAACL,YAAY,CAACS,IAAI,CAAC,IAAIb,gCAAgC,CAAC/C,kBAAkB,CAAC,CAAC;MACrF;IACJ,CAAC,CAAC;EACN,CAAC;EACDgD,iCAAiC,CAACzB,SAAS,CAACkC,mBAAmB,GAAG,UAAUI,UAAU,EAAE;IACpF,OAAO,IAAI,CAACZ,QAAQ,CAACzB,GAAG,CAACqC,UAAU,CAAC;EACxC,CAAC;EACD;EACAb,iCAAiC,CAACzB,SAAS,CAACuC,4BAA4B,GAAG,UAAUD,UAAU,EAAE;IAC7F,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAACC,iBAAiB,IAAI,IAAI;EAC1C,CAAC;EACDhB,iCAAiC,CAACzB,SAAS,CAAC0C,qBAAqB,GAAG,UAAUJ,UAAU,EAAE;IACtF,IAAIK,wBAAwB,GAAG,IAAI,CAACJ,4BAA4B,CAACD,UAAU,CAAC;IAC5E,IAAI,CAACK,wBAAwB,EAAE;MAC3B,OAAO,EAAE;IACb;IACA,OAAOA,wBAAwB,CAACD,qBAAqB,EAAE;EAC3D,CAAC;EACD;AACJ;AACA;EACIjB,iCAAiC,CAACzB,SAAS,CAAC4C,mBAAmB,GAAG,UAAUC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACpG,IAAIC,gBAAgB,GAAG9E,sBAAsB,CAAC4E,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC;IAClE,IAAIJ,wBAAwB,GAAG,IAAI,CAACJ,4BAA4B,CAACS,gBAAgB,CAACV,UAAU,CAAC;IAC7F,IAAI,CAACK,wBAAwB,EAAE;MAC3B,OAAO,IAAI;IACf;IACA,OAAOA,wBAAwB,CAACC,mBAAmB,CAACC,SAAS,EAAEG,gBAAgB,EAAED,MAAM,GAAGC,gBAAgB,CAACC,eAAe,CAAC;EAC/H,CAAC;EACD;EACAxB,iCAAiC,CAACzB,SAAS,CAACkD,WAAW,GAAG,UAAUZ,UAAU,EAAE;IAC5E,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAAClD,QAAQ,IAAI,IAAI;EACjC,CAAC;EACD;EACAmC,iCAAiC,CAACzB,SAAS,CAACmD,wBAAwB,GAAG,UAAUb,UAAU,EAAE;IACzF,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAAChD,aAAa,IAAI,IAAI;EACtC,CAAC;EACDiC,iCAAiC,CAACzB,SAAS,CAACoD,mBAAmB,GAAG,UAAUd,UAAU,EAAE;IACpF,IAAIe,oBAAoB,GAAG,IAAI,CAACF,wBAAwB,CAACb,UAAU,CAAC;IACpE,IAAI,CAACe,oBAAoB,EAAE;MACvB,OAAO,EAAE;IACb;IACA,OAAOA,oBAAoB,CAACD,mBAAmB,EAAE;EACrD,CAAC;EACD3B,iCAAiC,CAACzB,SAAS,CAACsD,qBAAqB,GAAG,UAAUhB,UAAU,EAAE;IACtF,IAAIe,oBAAoB,GAAG,IAAI,CAACF,wBAAwB,CAACb,UAAU,CAAC;IACpE,IAAI,CAACe,oBAAoB,EAAE;MACvB,OAAOlF,oBAAoB,CAACoF,yCAAyC;IACzE;IACA,OAAOF,oBAAoB,CAACC,qBAAqB,EAAE;EACvD,CAAC;EACD7B,iCAAiC,CAACzB,SAAS,CAACwD,mBAAmB,GAAG,UAAUlB,UAAU,EAAE;IACpF,IAAIe,oBAAoB,GAAG,IAAI,CAACF,wBAAwB,CAACb,UAAU,CAAC;IACpE,IAAI,CAACe,oBAAoB,EAAE;MACvB,OAAO,EAAE;IACb;IACA,OAAOA,oBAAoB,CAACG,mBAAmB,EAAE;EACrD,CAAC;EACD/B,iCAAiC,CAACzB,SAAS,CAACyD,mBAAmB,GAAG,UAAUC,eAAe,EAAEZ,OAAO,EAAEC,MAAM,EAAE;IAC1G,IAAIC,gBAAgB,GAAG9E,sBAAsB,CAAC4E,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC;IAClE,OAAO5E,oBAAoB,CAACsF,mBAAmB,CAACC,eAAe,EAAEV,gBAAgB,EAAED,MAAM,GAAGC,gBAAgB,CAACC,eAAe,CAAC;EACjI,CAAC;EACD;EACAxB,iCAAiC,CAACzB,SAAS,CAAC2D,iBAAiB,GAAG,UAAUrB,UAAU,EAAE;IAClF,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAOxE,yBAAyB,CAAC,IAAI,CAAC;IAC1C;IACA,OAAOA,yBAAyB,CAACwE,KAAK,CAAC/C,cAAc,IAAI,IAAI,CAAC;EAClE,CAAC;EACDgC,iCAAiC,CAACzB,SAAS,CAAC4D,eAAe,GAAG,UAAUtB,UAAU,EAAE;IAChF,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,CAAC,CAAC;IACb;IACA,OAAOA,KAAK,CAAC5C,YAAY;EAC7B,CAAC;EACD;EACA6B,iCAAiC,CAACzB,SAAS,CAAC6D,qBAAqB,GAAG,UAAUvB,UAAU,EAAE;IACtF,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAAC7C,kBAAkB,IAAI,IAAI;EAC3C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8B,iCAAiC,CAACzB,SAAS,CAAC8D,qBAAqB,GAAG,UAAUC,KAAK,EAAEC,UAAU,EAAErE,kBAAkB,EAAE;IACjH,IAAIsE,UAAU,GAAGF,KAAK,CAACG,uBAAuB,CAACF,UAAU,EAAE,CAAC,CAAC;IAC7D,IAAIA,UAAU,GAAG,CAAC,EAAE;MAChB,IAAIG,cAAc,GAAG,KAAK,CAAC;MAC3B,IAAIC,gBAAgB,GAAG,CAAC,CAAC;MACzB,KAAKD,cAAc,GAAGH,UAAU,GAAG,CAAC,EAAEG,cAAc,IAAI,CAAC,EAAEA,cAAc,EAAE,EAAE;QACzE,IAAIJ,KAAK,CAACG,uBAAuB,CAACC,cAAc,EAAE,CAAC,CAAC,KAAKF,UAAU,EAAE;UACjE,OAAOG,gBAAgB;QAC3B;QACA,IAAIC,IAAI,GAAGN,KAAK,CAACO,cAAc,CAACH,cAAc,CAAC;QAC/C,IAAIxE,kBAAkB,CAAC4E,YAAY,CAACF,IAAI,CAAC,IAAI,OAAO,CAACG,IAAI,CAACH,IAAI,CAAC,IAAIA,IAAI,KAAK,EAAE,EAAE;UAC5ED,gBAAgB,GAAGD,cAAc;UACjC;QACJ;QACA,OAAOA,cAAc;MACzB;IACJ;IACA,OAAO,CAAC,CAAC;EACb,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1C,iCAAiC,CAACzB,SAAS,CAACyE,uBAAuB,GAAG,UAAUpE,UAAU,EAAE0D,KAAK,EAAEC,UAAU,EAAEU,oBAAoB,EAAE;IACjI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,EAAE;MAAEA,oBAAoB,GAAG,IAAI;IAAE;IACpE,IAAIrE,UAAU,GAAG,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI;IACf;IACA,IAAIV,kBAAkB,GAAG,IAAI,CAACkE,qBAAqB,CAACE,KAAK,CAACY,qBAAqB,EAAE,CAACxC,EAAE,CAAC;IACrF,IAAI,CAACxC,kBAAkB,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAIqE,UAAU,IAAI,CAAC,EAAE;MACjB,OAAO;QACHY,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE;MACZ,CAAC;IACL;IACA,IAAIC,sBAAsB,GAAG,IAAI,CAAChB,qBAAqB,CAACC,KAAK,EAAEC,UAAU,EAAErE,kBAAkB,CAAC;IAC9F,IAAImF,sBAAsB,GAAG,CAAC,EAAE;MAC5B,OAAO,IAAI;IACf,CAAC,MACI,IAAIA,sBAAsB,GAAG,CAAC,EAAE;MACjC,OAAO;QACHF,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE;MACZ,CAAC;IACL;IACA,IAAIE,6BAA6B,GAAGhB,KAAK,CAACO,cAAc,CAACQ,sBAAsB,CAAC;IAChF,IAAInF,kBAAkB,CAACqF,cAAc,CAACD,6BAA6B,CAAC,IAAIpF,kBAAkB,CAACsF,oBAAoB,CAACF,6BAA6B,CAAC,EAAE;MAC5I,OAAO;QACHH,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACH,6BAA6B,CAAC;QACxEF,MAAM,EAAE5G,YAAY,CAACkH,MAAM;QAC3BC,IAAI,EAAEN;MACV,CAAC;IACL,CAAC,MACI,IAAInF,kBAAkB,CAAC0F,cAAc,CAACN,6BAA6B,CAAC,EAAE;MACvE,OAAO;QACHH,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACH,6BAA6B,CAAC;QACxEF,MAAM,EAAE,IAAI;QACZO,IAAI,EAAEN;MACV,CAAC;IACL,CAAC,MACI;MACD;MACA;MACA;MACA;MACA;MACA,IAAIA,sBAAsB,KAAK,CAAC,EAAE;QAC9B,OAAO;UACHF,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACnB,KAAK,CAACO,cAAc,CAACQ,sBAAsB,CAAC,CAAC;UACvFD,MAAM,EAAE,IAAI;UACZO,IAAI,EAAEN;QACV,CAAC;MACL;MACA,IAAIQ,YAAY,GAAGR,sBAAsB,GAAG,CAAC;MAC7C,IAAIS,0BAA0B,GAAG5F,kBAAkB,CAAC6F,iBAAiB,CAACzB,KAAK,CAACO,cAAc,CAACgB,YAAY,CAAC,CAAC;MACzG,IAAI,EAAEC,0BAA0B,IAAI,CAAC,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,IAC9EA,0BAA0B,GAAG,CAAC,CAAC,0BAA2B,EAAE;QAC7D,IAAIE,QAAQ,GAAG,CAAC;QAChB,KAAK,IAAIC,CAAC,GAAGJ,YAAY,GAAG,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UACvC,IAAI/F,kBAAkB,CAACsF,oBAAoB,CAAClB,KAAK,CAACO,cAAc,CAACoB,CAAC,CAAC,CAAC,EAAE;YAClE;UACJ;UACAD,QAAQ,GAAGC,CAAC;UACZ;QACJ;QACA,OAAO;UACHd,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACnB,KAAK,CAACO,cAAc,CAACmB,QAAQ,GAAG,CAAC,CAAC,CAAC;UAC7EZ,MAAM,EAAE,IAAI;UACZO,IAAI,EAAEK,QAAQ,GAAG;QACrB,CAAC;MACL;MACA,IAAIf,oBAAoB,EAAE;QACtB,OAAO;UACHE,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACnB,KAAK,CAACO,cAAc,CAACQ,sBAAsB,CAAC,CAAC;UACvFD,MAAM,EAAE,IAAI;UACZO,IAAI,EAAEN;QACV,CAAC;MACL,CAAC,MACI;QACD;QACA,KAAK,IAAIY,CAAC,GAAGZ,sBAAsB,EAAEY,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC7C,IAAIC,WAAW,GAAG5B,KAAK,CAACO,cAAc,CAACoB,CAAC,CAAC;UACzC,IAAI/F,kBAAkB,CAACqF,cAAc,CAACW,WAAW,CAAC,EAAE;YAChD,OAAO;cACHf,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACS,WAAW,CAAC;cACtDd,MAAM,EAAE5G,YAAY,CAACkH,MAAM;cAC3BC,IAAI,EAAEM;YACV,CAAC;UACL,CAAC,MACI,IAAI/F,kBAAkB,CAACsF,oBAAoB,CAACU,WAAW,CAAC,EAAE;YAC3D,IAAIF,QAAQ,GAAG,CAAC;YAChB,KAAK,IAAIG,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;cAC5B,IAAIjG,kBAAkB,CAACsF,oBAAoB,CAAClB,KAAK,CAACO,cAAc,CAACoB,CAAC,CAAC,CAAC,EAAE;gBAClE;cACJ;cACAD,QAAQ,GAAGG,CAAC;cACZ;YACJ;YACA,OAAO;cACHhB,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACnB,KAAK,CAACO,cAAc,CAACmB,QAAQ,GAAG,CAAC,CAAC,CAAC;cAC7EZ,MAAM,EAAE,IAAI;cACZO,IAAI,EAAEK,QAAQ,GAAG;YACrB,CAAC;UACL,CAAC,MACI,IAAI9F,kBAAkB,CAAC0F,cAAc,CAACM,WAAW,CAAC,EAAE;YACrD,OAAO;cACHf,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACS,WAAW,CAAC;cACtDd,MAAM,EAAE,IAAI;cACZO,IAAI,EAAEM;YACV,CAAC;UACL;QACJ;QACA,OAAO;UACHd,WAAW,EAAE9G,OAAO,CAACoH,oBAAoB,CAACnB,KAAK,CAACO,cAAc,CAAC,CAAC,CAAC,CAAC;UAClEO,MAAM,EAAE,IAAI;UACZO,IAAI,EAAE;QACV,CAAC;MACL;IACJ;EACJ,CAAC;EACD3D,iCAAiC,CAACzB,SAAS,CAAC6F,oBAAoB,GAAG,UAAUxF,UAAU,EAAEyF,YAAY,EAAExD,UAAU,EAAE0B,UAAU,EAAE+B,eAAe,EAAE;IAC5I,IAAI1F,UAAU,GAAG,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI;IACf;IACA,IAAI2F,eAAe,GAAG,IAAI,CAAC9D,mBAAmB,CAACI,UAAU,CAAC;IAC1D,IAAI,CAAC0D,eAAe,EAAE;MAClB,OAAO,IAAI;IACf;IACA,IAAIrG,kBAAkB,GAAG,IAAI,CAACkE,qBAAqB,CAACvB,UAAU,CAAC;IAC/D,IAAI,CAAC3C,kBAAkB,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAIsG,MAAM,GAAG,IAAI,CAACxB,uBAAuB,CAACpE,UAAU,EAAEyF,YAAY,EAAE9B,UAAU,CAAC;IAC/E,IAAI2B,WAAW,GAAGG,YAAY,CAACxB,cAAc,CAACN,UAAU,CAAC;IACzD,IAAIiC,MAAM,EAAE;MACR,IAAIC,WAAW,GAAGD,MAAM,CAACb,IAAI;MAC7B,IAAIc,WAAW,KAAKC,SAAS,EAAE;QAC3B,IAAIC,WAAW,GAAGJ,eAAe,CAAC5F,OAAO,CAACC,UAAU,EAAE,EAAE,EAAEyF,YAAY,CAACxB,cAAc,CAAC4B,WAAW,CAAC,EAAE,EAAE,CAAC;QACvG,IAAIE,WAAW,EAAE;UACb,IAAIxB,WAAW,GAAG9G,OAAO,CAACoH,oBAAoB,CAACY,YAAY,CAACxB,cAAc,CAAC4B,WAAW,CAAC,CAAC;UACxF,IAAIE,WAAW,CAACC,UAAU,EAAE;YACxBzB,WAAW,GAAGA,WAAW,CAAC0B,SAAS,CAAC,CAAC,EAAE1B,WAAW,CAAC2B,MAAM,GAAGH,WAAW,CAACC,UAAU,CAAC;UACvF;UACA,IAAKD,WAAW,CAACI,YAAY,KAAKvI,YAAY,CAACkH,MAAM,IAChDiB,WAAW,CAACI,YAAY,KAAKvI,YAAY,CAACwI,aAAc,EAAE;YAC3D7B,WAAW,GAAGmB,eAAe,CAACW,WAAW,CAAC9B,WAAW,CAAC;UAC1D,CAAC,MACI,IAAIwB,WAAW,CAACI,YAAY,KAAKvI,YAAY,CAAC0I,OAAO,EAAE;YACxD/B,WAAW,GAAGmB,eAAe,CAACa,aAAa,CAAChC,WAAW,CAAC;UAC5D;UACA,IAAIjF,kBAAkB,CAAC0F,cAAc,CAACM,WAAW,CAAC,EAAE;YAChDf,WAAW,GAAGmB,eAAe,CAACa,aAAa,CAAChC,WAAW,CAAC;UAC5D;UACA,IAAIwB,WAAW,CAACS,UAAU,EAAE;YACxBjC,WAAW,IAAIwB,WAAW,CAACS,UAAU;UACzC;UACA,OAAO/I,OAAO,CAACoH,oBAAoB,CAACN,WAAW,CAAC;QACpD;MACJ;MACA,IAAIjF,kBAAkB,CAAC0F,cAAc,CAACM,WAAW,CAAC,EAAE;QAChD,IAAIM,MAAM,CAACpB,MAAM,KAAK5G,YAAY,CAACkH,MAAM,EAAE;UACvC,OAAOc,MAAM,CAACrB,WAAW;QAC7B,CAAC,MACI;UACD,OAAOmB,eAAe,CAACa,aAAa,CAACX,MAAM,CAACrB,WAAW,CAAC;QAC5D;MACJ,CAAC,MACI;QACD,IAAIqB,MAAM,CAACpB,MAAM,KAAK5G,YAAY,CAACkH,MAAM,EAAE;UACvC,OAAOY,eAAe,CAACW,WAAW,CAACT,MAAM,CAACrB,WAAW,CAAC;QAC1D,CAAC,MACI;UACD,OAAOqB,MAAM,CAACrB,WAAW;QAC7B;MACJ;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDnD,iCAAiC,CAACzB,SAAS,CAAC8G,iBAAiB,GAAG,UAAUzG,UAAU,EAAE0D,KAAK,EAAEgD,KAAK,EAAEhB,eAAe,EAAE;IACjH,IAAI1F,UAAU,GAAG,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI;IACf;IACA0D,KAAK,CAACiD,iBAAiB,CAACD,KAAK,CAACE,eAAe,CAAC;IAC9C,IAAIC,UAAU,GAAGnD,KAAK,CAACoD,aAAa,CAACJ,KAAK,CAACE,eAAe,CAAC;IAC3D,IAAIjE,gBAAgB,GAAG9E,sBAAsB,CAACgJ,UAAU,EAAEH,KAAK,CAACK,WAAW,GAAG,CAAC,CAAC;IAChF,IAAIC,cAAc,GAAGrE,gBAAgB,CAACsB,cAAc,EAAE;IACtD,IAAIgD,gBAAgB,GAAG,KAAK;IAC5B,IAAI/G,eAAe;IACnB,IAAIyC,gBAAgB,CAACC,eAAe,GAAG,CAAC,IAAIiE,UAAU,CAACK,aAAa,CAAC,CAAC,CAAC,KAAKvE,gBAAgB,CAACV,UAAU,EAAE;MACrG;MACAgF,gBAAgB,GAAG,IAAI,CAAC,CAAC;MACzB/G,eAAe,GAAG8G,cAAc,CAACG,MAAM,CAAC,CAAC,EAAET,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACxG,CAAC,MACI;MACD1C,eAAe,GAAG2G,UAAU,CAAC5C,cAAc,EAAE,CAACgC,SAAS,CAAC,CAAC,EAAES,KAAK,CAACK,WAAW,GAAG,CAAC,CAAC;IACrF;IACA,IAAI5G,cAAc;IAClB,IAAIuG,KAAK,CAACU,OAAO,EAAE,EAAE;MACjBjH,cAAc,GAAG6G,cAAc,CAACG,MAAM,CAACT,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACpG,CAAC,MACI;MACD,IAAIyE,mBAAmB,GAAG,IAAI,CAACC,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACa,aAAa,EAAEb,KAAK,CAACc,SAAS,CAAC;MAC/FrH,cAAc,GAAGkH,mBAAmB,CAACpD,cAAc,EAAE,CAACkD,MAAM,CAACT,KAAK,CAACc,SAAS,GAAG,CAAC,GAAG7E,gBAAgB,CAACC,eAAe,CAAC;IACxH;IACA,IAAItD,kBAAkB,GAAG,IAAI,CAACkE,qBAAqB,CAACb,gBAAgB,CAACV,UAAU,CAAC;IAChF,IAAI,CAAC3C,kBAAkB,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAImI,iBAAiB,GAAGvH,eAAe;IACvC,IAAIwH,iBAAiB,GAAGjK,OAAO,CAACoH,oBAAoB,CAAC3E,eAAe,CAAC;IACrE,IAAIuF,YAAY,GAAG;MACfqB,aAAa,EAAE,uBAAUnD,UAAU,EAAE;QACjC,OAAOD,KAAK,CAACoD,aAAa,CAACnD,UAAU,CAAC;MAC1C,CAAC;MACDW,qBAAqB,EAAE,iCAAY;QAC/B,OAAOZ,KAAK,CAACY,qBAAqB,EAAE;MACxC,CAAC;MACDT,uBAAuB,EAAE,iCAAUF,UAAU,EAAEjB,MAAM,EAAE;QACnD,OAAOgB,KAAK,CAACG,uBAAuB,CAACF,UAAU,EAAEjB,MAAM,CAAC;MAC5D,CAAC;MACDuB,cAAc,EAAE,wBAAUN,UAAU,EAAE;QAClC,IAAIA,UAAU,KAAK+C,KAAK,CAACE,eAAe,EAAE;UACtC,OAAOa,iBAAiB;QAC5B,CAAC,MACI;UACD,OAAO/D,KAAK,CAACO,cAAc,CAACN,UAAU,CAAC;QAC3C;MACJ;IACJ,CAAC;IACD,IAAIgE,iBAAiB,GAAGlK,OAAO,CAACoH,oBAAoB,CAACgC,UAAU,CAAC5C,cAAc,EAAE,CAAC;IACjF,IAAI2D,gBAAgB,GAAG,IAAI,CAACxD,uBAAuB,CAACpE,UAAU,EAAEyF,YAAY,EAAEiB,KAAK,CAACE,eAAe,GAAG,CAAC,CAAC;IACxG,IAAI,CAACgB,gBAAgB,EAAE;MACnB,IAAIC,WAAW,GAAGZ,gBAAgB,GAAGU,iBAAiB,GAAGD,iBAAiB;MAC1E,OAAO;QACHG,WAAW,EAAEA,WAAW;QACxBC,UAAU,EAAED;MAChB,CAAC;IACL;IACA,IAAIE,gBAAgB,GAAGd,gBAAgB,GAAGU,iBAAiB,GAAGC,gBAAgB,CAACrD,WAAW;IAC1F,IAAIqD,gBAAgB,CAACpD,MAAM,KAAK5G,YAAY,CAACkH,MAAM,EAAE;MACjDiD,gBAAgB,GAAGrC,eAAe,CAACW,WAAW,CAAC0B,gBAAgB,CAAC;IACpE;IACA,IAAIzI,kBAAkB,CAAC0F,cAAc,CAAC7E,cAAc,CAAC,EAAE;MACnD4H,gBAAgB,GAAGrC,eAAe,CAACa,aAAa,CAACwB,gBAAgB,CAAC;IACtE;IACA,OAAO;MACHF,WAAW,EAAEZ,gBAAgB,GAAGU,iBAAiB,GAAGD,iBAAiB;MACrEI,UAAU,EAAEC;IAChB,CAAC;EACL,CAAC;EACD;AACJ;AACA;AACA;EACI3G,iCAAiC,CAACzB,SAAS,CAACqI,sBAAsB,GAAG,UAAUhI,UAAU,EAAE0D,KAAK,EAAEgD,KAAK,EAAEuB,EAAE,EAAEvC,eAAe,EAAE;IAC1H,IAAI1F,UAAU,GAAG,CAAC,CAAC,YAAY;MAC3B,OAAO,IAAI;IACf;IACA,IAAI2C,gBAAgB,GAAG,IAAI,CAAC2E,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACE,eAAe,EAAEF,KAAK,CAACK,WAAW,CAAC;IAChG,IAAIzH,kBAAkB,GAAG,IAAI,CAACkE,qBAAqB,CAACb,gBAAgB,CAACV,UAAU,CAAC;IAChF,IAAI,CAAC3C,kBAAkB,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAI0H,cAAc,GAAGrE,gBAAgB,CAACsB,cAAc,EAAE;IACtD,IAAIiE,cAAc,GAAGlB,cAAc,CAACG,MAAM,CAAC,CAAC,EAAET,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACvG;IACA,IAAIuF,aAAa;IACjB,IAAIzB,KAAK,CAACU,OAAO,EAAE,EAAE;MACjBe,aAAa,GAAGnB,cAAc,CAACG,MAAM,CAACT,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACnG,CAAC,MACI;MACD,IAAIyE,mBAAmB,GAAG,IAAI,CAACC,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACa,aAAa,EAAEb,KAAK,CAACc,SAAS,CAAC;MAC/FW,aAAa,GAAGd,mBAAmB,CAACpD,cAAc,EAAE,CAACkD,MAAM,CAACT,KAAK,CAACc,SAAS,GAAG,CAAC,GAAG7E,gBAAgB,CAACC,eAAe,CAAC;IACvH;IACA;IACA;IACA,IAAI,CAACtD,kBAAkB,CAAC0F,cAAc,CAACkD,cAAc,GAAGC,aAAa,CAAC,IAAI7I,kBAAkB,CAAC0F,cAAc,CAACkD,cAAc,GAAGD,EAAE,GAAGE,aAAa,CAAC,EAAE;MAC9I;MACA;MACA,IAAIC,CAAC,GAAG,IAAI,CAAChE,uBAAuB,CAACpE,UAAU,EAAE0D,KAAK,EAAEgD,KAAK,CAACE,eAAe,EAAE,KAAK,CAAC;MACrF,IAAI,CAACwB,CAAC,EAAE;QACJ,OAAO,IAAI;MACf;MACA,IAAI7D,WAAW,GAAG6D,CAAC,CAAC7D,WAAW;MAC/B,IAAI6D,CAAC,CAAC5D,MAAM,KAAK5G,YAAY,CAACkH,MAAM,EAAE;QAClCP,WAAW,GAAGmB,eAAe,CAACa,aAAa,CAAChC,WAAW,CAAC;MAC5D;MACA,OAAOA,WAAW;IACtB;IACA,OAAO,IAAI;EACf,CAAC;EACDnD,iCAAiC,CAACzB,SAAS,CAACwF,iBAAiB,GAAG,UAAUzB,KAAK,EAAEC,UAAU,EAAE;IACzF,IAAIrE,kBAAkB,GAAG,IAAI,CAACkE,qBAAqB,CAACE,KAAK,CAACY,qBAAqB,EAAE,CAACxC,EAAE,CAAC;IACrF,IAAI,CAACxC,kBAAkB,EAAE;MACrB,OAAO,IAAI;IACf;IACA,IAAIqE,UAAU,GAAG,CAAC,IAAIA,UAAU,GAAGD,KAAK,CAAC2E,YAAY,EAAE,EAAE;MACrD,OAAO,IAAI;IACf;IACA,OAAO/I,kBAAkB,CAAC6F,iBAAiB,CAACzB,KAAK,CAACO,cAAc,CAACN,UAAU,CAAC,CAAC;EACjF,CAAC;EACD;EACA;EACAvC,iCAAiC,CAACzB,SAAS,CAAC2I,cAAc,GAAG,UAAUtI,UAAU,EAAE0D,KAAK,EAAEgD,KAAK,EAAE;IAC7F,IAAI/D,gBAAgB,GAAG,IAAI,CAAC2E,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACE,eAAe,EAAEF,KAAK,CAACK,WAAW,CAAC;IAChG,IAAIpB,eAAe,GAAG,IAAI,CAAC9D,mBAAmB,CAACc,gBAAgB,CAACV,UAAU,CAAC;IAC3E,IAAI,CAAC0D,eAAe,EAAE;MAClB,OAAO,IAAI;IACf;IACA,IAAIqB,cAAc,GAAGrE,gBAAgB,CAACsB,cAAc,EAAE;IACtD,IAAI/D,eAAe,GAAG8G,cAAc,CAACG,MAAM,CAAC,CAAC,EAAET,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACxG;IACA,IAAIzC,cAAc;IAClB,IAAIuG,KAAK,CAACU,OAAO,EAAE,EAAE;MACjBjH,cAAc,GAAG6G,cAAc,CAACG,MAAM,CAACT,KAAK,CAACK,WAAW,GAAG,CAAC,GAAGpE,gBAAgB,CAACC,eAAe,CAAC;IACpG,CAAC,MACI;MACD,IAAIyE,mBAAmB,GAAG,IAAI,CAACC,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACa,aAAa,EAAEb,KAAK,CAACc,SAAS,CAAC;MAC/FrH,cAAc,GAAGkH,mBAAmB,CAACpD,cAAc,EAAE,CAACkD,MAAM,CAACT,KAAK,CAACc,SAAS,GAAG,CAAC,GAAG7E,gBAAgB,CAACC,eAAe,CAAC;IACxH;IACA,IAAI3C,gBAAgB,GAAG,EAAE;IACzB,IAAIyG,KAAK,CAACE,eAAe,GAAG,CAAC,IAAIjE,gBAAgB,CAACC,eAAe,KAAK,CAAC,EAAE;MACrE;MACA,IAAI2F,4BAA4B,GAAG,IAAI,CAACjB,mBAAmB,CAAC5D,KAAK,EAAEgD,KAAK,CAACE,eAAe,GAAG,CAAC,CAAC;MAC7F,IAAI2B,4BAA4B,CAACtG,UAAU,KAAKU,gBAAgB,CAACV,UAAU,EAAE;QACzE;QACAhC,gBAAgB,GAAGsI,4BAA4B,CAACtE,cAAc,EAAE;MACpE;IACJ;IACA,IAAI8B,WAAW,GAAGJ,eAAe,CAAC5F,OAAO,CAACC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,CAAC;IACxG,IAAI,CAAC4F,WAAW,EAAE;MACd,OAAO,IAAI;IACf;IACA,IAAII,YAAY,GAAGJ,WAAW,CAACI,YAAY;IAC3C,IAAIK,UAAU,GAAGT,WAAW,CAACS,UAAU;IACvC,IAAIR,UAAU,GAAGD,WAAW,CAACC,UAAU,IAAI,CAAC;IAC5C;IACA,IAAI,CAACQ,UAAU,EAAE;MACb,IAAKL,YAAY,KAAKvI,YAAY,CAACkH,MAAM,IACpCqB,YAAY,KAAKvI,YAAY,CAACwI,aAAc,EAAE;QAC/CI,UAAU,GAAG,IAAI;MACrB,CAAC,MACI;QACDA,UAAU,GAAG,EAAE;MACnB;IACJ;IACA,IAAIjC,WAAW,GAAG,IAAI,CAACiE,wBAAwB,CAAC9E,KAAK,EAAEgD,KAAK,CAACE,eAAe,EAAEF,KAAK,CAACK,WAAW,CAAC;IAChG,IAAIf,UAAU,EAAE;MACZzB,WAAW,GAAGA,WAAW,CAAC0B,SAAS,CAAC,CAAC,EAAE1B,WAAW,CAAC2B,MAAM,GAAGF,UAAU,CAAC;IAC3E;IACA,OAAO;MACHG,YAAY,EAAEA,YAAY;MAC1BK,UAAU,EAAEA,UAAU;MACtBR,UAAU,EAAEA,UAAU;MACtBzB,WAAW,EAAEA;IACjB,CAAC;EACL,CAAC;EACDnD,iCAAiC,CAACzB,SAAS,CAAC6I,wBAAwB,GAAG,UAAU9E,KAAK,EAAEC,UAAU,EAAEjB,MAAM,EAAE;IACxG,IAAI+F,QAAQ,GAAG/E,KAAK,CAACO,cAAc,CAACN,UAAU,CAAC;IAC/C,IAAIY,WAAW,GAAG9G,OAAO,CAACoH,oBAAoB,CAAC4D,QAAQ,CAAC;IACxD,IAAIlE,WAAW,CAAC2B,MAAM,GAAGxD,MAAM,GAAG,CAAC,EAAE;MACjC6B,WAAW,GAAGA,WAAW,CAAC0B,SAAS,CAAC,CAAC,EAAEvD,MAAM,GAAG,CAAC,CAAC;IACtD;IACA,OAAO6B,WAAW;EACtB,CAAC;EACDnD,iCAAiC,CAACzB,SAAS,CAAC2H,mBAAmB,GAAG,UAAU5D,KAAK,EAAEC,UAAU,EAAE+E,YAAY,EAAE;IACzGhF,KAAK,CAACiD,iBAAiB,CAAChD,UAAU,CAAC;IACnC,IAAIkD,UAAU,GAAGnD,KAAK,CAACoD,aAAa,CAACnD,UAAU,CAAC;IAChD,IAAIjB,MAAM,GAAI,OAAOgG,YAAY,KAAK,WAAW,GAAGhF,KAAK,CAACiF,gBAAgB,CAAChF,UAAU,CAAC,GAAG,CAAC,GAAG+E,YAAY,GAAG,CAAE;IAC9G,OAAO7K,sBAAsB,CAACgJ,UAAU,EAAEnE,MAAM,CAAC;EACrD,CAAC;EACD;EACAtB,iCAAiC,CAACzB,SAAS,CAACiJ,kBAAkB,GAAG,UAAU3G,UAAU,EAAE;IACnF,IAAIE,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACI,UAAU,CAAC;IAChD,IAAI,CAACE,KAAK,EAAE;MACR,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAACrD,QAAQ,IAAI,IAAI;EACjC,CAAC;EACD,OAAOsC,iCAAiC;AAC5C,CAAC,EAAG;AACJ,SAASA,iCAAiC;AAC1C,OAAO,IAAIyH,6BAA6B,GAAG,IAAIzH,iCAAiC,EAAE"},"metadata":{},"sourceType":"module"}