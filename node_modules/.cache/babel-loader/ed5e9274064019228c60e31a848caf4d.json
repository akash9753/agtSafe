{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as nodes from './cssNodes.js';\nimport { findFirst } from '../utils/arrays.js';\nvar Scope = /** @class */function () {\n  function Scope(offset, length) {\n    this.offset = offset;\n    this.length = length;\n    this.symbols = [];\n    this.parent = null;\n    this.children = [];\n  }\n  Scope.prototype.addChild = function (scope) {\n    this.children.push(scope);\n    scope.setParent(this);\n  };\n  Scope.prototype.setParent = function (scope) {\n    this.parent = scope;\n  };\n  Scope.prototype.findScope = function (offset, length) {\n    if (length === void 0) {\n      length = 0;\n    }\n    if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {\n      return this.findInScope(offset, length);\n    }\n    return null;\n  };\n  Scope.prototype.findInScope = function (offset, length) {\n    if (length === void 0) {\n      length = 0;\n    }\n    // find the first scope child that has an offset larger than offset + length\n    var end = offset + length;\n    var idx = findFirst(this.children, function (s) {\n      return s.offset > end;\n    });\n    if (idx === 0) {\n      // all scopes have offsets larger than our end\n      return this;\n    }\n    var res = this.children[idx - 1];\n    if (res.offset <= offset && res.offset + res.length >= offset + length) {\n      return res.findInScope(offset, length);\n    }\n    return this;\n  };\n  Scope.prototype.addSymbol = function (symbol) {\n    this.symbols.push(symbol);\n  };\n  Scope.prototype.getSymbol = function (name, type) {\n    for (var index = 0; index < this.symbols.length; index++) {\n      var symbol = this.symbols[index];\n      if (symbol.name === name && symbol.type === type) {\n        return symbol;\n      }\n    }\n    return null;\n  };\n  Scope.prototype.getSymbols = function () {\n    return this.symbols;\n  };\n  return Scope;\n}();\nexport { Scope };\nvar GlobalScope = /** @class */function (_super) {\n  __extends(GlobalScope, _super);\n  function GlobalScope() {\n    return _super.call(this, 0, Number.MAX_VALUE) || this;\n  }\n  return GlobalScope;\n}(Scope);\nexport { GlobalScope };\nvar Symbol = /** @class */function () {\n  function Symbol(name, value, node, type) {\n    this.name = name;\n    this.value = value;\n    this.node = node;\n    this.type = type;\n  }\n  return Symbol;\n}();\nexport { Symbol };\nvar ScopeBuilder = /** @class */function () {\n  function ScopeBuilder(scope) {\n    this.scope = scope;\n  }\n  ScopeBuilder.prototype.addSymbol = function (node, name, value, type) {\n    if (node.offset !== -1) {\n      var current = this.scope.findScope(node.offset, node.length);\n      if (current) {\n        current.addSymbol(new Symbol(name, value, node, type));\n      }\n    }\n  };\n  ScopeBuilder.prototype.addScope = function (node) {\n    if (node.offset !== -1) {\n      var current = this.scope.findScope(node.offset, node.length);\n      if (current && (current.offset !== node.offset || current.length !== node.length)) {\n        // scope already known?\n        var newScope = new Scope(node.offset, node.length);\n        current.addChild(newScope);\n        return newScope;\n      }\n      return current;\n    }\n    return null;\n  };\n  ScopeBuilder.prototype.addSymbolToChildScope = function (scopeNode, node, name, value, type) {\n    if (scopeNode && scopeNode.offset !== -1) {\n      var current = this.addScope(scopeNode); // create the scope or gets the existing one\n      if (current) {\n        current.addSymbol(new Symbol(name, value, node, type));\n      }\n    }\n  };\n  ScopeBuilder.prototype.visitNode = function (node) {\n    switch (node.type) {\n      case nodes.NodeType.Keyframe:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Keyframe);\n        return true;\n      case nodes.NodeType.CustomPropertyDeclaration:\n        return this.visitCustomPropertyDeclarationNode(node);\n      case nodes.NodeType.VariableDeclaration:\n        return this.visitVariableDeclarationNode(node);\n      case nodes.NodeType.Ruleset:\n        return this.visitRuleSet(node);\n      case nodes.NodeType.MixinDeclaration:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Mixin);\n        return true;\n      case nodes.NodeType.FunctionDeclaration:\n        this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Function);\n        return true;\n      case nodes.NodeType.FunctionParameter:\n        {\n          return this.visitFunctionParameterNode(node);\n        }\n      case nodes.NodeType.Declarations:\n        this.addScope(node);\n        return true;\n      case nodes.NodeType.For:\n        var forNode = node;\n        var scopeNode = forNode.getDeclarations();\n        if (scopeNode && forNode.variable) {\n          this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, nodes.ReferenceType.Variable);\n        }\n        return true;\n      case nodes.NodeType.Each:\n        {\n          var eachNode = node;\n          var scopeNode_1 = eachNode.getDeclarations();\n          if (scopeNode_1) {\n            var variables = eachNode.getVariables().getChildren();\n            for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n              var variable = variables_1[_i];\n              this.addSymbolToChildScope(scopeNode_1, variable, variable.getName(), void 0, nodes.ReferenceType.Variable);\n            }\n          }\n          return true;\n        }\n    }\n    return true;\n  };\n  ScopeBuilder.prototype.visitRuleSet = function (node) {\n    var current = this.scope.findScope(node.offset, node.length);\n    if (current) {\n      for (var _i = 0, _a = node.getSelectors().getChildren(); _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (child instanceof nodes.Selector) {\n          if (child.getChildren().length === 1) {\n            // only selectors with a single element can be extended\n            current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, nodes.ReferenceType.Rule));\n          }\n        }\n      }\n    }\n    return true;\n  };\n  ScopeBuilder.prototype.visitVariableDeclarationNode = function (node) {\n    var value = node.getValue() ? node.getValue().getText() : void 0;\n    this.addSymbol(node, node.getName(), value, nodes.ReferenceType.Variable);\n    return true;\n  };\n  ScopeBuilder.prototype.visitFunctionParameterNode = function (node) {\n    // parameters are part of the body scope\n    var scopeNode = node.getParent().getDeclarations();\n    if (scopeNode) {\n      var valueNode = node.getDefaultValue();\n      var value = valueNode ? valueNode.getText() : void 0;\n      this.addSymbolToChildScope(scopeNode, node, node.getName(), value, nodes.ReferenceType.Variable);\n    }\n    return true;\n  };\n  ScopeBuilder.prototype.visitCustomPropertyDeclarationNode = function (node) {\n    var value = node.getValue() ? node.getValue().getText() : '';\n    this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, nodes.ReferenceType.Variable);\n    return true;\n  };\n  ScopeBuilder.prototype.addCSSVariable = function (node, name, value, type) {\n    if (node.offset !== -1) {\n      this.scope.addSymbol(new Symbol(name, value, node, type));\n    }\n  };\n  return ScopeBuilder;\n}();\nexport { ScopeBuilder };\nvar Symbols = /** @class */function () {\n  function Symbols(node) {\n    this.global = new GlobalScope();\n    node.acceptVisitor(new ScopeBuilder(this.global));\n  }\n  Symbols.prototype.findSymbolsAtOffset = function (offset, referenceType) {\n    var scope = this.global.findScope(offset, 0);\n    var result = [];\n    var names = {};\n    while (scope) {\n      var symbols = scope.getSymbols();\n      for (var i = 0; i < symbols.length; i++) {\n        var symbol = symbols[i];\n        if (symbol.type === referenceType && !names[symbol.name]) {\n          result.push(symbol);\n          names[symbol.name] = true;\n        }\n      }\n      scope = scope.parent;\n    }\n    return result;\n  };\n  Symbols.prototype.internalFindSymbol = function (node, referenceTypes) {\n    var scopeNode = node;\n    if (node.parent instanceof nodes.FunctionParameter && node.parent.getParent() instanceof nodes.BodyDeclaration) {\n      scopeNode = node.parent.getParent().getDeclarations();\n    }\n    if (node.parent instanceof nodes.FunctionArgument && node.parent.getParent() instanceof nodes.Function) {\n      var funcId = node.parent.getParent().getIdentifier();\n      if (funcId) {\n        var functionSymbol = this.internalFindSymbol(funcId, [nodes.ReferenceType.Function]);\n        if (functionSymbol) {\n          scopeNode = functionSymbol.node.getDeclarations();\n        }\n      }\n    }\n    if (!scopeNode) {\n      return null;\n    }\n    var name = node.getText();\n    var scope = this.global.findScope(scopeNode.offset, scopeNode.length);\n    while (scope) {\n      for (var index = 0; index < referenceTypes.length; index++) {\n        var type = referenceTypes[index];\n        var symbol = scope.getSymbol(name, type);\n        if (symbol) {\n          return symbol;\n        }\n      }\n      scope = scope.parent;\n    }\n    return null;\n  };\n  Symbols.prototype.evaluateReferenceTypes = function (node) {\n    if (node instanceof nodes.Identifier) {\n      var referenceTypes = node.referenceTypes;\n      if (referenceTypes) {\n        return referenceTypes;\n      } else {\n        if (node.isCustomProperty) {\n          return [nodes.ReferenceType.Variable];\n        }\n        // are a reference to a keyframe?\n        var decl = nodes.getParentDeclaration(node);\n        if (decl) {\n          var propertyName = decl.getNonPrefixedPropertyName();\n          if ((propertyName === 'animation' || propertyName === 'animation-name') && decl.getValue() && decl.getValue().offset === node.offset) {\n            return [nodes.ReferenceType.Keyframe];\n          }\n        }\n      }\n    } else if (node instanceof nodes.Variable) {\n      return [nodes.ReferenceType.Variable];\n    }\n    var selector = node.findAParent(nodes.NodeType.Selector, nodes.NodeType.ExtendsReference);\n    if (selector) {\n      return [nodes.ReferenceType.Rule];\n    }\n    return null;\n  };\n  Symbols.prototype.findSymbolFromNode = function (node) {\n    if (!node) {\n      return null;\n    }\n    while (node.type === nodes.NodeType.Interpolation) {\n      node = node.getParent();\n    }\n    var referenceTypes = this.evaluateReferenceTypes(node);\n    if (referenceTypes) {\n      return this.internalFindSymbol(node, referenceTypes);\n    }\n    return null;\n  };\n  Symbols.prototype.matchesSymbol = function (node, symbol) {\n    if (!node) {\n      return false;\n    }\n    while (node.type === nodes.NodeType.Interpolation) {\n      node = node.getParent();\n    }\n    if (!node.matches(symbol.name)) {\n      return false;\n    }\n    var referenceTypes = this.evaluateReferenceTypes(node);\n    if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {\n      return false;\n    }\n    var nodeSymbol = this.internalFindSymbol(node, referenceTypes);\n    return nodeSymbol === symbol;\n  };\n  Symbols.prototype.findSymbol = function (name, type, offset) {\n    var scope = this.global.findScope(offset);\n    while (scope) {\n      var symbol = scope.getSymbol(name, type);\n      if (symbol) {\n        return symbol;\n      }\n      scope = scope.parent;\n    }\n    return null;\n  };\n  return Symbols;\n}();\nexport { Symbols };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nodes","findFirst","Scope","offset","length","symbols","parent","children","addChild","scope","push","setParent","findScope","findInScope","end","idx","s","res","addSymbol","symbol","getSymbol","name","type","index","getSymbols","GlobalScope","_super","call","Number","MAX_VALUE","Symbol","value","node","ScopeBuilder","current","addScope","newScope","addSymbolToChildScope","scopeNode","visitNode","NodeType","Keyframe","getName","ReferenceType","CustomPropertyDeclaration","visitCustomPropertyDeclarationNode","VariableDeclaration","visitVariableDeclarationNode","Ruleset","visitRuleSet","MixinDeclaration","Mixin","FunctionDeclaration","Function","FunctionParameter","visitFunctionParameterNode","Declarations","For","forNode","getDeclarations","variable","Variable","Each","eachNode","scopeNode_1","variables","getVariables","getChildren","_i","variables_1","_a","getSelectors","child","Selector","getChild","getText","Rule","getValue","getParent","valueNode","getDefaultValue","addCSSVariable","getProperty","Symbols","global","acceptVisitor","findSymbolsAtOffset","referenceType","result","names","i","internalFindSymbol","referenceTypes","BodyDeclaration","FunctionArgument","funcId","getIdentifier","functionSymbol","evaluateReferenceTypes","Identifier","isCustomProperty","decl","getParentDeclaration","propertyName","getNonPrefixedPropertyName","selector","findAParent","ExtendsReference","findSymbolFromNode","Interpolation","matchesSymbol","matches","indexOf","nodeSymbol","findSymbol"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/parser/cssSymbolScope.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as nodes from './cssNodes.js';\nimport { findFirst } from '../utils/arrays.js';\nvar Scope = /** @class */ (function () {\n    function Scope(offset, length) {\n        this.offset = offset;\n        this.length = length;\n        this.symbols = [];\n        this.parent = null;\n        this.children = [];\n    }\n    Scope.prototype.addChild = function (scope) {\n        this.children.push(scope);\n        scope.setParent(this);\n    };\n    Scope.prototype.setParent = function (scope) {\n        this.parent = scope;\n    };\n    Scope.prototype.findScope = function (offset, length) {\n        if (length === void 0) { length = 0; }\n        if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {\n            return this.findInScope(offset, length);\n        }\n        return null;\n    };\n    Scope.prototype.findInScope = function (offset, length) {\n        if (length === void 0) { length = 0; }\n        // find the first scope child that has an offset larger than offset + length\n        var end = offset + length;\n        var idx = findFirst(this.children, function (s) { return s.offset > end; });\n        if (idx === 0) {\n            // all scopes have offsets larger than our end\n            return this;\n        }\n        var res = this.children[idx - 1];\n        if (res.offset <= offset && res.offset + res.length >= offset + length) {\n            return res.findInScope(offset, length);\n        }\n        return this;\n    };\n    Scope.prototype.addSymbol = function (symbol) {\n        this.symbols.push(symbol);\n    };\n    Scope.prototype.getSymbol = function (name, type) {\n        for (var index = 0; index < this.symbols.length; index++) {\n            var symbol = this.symbols[index];\n            if (symbol.name === name && symbol.type === type) {\n                return symbol;\n            }\n        }\n        return null;\n    };\n    Scope.prototype.getSymbols = function () {\n        return this.symbols;\n    };\n    return Scope;\n}());\nexport { Scope };\nvar GlobalScope = /** @class */ (function (_super) {\n    __extends(GlobalScope, _super);\n    function GlobalScope() {\n        return _super.call(this, 0, Number.MAX_VALUE) || this;\n    }\n    return GlobalScope;\n}(Scope));\nexport { GlobalScope };\nvar Symbol = /** @class */ (function () {\n    function Symbol(name, value, node, type) {\n        this.name = name;\n        this.value = value;\n        this.node = node;\n        this.type = type;\n    }\n    return Symbol;\n}());\nexport { Symbol };\nvar ScopeBuilder = /** @class */ (function () {\n    function ScopeBuilder(scope) {\n        this.scope = scope;\n    }\n    ScopeBuilder.prototype.addSymbol = function (node, name, value, type) {\n        if (node.offset !== -1) {\n            var current = this.scope.findScope(node.offset, node.length);\n            if (current) {\n                current.addSymbol(new Symbol(name, value, node, type));\n            }\n        }\n    };\n    ScopeBuilder.prototype.addScope = function (node) {\n        if (node.offset !== -1) {\n            var current = this.scope.findScope(node.offset, node.length);\n            if (current && (current.offset !== node.offset || current.length !== node.length)) { // scope already known?\n                var newScope = new Scope(node.offset, node.length);\n                current.addChild(newScope);\n                return newScope;\n            }\n            return current;\n        }\n        return null;\n    };\n    ScopeBuilder.prototype.addSymbolToChildScope = function (scopeNode, node, name, value, type) {\n        if (scopeNode && scopeNode.offset !== -1) {\n            var current = this.addScope(scopeNode); // create the scope or gets the existing one\n            if (current) {\n                current.addSymbol(new Symbol(name, value, node, type));\n            }\n        }\n    };\n    ScopeBuilder.prototype.visitNode = function (node) {\n        switch (node.type) {\n            case nodes.NodeType.Keyframe:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Keyframe);\n                return true;\n            case nodes.NodeType.CustomPropertyDeclaration:\n                return this.visitCustomPropertyDeclarationNode(node);\n            case nodes.NodeType.VariableDeclaration:\n                return this.visitVariableDeclarationNode(node);\n            case nodes.NodeType.Ruleset:\n                return this.visitRuleSet(node);\n            case nodes.NodeType.MixinDeclaration:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Mixin);\n                return true;\n            case nodes.NodeType.FunctionDeclaration:\n                this.addSymbol(node, node.getName(), void 0, nodes.ReferenceType.Function);\n                return true;\n            case nodes.NodeType.FunctionParameter: {\n                return this.visitFunctionParameterNode(node);\n            }\n            case nodes.NodeType.Declarations:\n                this.addScope(node);\n                return true;\n            case nodes.NodeType.For:\n                var forNode = node;\n                var scopeNode = forNode.getDeclarations();\n                if (scopeNode && forNode.variable) {\n                    this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, nodes.ReferenceType.Variable);\n                }\n                return true;\n            case nodes.NodeType.Each: {\n                var eachNode = node;\n                var scopeNode_1 = eachNode.getDeclarations();\n                if (scopeNode_1) {\n                    var variables = eachNode.getVariables().getChildren();\n                    for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n                        var variable = variables_1[_i];\n                        this.addSymbolToChildScope(scopeNode_1, variable, variable.getName(), void 0, nodes.ReferenceType.Variable);\n                    }\n                }\n                return true;\n            }\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitRuleSet = function (node) {\n        var current = this.scope.findScope(node.offset, node.length);\n        if (current) {\n            for (var _i = 0, _a = node.getSelectors().getChildren(); _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child instanceof nodes.Selector) {\n                    if (child.getChildren().length === 1) { // only selectors with a single element can be extended\n                        current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, nodes.ReferenceType.Rule));\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitVariableDeclarationNode = function (node) {\n        var value = node.getValue() ? node.getValue().getText() : void 0;\n        this.addSymbol(node, node.getName(), value, nodes.ReferenceType.Variable);\n        return true;\n    };\n    ScopeBuilder.prototype.visitFunctionParameterNode = function (node) {\n        // parameters are part of the body scope\n        var scopeNode = node.getParent().getDeclarations();\n        if (scopeNode) {\n            var valueNode = node.getDefaultValue();\n            var value = valueNode ? valueNode.getText() : void 0;\n            this.addSymbolToChildScope(scopeNode, node, node.getName(), value, nodes.ReferenceType.Variable);\n        }\n        return true;\n    };\n    ScopeBuilder.prototype.visitCustomPropertyDeclarationNode = function (node) {\n        var value = node.getValue() ? node.getValue().getText() : '';\n        this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, nodes.ReferenceType.Variable);\n        return true;\n    };\n    ScopeBuilder.prototype.addCSSVariable = function (node, name, value, type) {\n        if (node.offset !== -1) {\n            this.scope.addSymbol(new Symbol(name, value, node, type));\n        }\n    };\n    return ScopeBuilder;\n}());\nexport { ScopeBuilder };\nvar Symbols = /** @class */ (function () {\n    function Symbols(node) {\n        this.global = new GlobalScope();\n        node.acceptVisitor(new ScopeBuilder(this.global));\n    }\n    Symbols.prototype.findSymbolsAtOffset = function (offset, referenceType) {\n        var scope = this.global.findScope(offset, 0);\n        var result = [];\n        var names = {};\n        while (scope) {\n            var symbols = scope.getSymbols();\n            for (var i = 0; i < symbols.length; i++) {\n                var symbol = symbols[i];\n                if (symbol.type === referenceType && !names[symbol.name]) {\n                    result.push(symbol);\n                    names[symbol.name] = true;\n                }\n            }\n            scope = scope.parent;\n        }\n        return result;\n    };\n    Symbols.prototype.internalFindSymbol = function (node, referenceTypes) {\n        var scopeNode = node;\n        if (node.parent instanceof nodes.FunctionParameter && node.parent.getParent() instanceof nodes.BodyDeclaration) {\n            scopeNode = node.parent.getParent().getDeclarations();\n        }\n        if (node.parent instanceof nodes.FunctionArgument && node.parent.getParent() instanceof nodes.Function) {\n            var funcId = node.parent.getParent().getIdentifier();\n            if (funcId) {\n                var functionSymbol = this.internalFindSymbol(funcId, [nodes.ReferenceType.Function]);\n                if (functionSymbol) {\n                    scopeNode = functionSymbol.node.getDeclarations();\n                }\n            }\n        }\n        if (!scopeNode) {\n            return null;\n        }\n        var name = node.getText();\n        var scope = this.global.findScope(scopeNode.offset, scopeNode.length);\n        while (scope) {\n            for (var index = 0; index < referenceTypes.length; index++) {\n                var type = referenceTypes[index];\n                var symbol = scope.getSymbol(name, type);\n                if (symbol) {\n                    return symbol;\n                }\n            }\n            scope = scope.parent;\n        }\n        return null;\n    };\n    Symbols.prototype.evaluateReferenceTypes = function (node) {\n        if (node instanceof nodes.Identifier) {\n            var referenceTypes = node.referenceTypes;\n            if (referenceTypes) {\n                return referenceTypes;\n            }\n            else {\n                if (node.isCustomProperty) {\n                    return [nodes.ReferenceType.Variable];\n                }\n                // are a reference to a keyframe?\n                var decl = nodes.getParentDeclaration(node);\n                if (decl) {\n                    var propertyName = decl.getNonPrefixedPropertyName();\n                    if ((propertyName === 'animation' || propertyName === 'animation-name')\n                        && decl.getValue() && decl.getValue().offset === node.offset) {\n                        return [nodes.ReferenceType.Keyframe];\n                    }\n                }\n            }\n        }\n        else if (node instanceof nodes.Variable) {\n            return [nodes.ReferenceType.Variable];\n        }\n        var selector = node.findAParent(nodes.NodeType.Selector, nodes.NodeType.ExtendsReference);\n        if (selector) {\n            return [nodes.ReferenceType.Rule];\n        }\n        return null;\n    };\n    Symbols.prototype.findSymbolFromNode = function (node) {\n        if (!node) {\n            return null;\n        }\n        while (node.type === nodes.NodeType.Interpolation) {\n            node = node.getParent();\n        }\n        var referenceTypes = this.evaluateReferenceTypes(node);\n        if (referenceTypes) {\n            return this.internalFindSymbol(node, referenceTypes);\n        }\n        return null;\n    };\n    Symbols.prototype.matchesSymbol = function (node, symbol) {\n        if (!node) {\n            return false;\n        }\n        while (node.type === nodes.NodeType.Interpolation) {\n            node = node.getParent();\n        }\n        if (!node.matches(symbol.name)) {\n            return false;\n        }\n        var referenceTypes = this.evaluateReferenceTypes(node);\n        if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {\n            return false;\n        }\n        var nodeSymbol = this.internalFindSymbol(node, referenceTypes);\n        return nodeSymbol === symbol;\n    };\n    Symbols.prototype.findSymbol = function (name, type, offset) {\n        var scope = this.global.findScope(offset);\n        while (scope) {\n            var symbol = scope.getSymbol(name, type);\n            if (symbol) {\n                return symbol;\n            }\n            scope = scope.parent;\n        }\n        return null;\n    };\n    return Symbols;\n}());\nexport { Symbols };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}