{"ast":null,"code":"export default {\n  format: \"{reason} at line {line}\",\n  symbols: {\n    colon: \"colon\",\n    // :\n    comma: \"comma\",\n    // ,  ،  、\n    semicolon: \"semicolon\",\n    // ;\n    slash: \"slash\",\n    // /  relevant for comment syntax support\n    backslash: \"backslash\",\n    // \\  relevant for escaping character\n    brackets: {\n      round: \"round brackets\",\n      // ( )\n      square: \"square brackets\",\n      // [ ]\n      curly: \"curly brackets\",\n      // { }\n      angle: \"angle brackets\" // < >\n    },\n\n    period: \"period\",\n    // . Also known as full point, full stop, or dot\n    quotes: {\n      single: \"single quote\",\n      // '\n      double: \"double quote\",\n      // \"\n      grave: \"grave accent\" // ` used on Javascript ES6 Syntax for String Templates\n    },\n\n    space: \"space\",\n    //       \n    ampersand: \"ampersand\",\n    //\t&\n    asterisk: \"asterisk\",\n    //\t*  relevant for some comment sytanx\n    at: \"at sign\",\n    //\t@  multiple uses in other coding languages including certain data types\n    equals: \"equals sign\",\n    //\t=\n    hash: \"hash\",\n    //\t#\n    percent: \"percent\",\n    //\t%\n    plus: \"plus\",\n    //\t+\n    minus: \"minus\",\n    //\t−\n    dash: \"dash\",\n    //\t−\n    hyphen: \"hyphen\",\n    //\t−\n    tilde: \"tilde\",\n    //\t~\n    underscore: \"underscore\",\n    //\t_\n    bar: \"vertical bar\" //\t|\n  },\n\n  types: {\n    key: \"key\",\n    value: \"value\",\n    number: \"number\",\n    string: \"string\",\n    primitive: \"primitive\",\n    boolean: \"boolean\",\n    character: \"character\",\n    integer: \"integer\",\n    array: \"array\",\n    float: \"float\" //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures\n  },\n\n  invalidToken: {\n    tokenSequence: {\n      prohibited: \"'{firstToken}' token cannot be followed by '{secondToken}' token(s)\",\n      permitted: \"'{firstToken}' token can only be followed by '{secondToken}' token(s)\"\n    },\n    termSequence: {\n      prohibited: \"A {firstTerm} cannot be followed by a {secondTerm}\",\n      permitted: \"A {firstTerm} can only be followed by a {secondTerm}\"\n    },\n    double: \"'{token}' token cannot be followed by another '{token}' token\",\n    useInstead: \"'{badToken}' token is not accepted. Use '{goodToken}' instead\",\n    unexpected: \"Unexpected '{token}' token found\"\n  },\n  brace: {\n    curly: {\n      missingOpen: \"Missing '{' open curly brace\",\n      missingClose: \"Open '{' curly brace is missing closing '}' curly brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '{}' curly braces\"\n    },\n    square: {\n      missingOpen: \"Missing '[' open square brace\",\n      missingClose: \"Open '[' square brace is missing closing ']' square brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '[]' square braces\"\n    }\n  },\n  string: {\n    missingOpen: \"Missing/invalid opening string '{quote}' token\",\n    missingClose: \"Missing/invalid closing string '{quote}' token\",\n    mustBeWrappedByQuotes: \"Strings must be wrapped by quotes\",\n    nonAlphanumeric: \"Non-alphanumeric token '{token}' is not allowed outside string notation\",\n    unexpectedKey: \"Unexpected key found at string position\"\n  },\n  key: {\n    numberAndLetterMissingQuotes: \"Key beginning with number and containing letters must be wrapped by quotes\",\n    spaceMissingQuotes: \"Key containing space must be wrapped by quotes\",\n    unexpectedString: \"Unexpected string found at key position\"\n  },\n  noTrailingOrLeadingComma: \"Trailing or leading commas in arrays and objects are not permitted\"\n};","map":{"version":3,"names":["format","symbols","colon","comma","semicolon","slash","backslash","brackets","round","square","curly","angle","period","quotes","single","double","grave","space","ampersand","asterisk","at","equals","hash","percent","plus","minus","dash","hyphen","tilde","underscore","bar","types","key","value","number","string","primitive","boolean","character","integer","array","float","invalidToken","tokenSequence","prohibited","permitted","termSequence","useInstead","unexpected","brace","missingOpen","missingClose","cannotWrap","mustBeWrappedByQuotes","nonAlphanumeric","unexpectedKey","numberAndLetterMissingQuotes","spaceMissingQuotes","unexpectedString","noTrailingOrLeadingComma"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/react-json-editor-ajrm/es/locale/en.js"],"sourcesContent":["export default {\n  format: \"{reason} at line {line}\",\n  symbols: {\n    colon: \"colon\",\n    // :\n    comma: \"comma\",\n    // ,  ،  、\n    semicolon: \"semicolon\",\n    // ;\n    slash: \"slash\",\n    // /  relevant for comment syntax support\n    backslash: \"backslash\",\n    // \\  relevant for escaping character\n    brackets: {\n      round: \"round brackets\",\n      // ( )\n      square: \"square brackets\",\n      // [ ]\n      curly: \"curly brackets\",\n      // { }\n      angle: \"angle brackets\" // < >\n\n    },\n    period: \"period\",\n    // . Also known as full point, full stop, or dot\n    quotes: {\n      single: \"single quote\",\n      // '\n      double: \"double quote\",\n      // \"\n      grave: \"grave accent\" // ` used on Javascript ES6 Syntax for String Templates\n\n    },\n    space: \"space\",\n    //       \n    ampersand: \"ampersand\",\n    //\t&\n    asterisk: \"asterisk\",\n    //\t*  relevant for some comment sytanx\n    at: \"at sign\",\n    //\t@  multiple uses in other coding languages including certain data types\n    equals: \"equals sign\",\n    //\t=\n    hash: \"hash\",\n    //\t#\n    percent: \"percent\",\n    //\t%\n    plus: \"plus\",\n    //\t+\n    minus: \"minus\",\n    //\t−\n    dash: \"dash\",\n    //\t−\n    hyphen: \"hyphen\",\n    //\t−\n    tilde: \"tilde\",\n    //\t~\n    underscore: \"underscore\",\n    //\t_\n    bar: \"vertical bar\" //\t|\n\n  },\n  types: {\n    key: \"key\",\n    value: \"value\",\n    number: \"number\",\n    string: \"string\",\n    primitive: \"primitive\",\n    boolean: \"boolean\",\n    character: \"character\",\n    integer: \"integer\",\n    array: \"array\",\n    float: \"float\" //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures\n\n  },\n  invalidToken: {\n    tokenSequence: {\n      prohibited: \"'{firstToken}' token cannot be followed by '{secondToken}' token(s)\",\n      permitted: \"'{firstToken}' token can only be followed by '{secondToken}' token(s)\"\n    },\n    termSequence: {\n      prohibited: \"A {firstTerm} cannot be followed by a {secondTerm}\",\n      permitted: \"A {firstTerm} can only be followed by a {secondTerm}\"\n    },\n    double: \"'{token}' token cannot be followed by another '{token}' token\",\n    useInstead: \"'{badToken}' token is not accepted. Use '{goodToken}' instead\",\n    unexpected: \"Unexpected '{token}' token found\"\n  },\n  brace: {\n    curly: {\n      missingOpen: \"Missing '{' open curly brace\",\n      missingClose: \"Open '{' curly brace is missing closing '}' curly brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '{}' curly braces\"\n    },\n    square: {\n      missingOpen: \"Missing '[' open square brace\",\n      missingClose: \"Open '[' square brace is missing closing ']' square brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '[]' square braces\"\n    }\n  },\n  string: {\n    missingOpen: \"Missing/invalid opening string '{quote}' token\",\n    missingClose: \"Missing/invalid closing string '{quote}' token\",\n    mustBeWrappedByQuotes: \"Strings must be wrapped by quotes\",\n    nonAlphanumeric: \"Non-alphanumeric token '{token}' is not allowed outside string notation\",\n    unexpectedKey: \"Unexpected key found at string position\"\n  },\n  key: {\n    numberAndLetterMissingQuotes: \"Key beginning with number and containing letters must be wrapped by quotes\",\n    spaceMissingQuotes: \"Key containing space must be wrapped by quotes\",\n    unexpectedString: \"Unexpected string found at key position\"\n  },\n  noTrailingOrLeadingComma: \"Trailing or leading commas in arrays and objects are not permitted\"\n};"],"mappings":"AAAA,eAAe;EACbA,MAAM,EAAE,yBAAyB;EACjCC,OAAO,EAAE;IACPC,KAAK,EAAE,OAAO;IACd;IACAC,KAAK,EAAE,OAAO;IACd;IACAC,SAAS,EAAE,WAAW;IACtB;IACAC,KAAK,EAAE,OAAO;IACd;IACAC,SAAS,EAAE,WAAW;IACtB;IACAC,QAAQ,EAAE;MACRC,KAAK,EAAE,gBAAgB;MACvB;MACAC,MAAM,EAAE,iBAAiB;MACzB;MACAC,KAAK,EAAE,gBAAgB;MACvB;MACAC,KAAK,EAAE,gBAAgB,CAAC;IAE1B,CAAC;;IACDC,MAAM,EAAE,QAAQ;IAChB;IACAC,MAAM,EAAE;MACNC,MAAM,EAAE,cAAc;MACtB;MACAC,MAAM,EAAE,cAAc;MACtB;MACAC,KAAK,EAAE,cAAc,CAAC;IAExB,CAAC;;IACDC,KAAK,EAAE,OAAO;IACd;IACAC,SAAS,EAAE,WAAW;IACtB;IACAC,QAAQ,EAAE,UAAU;IACpB;IACAC,EAAE,EAAE,SAAS;IACb;IACAC,MAAM,EAAE,aAAa;IACrB;IACAC,IAAI,EAAE,MAAM;IACZ;IACAC,OAAO,EAAE,SAAS;IAClB;IACAC,IAAI,EAAE,MAAM;IACZ;IACAC,KAAK,EAAE,OAAO;IACd;IACAC,IAAI,EAAE,MAAM;IACZ;IACAC,MAAM,EAAE,QAAQ;IAChB;IACAC,KAAK,EAAE,OAAO;IACd;IACAC,UAAU,EAAE,YAAY;IACxB;IACAC,GAAG,EAAE,cAAc,CAAC;EAEtB,CAAC;;EACDC,KAAK,EAAE;IACLC,GAAG,EAAE,KAAK;IACVC,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAE,WAAW;IACtBC,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE,WAAW;IACtBC,OAAO,EAAE,SAAS;IAClBC,KAAK,EAAE,OAAO;IACdC,KAAK,EAAE,OAAO,CAAC;EAEjB,CAAC;;EACDC,YAAY,EAAE;IACZC,aAAa,EAAE;MACbC,UAAU,EAAE,qEAAqE;MACjFC,SAAS,EAAE;IACb,CAAC;IACDC,YAAY,EAAE;MACZF,UAAU,EAAE,oDAAoD;MAChEC,SAAS,EAAE;IACb,CAAC;IACD9B,MAAM,EAAE,+DAA+D;IACvEgC,UAAU,EAAE,+DAA+D;IAC3EC,UAAU,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACLvC,KAAK,EAAE;MACLwC,WAAW,EAAE,8BAA8B;MAC3CC,YAAY,EAAE,yDAAyD;MACvEC,UAAU,EAAE;IACd,CAAC;IACD3C,MAAM,EAAE;MACNyC,WAAW,EAAE,+BAA+B;MAC5CC,YAAY,EAAE,2DAA2D;MACzEC,UAAU,EAAE;IACd;EACF,CAAC;EACDjB,MAAM,EAAE;IACNe,WAAW,EAAE,gDAAgD;IAC7DC,YAAY,EAAE,gDAAgD;IAC9DE,qBAAqB,EAAE,mCAAmC;IAC1DC,eAAe,EAAE,yEAAyE;IAC1FC,aAAa,EAAE;EACjB,CAAC;EACDvB,GAAG,EAAE;IACHwB,4BAA4B,EAAE,4EAA4E;IAC1GC,kBAAkB,EAAE,gDAAgD;IACpEC,gBAAgB,EAAE;EACpB,CAAC;EACDC,wBAAwB,EAAE;AAC5B,CAAC"},"metadata":{},"sourceType":"module"}