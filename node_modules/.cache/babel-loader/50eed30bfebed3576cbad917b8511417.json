{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { basename, posix } from './path.js';\nimport { endsWith, startsWithUTF8BOM } from './strings.js';\nimport { match } from './glob.js';\nimport { Schemas } from './network.js';\nimport { DataUri } from './resources.js';\nexport var MIME_TEXT = 'text/plain';\nexport var MIME_UNKNOWN = 'application/unknown';\nvar registeredAssociations = [];\nvar nonUserRegisteredAssociations = [];\nvar userRegisteredAssociations = [];\n/**\r\n * Associate a text mime to the registry.\r\n */\nexport function registerTextMime(association, warnOnOverwrite) {\n  if (warnOnOverwrite === void 0) {\n    warnOnOverwrite = false;\n  }\n  // Register\n  var associationItem = toTextMimeAssociationItem(association);\n  registeredAssociations.push(associationItem);\n  if (!associationItem.userConfigured) {\n    nonUserRegisteredAssociations.push(associationItem);\n  } else {\n    userRegisteredAssociations.push(associationItem);\n  }\n  // Check for conflicts unless this is a user configured association\n  if (warnOnOverwrite && !associationItem.userConfigured) {\n    registeredAssociations.forEach(function (a) {\n      if (a.mime === associationItem.mime || a.userConfigured) {\n        return; // same mime or userConfigured is ok\n      }\n\n      if (associationItem.extension && a.extension === associationItem.extension) {\n        console.warn(\"Overwriting extension <<\" + associationItem.extension + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n      if (associationItem.filename && a.filename === associationItem.filename) {\n        console.warn(\"Overwriting filename <<\" + associationItem.filename + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n      if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n        console.warn(\"Overwriting filepattern <<\" + associationItem.filepattern + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n      if (associationItem.firstline && a.firstline === associationItem.firstline) {\n        console.warn(\"Overwriting firstline <<\" + associationItem.firstline + \">> to now point to mime <<\" + associationItem.mime + \">>\");\n      }\n    });\n  }\n}\nfunction toTextMimeAssociationItem(association) {\n  return {\n    id: association.id,\n    mime: association.mime,\n    filename: association.filename,\n    extension: association.extension,\n    filepattern: association.filepattern,\n    firstline: association.firstline,\n    userConfigured: association.userConfigured,\n    filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n    extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n    filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n    filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n  };\n}\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\nexport function guessMimeTypes(resource, firstLine) {\n  var path;\n  if (resource) {\n    switch (resource.scheme) {\n      case Schemas.file:\n        path = resource.fsPath;\n        break;\n      case Schemas.data:\n        var metadata = DataUri.parseMetaData(resource);\n        path = metadata.get(DataUri.META_DATA_LABEL);\n        break;\n      default:\n        path = resource.path;\n    }\n  }\n  if (!path) {\n    return [MIME_UNKNOWN];\n  }\n  path = path.toLowerCase();\n  var filename = basename(path);\n  // 1.) User configured mappings have highest priority\n  var configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n  if (configuredMime) {\n    return [configuredMime, MIME_TEXT];\n  }\n  // 2.) Registered mappings have middle priority\n  var registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n  if (registeredMime) {\n    return [registeredMime, MIME_TEXT];\n  }\n  // 3.) Firstline has lowest priority\n  if (firstLine) {\n    var firstlineMime = guessMimeTypeByFirstline(firstLine);\n    if (firstlineMime) {\n      return [firstlineMime, MIME_TEXT];\n    }\n  }\n  return [MIME_UNKNOWN];\n}\nfunction guessMimeTypeByPath(path, filename, associations) {\n  var filenameMatch = null;\n  var patternMatch = null;\n  var extensionMatch = null;\n  // We want to prioritize associations based on the order they are registered so that the last registered\n  // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n  for (var i = associations.length - 1; i >= 0; i--) {\n    var association = associations[i];\n    // First exact name match\n    if (filename === association.filenameLowercase) {\n      filenameMatch = association;\n      break; // take it!\n    }\n    // Longest pattern match\n    if (association.filepattern) {\n      if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n        var target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n        if (match(association.filepatternLowercase, target)) {\n          patternMatch = association;\n        }\n      }\n    }\n    // Longest extension match\n    if (association.extension) {\n      if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n        if (endsWith(filename, association.extensionLowercase)) {\n          extensionMatch = association;\n        }\n      }\n    }\n  }\n  // 1.) Exact name match has second highest prio\n  if (filenameMatch) {\n    return filenameMatch.mime;\n  }\n  // 2.) Match on pattern\n  if (patternMatch) {\n    return patternMatch.mime;\n  }\n  // 3.) Match on extension comes next\n  if (extensionMatch) {\n    return extensionMatch.mime;\n  }\n  return null;\n}\nfunction guessMimeTypeByFirstline(firstLine) {\n  if (startsWithUTF8BOM(firstLine)) {\n    firstLine = firstLine.substr(1);\n  }\n  if (firstLine.length > 0) {\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\n    for (var i = registeredAssociations.length - 1; i >= 0; i--) {\n      var association = registeredAssociations[i];\n      if (!association.firstline) {\n        continue;\n      }\n      var matches = firstLine.match(association.firstline);\n      if (matches && matches.length > 0) {\n        return association.mime;\n      }\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["basename","posix","endsWith","startsWithUTF8BOM","match","Schemas","DataUri","MIME_TEXT","MIME_UNKNOWN","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerTextMime","association","warnOnOverwrite","associationItem","toTextMimeAssociationItem","push","userConfigured","forEach","a","mime","extension","console","warn","filename","filepattern","firstline","id","filenameLowercase","toLowerCase","undefined","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","guessMimeTypes","resource","firstLine","path","scheme","file","fsPath","data","metadata","parseMetaData","get","META_DATA_LABEL","configuredMime","guessMimeTypeByPath","registeredMime","firstlineMime","guessMimeTypeByFirstline","associations","filenameMatch","patternMatch","extensionMatch","i","length","target","substr","matches"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/mime.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { basename, posix } from './path.js';\r\nimport { endsWith, startsWithUTF8BOM } from './strings.js';\r\nimport { match } from './glob.js';\r\nimport { Schemas } from './network.js';\r\nimport { DataUri } from './resources.js';\r\nexport var MIME_TEXT = 'text/plain';\r\nexport var MIME_UNKNOWN = 'application/unknown';\r\nvar registeredAssociations = [];\r\nvar nonUserRegisteredAssociations = [];\r\nvar userRegisteredAssociations = [];\r\n/**\r\n * Associate a text mime to the registry.\r\n */\r\nexport function registerTextMime(association, warnOnOverwrite) {\r\n    if (warnOnOverwrite === void 0) { warnOnOverwrite = false; }\r\n    // Register\r\n    var associationItem = toTextMimeAssociationItem(association);\r\n    registeredAssociations.push(associationItem);\r\n    if (!associationItem.userConfigured) {\r\n        nonUserRegisteredAssociations.push(associationItem);\r\n    }\r\n    else {\r\n        userRegisteredAssociations.push(associationItem);\r\n    }\r\n    // Check for conflicts unless this is a user configured association\r\n    if (warnOnOverwrite && !associationItem.userConfigured) {\r\n        registeredAssociations.forEach(function (a) {\r\n            if (a.mime === associationItem.mime || a.userConfigured) {\r\n                return; // same mime or userConfigured is ok\r\n            }\r\n            if (associationItem.extension && a.extension === associationItem.extension) {\r\n                console.warn(\"Overwriting extension <<\" + associationItem.extension + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.filename && a.filename === associationItem.filename) {\r\n                console.warn(\"Overwriting filename <<\" + associationItem.filename + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\r\n                console.warn(\"Overwriting filepattern <<\" + associationItem.filepattern + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\r\n                console.warn(\"Overwriting firstline <<\" + associationItem.firstline + \">> to now point to mime <<\" + associationItem.mime + \">>\");\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction toTextMimeAssociationItem(association) {\r\n    return {\r\n        id: association.id,\r\n        mime: association.mime,\r\n        filename: association.filename,\r\n        extension: association.extension,\r\n        filepattern: association.filepattern,\r\n        firstline: association.firstline,\r\n        userConfigured: association.userConfigured,\r\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\r\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\r\n        filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\r\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\r\n    };\r\n}\r\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\r\nexport function guessMimeTypes(resource, firstLine) {\r\n    var path;\r\n    if (resource) {\r\n        switch (resource.scheme) {\r\n            case Schemas.file:\r\n                path = resource.fsPath;\r\n                break;\r\n            case Schemas.data:\r\n                var metadata = DataUri.parseMetaData(resource);\r\n                path = metadata.get(DataUri.META_DATA_LABEL);\r\n                break;\r\n            default:\r\n                path = resource.path;\r\n        }\r\n    }\r\n    if (!path) {\r\n        return [MIME_UNKNOWN];\r\n    }\r\n    path = path.toLowerCase();\r\n    var filename = basename(path);\r\n    // 1.) User configured mappings have highest priority\r\n    var configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\r\n    if (configuredMime) {\r\n        return [configuredMime, MIME_TEXT];\r\n    }\r\n    // 2.) Registered mappings have middle priority\r\n    var registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\r\n    if (registeredMime) {\r\n        return [registeredMime, MIME_TEXT];\r\n    }\r\n    // 3.) Firstline has lowest priority\r\n    if (firstLine) {\r\n        var firstlineMime = guessMimeTypeByFirstline(firstLine);\r\n        if (firstlineMime) {\r\n            return [firstlineMime, MIME_TEXT];\r\n        }\r\n    }\r\n    return [MIME_UNKNOWN];\r\n}\r\nfunction guessMimeTypeByPath(path, filename, associations) {\r\n    var filenameMatch = null;\r\n    var patternMatch = null;\r\n    var extensionMatch = null;\r\n    // We want to prioritize associations based on the order they are registered so that the last registered\r\n    // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\r\n    for (var i = associations.length - 1; i >= 0; i--) {\r\n        var association = associations[i];\r\n        // First exact name match\r\n        if (filename === association.filenameLowercase) {\r\n            filenameMatch = association;\r\n            break; // take it!\r\n        }\r\n        // Longest pattern match\r\n        if (association.filepattern) {\r\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\r\n                var target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\r\n                if (match(association.filepatternLowercase, target)) {\r\n                    patternMatch = association;\r\n                }\r\n            }\r\n        }\r\n        // Longest extension match\r\n        if (association.extension) {\r\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\r\n                if (endsWith(filename, association.extensionLowercase)) {\r\n                    extensionMatch = association;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 1.) Exact name match has second highest prio\r\n    if (filenameMatch) {\r\n        return filenameMatch.mime;\r\n    }\r\n    // 2.) Match on pattern\r\n    if (patternMatch) {\r\n        return patternMatch.mime;\r\n    }\r\n    // 3.) Match on extension comes next\r\n    if (extensionMatch) {\r\n        return extensionMatch.mime;\r\n    }\r\n    return null;\r\n}\r\nfunction guessMimeTypeByFirstline(firstLine) {\r\n    if (startsWithUTF8BOM(firstLine)) {\r\n        firstLine = firstLine.substr(1);\r\n    }\r\n    if (firstLine.length > 0) {\r\n        // We want to prioritize associations based on the order they are registered so that the last registered\r\n        // association wins over all other. This is for https://github.com/Microsoft/vscode/issues/20074\r\n        for (var i = registeredAssociations.length - 1; i >= 0; i--) {\r\n            var association = registeredAssociations[i];\r\n            if (!association.firstline) {\r\n                continue;\r\n            }\r\n            var matches = firstLine.match(association.firstline);\r\n            if (matches && matches.length > 0) {\r\n                return association.mime;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}