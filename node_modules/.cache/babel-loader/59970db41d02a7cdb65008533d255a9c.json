{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\nvar PieceTreeTextBufferFactory = /** @class */function () {\n  function PieceTreeTextBufferFactory(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _isBasicASCII, _normalizeEOL) {\n    this._chunks = _chunks;\n    this._bom = _bom;\n    this._cr = _cr;\n    this._lf = _lf;\n    this._crlf = _crlf;\n    this._containsRTL = _containsRTL;\n    this._isBasicASCII = _isBasicASCII;\n    this._normalizeEOL = _normalizeEOL;\n  }\n  PieceTreeTextBufferFactory.prototype._getEOL = function (defaultEOL) {\n    var totalEOLCount = this._cr + this._lf + this._crlf;\n    var totalCRCount = this._cr + this._crlf;\n    if (totalEOLCount === 0) {\n      // This is an empty file or a file with precisely one line\n      return defaultEOL === 1 /* LF */ ? '\\n' : '\\r\\n';\n    }\n    if (totalCRCount > totalEOLCount / 2) {\n      // More than half of the file contains \\r\\n ending lines\n      return '\\r\\n';\n    }\n    // At least one line more ends in \\n\n    return '\\n';\n  };\n  PieceTreeTextBufferFactory.prototype.create = function (defaultEOL) {\n    var eol = this._getEOL(defaultEOL);\n    var chunks = this._chunks;\n    if (this._normalizeEOL && (eol === '\\r\\n' && (this._cr > 0 || this._lf > 0) || eol === '\\n' && (this._cr > 0 || this._crlf > 0))) {\n      // Normalize pieces\n      for (var i = 0, len = chunks.length; i < len; i++) {\n        var str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n        var newLineStart = createLineStartsFast(str);\n        chunks[i] = new StringBuffer(str, newLineStart);\n      }\n    }\n    return new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._isBasicASCII, this._normalizeEOL);\n  };\n  return PieceTreeTextBufferFactory;\n}();\nexport { PieceTreeTextBufferFactory };\nvar PieceTreeTextBufferBuilder = /** @class */function () {\n  function PieceTreeTextBufferBuilder() {\n    this.chunks = [];\n    this.BOM = '';\n    this._hasPreviousChar = false;\n    this._previousChar = 0;\n    this._tmpLineStarts = [];\n    this.cr = 0;\n    this.lf = 0;\n    this.crlf = 0;\n    this.containsRTL = false;\n    this.isBasicASCII = true;\n  }\n  PieceTreeTextBufferBuilder.prototype.acceptChunk = function (chunk) {\n    if (chunk.length === 0) {\n      return;\n    }\n    if (this.chunks.length === 0) {\n      if (strings.startsWithUTF8BOM(chunk)) {\n        this.BOM = strings.UTF8_BOM_CHARACTER;\n        chunk = chunk.substr(1);\n      }\n    }\n    var lastChar = chunk.charCodeAt(chunk.length - 1);\n    if (lastChar === 13 /* CarriageReturn */ || lastChar >= 0xD800 && lastChar <= 0xDBFF) {\n      // last character is \\r or a high surrogate => keep it back\n      this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n      this._hasPreviousChar = true;\n      this._previousChar = lastChar;\n    } else {\n      this._acceptChunk1(chunk, false);\n      this._hasPreviousChar = false;\n      this._previousChar = lastChar;\n    }\n  };\n  PieceTreeTextBufferBuilder.prototype._acceptChunk1 = function (chunk, allowEmptyStrings) {\n    if (!allowEmptyStrings && chunk.length === 0) {\n      // Nothing to do\n      return;\n    }\n    if (this._hasPreviousChar) {\n      this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n    } else {\n      this._acceptChunk2(chunk);\n    }\n  };\n  PieceTreeTextBufferBuilder.prototype._acceptChunk2 = function (chunk) {\n    var lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n    this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n    this.cr += lineStarts.cr;\n    this.lf += lineStarts.lf;\n    this.crlf += lineStarts.crlf;\n    if (this.isBasicASCII) {\n      this.isBasicASCII = lineStarts.isBasicASCII;\n    }\n    if (!this.isBasicASCII && !this.containsRTL) {\n      // No need to check if is basic ASCII\n      this.containsRTL = strings.containsRTL(chunk);\n    }\n  };\n  PieceTreeTextBufferBuilder.prototype.finish = function (normalizeEOL) {\n    if (normalizeEOL === void 0) {\n      normalizeEOL = true;\n    }\n    this._finish();\n    return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.isBasicASCII, normalizeEOL);\n  };\n  PieceTreeTextBufferBuilder.prototype._finish = function () {\n    if (this.chunks.length === 0) {\n      this._acceptChunk1('', true);\n    }\n    if (this._hasPreviousChar) {\n      this._hasPreviousChar = false;\n      // recreate last chunk\n      var lastChunk = this.chunks[this.chunks.length - 1];\n      lastChunk.buffer += String.fromCharCode(this._previousChar);\n      var newLineStarts = createLineStartsFast(lastChunk.buffer);\n      lastChunk.lineStarts = newLineStarts;\n      if (this._previousChar === 13 /* CarriageReturn */) {\n        this.cr++;\n      }\n    }\n  };\n  return PieceTreeTextBufferBuilder;\n}();\nexport { PieceTreeTextBufferBuilder };","map":{"version":3,"names":["strings","StringBuffer","createLineStarts","createLineStartsFast","PieceTreeTextBuffer","PieceTreeTextBufferFactory","_chunks","_bom","_cr","_lf","_crlf","_containsRTL","_isBasicASCII","_normalizeEOL","prototype","_getEOL","defaultEOL","totalEOLCount","totalCRCount","create","eol","chunks","i","len","length","str","buffer","replace","newLineStart","PieceTreeTextBufferBuilder","BOM","_hasPreviousChar","_previousChar","_tmpLineStarts","cr","lf","crlf","containsRTL","isBasicASCII","acceptChunk","chunk","startsWithUTF8BOM","UTF8_BOM_CHARACTER","substr","lastChar","charCodeAt","_acceptChunk1","allowEmptyStrings","_acceptChunk2","String","fromCharCode","lineStarts","push","finish","normalizeEOL","_finish","lastChunk","newLineStarts"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../../base/common/strings.js';\r\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\r\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\r\nvar PieceTreeTextBufferFactory = /** @class */ (function () {\r\n    function PieceTreeTextBufferFactory(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _isBasicASCII, _normalizeEOL) {\r\n        this._chunks = _chunks;\r\n        this._bom = _bom;\r\n        this._cr = _cr;\r\n        this._lf = _lf;\r\n        this._crlf = _crlf;\r\n        this._containsRTL = _containsRTL;\r\n        this._isBasicASCII = _isBasicASCII;\r\n        this._normalizeEOL = _normalizeEOL;\r\n    }\r\n    PieceTreeTextBufferFactory.prototype._getEOL = function (defaultEOL) {\r\n        var totalEOLCount = this._cr + this._lf + this._crlf;\r\n        var totalCRCount = this._cr + this._crlf;\r\n        if (totalEOLCount === 0) {\r\n            // This is an empty file or a file with precisely one line\r\n            return (defaultEOL === 1 /* LF */ ? '\\n' : '\\r\\n');\r\n        }\r\n        if (totalCRCount > totalEOLCount / 2) {\r\n            // More than half of the file contains \\r\\n ending lines\r\n            return '\\r\\n';\r\n        }\r\n        // At least one line more ends in \\n\r\n        return '\\n';\r\n    };\r\n    PieceTreeTextBufferFactory.prototype.create = function (defaultEOL) {\r\n        var eol = this._getEOL(defaultEOL);\r\n        var chunks = this._chunks;\r\n        if (this._normalizeEOL &&\r\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\r\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\r\n            // Normalize pieces\r\n            for (var i = 0, len = chunks.length; i < len; i++) {\r\n                var str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\r\n                var newLineStart = createLineStartsFast(str);\r\n                chunks[i] = new StringBuffer(str, newLineStart);\r\n            }\r\n        }\r\n        return new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._isBasicASCII, this._normalizeEOL);\r\n    };\r\n    return PieceTreeTextBufferFactory;\r\n}());\r\nexport { PieceTreeTextBufferFactory };\r\nvar PieceTreeTextBufferBuilder = /** @class */ (function () {\r\n    function PieceTreeTextBufferBuilder() {\r\n        this.chunks = [];\r\n        this.BOM = '';\r\n        this._hasPreviousChar = false;\r\n        this._previousChar = 0;\r\n        this._tmpLineStarts = [];\r\n        this.cr = 0;\r\n        this.lf = 0;\r\n        this.crlf = 0;\r\n        this.containsRTL = false;\r\n        this.isBasicASCII = true;\r\n    }\r\n    PieceTreeTextBufferBuilder.prototype.acceptChunk = function (chunk) {\r\n        if (chunk.length === 0) {\r\n            return;\r\n        }\r\n        if (this.chunks.length === 0) {\r\n            if (strings.startsWithUTF8BOM(chunk)) {\r\n                this.BOM = strings.UTF8_BOM_CHARACTER;\r\n                chunk = chunk.substr(1);\r\n            }\r\n        }\r\n        var lastChar = chunk.charCodeAt(chunk.length - 1);\r\n        if (lastChar === 13 /* CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\r\n            // last character is \\r or a high surrogate => keep it back\r\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\r\n            this._hasPreviousChar = true;\r\n            this._previousChar = lastChar;\r\n        }\r\n        else {\r\n            this._acceptChunk1(chunk, false);\r\n            this._hasPreviousChar = false;\r\n            this._previousChar = lastChar;\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._acceptChunk1 = function (chunk, allowEmptyStrings) {\r\n        if (!allowEmptyStrings && chunk.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        if (this._hasPreviousChar) {\r\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\r\n        }\r\n        else {\r\n            this._acceptChunk2(chunk);\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._acceptChunk2 = function (chunk) {\r\n        var lineStarts = createLineStarts(this._tmpLineStarts, chunk);\r\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\r\n        this.cr += lineStarts.cr;\r\n        this.lf += lineStarts.lf;\r\n        this.crlf += lineStarts.crlf;\r\n        if (this.isBasicASCII) {\r\n            this.isBasicASCII = lineStarts.isBasicASCII;\r\n        }\r\n        if (!this.isBasicASCII && !this.containsRTL) {\r\n            // No need to check if is basic ASCII\r\n            this.containsRTL = strings.containsRTL(chunk);\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype.finish = function (normalizeEOL) {\r\n        if (normalizeEOL === void 0) { normalizeEOL = true; }\r\n        this._finish();\r\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.isBasicASCII, normalizeEOL);\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._finish = function () {\r\n        if (this.chunks.length === 0) {\r\n            this._acceptChunk1('', true);\r\n        }\r\n        if (this._hasPreviousChar) {\r\n            this._hasPreviousChar = false;\r\n            // recreate last chunk\r\n            var lastChunk = this.chunks[this.chunks.length - 1];\r\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\r\n            var newLineStarts = createLineStartsFast(lastChunk.buffer);\r\n            lastChunk.lineStarts = newLineStarts;\r\n            if (this._previousChar === 13 /* CarriageReturn */) {\r\n                this.cr++;\r\n            }\r\n        }\r\n    };\r\n    return PieceTreeTextBufferBuilder;\r\n}());\r\nexport { PieceTreeTextBufferBuilder };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,oCAAoC;AAC7D,SAASC,YAAY,EAAEC,gBAAgB,EAAEC,oBAAoB,QAAQ,oBAAoB;AACzF,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,IAAIC,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0B,CAACC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,YAAY,EAAEC,aAAa,EAAEC,aAAa,EAAE;IAC5G,IAAI,CAACP,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EACAR,0BAA0B,CAACS,SAAS,CAACC,OAAO,GAAG,UAAUC,UAAU,EAAE;IACjE,IAAIC,aAAa,GAAG,IAAI,CAACT,GAAG,GAAG,IAAI,CAACC,GAAG,GAAG,IAAI,CAACC,KAAK;IACpD,IAAIQ,YAAY,GAAG,IAAI,CAACV,GAAG,GAAG,IAAI,CAACE,KAAK;IACxC,IAAIO,aAAa,KAAK,CAAC,EAAE;MACrB;MACA,OAAQD,UAAU,KAAK,CAAC,CAAC,WAAW,IAAI,GAAG,MAAM;IACrD;IACA,IAAIE,YAAY,GAAGD,aAAa,GAAG,CAAC,EAAE;MAClC;MACA,OAAO,MAAM;IACjB;IACA;IACA,OAAO,IAAI;EACf,CAAC;EACDZ,0BAA0B,CAACS,SAAS,CAACK,MAAM,GAAG,UAAUH,UAAU,EAAE;IAChE,IAAII,GAAG,GAAG,IAAI,CAACL,OAAO,CAACC,UAAU,CAAC;IAClC,IAAIK,MAAM,GAAG,IAAI,CAACf,OAAO;IACzB,IAAI,IAAI,CAACO,aAAa,KAChBO,GAAG,KAAK,MAAM,KAAK,IAAI,CAACZ,GAAG,GAAG,CAAC,IAAI,IAAI,CAACC,GAAG,GAAG,CAAC,CAAC,IAC1CW,GAAG,KAAK,IAAI,KAAK,IAAI,CAACZ,GAAG,GAAG,CAAC,IAAI,IAAI,CAACE,KAAK,GAAG,CAAC,CAAE,CAAC,EAAE;MAC5D;MACA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,MAAM,CAACG,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC/C,IAAIG,GAAG,GAAGJ,MAAM,CAACC,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,aAAa,EAAEP,GAAG,CAAC;QACtD,IAAIQ,YAAY,GAAGzB,oBAAoB,CAACsB,GAAG,CAAC;QAC5CJ,MAAM,CAACC,CAAC,CAAC,GAAG,IAAIrB,YAAY,CAACwB,GAAG,EAAEG,YAAY,CAAC;MACnD;IACJ;IACA,OAAO,IAAIxB,mBAAmB,CAACiB,MAAM,EAAE,IAAI,CAACd,IAAI,EAAEa,GAAG,EAAE,IAAI,CAACT,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,aAAa,CAAC;EACrH,CAAC;EACD,OAAOR,0BAA0B;AACrC,CAAC,EAAG;AACJ,SAASA,0BAA0B;AACnC,IAAIwB,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0B,GAAG;IAClC,IAAI,CAACR,MAAM,GAAG,EAAE;IAChB,IAAI,CAACS,GAAG,GAAG,EAAE;IACb,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,EAAE,GAAG,CAAC;IACX,IAAI,CAACC,EAAE,GAAG,CAAC;IACX,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI;EAC5B;EACAT,0BAA0B,CAACf,SAAS,CAACyB,WAAW,GAAG,UAAUC,KAAK,EAAE;IAChE,IAAIA,KAAK,CAAChB,MAAM,KAAK,CAAC,EAAE;MACpB;IACJ;IACA,IAAI,IAAI,CAACH,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1B,IAAIxB,OAAO,CAACyC,iBAAiB,CAACD,KAAK,CAAC,EAAE;QAClC,IAAI,CAACV,GAAG,GAAG9B,OAAO,CAAC0C,kBAAkB;QACrCF,KAAK,GAAGA,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC;MAC3B;IACJ;IACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACK,UAAU,CAACL,KAAK,CAAChB,MAAM,GAAG,CAAC,CAAC;IACjD,IAAIoB,QAAQ,KAAK,EAAE,CAAC,wBAAyBA,QAAQ,IAAI,MAAM,IAAIA,QAAQ,IAAI,MAAO,EAAE;MACpF;MACA,IAAI,CAACE,aAAa,CAACN,KAAK,CAACG,MAAM,CAAC,CAAC,EAAEH,KAAK,CAAChB,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;MAC5D,IAAI,CAACO,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACC,aAAa,GAAGY,QAAQ;IACjC,CAAC,MACI;MACD,IAAI,CAACE,aAAa,CAACN,KAAK,EAAE,KAAK,CAAC;MAChC,IAAI,CAACT,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACC,aAAa,GAAGY,QAAQ;IACjC;EACJ,CAAC;EACDf,0BAA0B,CAACf,SAAS,CAACgC,aAAa,GAAG,UAAUN,KAAK,EAAEO,iBAAiB,EAAE;IACrF,IAAI,CAACA,iBAAiB,IAAIP,KAAK,CAAChB,MAAM,KAAK,CAAC,EAAE;MAC1C;MACA;IACJ;IACA,IAAI,IAAI,CAACO,gBAAgB,EAAE;MACvB,IAAI,CAACiB,aAAa,CAACC,MAAM,CAACC,YAAY,CAAC,IAAI,CAAClB,aAAa,CAAC,GAAGQ,KAAK,CAAC;IACvE,CAAC,MACI;MACD,IAAI,CAACQ,aAAa,CAACR,KAAK,CAAC;IAC7B;EACJ,CAAC;EACDX,0BAA0B,CAACf,SAAS,CAACkC,aAAa,GAAG,UAAUR,KAAK,EAAE;IAClE,IAAIW,UAAU,GAAGjD,gBAAgB,CAAC,IAAI,CAAC+B,cAAc,EAAEO,KAAK,CAAC;IAC7D,IAAI,CAACnB,MAAM,CAAC+B,IAAI,CAAC,IAAInD,YAAY,CAACuC,KAAK,EAAEW,UAAU,CAACA,UAAU,CAAC,CAAC;IAChE,IAAI,CAACjB,EAAE,IAAIiB,UAAU,CAACjB,EAAE;IACxB,IAAI,CAACC,EAAE,IAAIgB,UAAU,CAAChB,EAAE;IACxB,IAAI,CAACC,IAAI,IAAIe,UAAU,CAACf,IAAI;IAC5B,IAAI,IAAI,CAACE,YAAY,EAAE;MACnB,IAAI,CAACA,YAAY,GAAGa,UAAU,CAACb,YAAY;IAC/C;IACA,IAAI,CAAC,IAAI,CAACA,YAAY,IAAI,CAAC,IAAI,CAACD,WAAW,EAAE;MACzC;MACA,IAAI,CAACA,WAAW,GAAGrC,OAAO,CAACqC,WAAW,CAACG,KAAK,CAAC;IACjD;EACJ,CAAC;EACDX,0BAA0B,CAACf,SAAS,CAACuC,MAAM,GAAG,UAAUC,YAAY,EAAE;IAClE,IAAIA,YAAY,KAAK,KAAK,CAAC,EAAE;MAAEA,YAAY,GAAG,IAAI;IAAE;IACpD,IAAI,CAACC,OAAO,EAAE;IACd,OAAO,IAAIlD,0BAA0B,CAAC,IAAI,CAACgB,MAAM,EAAE,IAAI,CAACS,GAAG,EAAE,IAAI,CAACI,EAAE,EAAE,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,YAAY,EAAEgB,YAAY,CAAC;EAChJ,CAAC;EACDzB,0BAA0B,CAACf,SAAS,CAACyC,OAAO,GAAG,YAAY;IACvD,IAAI,IAAI,CAAClC,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACsB,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC;IAChC;IACA,IAAI,IAAI,CAACf,gBAAgB,EAAE;MACvB,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B;MACA,IAAIyB,SAAS,GAAG,IAAI,CAACnC,MAAM,CAAC,IAAI,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;MACnDgC,SAAS,CAAC9B,MAAM,IAAIuB,MAAM,CAACC,YAAY,CAAC,IAAI,CAAClB,aAAa,CAAC;MAC3D,IAAIyB,aAAa,GAAGtD,oBAAoB,CAACqD,SAAS,CAAC9B,MAAM,CAAC;MAC1D8B,SAAS,CAACL,UAAU,GAAGM,aAAa;MACpC,IAAI,IAAI,CAACzB,aAAa,KAAK,EAAE,CAAC,sBAAsB;QAChD,IAAI,CAACE,EAAE,EAAE;MACb;IACJ;EACJ,CAAC;EACD,OAAOL,0BAA0B;AACrC,CAAC,EAAG;AACJ,SAASA,0BAA0B"},"metadata":{},"sourceType":"module"}