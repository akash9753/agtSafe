{"ast":null,"code":"import { Registry } from '../../registry/common/platform.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Extensions } from './configurationRegistry.js';\nexport var IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  var root = Object.create(null);\n  for (var key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  var segments = key.split('.');\n  var last = segments.pop();\n  var curr = settingsTreeRoot;\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var obj = curr[s];\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n      case 'object':\n        break;\n      default:\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\n        return;\n    }\n    curr = obj;\n  }\n  if (typeof curr === 'object') {\n    curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\n  } else {\n    conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  var segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n  var first = segments.shift();\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    var value = valueTree[first];\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    var current = config;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n      var component = path_1[_i];\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n      current = current[component];\n    }\n    return current;\n  }\n  var path = settingPath.split('.');\n  var result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getConfigurationKeys() {\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  return Object.keys(properties);\n}\nexport function getDefaultValues() {\n  var valueTreeRoot = Object.create(null);\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  for (var key in properties) {\n    var value = properties[key].default;\n    addToValueTree(valueTreeRoot, key, value, function (message) {\n      return console.error(\"Conflict in default settings: \" + message);\n    });\n  }\n  return valueTreeRoot;\n}\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\n  var setting = configurationService.inspect(currentSettingName);\n  var legacySetting = configurationService.inspect(legacySettingName);\n  if (typeof setting.userValue !== 'undefined' || typeof setting.workspaceValue !== 'undefined' || typeof setting.workspaceFolderValue !== 'undefined') {\n    return setting.value;\n  } else if (typeof legacySetting.userValue !== 'undefined' || typeof legacySetting.workspaceValue !== 'undefined' || typeof legacySetting.workspaceFolderValue !== 'undefined') {\n    return legacySetting.value;\n  } else {\n    return setting.defaultValue;\n  }\n}","map":{"version":3,"names":["Registry","createDecorator","Extensions","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","slice","join","JSON","stringify","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","_i","path_1","component","undefined","result","getConfigurationKeys","as","Configuration","getConfigurationProperties","getDefaultValues","valueTreeRoot","default","message","console","error","overrideIdentifierFromKey","substring","getMigratedSettingValue","configurationService","currentSettingName","legacySettingName","setting","inspect","legacySetting","userValue","workspaceValue","workspaceFolderValue"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"sourcesContent":["import { Registry } from '../../registry/common/platform.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Extensions } from './configurationRegistry.js';\r\nexport var IConfigurationService = createDecorator('configurationService');\r\nexport function toValuesTree(properties, conflictReporter) {\r\n    var root = Object.create(null);\r\n    for (var key in properties) {\r\n        addToValueTree(root, key, properties[key], conflictReporter);\r\n    }\r\n    return root;\r\n}\r\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\r\n    var segments = key.split('.');\r\n    var last = segments.pop();\r\n    var curr = settingsTreeRoot;\r\n    for (var i = 0; i < segments.length; i++) {\r\n        var s = segments[i];\r\n        var obj = curr[s];\r\n        switch (typeof obj) {\r\n            case 'undefined':\r\n                obj = curr[s] = Object.create(null);\r\n                break;\r\n            case 'object':\r\n                break;\r\n            default:\r\n                conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\r\n                return;\r\n        }\r\n        curr = obj;\r\n    }\r\n    if (typeof curr === 'object') {\r\n        curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\r\n    }\r\n    else {\r\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\r\n    }\r\n}\r\nexport function removeFromValueTree(valueTree, key) {\r\n    var segments = key.split('.');\r\n    doRemoveFromValueTree(valueTree, segments);\r\n}\r\nfunction doRemoveFromValueTree(valueTree, segments) {\r\n    var first = segments.shift();\r\n    if (segments.length === 0) {\r\n        // Reached last segment\r\n        delete valueTree[first];\r\n        return;\r\n    }\r\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\r\n        var value = valueTree[first];\r\n        if (typeof value === 'object' && !Array.isArray(value)) {\r\n            doRemoveFromValueTree(value, segments);\r\n            if (Object.keys(value).length === 0) {\r\n                delete valueTree[first];\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\r\nexport function getConfigurationValue(config, settingPath, defaultValue) {\r\n    function accessSetting(config, path) {\r\n        var current = config;\r\n        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\r\n            var component = path_1[_i];\r\n            if (typeof current !== 'object' || current === null) {\r\n                return undefined;\r\n            }\r\n            current = current[component];\r\n        }\r\n        return current;\r\n    }\r\n    var path = settingPath.split('.');\r\n    var result = accessSetting(config, path);\r\n    return typeof result === 'undefined' ? defaultValue : result;\r\n}\r\nexport function getConfigurationKeys() {\r\n    var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    return Object.keys(properties);\r\n}\r\nexport function getDefaultValues() {\r\n    var valueTreeRoot = Object.create(null);\r\n    var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    for (var key in properties) {\r\n        var value = properties[key].default;\r\n        addToValueTree(valueTreeRoot, key, value, function (message) { return console.error(\"Conflict in default settings: \" + message); });\r\n    }\r\n    return valueTreeRoot;\r\n}\r\nexport function overrideIdentifierFromKey(key) {\r\n    return key.substring(1, key.length - 1);\r\n}\r\nexport function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\r\n    var setting = configurationService.inspect(currentSettingName);\r\n    var legacySetting = configurationService.inspect(legacySettingName);\r\n    if (typeof setting.userValue !== 'undefined' || typeof setting.workspaceValue !== 'undefined' || typeof setting.workspaceFolderValue !== 'undefined') {\r\n        return setting.value;\r\n    }\r\n    else if (typeof legacySetting.userValue !== 'undefined' || typeof legacySetting.workspaceValue !== 'undefined' || typeof legacySetting.workspaceFolderValue !== 'undefined') {\r\n        return legacySetting.value;\r\n    }\r\n    else {\r\n        return setting.defaultValue;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mCAAmC;AAC5D,SAASC,eAAe,QAAQ,6CAA6C;AAC7E,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAO,IAAIC,qBAAqB,GAAGF,eAAe,CAAC,sBAAsB,CAAC;AAC1E,OAAO,SAASG,YAAY,CAACC,UAAU,EAAEC,gBAAgB,EAAE;EACvD,IAAIC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC9B,KAAK,IAAIC,GAAG,IAAIL,UAAU,EAAE;IACxBM,cAAc,CAACJ,IAAI,EAAEG,GAAG,EAAEL,UAAU,CAACK,GAAG,CAAC,EAAEJ,gBAAgB,CAAC;EAChE;EACA,OAAOC,IAAI;AACf;AACA,OAAO,SAASI,cAAc,CAACC,gBAAgB,EAAEF,GAAG,EAAEG,KAAK,EAAEP,gBAAgB,EAAE;EAC3E,IAAIQ,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,IAAI,GAAGF,QAAQ,CAACG,GAAG,EAAE;EACzB,IAAIC,IAAI,GAAGN,gBAAgB;EAC3B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,CAAC,GAAGP,QAAQ,CAACK,CAAC,CAAC;IACnB,IAAIG,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC;IACjB,QAAQ,OAAOC,GAAG;MACd,KAAK,WAAW;QACZA,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC,GAAGb,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACnC;MACJ,KAAK,QAAQ;QACT;MACJ;QACIH,gBAAgB,CAAC,WAAW,GAAGI,GAAG,GAAG,MAAM,GAAGI,QAAQ,CAACS,KAAK,CAAC,CAAC,EAAEJ,CAAC,GAAG,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC;QAChH;IAAO;IAEfJ,IAAI,GAAGI,GAAG;EACd;EACA,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;IAC1BA,IAAI,CAACF,IAAI,CAAC,GAAGH,KAAK,CAAC,CAAC;EACxB,CAAC,MACI;IACDP,gBAAgB,CAAC,WAAW,GAAGI,GAAG,GAAG,MAAM,GAAGI,QAAQ,CAACU,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;EACrG;AACJ;AACA,OAAO,SAASS,mBAAmB,CAACC,SAAS,EAAElB,GAAG,EAAE;EAChD,IAAII,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC7Bc,qBAAqB,CAACD,SAAS,EAAEd,QAAQ,CAAC;AAC9C;AACA,SAASe,qBAAqB,CAACD,SAAS,EAAEd,QAAQ,EAAE;EAChD,IAAIgB,KAAK,GAAGhB,QAAQ,CAACiB,KAAK,EAAE;EAC5B,IAAIjB,QAAQ,CAACM,MAAM,KAAK,CAAC,EAAE;IACvB;IACA,OAAOQ,SAAS,CAACE,KAAK,CAAC;IACvB;EACJ;EACA,IAAItB,MAAM,CAACwB,IAAI,CAACJ,SAAS,CAAC,CAACK,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IAC9C,IAAIjB,KAAK,GAAGe,SAAS,CAACE,KAAK,CAAC;IAC5B,IAAI,OAAOjB,KAAK,KAAK,QAAQ,IAAI,CAACqB,KAAK,CAACC,OAAO,CAACtB,KAAK,CAAC,EAAE;MACpDgB,qBAAqB,CAAChB,KAAK,EAAEC,QAAQ,CAAC;MACtC,IAAIN,MAAM,CAACwB,IAAI,CAACnB,KAAK,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;QACjC,OAAOQ,SAAS,CAACE,KAAK,CAAC;MAC3B;IACJ;EACJ;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASM,qBAAqB,CAACC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAE;EACrE,SAASC,aAAa,CAACH,MAAM,EAAEI,IAAI,EAAE;IACjC,IAAIC,OAAO,GAAGL,MAAM;IACpB,KAAK,IAAIM,EAAE,GAAG,CAAC,EAAEC,MAAM,GAAGH,IAAI,EAAEE,EAAE,GAAGC,MAAM,CAACxB,MAAM,EAAEuB,EAAE,EAAE,EAAE;MACtD,IAAIE,SAAS,GAAGD,MAAM,CAACD,EAAE,CAAC;MAC1B,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;QACjD,OAAOI,SAAS;MACpB;MACAJ,OAAO,GAAGA,OAAO,CAACG,SAAS,CAAC;IAChC;IACA,OAAOH,OAAO;EAClB;EACA,IAAID,IAAI,GAAGH,WAAW,CAACvB,KAAK,CAAC,GAAG,CAAC;EACjC,IAAIgC,MAAM,GAAGP,aAAa,CAACH,MAAM,EAAEI,IAAI,CAAC;EACxC,OAAO,OAAOM,MAAM,KAAK,WAAW,GAAGR,YAAY,GAAGQ,MAAM;AAChE;AACA,OAAO,SAASC,oBAAoB,GAAG;EACnC,IAAI3C,UAAU,GAAGL,QAAQ,CAACiD,EAAE,CAAC/C,UAAU,CAACgD,aAAa,CAAC,CAACC,0BAA0B,EAAE;EACnF,OAAO3C,MAAM,CAACwB,IAAI,CAAC3B,UAAU,CAAC;AAClC;AACA,OAAO,SAAS+C,gBAAgB,GAAG;EAC/B,IAAIC,aAAa,GAAG7C,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACvC,IAAIJ,UAAU,GAAGL,QAAQ,CAACiD,EAAE,CAAC/C,UAAU,CAACgD,aAAa,CAAC,CAACC,0BAA0B,EAAE;EACnF,KAAK,IAAIzC,GAAG,IAAIL,UAAU,EAAE;IACxB,IAAIQ,KAAK,GAAGR,UAAU,CAACK,GAAG,CAAC,CAAC4C,OAAO;IACnC3C,cAAc,CAAC0C,aAAa,EAAE3C,GAAG,EAAEG,KAAK,EAAE,UAAU0C,OAAO,EAAE;MAAE,OAAOC,OAAO,CAACC,KAAK,CAAC,gCAAgC,GAAGF,OAAO,CAAC;IAAE,CAAC,CAAC;EACvI;EACA,OAAOF,aAAa;AACxB;AACA,OAAO,SAASK,yBAAyB,CAAChD,GAAG,EAAE;EAC3C,OAAOA,GAAG,CAACiD,SAAS,CAAC,CAAC,EAAEjD,GAAG,CAACU,MAAM,GAAG,CAAC,CAAC;AAC3C;AACA,OAAO,SAASwC,uBAAuB,CAACC,oBAAoB,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAE;EACjG,IAAIC,OAAO,GAAGH,oBAAoB,CAACI,OAAO,CAACH,kBAAkB,CAAC;EAC9D,IAAII,aAAa,GAAGL,oBAAoB,CAACI,OAAO,CAACF,iBAAiB,CAAC;EACnE,IAAI,OAAOC,OAAO,CAACG,SAAS,KAAK,WAAW,IAAI,OAAOH,OAAO,CAACI,cAAc,KAAK,WAAW,IAAI,OAAOJ,OAAO,CAACK,oBAAoB,KAAK,WAAW,EAAE;IAClJ,OAAOL,OAAO,CAACnD,KAAK;EACxB,CAAC,MACI,IAAI,OAAOqD,aAAa,CAACC,SAAS,KAAK,WAAW,IAAI,OAAOD,aAAa,CAACE,cAAc,KAAK,WAAW,IAAI,OAAOF,aAAa,CAACG,oBAAoB,KAAK,WAAW,EAAE;IACzK,OAAOH,aAAa,CAACrD,KAAK;EAC9B,CAAC,MACI;IACD,OAAOmD,OAAO,CAACzB,YAAY;EAC/B;AACJ"},"metadata":{},"sourceType":"module"}