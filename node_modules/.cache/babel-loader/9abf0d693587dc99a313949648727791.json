{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nvar RenderedLinesCollection = /** @class */function () {\n  function RenderedLinesCollection(createLine) {\n    this._createLine = createLine;\n    this._set(1, []);\n  }\n  RenderedLinesCollection.prototype.flush = function () {\n    this._set(1, []);\n  };\n  RenderedLinesCollection.prototype._set = function (rendLineNumberStart, lines) {\n    this._lines = lines;\n    this._rendLineNumberStart = rendLineNumberStart;\n  };\n  RenderedLinesCollection.prototype._get = function () {\n    return {\n      rendLineNumberStart: this._rendLineNumberStart,\n      lines: this._lines\n    };\n  };\n  /**\r\n   * @returns Inclusive line number that is inside this collection\r\n   */\n  RenderedLinesCollection.prototype.getStartLineNumber = function () {\n    return this._rendLineNumberStart;\n  };\n  /**\r\n   * @returns Inclusive line number that is inside this collection\r\n   */\n  RenderedLinesCollection.prototype.getEndLineNumber = function () {\n    return this._rendLineNumberStart + this._lines.length - 1;\n  };\n  RenderedLinesCollection.prototype.getCount = function () {\n    return this._lines.length;\n  };\n  RenderedLinesCollection.prototype.getLine = function (lineNumber) {\n    var lineIndex = lineNumber - this._rendLineNumberStart;\n    if (lineIndex < 0 || lineIndex >= this._lines.length) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._lines[lineIndex];\n  };\n  /**\r\n   * @returns Lines that were removed from this collection\r\n   */\n  RenderedLinesCollection.prototype.onLinesDeleted = function (deleteFromLineNumber, deleteToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    if (deleteToLineNumber < startLineNumber) {\n      // deleting above the viewport\n      var deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n      this._rendLineNumberStart -= deleteCnt;\n      return null;\n    }\n    if (deleteFromLineNumber > endLineNumber) {\n      // deleted below the viewport\n      return null;\n    }\n    // Record what needs to be deleted\n    var deleteStartIndex = 0;\n    var deleteCount = 0;\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - this._rendLineNumberStart;\n      if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n        // this is a line to be deleted\n        if (deleteCount === 0) {\n          // this is the first line to be deleted\n          deleteStartIndex = lineIndex;\n          deleteCount = 1;\n        } else {\n          deleteCount++;\n        }\n      }\n    }\n    // Adjust this._rendLineNumberStart for lines deleted above\n    if (deleteFromLineNumber < startLineNumber) {\n      // Something was deleted above\n      var deleteAboveCount = 0;\n      if (deleteToLineNumber < startLineNumber) {\n        // the entire deleted lines are above\n        deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n      } else {\n        deleteAboveCount = startLineNumber - deleteFromLineNumber;\n      }\n      this._rendLineNumberStart -= deleteAboveCount;\n    }\n    var deleted = this._lines.splice(deleteStartIndex, deleteCount);\n    return deleted;\n  };\n  RenderedLinesCollection.prototype.onLinesChanged = function (changeFromLineNumber, changeToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    var someoneNotified = false;\n    for (var changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n      if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n        // Notify the line\n        this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n        someoneNotified = true;\n      }\n    }\n    return someoneNotified;\n  };\n  RenderedLinesCollection.prototype.onLinesInserted = function (insertFromLineNumber, insertToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n    var insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    if (insertFromLineNumber <= startLineNumber) {\n      // inserting above the viewport\n      this._rendLineNumberStart += insertCnt;\n      return null;\n    }\n    if (insertFromLineNumber > endLineNumber) {\n      // inserting below the viewport\n      return null;\n    }\n    if (insertCnt + insertFromLineNumber > endLineNumber) {\n      // insert inside the viewport in such a way that all remaining lines are pushed outside\n      var deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n      return deleted;\n    }\n    // insert inside the viewport, push out some lines, but not all remaining lines\n    var newLines = [];\n    for (var i = 0; i < insertCnt; i++) {\n      newLines[i] = this._createLine();\n    }\n    var insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n    var beforeLines = this._lines.slice(0, insertIndex);\n    var afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n    var deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n    this._lines = beforeLines.concat(newLines).concat(afterLines);\n    return deletedLines;\n  };\n  RenderedLinesCollection.prototype.onTokensChanged = function (ranges) {\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n    var startLineNumber = this.getStartLineNumber();\n    var endLineNumber = this.getEndLineNumber();\n    var notifiedSomeone = false;\n    for (var i = 0, len = ranges.length; i < len; i++) {\n      var rng = ranges[i];\n      if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n        // range outside viewport\n        continue;\n      }\n      var from = Math.max(startLineNumber, rng.fromLineNumber);\n      var to = Math.min(endLineNumber, rng.toLineNumber);\n      for (var lineNumber = from; lineNumber <= to; lineNumber++) {\n        var lineIndex = lineNumber - this._rendLineNumberStart;\n        this._lines[lineIndex].onTokensChanged();\n        notifiedSomeone = true;\n      }\n    }\n    return notifiedSomeone;\n  };\n  return RenderedLinesCollection;\n}();\nexport { RenderedLinesCollection };\nvar VisibleLinesCollection = /** @class */function () {\n  function VisibleLinesCollection(host) {\n    var _this = this;\n    this._host = host;\n    this.domNode = this._createDomNode();\n    this._linesCollection = new RenderedLinesCollection(function () {\n      return _this._host.createVisibleLine();\n    });\n  }\n  VisibleLinesCollection.prototype._createDomNode = function () {\n    var domNode = createFastDomNode(document.createElement('div'));\n    domNode.setClassName('view-layer');\n    domNode.setPosition('absolute');\n    domNode.domNode.setAttribute('role', 'presentation');\n    domNode.domNode.setAttribute('aria-hidden', 'true');\n    return domNode;\n  };\n  // ---- begin view event handlers\n  VisibleLinesCollection.prototype.onConfigurationChanged = function (e) {\n    if (e.hasChanged(107 /* layoutInfo */)) {\n      return true;\n    }\n    return false;\n  };\n  VisibleLinesCollection.prototype.onFlushed = function (e) {\n    this._linesCollection.flush();\n    // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n    return true;\n  };\n  VisibleLinesCollection.prototype.onLinesChanged = function (e) {\n    return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n  };\n  VisibleLinesCollection.prototype.onLinesDeleted = function (e) {\n    var deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n    if (deleted) {\n      // Remove from DOM\n      for (var i = 0, len = deleted.length; i < len; i++) {\n        var lineDomNode = deleted[i].getDomNode();\n        if (lineDomNode) {\n          this.domNode.domNode.removeChild(lineDomNode);\n        }\n      }\n    }\n    return true;\n  };\n  VisibleLinesCollection.prototype.onLinesInserted = function (e) {\n    var deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n    if (deleted) {\n      // Remove from DOM\n      for (var i = 0, len = deleted.length; i < len; i++) {\n        var lineDomNode = deleted[i].getDomNode();\n        if (lineDomNode) {\n          this.domNode.domNode.removeChild(lineDomNode);\n        }\n      }\n    }\n    return true;\n  };\n  VisibleLinesCollection.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged;\n  };\n  VisibleLinesCollection.prototype.onTokensChanged = function (e) {\n    return this._linesCollection.onTokensChanged(e.ranges);\n  };\n  VisibleLinesCollection.prototype.onZonesChanged = function (e) {\n    return true;\n  };\n  // ---- end view event handlers\n  VisibleLinesCollection.prototype.getStartLineNumber = function () {\n    return this._linesCollection.getStartLineNumber();\n  };\n  VisibleLinesCollection.prototype.getEndLineNumber = function () {\n    return this._linesCollection.getEndLineNumber();\n  };\n  VisibleLinesCollection.prototype.getVisibleLine = function (lineNumber) {\n    return this._linesCollection.getLine(lineNumber);\n  };\n  VisibleLinesCollection.prototype.renderLines = function (viewportData) {\n    var inp = this._linesCollection._get();\n    var renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n    var ctx = {\n      rendLineNumberStart: inp.rendLineNumberStart,\n      lines: inp.lines,\n      linesLength: inp.lines.length\n    };\n    // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n    var resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n    this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n  };\n  return VisibleLinesCollection;\n}();\nexport { VisibleLinesCollection };\nvar ViewLayerRenderer = /** @class */function () {\n  function ViewLayerRenderer(domNode, host, viewportData) {\n    this.domNode = domNode;\n    this.host = host;\n    this.viewportData = viewportData;\n  }\n  ViewLayerRenderer.prototype.render = function (inContext, startLineNumber, stopLineNumber, deltaTop) {\n    var ctx = {\n      rendLineNumberStart: inContext.rendLineNumberStart,\n      lines: inContext.lines.slice(0),\n      linesLength: inContext.linesLength\n    };\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber || stopLineNumber < ctx.rendLineNumberStart) {\n      // There is no overlap whatsoever\n      ctx.rendLineNumberStart = startLineNumber;\n      ctx.linesLength = stopLineNumber - startLineNumber + 1;\n      ctx.lines = [];\n      for (var x = startLineNumber; x <= stopLineNumber; x++) {\n        ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n      }\n      this._finishRendering(ctx, true, deltaTop);\n      return ctx;\n    }\n    // Update lines which will remain untouched\n    this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n    if (ctx.rendLineNumberStart > startLineNumber) {\n      // Insert lines before\n      var fromLineNumber = startLineNumber;\n      var toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart < startLineNumber) {\n      // Remove lines before\n      var removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n      if (removeCnt > 0) {\n        this._removeLinesBefore(ctx, removeCnt);\n        ctx.linesLength -= removeCnt;\n      }\n    }\n    ctx.rendLineNumberStart = startLineNumber;\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n      // Insert lines after\n      var fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n      var toLineNumber = stopLineNumber;\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n      // Remove lines after\n      var fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n      var toLineNumber = ctx.linesLength - 1;\n      var removeCnt = toLineNumber - fromLineNumber + 1;\n      if (removeCnt > 0) {\n        this._removeLinesAfter(ctx, removeCnt);\n        ctx.linesLength -= removeCnt;\n      }\n    }\n    this._finishRendering(ctx, false, deltaTop);\n    return ctx;\n  };\n  ViewLayerRenderer.prototype._renderUntouchedLines = function (ctx, startIndex, endIndex, deltaTop, deltaLN) {\n    var rendLineNumberStart = ctx.rendLineNumberStart;\n    var lines = ctx.lines;\n    for (var i = startIndex; i <= endIndex; i++) {\n      var lineNumber = rendLineNumberStart + i;\n      lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n    }\n  };\n  ViewLayerRenderer.prototype._insertLinesBefore = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    var newLines = [];\n    var newLinesLen = 0;\n    for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this.host.createVisibleLine();\n    }\n    ctx.lines = newLines.concat(ctx.lines);\n  };\n  ViewLayerRenderer.prototype._removeLinesBefore = function (ctx, removeCount) {\n    for (var i = 0; i < removeCount; i++) {\n      var lineDomNode = ctx.lines[i].getDomNode();\n      if (lineDomNode) {\n        this.domNode.removeChild(lineDomNode);\n      }\n    }\n    ctx.lines.splice(0, removeCount);\n  };\n  ViewLayerRenderer.prototype._insertLinesAfter = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    var newLines = [];\n    var newLinesLen = 0;\n    for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this.host.createVisibleLine();\n    }\n    ctx.lines = ctx.lines.concat(newLines);\n  };\n  ViewLayerRenderer.prototype._removeLinesAfter = function (ctx, removeCount) {\n    var removeIndex = ctx.linesLength - removeCount;\n    for (var i = 0; i < removeCount; i++) {\n      var lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n      if (lineDomNode) {\n        this.domNode.removeChild(lineDomNode);\n      }\n    }\n    ctx.lines.splice(removeIndex, removeCount);\n  };\n  ViewLayerRenderer.prototype._finishRenderingNewLines = function (ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n    var lastChild = this.domNode.lastChild;\n    if (domNodeIsEmpty || !lastChild) {\n      this.domNode.innerHTML = newLinesHTML;\n    } else {\n      lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n    }\n    var currChild = this.domNode.lastChild;\n    for (var i = ctx.linesLength - 1; i >= 0; i--) {\n      var line = ctx.lines[i];\n      if (wasNew[i]) {\n        line.setDomNode(currChild);\n        currChild = currChild.previousSibling;\n      }\n    }\n  };\n  ViewLayerRenderer.prototype._finishRenderingInvalidLines = function (ctx, invalidLinesHTML, wasInvalid) {\n    var hugeDomNode = document.createElement('div');\n    hugeDomNode.innerHTML = invalidLinesHTML;\n    for (var i = 0; i < ctx.linesLength; i++) {\n      var line = ctx.lines[i];\n      if (wasInvalid[i]) {\n        var source = hugeDomNode.firstChild;\n        var lineDomNode = line.getDomNode();\n        lineDomNode.parentNode.replaceChild(source, lineDomNode);\n        line.setDomNode(source);\n      }\n    }\n  };\n  ViewLayerRenderer.prototype._finishRendering = function (ctx, domNodeIsEmpty, deltaTop) {\n    var sb = ViewLayerRenderer._sb;\n    var linesLength = ctx.linesLength;\n    var lines = ctx.lines;\n    var rendLineNumberStart = ctx.rendLineNumberStart;\n    var wasNew = [];\n    {\n      sb.reset();\n      var hadNewLine = false;\n      for (var i = 0; i < linesLength; i++) {\n        var line = lines[i];\n        wasNew[i] = false;\n        var lineDomNode = line.getDomNode();\n        if (lineDomNode) {\n          // line is not new\n          continue;\n        }\n        var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n        wasNew[i] = true;\n        hadNewLine = true;\n      }\n      if (hadNewLine) {\n        this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n      }\n    }\n    {\n      sb.reset();\n      var hadInvalidLine = false;\n      var wasInvalid = [];\n      for (var i = 0; i < linesLength; i++) {\n        var line = lines[i];\n        wasInvalid[i] = false;\n        if (wasNew[i]) {\n          // line was new\n          continue;\n        }\n        var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n        wasInvalid[i] = true;\n        hadInvalidLine = true;\n      }\n      if (hadInvalidLine) {\n        this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n      }\n    }\n  };\n  ViewLayerRenderer._sb = createStringBuilder(100000);\n  return ViewLayerRenderer;\n}();","map":{"version":3,"names":["createFastDomNode","createStringBuilder","RenderedLinesCollection","createLine","_createLine","_set","prototype","flush","rendLineNumberStart","lines","_lines","_rendLineNumberStart","_get","getStartLineNumber","getEndLineNumber","length","getCount","getLine","lineNumber","lineIndex","Error","onLinesDeleted","deleteFromLineNumber","deleteToLineNumber","startLineNumber","endLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","deleted","splice","onLinesChanged","changeFromLineNumber","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","onLinesInserted","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","i","insertIndex","beforeLines","slice","afterLines","deletedLines","concat","onTokensChanged","ranges","notifiedSomeone","len","rng","toLineNumber","fromLineNumber","from","Math","max","to","min","VisibleLinesCollection","host","_this","_host","domNode","_createDomNode","_linesCollection","createVisibleLine","document","createElement","setClassName","setPosition","setAttribute","onConfigurationChanged","e","hasChanged","onFlushed","lineDomNode","getDomNode","removeChild","onScrollChanged","scrollTopChanged","onZonesChanged","getVisibleLine","renderLines","viewportData","inp","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","newLinesLen","removeCount","removeIndex","_finishRenderingNewLines","domNodeIsEmpty","newLinesHTML","wasNew","lastChild","innerHTML","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","_finishRenderingInvalidLines","invalidLinesHTML","wasInvalid","hugeDomNode","source","firstChild","parentNode","replaceChild","sb","_sb","reset","hadNewLine","renderResult","renderLine","build","hadInvalidLine"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\r\nvar RenderedLinesCollection = /** @class */ (function () {\r\n    function RenderedLinesCollection(createLine) {\r\n        this._createLine = createLine;\r\n        this._set(1, []);\r\n    }\r\n    RenderedLinesCollection.prototype.flush = function () {\r\n        this._set(1, []);\r\n    };\r\n    RenderedLinesCollection.prototype._set = function (rendLineNumberStart, lines) {\r\n        this._lines = lines;\r\n        this._rendLineNumberStart = rendLineNumberStart;\r\n    };\r\n    RenderedLinesCollection.prototype._get = function () {\r\n        return {\r\n            rendLineNumberStart: this._rendLineNumberStart,\r\n            lines: this._lines\r\n        };\r\n    };\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    RenderedLinesCollection.prototype.getStartLineNumber = function () {\r\n        return this._rendLineNumberStart;\r\n    };\r\n    /**\r\n     * @returns Inclusive line number that is inside this collection\r\n     */\r\n    RenderedLinesCollection.prototype.getEndLineNumber = function () {\r\n        return this._rendLineNumberStart + this._lines.length - 1;\r\n    };\r\n    RenderedLinesCollection.prototype.getCount = function () {\r\n        return this._lines.length;\r\n    };\r\n    RenderedLinesCollection.prototype.getLine = function (lineNumber) {\r\n        var lineIndex = lineNumber - this._rendLineNumberStart;\r\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._lines[lineIndex];\r\n    };\r\n    /**\r\n     * @returns Lines that were removed from this collection\r\n     */\r\n    RenderedLinesCollection.prototype.onLinesDeleted = function (deleteFromLineNumber, deleteToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        if (deleteToLineNumber < startLineNumber) {\r\n            // deleting above the viewport\r\n            var deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            this._rendLineNumberStart -= deleteCnt;\r\n            return null;\r\n        }\r\n        if (deleteFromLineNumber > endLineNumber) {\r\n            // deleted below the viewport\r\n            return null;\r\n        }\r\n        // Record what needs to be deleted\r\n        var deleteStartIndex = 0;\r\n        var deleteCount = 0;\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var lineIndex = lineNumber - this._rendLineNumberStart;\r\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\r\n                // this is a line to be deleted\r\n                if (deleteCount === 0) {\r\n                    // this is the first line to be deleted\r\n                    deleteStartIndex = lineIndex;\r\n                    deleteCount = 1;\r\n                }\r\n                else {\r\n                    deleteCount++;\r\n                }\r\n            }\r\n        }\r\n        // Adjust this._rendLineNumberStart for lines deleted above\r\n        if (deleteFromLineNumber < startLineNumber) {\r\n            // Something was deleted above\r\n            var deleteAboveCount = 0;\r\n            if (deleteToLineNumber < startLineNumber) {\r\n                // the entire deleted lines are above\r\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\r\n            }\r\n            else {\r\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\r\n            }\r\n            this._rendLineNumberStart -= deleteAboveCount;\r\n        }\r\n        var deleted = this._lines.splice(deleteStartIndex, deleteCount);\r\n        return deleted;\r\n    };\r\n    RenderedLinesCollection.prototype.onLinesChanged = function (changeFromLineNumber, changeToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        var someoneNotified = false;\r\n        for (var changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\r\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\r\n                // Notify the line\r\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\r\n                someoneNotified = true;\r\n            }\r\n        }\r\n        return someoneNotified;\r\n    };\r\n    RenderedLinesCollection.prototype.onLinesInserted = function (insertFromLineNumber, insertToLineNumber) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return null;\r\n        }\r\n        var insertCnt = insertToLineNumber - insertFromLineNumber + 1;\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        if (insertFromLineNumber <= startLineNumber) {\r\n            // inserting above the viewport\r\n            this._rendLineNumberStart += insertCnt;\r\n            return null;\r\n        }\r\n        if (insertFromLineNumber > endLineNumber) {\r\n            // inserting below the viewport\r\n            return null;\r\n        }\r\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\r\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\r\n            var deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\r\n            return deleted;\r\n        }\r\n        // insert inside the viewport, push out some lines, but not all remaining lines\r\n        var newLines = [];\r\n        for (var i = 0; i < insertCnt; i++) {\r\n            newLines[i] = this._createLine();\r\n        }\r\n        var insertIndex = insertFromLineNumber - this._rendLineNumberStart;\r\n        var beforeLines = this._lines.slice(0, insertIndex);\r\n        var afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\r\n        var deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\r\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\r\n        return deletedLines;\r\n    };\r\n    RenderedLinesCollection.prototype.onTokensChanged = function (ranges) {\r\n        if (this.getCount() === 0) {\r\n            // no lines\r\n            return false;\r\n        }\r\n        var startLineNumber = this.getStartLineNumber();\r\n        var endLineNumber = this.getEndLineNumber();\r\n        var notifiedSomeone = false;\r\n        for (var i = 0, len = ranges.length; i < len; i++) {\r\n            var rng = ranges[i];\r\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\r\n                // range outside viewport\r\n                continue;\r\n            }\r\n            var from = Math.max(startLineNumber, rng.fromLineNumber);\r\n            var to = Math.min(endLineNumber, rng.toLineNumber);\r\n            for (var lineNumber = from; lineNumber <= to; lineNumber++) {\r\n                var lineIndex = lineNumber - this._rendLineNumberStart;\r\n                this._lines[lineIndex].onTokensChanged();\r\n                notifiedSomeone = true;\r\n            }\r\n        }\r\n        return notifiedSomeone;\r\n    };\r\n    return RenderedLinesCollection;\r\n}());\r\nexport { RenderedLinesCollection };\r\nvar VisibleLinesCollection = /** @class */ (function () {\r\n    function VisibleLinesCollection(host) {\r\n        var _this = this;\r\n        this._host = host;\r\n        this.domNode = this._createDomNode();\r\n        this._linesCollection = new RenderedLinesCollection(function () { return _this._host.createVisibleLine(); });\r\n    }\r\n    VisibleLinesCollection.prototype._createDomNode = function () {\r\n        var domNode = createFastDomNode(document.createElement('div'));\r\n        domNode.setClassName('view-layer');\r\n        domNode.setPosition('absolute');\r\n        domNode.domNode.setAttribute('role', 'presentation');\r\n        domNode.domNode.setAttribute('aria-hidden', 'true');\r\n        return domNode;\r\n    };\r\n    // ---- begin view event handlers\r\n    VisibleLinesCollection.prototype.onConfigurationChanged = function (e) {\r\n        if (e.hasChanged(107 /* layoutInfo */)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    VisibleLinesCollection.prototype.onFlushed = function (e) {\r\n        this._linesCollection.flush();\r\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesChanged = function (e) {\r\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesDeleted = function (e) {\r\n        var deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (var i = 0, len = deleted.length; i < len; i++) {\r\n                var lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onLinesInserted = function (e) {\r\n        var deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\r\n        if (deleted) {\r\n            // Remove from DOM\r\n            for (var i = 0, len = deleted.length; i < len; i++) {\r\n                var lineDomNode = deleted[i].getDomNode();\r\n                if (lineDomNode) {\r\n                    this.domNode.domNode.removeChild(lineDomNode);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    VisibleLinesCollection.prototype.onScrollChanged = function (e) {\r\n        return e.scrollTopChanged;\r\n    };\r\n    VisibleLinesCollection.prototype.onTokensChanged = function (e) {\r\n        return this._linesCollection.onTokensChanged(e.ranges);\r\n    };\r\n    VisibleLinesCollection.prototype.onZonesChanged = function (e) {\r\n        return true;\r\n    };\r\n    // ---- end view event handlers\r\n    VisibleLinesCollection.prototype.getStartLineNumber = function () {\r\n        return this._linesCollection.getStartLineNumber();\r\n    };\r\n    VisibleLinesCollection.prototype.getEndLineNumber = function () {\r\n        return this._linesCollection.getEndLineNumber();\r\n    };\r\n    VisibleLinesCollection.prototype.getVisibleLine = function (lineNumber) {\r\n        return this._linesCollection.getLine(lineNumber);\r\n    };\r\n    VisibleLinesCollection.prototype.renderLines = function (viewportData) {\r\n        var inp = this._linesCollection._get();\r\n        var renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\r\n        var ctx = {\r\n            rendLineNumberStart: inp.rendLineNumberStart,\r\n            lines: inp.lines,\r\n            linesLength: inp.lines.length\r\n        };\r\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\r\n        var resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\r\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\r\n    };\r\n    return VisibleLinesCollection;\r\n}());\r\nexport { VisibleLinesCollection };\r\nvar ViewLayerRenderer = /** @class */ (function () {\r\n    function ViewLayerRenderer(domNode, host, viewportData) {\r\n        this.domNode = domNode;\r\n        this.host = host;\r\n        this.viewportData = viewportData;\r\n    }\r\n    ViewLayerRenderer.prototype.render = function (inContext, startLineNumber, stopLineNumber, deltaTop) {\r\n        var ctx = {\r\n            rendLineNumberStart: inContext.rendLineNumberStart,\r\n            lines: inContext.lines.slice(0),\r\n            linesLength: inContext.linesLength\r\n        };\r\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\r\n            // There is no overlap whatsoever\r\n            ctx.rendLineNumberStart = startLineNumber;\r\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\r\n            ctx.lines = [];\r\n            for (var x = startLineNumber; x <= stopLineNumber; x++) {\r\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\r\n            }\r\n            this._finishRendering(ctx, true, deltaTop);\r\n            return ctx;\r\n        }\r\n        // Update lines which will remain untouched\r\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\r\n        if (ctx.rendLineNumberStart > startLineNumber) {\r\n            // Insert lines before\r\n            var fromLineNumber = startLineNumber;\r\n            var toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart < startLineNumber) {\r\n            // Remove lines before\r\n            var removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\r\n            if (removeCnt > 0) {\r\n                this._removeLinesBefore(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        ctx.rendLineNumberStart = startLineNumber;\r\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\r\n            // Insert lines after\r\n            var fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\r\n            var toLineNumber = stopLineNumber;\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\r\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\r\n            }\r\n        }\r\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\r\n            // Remove lines after\r\n            var fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\r\n            var toLineNumber = ctx.linesLength - 1;\r\n            var removeCnt = toLineNumber - fromLineNumber + 1;\r\n            if (removeCnt > 0) {\r\n                this._removeLinesAfter(ctx, removeCnt);\r\n                ctx.linesLength -= removeCnt;\r\n            }\r\n        }\r\n        this._finishRendering(ctx, false, deltaTop);\r\n        return ctx;\r\n    };\r\n    ViewLayerRenderer.prototype._renderUntouchedLines = function (ctx, startIndex, endIndex, deltaTop, deltaLN) {\r\n        var rendLineNumberStart = ctx.rendLineNumberStart;\r\n        var lines = ctx.lines;\r\n        for (var i = startIndex; i <= endIndex; i++) {\r\n            var lineNumber = rendLineNumberStart + i;\r\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._insertLinesBefore = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        var newLines = [];\r\n        var newLinesLen = 0;\r\n        for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = newLines.concat(ctx.lines);\r\n    };\r\n    ViewLayerRenderer.prototype._removeLinesBefore = function (ctx, removeCount) {\r\n        for (var i = 0; i < removeCount; i++) {\r\n            var lineDomNode = ctx.lines[i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(0, removeCount);\r\n    };\r\n    ViewLayerRenderer.prototype._insertLinesAfter = function (ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\r\n        var newLines = [];\r\n        var newLinesLen = 0;\r\n        for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n            newLines[newLinesLen++] = this.host.createVisibleLine();\r\n        }\r\n        ctx.lines = ctx.lines.concat(newLines);\r\n    };\r\n    ViewLayerRenderer.prototype._removeLinesAfter = function (ctx, removeCount) {\r\n        var removeIndex = ctx.linesLength - removeCount;\r\n        for (var i = 0; i < removeCount; i++) {\r\n            var lineDomNode = ctx.lines[removeIndex + i].getDomNode();\r\n            if (lineDomNode) {\r\n                this.domNode.removeChild(lineDomNode);\r\n            }\r\n        }\r\n        ctx.lines.splice(removeIndex, removeCount);\r\n    };\r\n    ViewLayerRenderer.prototype._finishRenderingNewLines = function (ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\r\n        var lastChild = this.domNode.lastChild;\r\n        if (domNodeIsEmpty || !lastChild) {\r\n            this.domNode.innerHTML = newLinesHTML;\r\n        }\r\n        else {\r\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\r\n        }\r\n        var currChild = this.domNode.lastChild;\r\n        for (var i = ctx.linesLength - 1; i >= 0; i--) {\r\n            var line = ctx.lines[i];\r\n            if (wasNew[i]) {\r\n                line.setDomNode(currChild);\r\n                currChild = currChild.previousSibling;\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._finishRenderingInvalidLines = function (ctx, invalidLinesHTML, wasInvalid) {\r\n        var hugeDomNode = document.createElement('div');\r\n        hugeDomNode.innerHTML = invalidLinesHTML;\r\n        for (var i = 0; i < ctx.linesLength; i++) {\r\n            var line = ctx.lines[i];\r\n            if (wasInvalid[i]) {\r\n                var source = hugeDomNode.firstChild;\r\n                var lineDomNode = line.getDomNode();\r\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\r\n                line.setDomNode(source);\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer.prototype._finishRendering = function (ctx, domNodeIsEmpty, deltaTop) {\r\n        var sb = ViewLayerRenderer._sb;\r\n        var linesLength = ctx.linesLength;\r\n        var lines = ctx.lines;\r\n        var rendLineNumberStart = ctx.rendLineNumberStart;\r\n        var wasNew = [];\r\n        {\r\n            sb.reset();\r\n            var hadNewLine = false;\r\n            for (var i = 0; i < linesLength; i++) {\r\n                var line = lines[i];\r\n                wasNew[i] = false;\r\n                var lineDomNode = line.getDomNode();\r\n                if (lineDomNode) {\r\n                    // line is not new\r\n                    continue;\r\n                }\r\n                var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasNew[i] = true;\r\n                hadNewLine = true;\r\n            }\r\n            if (hadNewLine) {\r\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\r\n            }\r\n        }\r\n        {\r\n            sb.reset();\r\n            var hadInvalidLine = false;\r\n            var wasInvalid = [];\r\n            for (var i = 0; i < linesLength; i++) {\r\n                var line = lines[i];\r\n                wasInvalid[i] = false;\r\n                if (wasNew[i]) {\r\n                    // line was new\r\n                    continue;\r\n                }\r\n                var renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\r\n                if (!renderResult) {\r\n                    // line does not need rendering\r\n                    continue;\r\n                }\r\n                wasInvalid[i] = true;\r\n                hadInvalidLine = true;\r\n            }\r\n            if (hadInvalidLine) {\r\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\r\n            }\r\n        }\r\n    };\r\n    ViewLayerRenderer._sb = createStringBuilder(100000);\r\n    return ViewLayerRenderer;\r\n}());\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}