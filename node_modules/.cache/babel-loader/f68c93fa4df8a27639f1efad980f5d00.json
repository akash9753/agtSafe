{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as nls from '../../../nls.js';\nimport { IntervalTimer } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nvar AbstractKeybindingService = /** @class */function (_super) {\n  __extends(AbstractKeybindingService, _super);\n  function AbstractKeybindingService(_contextKeyService, _commandService, _telemetryService, _notificationService) {\n    var _this = _super.call(this) || this;\n    _this._contextKeyService = _contextKeyService;\n    _this._commandService = _commandService;\n    _this._telemetryService = _telemetryService;\n    _this._notificationService = _notificationService;\n    _this._onDidUpdateKeybindings = _this._register(new Emitter());\n    _this._currentChord = null;\n    _this._currentChordChecker = new IntervalTimer();\n    _this._currentChordStatusMessage = null;\n    return _this;\n  }\n  Object.defineProperty(AbstractKeybindingService.prototype, \"onDidUpdateKeybindings\", {\n    get: function get() {\n      return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  AbstractKeybindingService.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n  AbstractKeybindingService.prototype.getKeybindings = function () {\n    return this._getResolver().getKeybindings();\n  };\n  AbstractKeybindingService.prototype.lookupKeybinding = function (commandId) {\n    var result = this._getResolver().lookupPrimaryKeybinding(commandId);\n    if (!result) {\n      return undefined;\n    }\n    return result.resolvedKeybinding;\n  };\n  AbstractKeybindingService.prototype.softDispatch = function (e, target) {\n    var keybinding = this.resolveKeyboardEvent(e);\n    if (keybinding.isChord()) {\n      console.warn('Unexpected keyboard event mapped to a chord');\n      return null;\n    }\n    var firstPart = keybinding.getDispatchParts()[0];\n    if (firstPart === null) {\n      // cannot be dispatched, probably only modifier keys\n      return null;\n    }\n    var contextValue = this._contextKeyService.getContext(target);\n    var currentChord = this._currentChord ? this._currentChord.keypress : null;\n    return this._getResolver().resolve(contextValue, currentChord, firstPart);\n  };\n  AbstractKeybindingService.prototype._enterChordMode = function (firstPart, keypressLabel) {\n    var _this = this;\n    this._currentChord = {\n      keypress: firstPart,\n      label: keypressLabel\n    };\n    this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\n    var chordEnterTime = Date.now();\n    this._currentChordChecker.cancelAndSet(function () {\n      if (!_this._documentHasFocus()) {\n        // Focus has been lost => leave chord mode\n        _this._leaveChordMode();\n        return;\n      }\n      if (Date.now() - chordEnterTime > 5000) {\n        // 5 seconds elapsed => leave chord mode\n        _this._leaveChordMode();\n      }\n    }, 500);\n  };\n  AbstractKeybindingService.prototype._leaveChordMode = function () {\n    if (this._currentChordStatusMessage) {\n      this._currentChordStatusMessage.dispose();\n      this._currentChordStatusMessage = null;\n    }\n    this._currentChordChecker.cancel();\n    this._currentChord = null;\n  };\n  AbstractKeybindingService.prototype._dispatch = function (e, target) {\n    return this._doDispatch(this.resolveKeyboardEvent(e), target);\n  };\n  AbstractKeybindingService.prototype._doDispatch = function (keybinding, target) {\n    var _this = this;\n    var shouldPreventDefault = false;\n    if (keybinding.isChord()) {\n      console.warn('Unexpected keyboard event mapped to a chord');\n      return false;\n    }\n    var firstPart = keybinding.getDispatchParts()[0];\n    if (firstPart === null) {\n      // cannot be dispatched, probably only modifier keys\n      return shouldPreventDefault;\n    }\n    var contextValue = this._contextKeyService.getContext(target);\n    var currentChord = this._currentChord ? this._currentChord.keypress : null;\n    var keypressLabel = keybinding.getLabel();\n    var resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\n    if (resolveResult && resolveResult.enterChord) {\n      shouldPreventDefault = true;\n      this._enterChordMode(firstPart, keypressLabel);\n      return shouldPreventDefault;\n    }\n    if (this._currentChord) {\n      if (!resolveResult || !resolveResult.commandId) {\n        this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), {\n          hideAfter: 10 * 1000 /* 10s */\n        });\n        shouldPreventDefault = true;\n      }\n    }\n    this._leaveChordMode();\n    if (resolveResult && resolveResult.commandId) {\n      if (!resolveResult.bubble) {\n        shouldPreventDefault = true;\n      }\n      if (typeof resolveResult.commandArgs === 'undefined') {\n        this._commandService.executeCommand(resolveResult.commandId).then(undefined, function (err) {\n          return _this._notificationService.warn(err);\n        });\n      } else {\n        this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, function (err) {\n          return _this._notificationService.warn(err);\n        });\n      }\n      this._telemetryService.publicLog2('workbenchActionExecuted', {\n        id: resolveResult.commandId,\n        from: 'keybinding'\n      });\n    }\n    return shouldPreventDefault;\n  };\n  AbstractKeybindingService.prototype.mightProducePrintableCharacter = function (event) {\n    if (event.ctrlKey || event.metaKey) {\n      // ignore ctrl/cmd-combination but not shift/alt-combinatios\n      return false;\n    }\n    // weak check for certain ranges. this is properly implemented in a subclass\n    // with access to the KeyboardMapperFactory.\n    if (event.keyCode >= 31 /* KEY_A */ && event.keyCode <= 56 /* KEY_Z */ || event.keyCode >= 21 /* KEY_0 */ && event.keyCode <= 30 /* KEY_9 */) {\n      return true;\n    }\n    return false;\n  };\n  return AbstractKeybindingService;\n}(Disposable);\nexport { AbstractKeybindingService };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","nls","IntervalTimer","Emitter","Event","Disposable","AbstractKeybindingService","_super","_contextKeyService","_commandService","_telemetryService","_notificationService","_this","call","_onDidUpdateKeybindings","_register","_currentChord","_currentChordChecker","_currentChordStatusMessage","defineProperty","get","event","None","enumerable","configurable","dispose","getKeybindings","_getResolver","lookupKeybinding","commandId","result","lookupPrimaryKeybinding","undefined","resolvedKeybinding","softDispatch","e","target","keybinding","resolveKeyboardEvent","isChord","console","warn","firstPart","getDispatchParts","contextValue","getContext","currentChord","keypress","resolve","_enterChordMode","keypressLabel","label","status","localize","chordEnterTime","Date","now","cancelAndSet","_documentHasFocus","_leaveChordMode","cancel","_dispatch","_doDispatch","shouldPreventDefault","getLabel","resolveResult","enterChord","hideAfter","bubble","commandArgs","executeCommand","then","err","publicLog2","id","from","mightProducePrintableCharacter","ctrlKey","metaKey","keyCode"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as nls from '../../../nls.js';\r\nimport { IntervalTimer } from '../../../base/common/async.js';\r\nimport { Emitter, Event } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nvar AbstractKeybindingService = /** @class */ (function (_super) {\r\n    __extends(AbstractKeybindingService, _super);\r\n    function AbstractKeybindingService(_contextKeyService, _commandService, _telemetryService, _notificationService) {\r\n        var _this = _super.call(this) || this;\r\n        _this._contextKeyService = _contextKeyService;\r\n        _this._commandService = _commandService;\r\n        _this._telemetryService = _telemetryService;\r\n        _this._notificationService = _notificationService;\r\n        _this._onDidUpdateKeybindings = _this._register(new Emitter());\r\n        _this._currentChord = null;\r\n        _this._currentChordChecker = new IntervalTimer();\r\n        _this._currentChordStatusMessage = null;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AbstractKeybindingService.prototype, \"onDidUpdateKeybindings\", {\r\n        get: function () {\r\n            return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : Event.None; // Sinon stubbing walks properties on prototype\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AbstractKeybindingService.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    AbstractKeybindingService.prototype.getKeybindings = function () {\r\n        return this._getResolver().getKeybindings();\r\n    };\r\n    AbstractKeybindingService.prototype.lookupKeybinding = function (commandId) {\r\n        var result = this._getResolver().lookupPrimaryKeybinding(commandId);\r\n        if (!result) {\r\n            return undefined;\r\n        }\r\n        return result.resolvedKeybinding;\r\n    };\r\n    AbstractKeybindingService.prototype.softDispatch = function (e, target) {\r\n        var keybinding = this.resolveKeyboardEvent(e);\r\n        if (keybinding.isChord()) {\r\n            console.warn('Unexpected keyboard event mapped to a chord');\r\n            return null;\r\n        }\r\n        var firstPart = keybinding.getDispatchParts()[0];\r\n        if (firstPart === null) {\r\n            // cannot be dispatched, probably only modifier keys\r\n            return null;\r\n        }\r\n        var contextValue = this._contextKeyService.getContext(target);\r\n        var currentChord = this._currentChord ? this._currentChord.keypress : null;\r\n        return this._getResolver().resolve(contextValue, currentChord, firstPart);\r\n    };\r\n    AbstractKeybindingService.prototype._enterChordMode = function (firstPart, keypressLabel) {\r\n        var _this = this;\r\n        this._currentChord = {\r\n            keypress: firstPart,\r\n            label: keypressLabel\r\n        };\r\n        this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', \"({0}) was pressed. Waiting for second key of chord...\", keypressLabel));\r\n        var chordEnterTime = Date.now();\r\n        this._currentChordChecker.cancelAndSet(function () {\r\n            if (!_this._documentHasFocus()) {\r\n                // Focus has been lost => leave chord mode\r\n                _this._leaveChordMode();\r\n                return;\r\n            }\r\n            if (Date.now() - chordEnterTime > 5000) {\r\n                // 5 seconds elapsed => leave chord mode\r\n                _this._leaveChordMode();\r\n            }\r\n        }, 500);\r\n    };\r\n    AbstractKeybindingService.prototype._leaveChordMode = function () {\r\n        if (this._currentChordStatusMessage) {\r\n            this._currentChordStatusMessage.dispose();\r\n            this._currentChordStatusMessage = null;\r\n        }\r\n        this._currentChordChecker.cancel();\r\n        this._currentChord = null;\r\n    };\r\n    AbstractKeybindingService.prototype._dispatch = function (e, target) {\r\n        return this._doDispatch(this.resolveKeyboardEvent(e), target);\r\n    };\r\n    AbstractKeybindingService.prototype._doDispatch = function (keybinding, target) {\r\n        var _this = this;\r\n        var shouldPreventDefault = false;\r\n        if (keybinding.isChord()) {\r\n            console.warn('Unexpected keyboard event mapped to a chord');\r\n            return false;\r\n        }\r\n        var firstPart = keybinding.getDispatchParts()[0];\r\n        if (firstPart === null) {\r\n            // cannot be dispatched, probably only modifier keys\r\n            return shouldPreventDefault;\r\n        }\r\n        var contextValue = this._contextKeyService.getContext(target);\r\n        var currentChord = this._currentChord ? this._currentChord.keypress : null;\r\n        var keypressLabel = keybinding.getLabel();\r\n        var resolveResult = this._getResolver().resolve(contextValue, currentChord, firstPart);\r\n        if (resolveResult && resolveResult.enterChord) {\r\n            shouldPreventDefault = true;\r\n            this._enterChordMode(firstPart, keypressLabel);\r\n            return shouldPreventDefault;\r\n        }\r\n        if (this._currentChord) {\r\n            if (!resolveResult || !resolveResult.commandId) {\r\n                this._notificationService.status(nls.localize('missing.chord', \"The key combination ({0}, {1}) is not a command.\", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });\r\n                shouldPreventDefault = true;\r\n            }\r\n        }\r\n        this._leaveChordMode();\r\n        if (resolveResult && resolveResult.commandId) {\r\n            if (!resolveResult.bubble) {\r\n                shouldPreventDefault = true;\r\n            }\r\n            if (typeof resolveResult.commandArgs === 'undefined') {\r\n                this._commandService.executeCommand(resolveResult.commandId).then(undefined, function (err) { return _this._notificationService.warn(err); });\r\n            }\r\n            else {\r\n                this._commandService.executeCommand(resolveResult.commandId, resolveResult.commandArgs).then(undefined, function (err) { return _this._notificationService.warn(err); });\r\n            }\r\n            this._telemetryService.publicLog2('workbenchActionExecuted', { id: resolveResult.commandId, from: 'keybinding' });\r\n        }\r\n        return shouldPreventDefault;\r\n    };\r\n    AbstractKeybindingService.prototype.mightProducePrintableCharacter = function (event) {\r\n        if (event.ctrlKey || event.metaKey) {\r\n            // ignore ctrl/cmd-combination but not shift/alt-combinatios\r\n            return false;\r\n        }\r\n        // weak check for certain ranges. this is properly implemented in a subclass\r\n        // with access to the KeyboardMapperFactory.\r\n        if ((event.keyCode >= 31 /* KEY_A */ && event.keyCode <= 56 /* KEY_Z */)\r\n            || (event.keyCode >= 21 /* KEY_0 */ && event.keyCode <= 30 /* KEY_9 */)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return AbstractKeybindingService;\r\n}(Disposable));\r\nexport { AbstractKeybindingService };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}