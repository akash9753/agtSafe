{"ast":null,"code":"/**\r\n * Returns the last element of an array.\r\n * @param array The array.\r\n * @param n Which element from the end (default is zero).\r\n */\nexport function tail(array, n) {\n  if (n === void 0) {\n    n = 0;\n  }\n  return array[array.length - (1 + n)];\n}\nexport function tail2(arr) {\n  if (arr.length === 0) {\n    throw new Error('Invalid tail call');\n  }\n  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nexport function equals(one, other, itemEquals) {\n  if (itemEquals === void 0) {\n    itemEquals = function itemEquals(a, b) {\n      return a === b;\n    };\n  }\n  if (one === other) {\n    return true;\n  }\n  if (!one || !other) {\n    return false;\n  }\n  if (one.length !== other.length) {\n    return false;\n  }\n  for (var i = 0, len = one.length; i < len; i++) {\n    if (!itemEquals(one[i], other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function binarySearch(array, key, comparator) {\n  var low = 0,\n    high = array.length - 1;\n  while (low <= high) {\n    var mid = (low + high) / 2 | 0;\n    var comp = comparator(array[mid], key);\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(low + 1);\n}\n/**\r\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\r\n * are located before all elements where p(x) is true.\r\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\r\n */\nexport function findFirstInSorted(array, p) {\n  var low = 0,\n    high = array.length;\n  if (high === 0) {\n    return 0; // no children\n  }\n\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n    if (p(array[mid])) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return low;\n}\n/**\r\n * Like `Array#sort` but always stable. Usually runs a little slower `than Array#sort`\r\n * so only use this when actually needing stable sort.\r\n */\nexport function mergeSort(data, compare) {\n  _sort(data, compare, 0, data.length - 1, []);\n  return data;\n}\nfunction _merge(a, compare, lo, mid, hi, aux) {\n  var leftIdx = lo,\n    rightIdx = mid + 1;\n  for (var i = lo; i <= hi; i++) {\n    aux[i] = a[i];\n  }\n  for (var i = lo; i <= hi; i++) {\n    if (leftIdx > mid) {\n      // left side consumed\n      a[i] = aux[rightIdx++];\n    } else if (rightIdx > hi) {\n      // right side consumed\n      a[i] = aux[leftIdx++];\n    } else if (compare(aux[rightIdx], aux[leftIdx]) < 0) {\n      // right element is less -> comes first\n      a[i] = aux[rightIdx++];\n    } else {\n      // left element comes first (less or equal)\n      a[i] = aux[leftIdx++];\n    }\n  }\n}\nfunction _sort(a, compare, lo, hi, aux) {\n  if (hi <= lo) {\n    return;\n  }\n  var mid = lo + (hi - lo) / 2 | 0;\n  _sort(a, compare, lo, mid, aux);\n  _sort(a, compare, mid + 1, hi, aux);\n  if (compare(a[mid], a[mid + 1]) <= 0) {\n    // left and right are sorted and if the last-left element is less\n    // or equals than the first-right element there is nothing else\n    // to do\n    return;\n  }\n  _merge(a, compare, lo, mid, hi, aux);\n}\nexport function groupBy(data, compare) {\n  var result = [];\n  var currentGroup = undefined;\n  for (var _i = 0, _a = mergeSort(data.slice(0), compare); _i < _a.length; _i++) {\n    var element = _a[_i];\n    if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n      currentGroup = [element];\n      result.push(currentGroup);\n    } else {\n      currentGroup.push(element);\n    }\n  }\n  return result;\n}\n/**\r\n * @returns New array with all falsy values removed. The original array IS NOT modified.\r\n */\nexport function coalesce(array) {\n  return array.filter(function (e) {\n    return !!e;\n  });\n}\n/**\r\n * @returns false if the provided object is an array and not empty.\r\n */\nexport function isFalsyOrEmpty(obj) {\n  return !Array.isArray(obj) || obj.length === 0;\n}\nexport function isNonEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length > 0;\n}\n/**\r\n * Removes duplicates from the given array. The optional keyFn allows to specify\r\n * how elements are checked for equalness by returning a unique string for each.\r\n */\nexport function distinct(array, keyFn) {\n  if (!keyFn) {\n    return array.filter(function (element, position) {\n      return array.indexOf(element) === position;\n    });\n  }\n  var seen = Object.create(null);\n  return array.filter(function (elem) {\n    var key = keyFn(elem);\n    if (seen[key]) {\n      return false;\n    }\n    seen[key] = true;\n    return true;\n  });\n}\nexport function distinctES6(array) {\n  var seen = new Set();\n  return array.filter(function (element) {\n    if (seen.has(element)) {\n      return false;\n    }\n    seen.add(element);\n    return true;\n  });\n}\nexport function fromSet(set) {\n  var result = [];\n  set.forEach(function (o) {\n    return result.push(o);\n  });\n  return result;\n}\nexport function firstIndex(array, fn) {\n  for (var i = 0; i < array.length; i++) {\n    var element = array[i];\n    if (fn(element)) {\n      return i;\n    }\n  }\n  return -1;\n}\nexport function first(array, fn, notFoundValue) {\n  if (notFoundValue === void 0) {\n    notFoundValue = undefined;\n  }\n  var index = firstIndex(array, fn);\n  return index < 0 ? notFoundValue : array[index];\n}\nexport function firstOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[0] : notFoundValue;\n}\nexport function flatten(arr) {\n  var _a;\n  return (_a = []).concat.apply(_a, arr);\n}\nexport function range(arg, to) {\n  var from = typeof to === 'number' ? arg : 0;\n  if (typeof to === 'number') {\n    from = arg;\n  } else {\n    from = 0;\n    to = arg;\n  }\n  var result = [];\n  if (from <= to) {\n    for (var i = from; i < to; i++) {\n      result.push(i);\n    }\n  } else {\n    for (var i = from; i > to; i--) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n/**\r\n * Insert `insertArr` inside `target` at `insertIndex`.\r\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\r\n */\nexport function arrayInsert(target, insertIndex, insertArr) {\n  var before = target.slice(0, insertIndex);\n  var after = target.slice(insertIndex);\n  return before.concat(insertArr, after);\n}\n/**\r\n * Pushes an element to the start of the array, if found.\r\n */\nexport function pushToStart(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.unshift(value);\n  }\n}\n/**\r\n * Pushes an element to the end of the array, if found.\r\n */\nexport function pushToEnd(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.push(value);\n  }\n}\nexport function find(arr, predicate) {\n  for (var i = 0; i < arr.length; i++) {\n    var element = arr[i];\n    if (predicate(element, i, arr)) {\n      return element;\n    }\n  }\n  return undefined;\n}\nexport function asArray(x) {\n  return Array.isArray(x) ? x : [x];\n}","map":{"version":3,"names":["tail","array","n","length","tail2","arr","Error","slice","equals","one","other","itemEquals","a","b","i","len","binarySearch","key","comparator","low","high","mid","comp","findFirstInSorted","p","Math","floor","mergeSort","data","compare","_sort","_merge","lo","hi","aux","leftIdx","rightIdx","groupBy","result","currentGroup","undefined","_i","_a","element","push","coalesce","filter","e","isFalsyOrEmpty","obj","Array","isArray","isNonEmptyArray","distinct","keyFn","position","indexOf","seen","Object","create","elem","distinctES6","Set","has","add","fromSet","set","forEach","o","firstIndex","fn","first","notFoundValue","index","firstOrDefault","flatten","concat","apply","range","arg","to","from","arrayInsert","target","insertIndex","insertArr","before","after","pushToStart","value","splice","unshift","pushToEnd","find","predicate","asArray","x"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/arrays.js"],"sourcesContent":["/**\r\n * Returns the last element of an array.\r\n * @param array The array.\r\n * @param n Which element from the end (default is zero).\r\n */\r\nexport function tail(array, n) {\r\n    if (n === void 0) { n = 0; }\r\n    return array[array.length - (1 + n)];\r\n}\r\nexport function tail2(arr) {\r\n    if (arr.length === 0) {\r\n        throw new Error('Invalid tail call');\r\n    }\r\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\r\n}\r\nexport function equals(one, other, itemEquals) {\r\n    if (itemEquals === void 0) { itemEquals = function (a, b) { return a === b; }; }\r\n    if (one === other) {\r\n        return true;\r\n    }\r\n    if (!one || !other) {\r\n        return false;\r\n    }\r\n    if (one.length !== other.length) {\r\n        return false;\r\n    }\r\n    for (var i = 0, len = one.length; i < len; i++) {\r\n        if (!itemEquals(one[i], other[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function binarySearch(array, key, comparator) {\r\n    var low = 0, high = array.length - 1;\r\n    while (low <= high) {\r\n        var mid = ((low + high) / 2) | 0;\r\n        var comp = comparator(array[mid], key);\r\n        if (comp < 0) {\r\n            low = mid + 1;\r\n        }\r\n        else if (comp > 0) {\r\n            high = mid - 1;\r\n        }\r\n        else {\r\n            return mid;\r\n        }\r\n    }\r\n    return -(low + 1);\r\n}\r\n/**\r\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\r\n * are located before all elements where p(x) is true.\r\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\r\n */\r\nexport function findFirstInSorted(array, p) {\r\n    var low = 0, high = array.length;\r\n    if (high === 0) {\r\n        return 0; // no children\r\n    }\r\n    while (low < high) {\r\n        var mid = Math.floor((low + high) / 2);\r\n        if (p(array[mid])) {\r\n            high = mid;\r\n        }\r\n        else {\r\n            low = mid + 1;\r\n        }\r\n    }\r\n    return low;\r\n}\r\n/**\r\n * Like `Array#sort` but always stable. Usually runs a little slower `than Array#sort`\r\n * so only use this when actually needing stable sort.\r\n */\r\nexport function mergeSort(data, compare) {\r\n    _sort(data, compare, 0, data.length - 1, []);\r\n    return data;\r\n}\r\nfunction _merge(a, compare, lo, mid, hi, aux) {\r\n    var leftIdx = lo, rightIdx = mid + 1;\r\n    for (var i = lo; i <= hi; i++) {\r\n        aux[i] = a[i];\r\n    }\r\n    for (var i = lo; i <= hi; i++) {\r\n        if (leftIdx > mid) {\r\n            // left side consumed\r\n            a[i] = aux[rightIdx++];\r\n        }\r\n        else if (rightIdx > hi) {\r\n            // right side consumed\r\n            a[i] = aux[leftIdx++];\r\n        }\r\n        else if (compare(aux[rightIdx], aux[leftIdx]) < 0) {\r\n            // right element is less -> comes first\r\n            a[i] = aux[rightIdx++];\r\n        }\r\n        else {\r\n            // left element comes first (less or equal)\r\n            a[i] = aux[leftIdx++];\r\n        }\r\n    }\r\n}\r\nfunction _sort(a, compare, lo, hi, aux) {\r\n    if (hi <= lo) {\r\n        return;\r\n    }\r\n    var mid = lo + ((hi - lo) / 2) | 0;\r\n    _sort(a, compare, lo, mid, aux);\r\n    _sort(a, compare, mid + 1, hi, aux);\r\n    if (compare(a[mid], a[mid + 1]) <= 0) {\r\n        // left and right are sorted and if the last-left element is less\r\n        // or equals than the first-right element there is nothing else\r\n        // to do\r\n        return;\r\n    }\r\n    _merge(a, compare, lo, mid, hi, aux);\r\n}\r\nexport function groupBy(data, compare) {\r\n    var result = [];\r\n    var currentGroup = undefined;\r\n    for (var _i = 0, _a = mergeSort(data.slice(0), compare); _i < _a.length; _i++) {\r\n        var element = _a[_i];\r\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\r\n            currentGroup = [element];\r\n            result.push(currentGroup);\r\n        }\r\n        else {\r\n            currentGroup.push(element);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @returns New array with all falsy values removed. The original array IS NOT modified.\r\n */\r\nexport function coalesce(array) {\r\n    return array.filter(function (e) { return !!e; });\r\n}\r\n/**\r\n * @returns false if the provided object is an array and not empty.\r\n */\r\nexport function isFalsyOrEmpty(obj) {\r\n    return !Array.isArray(obj) || obj.length === 0;\r\n}\r\nexport function isNonEmptyArray(obj) {\r\n    return Array.isArray(obj) && obj.length > 0;\r\n}\r\n/**\r\n * Removes duplicates from the given array. The optional keyFn allows to specify\r\n * how elements are checked for equalness by returning a unique string for each.\r\n */\r\nexport function distinct(array, keyFn) {\r\n    if (!keyFn) {\r\n        return array.filter(function (element, position) {\r\n            return array.indexOf(element) === position;\r\n        });\r\n    }\r\n    var seen = Object.create(null);\r\n    return array.filter(function (elem) {\r\n        var key = keyFn(elem);\r\n        if (seen[key]) {\r\n            return false;\r\n        }\r\n        seen[key] = true;\r\n        return true;\r\n    });\r\n}\r\nexport function distinctES6(array) {\r\n    var seen = new Set();\r\n    return array.filter(function (element) {\r\n        if (seen.has(element)) {\r\n            return false;\r\n        }\r\n        seen.add(element);\r\n        return true;\r\n    });\r\n}\r\nexport function fromSet(set) {\r\n    var result = [];\r\n    set.forEach(function (o) { return result.push(o); });\r\n    return result;\r\n}\r\nexport function firstIndex(array, fn) {\r\n    for (var i = 0; i < array.length; i++) {\r\n        var element = array[i];\r\n        if (fn(element)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nexport function first(array, fn, notFoundValue) {\r\n    if (notFoundValue === void 0) { notFoundValue = undefined; }\r\n    var index = firstIndex(array, fn);\r\n    return index < 0 ? notFoundValue : array[index];\r\n}\r\nexport function firstOrDefault(array, notFoundValue) {\r\n    return array.length > 0 ? array[0] : notFoundValue;\r\n}\r\nexport function flatten(arr) {\r\n    var _a;\r\n    return (_a = []).concat.apply(_a, arr);\r\n}\r\nexport function range(arg, to) {\r\n    var from = typeof to === 'number' ? arg : 0;\r\n    if (typeof to === 'number') {\r\n        from = arg;\r\n    }\r\n    else {\r\n        from = 0;\r\n        to = arg;\r\n    }\r\n    var result = [];\r\n    if (from <= to) {\r\n        for (var i = from; i < to; i++) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = from; i > to; i--) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Insert `insertArr` inside `target` at `insertIndex`.\r\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\r\n */\r\nexport function arrayInsert(target, insertIndex, insertArr) {\r\n    var before = target.slice(0, insertIndex);\r\n    var after = target.slice(insertIndex);\r\n    return before.concat(insertArr, after);\r\n}\r\n/**\r\n * Pushes an element to the start of the array, if found.\r\n */\r\nexport function pushToStart(arr, value) {\r\n    var index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.unshift(value);\r\n    }\r\n}\r\n/**\r\n * Pushes an element to the end of the array, if found.\r\n */\r\nexport function pushToEnd(arr, value) {\r\n    var index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.push(value);\r\n    }\r\n}\r\nexport function find(arr, predicate) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var element = arr[i];\r\n        if (predicate(element, i, arr)) {\r\n            return element;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nexport function asArray(x) {\r\n    return Array.isArray(x) ? x : [x];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}