{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\nvar Range = /** @class */function () {\n  function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\n    if (startLineNumber > endLineNumber || startLineNumber === endLineNumber && startColumn > endColumn) {\n      this.startLineNumber = endLineNumber;\n      this.startColumn = endColumn;\n      this.endLineNumber = startLineNumber;\n      this.endColumn = startColumn;\n    } else {\n      this.startLineNumber = startLineNumber;\n      this.startColumn = startColumn;\n      this.endLineNumber = endLineNumber;\n      this.endColumn = endColumn;\n    }\n  }\n  /**\r\n   * Test if this range is empty.\r\n   */\n  Range.prototype.isEmpty = function () {\n    return Range.isEmpty(this);\n  };\n  /**\r\n   * Test if `range` is empty.\r\n   */\n  Range.isEmpty = function (range) {\n    return range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn;\n  };\n  /**\r\n   * Test if position is in this range. If the position is at the edges, will return true.\r\n   */\n  Range.prototype.containsPosition = function (position) {\n    return Range.containsPosition(this, position);\n  };\n  /**\r\n   * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n   */\n  Range.containsPosition = function (range, position) {\n    if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n      return false;\n    }\n    if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Test if range is in this range. If the range is equal to this range, will return true.\r\n   */\n  Range.prototype.containsRange = function (range) {\n    return Range.containsRange(this, range);\n  };\n  /**\r\n   * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n   */\n  Range.containsRange = function (range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n      return false;\n    }\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n   */\n  Range.prototype.strictContainsRange = function (range) {\n    return Range.strictContainsRange(this, range);\n  };\n  /**\r\n   * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n   */\n  Range.strictContainsRange = function (range, otherRange) {\n    if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n      return false;\n    }\n    if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n      return false;\n    }\n    if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * A reunion of the two ranges.\r\n   * The smallest position will be used as the start point, and the largest one as the end point.\r\n   */\n  Range.prototype.plusRange = function (range) {\n    return Range.plusRange(this, range);\n  };\n  /**\r\n   * A reunion of the two ranges.\r\n   * The smallest position will be used as the start point, and the largest one as the end point.\r\n   */\n  Range.plusRange = function (a, b) {\n    var startLineNumber;\n    var startColumn;\n    var endLineNumber;\n    var endColumn;\n    if (b.startLineNumber < a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = b.startColumn;\n    } else if (b.startLineNumber === a.startLineNumber) {\n      startLineNumber = b.startLineNumber;\n      startColumn = Math.min(b.startColumn, a.startColumn);\n    } else {\n      startLineNumber = a.startLineNumber;\n      startColumn = a.startColumn;\n    }\n    if (b.endLineNumber > a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = b.endColumn;\n    } else if (b.endLineNumber === a.endLineNumber) {\n      endLineNumber = b.endLineNumber;\n      endColumn = Math.max(b.endColumn, a.endColumn);\n    } else {\n      endLineNumber = a.endLineNumber;\n      endColumn = a.endColumn;\n    }\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n  /**\r\n   * A intersection of the two ranges.\r\n   */\n  Range.prototype.intersectRanges = function (range) {\n    return Range.intersectRanges(this, range);\n  };\n  /**\r\n   * A intersection of the two ranges.\r\n   */\n  Range.intersectRanges = function (a, b) {\n    var resultStartLineNumber = a.startLineNumber;\n    var resultStartColumn = a.startColumn;\n    var resultEndLineNumber = a.endLineNumber;\n    var resultEndColumn = a.endColumn;\n    var otherStartLineNumber = b.startLineNumber;\n    var otherStartColumn = b.startColumn;\n    var otherEndLineNumber = b.endLineNumber;\n    var otherEndColumn = b.endColumn;\n    if (resultStartLineNumber < otherStartLineNumber) {\n      resultStartLineNumber = otherStartLineNumber;\n      resultStartColumn = otherStartColumn;\n    } else if (resultStartLineNumber === otherStartLineNumber) {\n      resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n    }\n    if (resultEndLineNumber > otherEndLineNumber) {\n      resultEndLineNumber = otherEndLineNumber;\n      resultEndColumn = otherEndColumn;\n    } else if (resultEndLineNumber === otherEndLineNumber) {\n      resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n    }\n    // Check if selection is now empty\n    if (resultStartLineNumber > resultEndLineNumber) {\n      return null;\n    }\n    if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n      return null;\n    }\n    return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n  };\n  /**\r\n   * Test if this range equals other.\r\n   */\n  Range.prototype.equalsRange = function (other) {\n    return Range.equalsRange(this, other);\n  };\n  /**\r\n   * Test if range `a` equals `b`.\r\n   */\n  Range.equalsRange = function (a, b) {\n    return !!a && !!b && a.startLineNumber === b.startLineNumber && a.startColumn === b.startColumn && a.endLineNumber === b.endLineNumber && a.endColumn === b.endColumn;\n  };\n  /**\r\n   * Return the end position (which will be after or equal to the start position)\r\n   */\n  Range.prototype.getEndPosition = function () {\n    return new Position(this.endLineNumber, this.endColumn);\n  };\n  /**\r\n   * Return the start position (which will be before or equal to the end position)\r\n   */\n  Range.prototype.getStartPosition = function () {\n    return new Position(this.startLineNumber, this.startColumn);\n  };\n  /**\r\n   * Transform to a user presentable string representation.\r\n   */\n  Range.prototype.toString = function () {\n    return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n  };\n  /**\r\n   * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n   */\n  Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\n    return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n  };\n  /**\r\n   * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n   */\n  Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\n    return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n  };\n  /**\r\n   * Create a new empty range using this range's start position.\r\n   */\n  Range.prototype.collapseToStart = function () {\n    return Range.collapseToStart(this);\n  };\n  /**\r\n   * Create a new empty range using this range's start position.\r\n   */\n  Range.collapseToStart = function (range) {\n    return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n  };\n  // ---\n  Range.fromPositions = function (start, end) {\n    if (end === void 0) {\n      end = start;\n    }\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n  Range.lift = function (range) {\n    if (!range) {\n      return null;\n    }\n    return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n  };\n  /**\r\n   * Test if `obj` is an `IRange`.\r\n   */\n  Range.isIRange = function (obj) {\n    return obj && typeof obj.startLineNumber === 'number' && typeof obj.startColumn === 'number' && typeof obj.endLineNumber === 'number' && typeof obj.endColumn === 'number';\n  };\n  /**\r\n   * Test if the two ranges are touching in any way.\r\n   */\n  Range.areIntersectingOrTouching = function (a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn) {\n      return false;\n    }\n    // Check if `b` is before `a`\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn) {\n      return false;\n    }\n    // These ranges must intersect\n    return true;\n  };\n  /**\r\n   * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n   */\n  Range.areIntersecting = function (a, b) {\n    // Check if `a` is before `b`\n    if (a.endLineNumber < b.startLineNumber || a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn) {\n      return false;\n    }\n    // Check if `b` is before `a`\n    if (b.endLineNumber < a.startLineNumber || b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn) {\n      return false;\n    }\n    // These ranges must intersect\n    return true;\n  };\n  /**\r\n   * A function that compares ranges, useful for sorting ranges\r\n   * It will first compare ranges on the startPosition and then on the endPosition\r\n   */\n  Range.compareRangesUsingStarts = function (a, b) {\n    if (a && b) {\n      var aStartLineNumber = a.startLineNumber | 0;\n      var bStartLineNumber = b.startLineNumber | 0;\n      if (aStartLineNumber === bStartLineNumber) {\n        var aStartColumn = a.startColumn | 0;\n        var bStartColumn = b.startColumn | 0;\n        if (aStartColumn === bStartColumn) {\n          var aEndLineNumber = a.endLineNumber | 0;\n          var bEndLineNumber = b.endLineNumber | 0;\n          if (aEndLineNumber === bEndLineNumber) {\n            var aEndColumn = a.endColumn | 0;\n            var bEndColumn = b.endColumn | 0;\n            return aEndColumn - bEndColumn;\n          }\n          return aEndLineNumber - bEndLineNumber;\n        }\n        return aStartColumn - bStartColumn;\n      }\n      return aStartLineNumber - bStartLineNumber;\n    }\n    var aExists = a ? 1 : 0;\n    var bExists = b ? 1 : 0;\n    return aExists - bExists;\n  };\n  /**\r\n   * A function that compares ranges, useful for sorting ranges\r\n   * It will first compare ranges on the endPosition and then on the startPosition\r\n   */\n  Range.compareRangesUsingEnds = function (a, b) {\n    if (a.endLineNumber === b.endLineNumber) {\n      if (a.endColumn === b.endColumn) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.startColumn - b.startColumn;\n        }\n        return a.startLineNumber - b.startLineNumber;\n      }\n      return a.endColumn - b.endColumn;\n    }\n    return a.endLineNumber - b.endLineNumber;\n  };\n  /**\r\n   * Test if the range spans multiple lines.\r\n   */\n  Range.spansMultipleLines = function (range) {\n    return range.endLineNumber > range.startLineNumber;\n  };\n  return Range;\n}();\nexport { Range };","map":{"version":3,"names":["Position","Range","startLineNumber","startColumn","endLineNumber","endColumn","prototype","isEmpty","range","containsPosition","position","lineNumber","column","containsRange","otherRange","strictContainsRange","plusRange","a","b","Math","min","max","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","equalsRange","other","getEndPosition","getStartPosition","toString","setEndPosition","setStartPosition","collapseToStart","fromPositions","start","end","lift","isIRange","obj","areIntersectingOrTouching","areIntersecting","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","aExists","bExists","compareRangesUsingEnds","spansMultipleLines"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/core/range.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from './position.js';\r\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\r\nvar Range = /** @class */ (function () {\r\n    function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\r\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n            this.startLineNumber = endLineNumber;\r\n            this.startColumn = endColumn;\r\n            this.endLineNumber = startLineNumber;\r\n            this.endColumn = startColumn;\r\n        }\r\n        else {\r\n            this.startLineNumber = startLineNumber;\r\n            this.startColumn = startColumn;\r\n            this.endLineNumber = endLineNumber;\r\n            this.endColumn = endColumn;\r\n        }\r\n    }\r\n    /**\r\n     * Test if this range is empty.\r\n     */\r\n    Range.prototype.isEmpty = function () {\r\n        return Range.isEmpty(this);\r\n    };\r\n    /**\r\n     * Test if `range` is empty.\r\n     */\r\n    Range.isEmpty = function (range) {\r\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n    };\r\n    /**\r\n     * Test if position is in this range. If the position is at the edges, will return true.\r\n     */\r\n    Range.prototype.containsPosition = function (position) {\r\n        return Range.containsPosition(this, position);\r\n    };\r\n    /**\r\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n     */\r\n    Range.containsPosition = function (range, position) {\r\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if range is in this range. If the range is equal to this range, will return true.\r\n     */\r\n    Range.prototype.containsRange = function (range) {\r\n        return Range.containsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n     */\r\n    Range.containsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n     */\r\n    Range.prototype.strictContainsRange = function (range) {\r\n        return Range.strictContainsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n     */\r\n    Range.strictContainsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.prototype.plusRange = function (range) {\r\n        return Range.plusRange(this, range);\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.plusRange = function (a, b) {\r\n        var startLineNumber;\r\n        var startColumn;\r\n        var endLineNumber;\r\n        var endColumn;\r\n        if (b.startLineNumber < a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = b.startColumn;\r\n        }\r\n        else if (b.startLineNumber === a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = Math.min(b.startColumn, a.startColumn);\r\n        }\r\n        else {\r\n            startLineNumber = a.startLineNumber;\r\n            startColumn = a.startColumn;\r\n        }\r\n        if (b.endLineNumber > a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = b.endColumn;\r\n        }\r\n        else if (b.endLineNumber === a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = Math.max(b.endColumn, a.endColumn);\r\n        }\r\n        else {\r\n            endLineNumber = a.endLineNumber;\r\n            endColumn = a.endColumn;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.prototype.intersectRanges = function (range) {\r\n        return Range.intersectRanges(this, range);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.intersectRanges = function (a, b) {\r\n        var resultStartLineNumber = a.startLineNumber;\r\n        var resultStartColumn = a.startColumn;\r\n        var resultEndLineNumber = a.endLineNumber;\r\n        var resultEndColumn = a.endColumn;\r\n        var otherStartLineNumber = b.startLineNumber;\r\n        var otherStartColumn = b.startColumn;\r\n        var otherEndLineNumber = b.endLineNumber;\r\n        var otherEndColumn = b.endColumn;\r\n        if (resultStartLineNumber < otherStartLineNumber) {\r\n            resultStartLineNumber = otherStartLineNumber;\r\n            resultStartColumn = otherStartColumn;\r\n        }\r\n        else if (resultStartLineNumber === otherStartLineNumber) {\r\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n        }\r\n        if (resultEndLineNumber > otherEndLineNumber) {\r\n            resultEndLineNumber = otherEndLineNumber;\r\n            resultEndColumn = otherEndColumn;\r\n        }\r\n        else if (resultEndLineNumber === otherEndLineNumber) {\r\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n        }\r\n        // Check if selection is now empty\r\n        if (resultStartLineNumber > resultEndLineNumber) {\r\n            return null;\r\n        }\r\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n            return null;\r\n        }\r\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n    };\r\n    /**\r\n     * Test if this range equals other.\r\n     */\r\n    Range.prototype.equalsRange = function (other) {\r\n        return Range.equalsRange(this, other);\r\n    };\r\n    /**\r\n     * Test if range `a` equals `b`.\r\n     */\r\n    Range.equalsRange = function (a, b) {\r\n        return (!!a &&\r\n            !!b &&\r\n            a.startLineNumber === b.startLineNumber &&\r\n            a.startColumn === b.startColumn &&\r\n            a.endLineNumber === b.endLineNumber &&\r\n            a.endColumn === b.endColumn);\r\n    };\r\n    /**\r\n     * Return the end position (which will be after or equal to the start position)\r\n     */\r\n    Range.prototype.getEndPosition = function () {\r\n        return new Position(this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Return the start position (which will be before or equal to the end position)\r\n     */\r\n    Range.prototype.getStartPosition = function () {\r\n        return new Position(this.startLineNumber, this.startColumn);\r\n    };\r\n    /**\r\n     * Transform to a user presentable string representation.\r\n     */\r\n    Range.prototype.toString = function () {\r\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n    };\r\n    /**\r\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n     */\r\n    Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\r\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n     */\r\n    Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\r\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.prototype.collapseToStart = function () {\r\n        return Range.collapseToStart(this);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.collapseToStart = function (range) {\r\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n    };\r\n    // ---\r\n    Range.fromPositions = function (start, end) {\r\n        if (end === void 0) { end = start; }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    Range.lift = function (range) {\r\n        if (!range) {\r\n            return null;\r\n        }\r\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IRange`.\r\n     */\r\n    Range.isIRange = function (obj) {\r\n        return (obj\r\n            && (typeof obj.startLineNumber === 'number')\r\n            && (typeof obj.startColumn === 'number')\r\n            && (typeof obj.endLineNumber === 'number')\r\n            && (typeof obj.endColumn === 'number'));\r\n    };\r\n    /**\r\n     * Test if the two ranges are touching in any way.\r\n     */\r\n    Range.areIntersectingOrTouching = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n     */\r\n    Range.areIntersecting = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the startPosition and then on the endPosition\r\n     */\r\n    Range.compareRangesUsingStarts = function (a, b) {\r\n        if (a && b) {\r\n            var aStartLineNumber = a.startLineNumber | 0;\r\n            var bStartLineNumber = b.startLineNumber | 0;\r\n            if (aStartLineNumber === bStartLineNumber) {\r\n                var aStartColumn = a.startColumn | 0;\r\n                var bStartColumn = b.startColumn | 0;\r\n                if (aStartColumn === bStartColumn) {\r\n                    var aEndLineNumber = a.endLineNumber | 0;\r\n                    var bEndLineNumber = b.endLineNumber | 0;\r\n                    if (aEndLineNumber === bEndLineNumber) {\r\n                        var aEndColumn = a.endColumn | 0;\r\n                        var bEndColumn = b.endColumn | 0;\r\n                        return aEndColumn - bEndColumn;\r\n                    }\r\n                    return aEndLineNumber - bEndLineNumber;\r\n                }\r\n                return aStartColumn - bStartColumn;\r\n            }\r\n            return aStartLineNumber - bStartLineNumber;\r\n        }\r\n        var aExists = (a ? 1 : 0);\r\n        var bExists = (b ? 1 : 0);\r\n        return aExists - bExists;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the endPosition and then on the startPosition\r\n     */\r\n    Range.compareRangesUsingEnds = function (a, b) {\r\n        if (a.endLineNumber === b.endLineNumber) {\r\n            if (a.endColumn === b.endColumn) {\r\n                if (a.startLineNumber === b.startLineNumber) {\r\n                    return a.startColumn - b.startColumn;\r\n                }\r\n                return a.startLineNumber - b.startLineNumber;\r\n            }\r\n            return a.endColumn - b.endColumn;\r\n        }\r\n        return a.endLineNumber - b.endLineNumber;\r\n    };\r\n    /**\r\n     * Test if the range spans multiple lines.\r\n     */\r\n    Range.spansMultipleLines = function (range) {\r\n        return range.endLineNumber > range.startLineNumber;\r\n    };\r\n    return Range;\r\n}());\r\nexport { Range };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}