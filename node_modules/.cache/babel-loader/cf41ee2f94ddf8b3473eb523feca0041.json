{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { PrefixSumIndexOfResult } from './prefixSumComputer.js';\nimport { ViewLineData } from './viewModel.js';\nvar OutputPosition = /** @class */function () {\n  function OutputPosition(outputLineIndex, outputOffset) {\n    this.outputLineIndex = outputLineIndex;\n    this.outputOffset = outputOffset;\n  }\n  return OutputPosition;\n}();\nexport { OutputPosition };\nvar LineBreakData = /** @class */function () {\n  function LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n    this.breakOffsets = breakOffsets;\n    this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n    this.wrappedTextIndentLength = wrappedTextIndentLength;\n  }\n  LineBreakData.getInputOffsetOfOutputPosition = function (breakOffsets, outputLineIndex, outputOffset) {\n    if (outputLineIndex === 0) {\n      return outputOffset;\n    } else {\n      return breakOffsets[outputLineIndex - 1] + outputOffset;\n    }\n  };\n  LineBreakData.getOutputPositionOfInputOffset = function (breakOffsets, inputOffset) {\n    var low = 0;\n    var high = breakOffsets.length - 1;\n    var mid = 0;\n    var midStart = 0;\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      var midStop = breakOffsets[mid];\n      midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\n      if (inputOffset < midStart) {\n        high = mid - 1;\n      } else if (inputOffset >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n    return new OutputPosition(mid, inputOffset - midStart);\n  };\n  return LineBreakData;\n}();\nexport { LineBreakData };\nvar CoordinatesConverter = /** @class */function () {\n  function CoordinatesConverter(lines) {\n    this._lines = lines;\n  }\n  // View -> Model conversion and related methods\n  CoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\n    return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n  };\n  CoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this._lines.convertViewRangeToModelRange(viewRange);\n  };\n  CoordinatesConverter.prototype.validateViewPosition = function (viewPosition, expectedModelPosition) {\n    return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n  };\n  CoordinatesConverter.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    return this._lines.validateViewRange(viewRange, expectedModelRange);\n  };\n  // Model -> View conversion and related methods\n  CoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\n  };\n  CoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this._lines.convertModelRangeToViewRange(modelRange);\n  };\n  CoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\n    return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n  };\n  return CoordinatesConverter;\n}();\nexport { CoordinatesConverter };\nvar LineNumberMapper = /** @class */function () {\n  function LineNumberMapper(viewLineCounts) {\n    this._counts = viewLineCounts;\n    this._isValid = false;\n    this._validEndIndex = -1;\n    this._modelToView = [];\n    this._viewToModel = [];\n  }\n  LineNumberMapper.prototype._invalidate = function (index) {\n    this._isValid = false;\n    this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n  };\n  LineNumberMapper.prototype._ensureValid = function () {\n    if (this._isValid) {\n      return;\n    }\n    for (var i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\n      var viewLineCount = this._counts[i];\n      var viewLinesAbove = i > 0 ? this._modelToView[i - 1] : 0;\n      this._modelToView[i] = viewLinesAbove + viewLineCount;\n      for (var j = 0; j < viewLineCount; j++) {\n        this._viewToModel[viewLinesAbove + j] = i;\n      }\n    }\n    // trim things\n    this._modelToView.length = this._counts.length;\n    this._viewToModel.length = this._modelToView[this._modelToView.length - 1];\n    // mark as valid\n    this._isValid = true;\n    this._validEndIndex = this._counts.length - 1;\n  };\n  LineNumberMapper.prototype.changeValue = function (index, value) {\n    if (this._counts[index] === value) {\n      // no change\n      return;\n    }\n    this._counts[index] = value;\n    this._invalidate(index);\n  };\n  LineNumberMapper.prototype.removeValues = function (start, deleteCount) {\n    this._counts.splice(start, deleteCount);\n    this._invalidate(start);\n  };\n  LineNumberMapper.prototype.insertValues = function (insertIndex, insertArr) {\n    this._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\n    this._invalidate(insertIndex);\n  };\n  LineNumberMapper.prototype.getTotalValue = function () {\n    this._ensureValid();\n    return this._viewToModel.length;\n  };\n  LineNumberMapper.prototype.getAccumulatedValue = function (index) {\n    this._ensureValid();\n    return this._modelToView[index];\n  };\n  LineNumberMapper.prototype.getIndexOf = function (accumulatedValue) {\n    this._ensureValid();\n    var modelLineIndex = this._viewToModel[accumulatedValue];\n    var viewLinesAbove = modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0;\n    return new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\n  };\n  return LineNumberMapper;\n}();\nvar SplitLinesCollection = /** @class */function () {\n  function SplitLinesCollection(model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\n    this.model = model;\n    this._validModelVersionId = -1;\n    this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n    this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n    this.fontInfo = fontInfo;\n    this.tabSize = tabSize;\n    this.wrappingStrategy = wrappingStrategy;\n    this.wrappingColumn = wrappingColumn;\n    this.wrappingIndent = wrappingIndent;\n    this._constructLines( /*resetHiddenAreas*/true, null);\n  }\n  SplitLinesCollection.prototype.dispose = function () {\n    this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\n  };\n  SplitLinesCollection.prototype.createCoordinatesConverter = function () {\n    return new CoordinatesConverter(this);\n  };\n  SplitLinesCollection.prototype._constructLines = function (resetHiddenAreas, previousLineBreaks) {\n    var _this = this;\n    this.lines = [];\n    if (resetHiddenAreas) {\n      this.hiddenAreasIds = [];\n    }\n    var linesContent = this.model.getLinesContent();\n    var lineCount = linesContent.length;\n    var lineBreaksComputer = this.createLineBreaksComputer();\n    for (var i = 0; i < lineCount; i++) {\n      lineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\n    }\n    var linesBreaks = lineBreaksComputer.finalize();\n    var values = [];\n    var hiddenAreas = this.hiddenAreasIds.map(function (areaId) {\n      return _this.model.getDecorationRange(areaId);\n    }).sort(Range.compareRangesUsingStarts);\n    var hiddenAreaStart = 1,\n      hiddenAreaEnd = 0;\n    var hiddenAreaIdx = -1;\n    var nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : lineCount + 2;\n    for (var i = 0; i < lineCount; i++) {\n      var lineNumber = i + 1;\n      if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n        hiddenAreaIdx++;\n        hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n        hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n        nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : lineCount + 2;\n      }\n      var isInHiddenArea = lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd;\n      var line = createSplitLine(linesBreaks[i], !isInHiddenArea);\n      values[i] = line.getViewLineCount();\n      this.lines[i] = line;\n    }\n    this._validModelVersionId = this.model.getVersionId();\n    this.prefixSumComputer = new LineNumberMapper(values);\n  };\n  SplitLinesCollection.prototype.getHiddenAreas = function () {\n    var _this = this;\n    return this.hiddenAreasIds.map(function (decId) {\n      return _this.model.getDecorationRange(decId);\n    });\n  };\n  SplitLinesCollection.prototype._reduceRanges = function (_ranges) {\n    var _this = this;\n    if (_ranges.length === 0) {\n      return [];\n    }\n    var ranges = _ranges.map(function (r) {\n      return _this.model.validateRange(r);\n    }).sort(Range.compareRangesUsingStarts);\n    var result = [];\n    var currentRangeStart = ranges[0].startLineNumber;\n    var currentRangeEnd = ranges[0].endLineNumber;\n    for (var i = 1, len = ranges.length; i < len; i++) {\n      var range = ranges[i];\n      if (range.startLineNumber > currentRangeEnd + 1) {\n        result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n        currentRangeStart = range.startLineNumber;\n        currentRangeEnd = range.endLineNumber;\n      } else if (range.endLineNumber > currentRangeEnd) {\n        currentRangeEnd = range.endLineNumber;\n      }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n  };\n  SplitLinesCollection.prototype.setHiddenAreas = function (_ranges) {\n    var _this = this;\n    var newRanges = this._reduceRanges(_ranges);\n    // BEGIN TODO@Martin: Please stop calling this method on each model change!\n    var oldRanges = this.hiddenAreasIds.map(function (areaId) {\n      return _this.model.getDecorationRange(areaId);\n    }).sort(Range.compareRangesUsingStarts);\n    if (newRanges.length === oldRanges.length) {\n      var hasDifference = false;\n      for (var i = 0; i < newRanges.length; i++) {\n        if (!newRanges[i].equalsRange(oldRanges[i])) {\n          hasDifference = true;\n          break;\n        }\n      }\n      if (!hasDifference) {\n        return false;\n      }\n    }\n    // END TODO@Martin: Please stop calling this method on each model change!\n    var newDecorations = [];\n    for (var _i = 0, newRanges_1 = newRanges; _i < newRanges_1.length; _i++) {\n      var newRange = newRanges_1[_i];\n      newDecorations.push({\n        range: newRange,\n        options: ModelDecorationOptions.EMPTY\n      });\n    }\n    this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\n    var hiddenAreas = newRanges;\n    var hiddenAreaStart = 1,\n      hiddenAreaEnd = 0;\n    var hiddenAreaIdx = -1;\n    var nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : this.lines.length + 2;\n    var hasVisibleLine = false;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineNumber = i + 1;\n      if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n        hiddenAreaIdx++;\n        hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n        hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n        nextLineNumberToUpdateHiddenArea = hiddenAreaIdx + 1 < hiddenAreas.length ? hiddenAreaEnd + 1 : this.lines.length + 2;\n      }\n      var lineChanged = false;\n      if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n        // Line should be hidden\n        if (this.lines[i].isVisible()) {\n          this.lines[i] = this.lines[i].setVisible(false);\n          lineChanged = true;\n        }\n      } else {\n        hasVisibleLine = true;\n        // Line should be visible\n        if (!this.lines[i].isVisible()) {\n          this.lines[i] = this.lines[i].setVisible(true);\n          lineChanged = true;\n        }\n      }\n      if (lineChanged) {\n        var newOutputLineCount = this.lines[i].getViewLineCount();\n        this.prefixSumComputer.changeValue(i, newOutputLineCount);\n      }\n    }\n    if (!hasVisibleLine) {\n      // Cannot have everything be hidden => reveal everything!\n      this.setHiddenAreas([]);\n    }\n    return true;\n  };\n  SplitLinesCollection.prototype.modelPositionIsVisible = function (modelLineNumber, _modelColumn) {\n    if (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\n      // invalid arguments\n      return false;\n    }\n    return this.lines[modelLineNumber - 1].isVisible();\n  };\n  SplitLinesCollection.prototype.setTabSize = function (newTabSize) {\n    if (this.tabSize === newTabSize) {\n      return false;\n    }\n    this.tabSize = newTabSize;\n    this._constructLines( /*resetHiddenAreas*/false, null);\n    return true;\n  };\n  SplitLinesCollection.prototype.setWrappingSettings = function (fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\n    var equalFontInfo = this.fontInfo.equals(fontInfo);\n    var equalWrappingStrategy = this.wrappingStrategy === wrappingStrategy;\n    var equalWrappingColumn = this.wrappingColumn === wrappingColumn;\n    var equalWrappingIndent = this.wrappingIndent === wrappingIndent;\n    if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\n      return false;\n    }\n    var onlyWrappingColumnChanged = equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent;\n    this.fontInfo = fontInfo;\n    this.wrappingStrategy = wrappingStrategy;\n    this.wrappingColumn = wrappingColumn;\n    this.wrappingIndent = wrappingIndent;\n    var previousLineBreaks = null;\n    if (onlyWrappingColumnChanged) {\n      previousLineBreaks = [];\n      for (var i = 0, len = this.lines.length; i < len; i++) {\n        previousLineBreaks[i] = this.lines[i].getLineBreakData();\n      }\n    }\n    this._constructLines( /*resetHiddenAreas*/false, previousLineBreaks);\n    return true;\n  };\n  SplitLinesCollection.prototype.createLineBreaksComputer = function () {\n    var lineBreaksComputerFactory = this.wrappingStrategy === 'advanced' ? this._domLineBreaksComputerFactory : this._monospaceLineBreaksComputerFactory;\n    return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\n  };\n  SplitLinesCollection.prototype.onModelFlushed = function () {\n    this._constructLines( /*resetHiddenAreas*/true, null);\n  };\n  SplitLinesCollection.prototype.onModelLinesDeleted = function (versionId, fromLineNumber, toLineNumber) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return null;\n    }\n    var outputFromLineNumber = fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1;\n    var outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\n    this.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n    this.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n    return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n  };\n  SplitLinesCollection.prototype.onModelLinesInserted = function (versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return null;\n    }\n    var hiddenAreas = this.getHiddenAreas();\n    var isInHiddenArea = false;\n    var testPosition = new Position(fromLineNumber, 1);\n    for (var _i = 0, hiddenAreas_1 = hiddenAreas; _i < hiddenAreas_1.length; _i++) {\n      var hiddenArea = hiddenAreas_1[_i];\n      if (hiddenArea.containsPosition(testPosition)) {\n        isInHiddenArea = true;\n        break;\n      }\n    }\n    var outputFromLineNumber = fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1;\n    var totalOutputLineCount = 0;\n    var insertLines = [];\n    var insertPrefixSumValues = [];\n    for (var i = 0, len = lineBreaks.length; i < len; i++) {\n      var line = createSplitLine(lineBreaks[i], !isInHiddenArea);\n      insertLines.push(line);\n      var outputLineCount = line.getViewLineCount();\n      totalOutputLineCount += outputLineCount;\n      insertPrefixSumValues[i] = outputLineCount;\n    }\n    // TODO@Alex: use arrays.arrayInsert\n    this.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\n    this.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n    return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n  };\n  SplitLinesCollection.prototype.onModelLineChanged = function (versionId, lineNumber, lineBreakData) {\n    if (versionId <= this._validModelVersionId) {\n      // Here we check for versionId in case the lines were reconstructed in the meantime.\n      // We don't want to apply stale change events on top of a newer read model state.\n      return [false, null, null, null];\n    }\n    var lineIndex = lineNumber - 1;\n    var oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\n    var isVisible = this.lines[lineIndex].isVisible();\n    var line = createSplitLine(lineBreakData, isVisible);\n    this.lines[lineIndex] = line;\n    var newOutputLineCount = this.lines[lineIndex].getViewLineCount();\n    var lineMappingChanged = false;\n    var changeFrom = 0;\n    var changeTo = -1;\n    var insertFrom = 0;\n    var insertTo = -1;\n    var deleteFrom = 0;\n    var deleteTo = -1;\n    if (oldOutputLineCount > newOutputLineCount) {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + newOutputLineCount - 1;\n      deleteFrom = changeTo + 1;\n      deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n      lineMappingChanged = true;\n    } else if (oldOutputLineCount < newOutputLineCount) {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + oldOutputLineCount - 1;\n      insertFrom = changeTo + 1;\n      insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n      lineMappingChanged = true;\n    } else {\n      changeFrom = lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1;\n      changeTo = changeFrom + newOutputLineCount - 1;\n    }\n    this.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\n    var viewLinesChangedEvent = changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null;\n    var viewLinesInsertedEvent = insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null;\n    var viewLinesDeletedEvent = deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null;\n    return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n  };\n  SplitLinesCollection.prototype.acceptVersionId = function (versionId) {\n    this._validModelVersionId = versionId;\n    if (this.lines.length === 1 && !this.lines[0].isVisible()) {\n      // At least one line must be visible => reset hidden areas\n      this.setHiddenAreas([]);\n    }\n  };\n  SplitLinesCollection.prototype.getViewLineCount = function () {\n    return this.prefixSumComputer.getTotalValue();\n  };\n  SplitLinesCollection.prototype._toValidViewLineNumber = function (viewLineNumber) {\n    if (viewLineNumber < 1) {\n      return 1;\n    }\n    var viewLineCount = this.getViewLineCount();\n    if (viewLineNumber > viewLineCount) {\n      return viewLineCount;\n    }\n    return viewLineNumber | 0;\n  };\n  SplitLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, minLineNumber, maxLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    minLineNumber = this._toValidViewLineNumber(minLineNumber);\n    maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n    var modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n    var modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n    var modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n    var result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n    var viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n    var viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n    return {\n      startLineNumber: viewStartPosition.lineNumber,\n      endLineNumber: viewEndPosition.lineNumber,\n      indent: result.indent\n    };\n  };\n  SplitLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\n    viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n    viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n    var modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n    var modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n    var result = [];\n    var resultRepeatCount = [];\n    var resultRepeatOption = [];\n    var modelStartLineIndex = modelStart.lineNumber - 1;\n    var modelEndLineIndex = modelEnd.lineNumber - 1;\n    var reqStart = null;\n    for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n      if (line.isVisible()) {\n        var viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n        var viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n        var count = viewLineEndIndex - viewLineStartIndex + 1;\n        var option = 0 /* BlockNone */;\n        if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n          // wrapped lines should block indent guides\n          option = viewLineStartIndex === 0 ? 1 /* BlockSubsequent */ : 2 /* BlockAll */;\n        }\n\n        resultRepeatCount.push(count);\n        resultRepeatOption.push(option);\n        // merge into previous request\n        if (reqStart === null) {\n          reqStart = new Position(modelLineIndex + 1, 0);\n        }\n      } else {\n        // hit invisible line => flush request\n        if (reqStart !== null) {\n          result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n          reqStart = null;\n        }\n      }\n    }\n    if (reqStart !== null) {\n      result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n      reqStart = null;\n    }\n    var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n    var viewIndents = new Array(viewLineCount);\n    var currIndex = 0;\n    for (var i = 0, len = result.length; i < len; i++) {\n      var value = result[i];\n      var count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n      var option = resultRepeatOption[i];\n      var blockAtIndex = void 0;\n      if (option === 2 /* BlockAll */) {\n        blockAtIndex = 0;\n      } else if (option === 1 /* BlockSubsequent */) {\n        blockAtIndex = 1;\n      } else {\n        blockAtIndex = count;\n      }\n      for (var j = 0; j < count; j++) {\n        if (j === blockAtIndex) {\n          value = 0;\n        }\n        viewIndents[currIndex++] = value;\n      }\n    }\n    return viewIndents;\n  };\n  SplitLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\n  };\n  SplitLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\n  };\n  SplitLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n  };\n  SplitLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n  };\n  SplitLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    return this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\n  };\n  SplitLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\n    viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n    viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n    var start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\n    var viewLineNumber = viewStartLineNumber;\n    var startModelLineIndex = start.index;\n    var startRemainder = start.remainder;\n    var result = [];\n    for (var modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n      if (!line.isVisible()) {\n        continue;\n      }\n      var fromViewLineIndex = modelLineIndex === startModelLineIndex ? startRemainder : 0;\n      var remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n      var lastLine = false;\n      if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n        lastLine = true;\n        remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n      }\n      var toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\n      line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\n      viewLineNumber += remainingViewLineCount;\n      if (lastLine) {\n        break;\n      }\n    }\n    return result;\n  };\n  SplitLinesCollection.prototype.validateViewPosition = function (viewLineNumber, viewColumn, expectedModelPosition) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    var line = this.lines[lineIndex];\n    var minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n    var maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n    if (viewColumn < minColumn) {\n      viewColumn = minColumn;\n    }\n    if (viewColumn > maxColumn) {\n      viewColumn = maxColumn;\n    }\n    var computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n    var computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n    if (computedModelPosition.equals(expectedModelPosition)) {\n      return new Position(viewLineNumber, viewColumn);\n    }\n    return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n  };\n  SplitLinesCollection.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    var validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n    var validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n    return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n  };\n  SplitLinesCollection.prototype.convertViewPositionToModelPosition = function (viewLineNumber, viewColumn) {\n    viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n    var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\n    var lineIndex = r.index;\n    var remainder = r.remainder;\n    var inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn);\n    // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n    return this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\n  };\n  SplitLinesCollection.prototype.convertViewRangeToModelRange = function (viewRange) {\n    var start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n    var end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n  SplitLinesCollection.prototype.convertModelPositionToViewPosition = function (_modelLineNumber, _modelColumn) {\n    var validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n    var inputLineNumber = validPosition.lineNumber;\n    var inputColumn = validPosition.column;\n    var lineIndex = inputLineNumber - 1,\n      lineIndexChanged = false;\n    while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n      lineIndex--;\n      lineIndexChanged = true;\n    }\n    if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n      // Could not reach a real line\n      // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n      return new Position(1, 1);\n    }\n    var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n    var r;\n    if (lineIndexChanged) {\n      r = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    } else {\n      r = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\n    }\n    // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n    return r;\n  };\n  SplitLinesCollection.prototype.convertModelRangeToViewRange = function (modelRange) {\n    var start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\n    var end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\n    if (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\n      // This is a single line range that ends up taking more lines due to wrapping\n      if (end.column === this.getViewLineMinColumn(end.lineNumber)) {\n        // the end column lands on the first column of the next line\n        return new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\n      }\n    }\n    return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n  };\n  SplitLinesCollection.prototype._getViewLineNumberForModelPosition = function (inputLineNumber, inputColumn) {\n    var lineIndex = inputLineNumber - 1;\n    if (this.lines[lineIndex].isVisible()) {\n      // this model line is visible\n      var deltaLineNumber_1 = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n      return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber_1, inputColumn);\n    }\n    // this model line is not visible\n    while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\n      lineIndex--;\n    }\n    if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\n      // Could not reach a real line\n      return 1;\n    }\n    var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\n    return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n  };\n  SplitLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\n    var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n    var result = new OverviewRulerDecorations();\n    for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\n      var decoration = decorations_1[_i];\n      var opts = decoration.options.overviewRuler;\n      var lane = opts ? opts.position : 0;\n      if (lane === 0) {\n        continue;\n      }\n      var color = opts.getColor(theme);\n      var viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n      var viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n      result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n    }\n    return result.result;\n  };\n  SplitLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    var modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n    var modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n    if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n      // most likely there are no hidden lines => fast path\n      // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n      return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\n    }\n    var result = [];\n    var modelStartLineIndex = modelStart.lineNumber - 1;\n    var modelEndLineIndex = modelEnd.lineNumber - 1;\n    var reqStart = null;\n    for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n      var line = this.lines[modelLineIndex];\n      if (line.isVisible()) {\n        // merge into previous request\n        if (reqStart === null) {\n          reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n        }\n      } else {\n        // hit invisible line => flush request\n        if (reqStart !== null) {\n          var maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n          result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\n          reqStart = null;\n        }\n      }\n    }\n    if (reqStart !== null) {\n      result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\n      reqStart = null;\n    }\n    result.sort(function (a, b) {\n      var res = Range.compareRangesUsingStarts(a.range, b.range);\n      if (res === 0) {\n        if (a.id < b.id) {\n          return -1;\n        }\n        if (a.id > b.id) {\n          return 1;\n        }\n        return 0;\n      }\n      return res;\n    });\n    // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n    var finalResult = [],\n      finalResultLen = 0;\n    var prevDecId = null;\n    for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n      var dec = result_1[_i];\n      var decId = dec.id;\n      if (prevDecId === decId) {\n        // skip\n        continue;\n      }\n      prevDecId = decId;\n      finalResult[finalResultLen++] = dec;\n    }\n    return finalResult;\n  };\n  return SplitLinesCollection;\n}();\nexport { SplitLinesCollection };\nvar VisibleIdentitySplitLine = /** @class */function () {\n  function VisibleIdentitySplitLine() {}\n  VisibleIdentitySplitLine.prototype.isVisible = function () {\n    return true;\n  };\n  VisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\n    if (isVisible) {\n      return this;\n    }\n    return InvisibleIdentitySplitLine.INSTANCE;\n  };\n  VisibleIdentitySplitLine.prototype.getLineBreakData = function () {\n    return null;\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineCount = function () {\n    return 1;\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineContent = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineContent(modelLineNumber);\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineLength = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineLength(modelLineNumber);\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineMinColumn(modelLineNumber);\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, _outputLineIndex) {\n    return model.getLineMaxColumn(modelLineNumber);\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineData = function (model, modelLineNumber, _outputLineIndex) {\n    var lineTokens = model.getLineTokens(modelLineNumber);\n    var lineContent = lineTokens.getLineContent();\n    return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\n  };\n  VisibleIdentitySplitLine.prototype.getViewLinesData = function (model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n    if (!needed[globalStartIndex]) {\n      result[globalStartIndex] = null;\n      return;\n    }\n    result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n  };\n  VisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, outputColumn) {\n    return outputColumn;\n  };\n  VisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\n    return new Position(deltaLineNumber, inputColumn);\n  };\n  VisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, _inputColumn) {\n    return deltaLineNumber;\n  };\n  VisibleIdentitySplitLine.INSTANCE = new VisibleIdentitySplitLine();\n  return VisibleIdentitySplitLine;\n}();\nvar InvisibleIdentitySplitLine = /** @class */function () {\n  function InvisibleIdentitySplitLine() {}\n  InvisibleIdentitySplitLine.prototype.isVisible = function () {\n    return false;\n  };\n  InvisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\n    if (!isVisible) {\n      return this;\n    }\n    return VisibleIdentitySplitLine.INSTANCE;\n  };\n  InvisibleIdentitySplitLine.prototype.getLineBreakData = function () {\n    return null;\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineCount = function () {\n    return 0;\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineContent = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineLength = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineData = function (_model, _modelLineNumber, _outputLineIndex) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLinesData = function (_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, _outputColumn) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (_deltaLineNumber, _inputColumn) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (_deltaLineNumber, _inputColumn) {\n    throw new Error('Not supported');\n  };\n  InvisibleIdentitySplitLine.INSTANCE = new InvisibleIdentitySplitLine();\n  return InvisibleIdentitySplitLine;\n}();\nvar SplitLine = /** @class */function () {\n  function SplitLine(lineBreakData, isVisible) {\n    this._lineBreakData = lineBreakData;\n    this._isVisible = isVisible;\n  }\n  SplitLine.prototype.isVisible = function () {\n    return this._isVisible;\n  };\n  SplitLine.prototype.setVisible = function (isVisible) {\n    this._isVisible = isVisible;\n    return this;\n  };\n  SplitLine.prototype.getLineBreakData = function () {\n    return this._lineBreakData;\n  };\n  SplitLine.prototype.getViewLineCount = function () {\n    if (!this._isVisible) {\n      return 0;\n    }\n    return this._lineBreakData.breakOffsets.length;\n  };\n  SplitLine.prototype.getInputStartOffsetOfOutputLineIndex = function (outputLineIndex) {\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\n  };\n  SplitLine.prototype.getInputEndOffsetOfOutputLineIndex = function (model, modelLineNumber, outputLineIndex) {\n    if (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\n      return model.getLineMaxColumn(modelLineNumber) - 1;\n    }\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\n  };\n  SplitLine.prototype.getViewLineContent = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var r = model.getValueInRange({\n      startLineNumber: modelLineNumber,\n      startColumn: startOffset + 1,\n      endLineNumber: modelLineNumber,\n      endColumn: endOffset + 1\n    });\n    if (outputLineIndex > 0) {\n      r = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\n    }\n    return r;\n  };\n  SplitLine.prototype.getViewLineLength = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var r = endOffset - startOffset;\n    if (outputLineIndex > 0) {\n      r = this._lineBreakData.wrappedTextIndentLength + r;\n    }\n    return r;\n  };\n  SplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    if (outputLineIndex > 0) {\n      return this._lineBreakData.wrappedTextIndentLength + 1;\n    }\n    return 1;\n  };\n  SplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    return this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\n  };\n  SplitLine.prototype.getViewLineData = function (model, modelLineNumber, outputLineIndex) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\n    var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\n    var lineContent = model.getValueInRange({\n      startLineNumber: modelLineNumber,\n      startColumn: startOffset + 1,\n      endLineNumber: modelLineNumber,\n      endColumn: endOffset + 1\n    });\n    if (outputLineIndex > 0) {\n      lineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\n    }\n    var minColumn = outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1;\n    var maxColumn = lineContent.length + 1;\n    var continuesWithWrappedLine = outputLineIndex + 1 < this.getViewLineCount();\n    var deltaStartIndex = 0;\n    if (outputLineIndex > 0) {\n      deltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\n    }\n    var lineTokens = model.getLineTokens(modelLineNumber);\n    var startVisibleColumn = outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1];\n    return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, lineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex));\n  };\n  SplitLine.prototype.getViewLinesData = function (model, modelLineNumber, fromOuputLineIndex, toOutputLineIndex, globalStartIndex, needed, result) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    for (var outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\n      var globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\n      if (!needed[globalIndex]) {\n        result[globalIndex] = null;\n        continue;\n      }\n      result[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\n    }\n  };\n  SplitLine.prototype.getModelColumnOfViewPosition = function (outputLineIndex, outputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var adjustedColumn = outputColumn - 1;\n    if (outputLineIndex > 0) {\n      if (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\n        adjustedColumn = 0;\n      } else {\n        adjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\n      }\n    }\n    return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\n  };\n  SplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n    var outputLineIndex = r.outputLineIndex;\n    var outputColumn = r.outputOffset + 1;\n    if (outputLineIndex > 0) {\n      outputColumn += this._lineBreakData.wrappedTextIndentLength;\n    }\n    //\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\n    return new Position(deltaLineNumber + outputLineIndex, outputColumn);\n  };\n  SplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, inputColumn) {\n    if (!this._isVisible) {\n      throw new Error('Not supported');\n    }\n    var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\n    return deltaLineNumber + r.outputLineIndex;\n  };\n  return SplitLine;\n}();\nexport { SplitLine };\nvar _spaces = [''];\nfunction spaces(count) {\n  if (count >= _spaces.length) {\n    for (var i = 1; i <= count; i++) {\n      _spaces[i] = _makeSpaces(i);\n    }\n  }\n  return _spaces[count];\n}\nfunction _makeSpaces(count) {\n  return new Array(count + 1).join(' ');\n}\nfunction createSplitLine(lineBreakData, isVisible) {\n  if (lineBreakData === null) {\n    // No mapping needed\n    if (isVisible) {\n      return VisibleIdentitySplitLine.INSTANCE;\n    }\n    return InvisibleIdentitySplitLine.INSTANCE;\n  } else {\n    return new SplitLine(lineBreakData, isVisible);\n  }\n}\nvar IdentityCoordinatesConverter = /** @class */function () {\n  function IdentityCoordinatesConverter(lines) {\n    this._lines = lines;\n  }\n  IdentityCoordinatesConverter.prototype._validPosition = function (pos) {\n    return this._lines.model.validatePosition(pos);\n  };\n  IdentityCoordinatesConverter.prototype._validRange = function (range) {\n    return this._lines.model.validateRange(range);\n  };\n  // View -> Model conversion and related methods\n  IdentityCoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\n    return this._validPosition(viewPosition);\n  };\n  IdentityCoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this._validRange(viewRange);\n  };\n  IdentityCoordinatesConverter.prototype.validateViewPosition = function (_viewPosition, expectedModelPosition) {\n    return this._validPosition(expectedModelPosition);\n  };\n  IdentityCoordinatesConverter.prototype.validateViewRange = function (_viewRange, expectedModelRange) {\n    return this._validRange(expectedModelRange);\n  };\n  // Model -> View conversion and related methods\n  IdentityCoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this._validPosition(modelPosition);\n  };\n  IdentityCoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this._validRange(modelRange);\n  };\n  IdentityCoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\n    var lineCount = this._lines.model.getLineCount();\n    if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n      // invalid arguments\n      return false;\n    }\n    return true;\n  };\n  return IdentityCoordinatesConverter;\n}();\nexport { IdentityCoordinatesConverter };\nvar IdentityLinesCollection = /** @class */function () {\n  function IdentityLinesCollection(model) {\n    this.model = model;\n  }\n  IdentityLinesCollection.prototype.dispose = function () {};\n  IdentityLinesCollection.prototype.createCoordinatesConverter = function () {\n    return new IdentityCoordinatesConverter(this);\n  };\n  IdentityLinesCollection.prototype.getHiddenAreas = function () {\n    return [];\n  };\n  IdentityLinesCollection.prototype.setHiddenAreas = function (_ranges) {\n    return false;\n  };\n  IdentityLinesCollection.prototype.setTabSize = function (_newTabSize) {\n    return false;\n  };\n  IdentityLinesCollection.prototype.setWrappingSettings = function (_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n    return false;\n  };\n  IdentityLinesCollection.prototype.createLineBreaksComputer = function () {\n    var result = [];\n    return {\n      addRequest: function addRequest(lineText, previousLineBreakData) {\n        result.push(null);\n      },\n      finalize: function finalize() {\n        return result;\n      }\n    };\n  };\n  IdentityLinesCollection.prototype.onModelFlushed = function () {};\n  IdentityLinesCollection.prototype.onModelLinesDeleted = function (_versionId, fromLineNumber, toLineNumber) {\n    return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n  };\n  IdentityLinesCollection.prototype.onModelLinesInserted = function (_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n    return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n  };\n  IdentityLinesCollection.prototype.onModelLineChanged = function (_versionId, lineNumber, lineBreakData) {\n    return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\n  };\n  IdentityLinesCollection.prototype.acceptVersionId = function (_versionId) {};\n  IdentityLinesCollection.prototype.getViewLineCount = function () {\n    return this.model.getLineCount();\n  };\n  IdentityLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, _minLineNumber, _maxLineNumber) {\n    return {\n      startLineNumber: viewLineNumber,\n      endLineNumber: viewLineNumber,\n      indent: 0\n    };\n  };\n  IdentityLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\n    var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n    var result = new Array(viewLineCount);\n    for (var i = 0; i < viewLineCount; i++) {\n      result[i] = 0;\n    }\n    return result;\n  };\n  IdentityLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\n    return this.model.getLineContent(viewLineNumber);\n  };\n  IdentityLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\n    return this.model.getLineLength(viewLineNumber);\n  };\n  IdentityLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\n    return this.model.getLineMinColumn(viewLineNumber);\n  };\n  IdentityLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\n    return this.model.getLineMaxColumn(viewLineNumber);\n  };\n  IdentityLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\n    var lineTokens = this.model.getLineTokens(viewLineNumber);\n    var lineContent = lineTokens.getLineContent();\n    return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\n  };\n  IdentityLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\n    var lineCount = this.model.getLineCount();\n    viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n    viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n    var result = [];\n    for (var lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n      var idx = lineNumber - viewStartLineNumber;\n      if (!needed[idx]) {\n        result[idx] = null;\n      }\n      result[idx] = this.getViewLineData(lineNumber);\n    }\n    return result;\n  };\n  IdentityLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\n    var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\n    var result = new OverviewRulerDecorations();\n    for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\n      var decoration = decorations_2[_i];\n      var opts = decoration.options.overviewRuler;\n      var lane = opts ? opts.position : 0;\n      if (lane === 0) {\n        continue;\n      }\n      var color = opts.getColor(theme);\n      var viewStartLineNumber = decoration.range.startLineNumber;\n      var viewEndLineNumber = decoration.range.endLineNumber;\n      result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\n    }\n    return result.result;\n  };\n  IdentityLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\n  };\n  return IdentityLinesCollection;\n}();\nexport { IdentityLinesCollection };\nvar OverviewRulerDecorations = /** @class */function () {\n  function OverviewRulerDecorations() {\n    this.result = Object.create(null);\n  }\n  OverviewRulerDecorations.prototype.accept = function (color, startLineNumber, endLineNumber, lane) {\n    var prev = this.result[color];\n    if (prev) {\n      var prevLane = prev[prev.length - 3];\n      var prevEndLineNumber = prev[prev.length - 1];\n      if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n        // merge into prev\n        if (endLineNumber > prevEndLineNumber) {\n          prev[prev.length - 1] = endLineNumber;\n        }\n        return;\n      }\n      // push\n      prev.push(lane, startLineNumber, endLineNumber);\n    } else {\n      this.result[color] = [lane, startLineNumber, endLineNumber];\n    }\n  };\n  return OverviewRulerDecorations;\n}();","map":{"version":3,"names":["arrays","Position","Range","ModelDecorationOptions","viewEvents","PrefixSumIndexOfResult","ViewLineData","OutputPosition","outputLineIndex","outputOffset","LineBreakData","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","getInputOffsetOfOutputPosition","getOutputPositionOfInputOffset","inputOffset","low","high","length","mid","midStart","midStop","CoordinatesConverter","lines","_lines","prototype","convertViewPositionToModelPosition","viewPosition","lineNumber","column","convertViewRangeToModelRange","viewRange","validateViewPosition","expectedModelPosition","validateViewRange","expectedModelRange","convertModelPositionToViewPosition","modelPosition","convertModelRangeToViewRange","modelRange","modelPositionIsVisible","LineNumberMapper","viewLineCounts","_counts","_isValid","_validEndIndex","_modelToView","_viewToModel","_invalidate","index","Math","min","_ensureValid","i","len","viewLineCount","viewLinesAbove","j","changeValue","value","removeValues","start","deleteCount","splice","insertValues","insertIndex","insertArr","arrayInsert","getTotalValue","getAccumulatedValue","getIndexOf","accumulatedValue","modelLineIndex","SplitLinesCollection","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","fontInfo","tabSize","wrappingStrategy","wrappingColumn","wrappingIndent","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","dispose","hiddenAreasIds","deltaDecorations","createCoordinatesConverter","resetHiddenAreas","previousLineBreaks","_this","linesContent","getLinesContent","lineCount","lineBreaksComputer","createLineBreaksComputer","addRequest","linesBreaks","finalize","values","hiddenAreas","map","areaId","getDecorationRange","sort","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","startLineNumber","endLineNumber","isInHiddenArea","line","createSplitLine","getViewLineCount","getVersionId","prefixSumComputer","getHiddenAreas","decId","_reduceRanges","_ranges","ranges","r","validateRange","result","currentRangeStart","currentRangeEnd","range","push","setHiddenAreas","newRanges","oldRanges","hasDifference","equalsRange","newDecorations","_i","newRanges_1","newRange","options","EMPTY","hasVisibleLine","lineChanged","isVisible","setVisible","newOutputLineCount","modelLineNumber","_modelColumn","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equals","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","onlyWrappingColumnChanged","getLineBreakData","lineBreaksComputerFactory","onModelFlushed","onModelLinesDeleted","versionId","fromLineNumber","toLineNumber","outputFromLineNumber","outputToLineNumber","ViewLinesDeletedEvent","onModelLinesInserted","_toLineNumber","lineBreaks","testPosition","hiddenAreas_1","hiddenArea","containsPosition","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","slice","concat","ViewLinesInsertedEvent","onModelLineChanged","lineBreakData","lineIndex","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","viewLinesChangedEvent","ViewLinesChangedEvent","viewLinesInsertedEvent","viewLinesDeletedEvent","acceptVersionId","_toValidViewLineNumber","viewLineNumber","getActiveIndentGuide","minLineNumber","maxLineNumber","getViewLineMinColumn","modelMinPosition","modelMaxPosition","viewStartPosition","viewEndPosition","getLineMaxColumn","indent","getViewLinesIndentGuides","viewStartLineNumber","viewEndLineNumber","modelStart","modelEnd","getViewLineMaxColumn","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","count","option","getLinesIndentGuides","viewIndents","Array","currIndex","blockAtIndex","getViewLineContent","remainder","getViewLineLength","getViewLineData","getViewLinesData","needed","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","toViewLineIndex","viewColumn","minColumn","maxColumn","computedModelColumn","getModelColumnOfViewPosition","computedModelPosition","validatePosition","validViewStart","startColumn","getStartPosition","validViewEnd","endColumn","getEndPosition","inputColumn","end","_modelLineNumber","validPosition","inputLineNumber","lineIndexChanged","deltaLineNumber","getViewPositionOfModelPosition","_getViewLineNumberForModelPosition","deltaLineNumber_1","getAllOverviewRulerDecorations","ownerId","filterOutValidation","theme","decorations","getOverviewRulerDecorations","OverviewRulerDecorations","decorations_1","decoration","opts","overviewRuler","lane","position","color","getColor","accept","getDecorationsInRange","maxLineColumn","a","b","res","id","finalResult","finalResultLen","prevDecId","result_1","dec","VisibleIdentitySplitLine","InvisibleIdentitySplitLine","INSTANCE","_outputLineIndex","getLineContent","getLineLength","getLineMinColumn","lineTokens","getLineTokens","lineContent","inflate","_fromOuputLineIndex","_toOutputLineIndex","globalStartIndex","outputColumn","_inputColumn","_model","Error","_globalStartIndex","_needed","_result","_outputColumn","_deltaLineNumber","SplitLine","_lineBreakData","_isVisible","getInputStartOffsetOfOutputLineIndex","getInputEndOffsetOfOutputLineIndex","startOffset","endOffset","getValueInRange","spaces","continuesWithWrappedLine","deltaStartIndex","startVisibleColumn","sliceAndInflate","fromOuputLineIndex","toOutputLineIndex","globalIndex","adjustedColumn","_spaces","_makeSpaces","join","IdentityCoordinatesConverter","_validPosition","pos","_validRange","_viewPosition","_viewRange","IdentityLinesCollection","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","lineText","previousLineBreakData","_versionId","_minLineNumber","_maxLineNumber","max","idx","decorations_2","Object","create","prev","prevLane","prevEndLineNumber"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/viewModel/splitLinesCollection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { ModelDecorationOptions } from '../model/textModel.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { PrefixSumIndexOfResult } from './prefixSumComputer.js';\r\nimport { ViewLineData } from './viewModel.js';\r\nvar OutputPosition = /** @class */ (function () {\r\n    function OutputPosition(outputLineIndex, outputOffset) {\r\n        this.outputLineIndex = outputLineIndex;\r\n        this.outputOffset = outputOffset;\r\n    }\r\n    return OutputPosition;\r\n}());\r\nexport { OutputPosition };\r\nvar LineBreakData = /** @class */ (function () {\r\n    function LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\r\n        this.breakOffsets = breakOffsets;\r\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\r\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    }\r\n    LineBreakData.getInputOffsetOfOutputPosition = function (breakOffsets, outputLineIndex, outputOffset) {\r\n        if (outputLineIndex === 0) {\r\n            return outputOffset;\r\n        }\r\n        else {\r\n            return breakOffsets[outputLineIndex - 1] + outputOffset;\r\n        }\r\n    };\r\n    LineBreakData.getOutputPositionOfInputOffset = function (breakOffsets, inputOffset) {\r\n        var low = 0;\r\n        var high = breakOffsets.length - 1;\r\n        var mid = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            var midStop = breakOffsets[mid];\r\n            midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\r\n            if (inputOffset < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (inputOffset >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new OutputPosition(mid, inputOffset - midStart);\r\n    };\r\n    return LineBreakData;\r\n}());\r\nexport { LineBreakData };\r\nvar CoordinatesConverter = /** @class */ (function () {\r\n    function CoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    // View -> Model conversion and related methods\r\n    CoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._lines.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewPosition = function (viewPosition, expectedModelPosition) {\r\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    CoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._lines.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    return CoordinatesConverter;\r\n}());\r\nexport { CoordinatesConverter };\r\nvar LineNumberMapper = /** @class */ (function () {\r\n    function LineNumberMapper(viewLineCounts) {\r\n        this._counts = viewLineCounts;\r\n        this._isValid = false;\r\n        this._validEndIndex = -1;\r\n        this._modelToView = [];\r\n        this._viewToModel = [];\r\n    }\r\n    LineNumberMapper.prototype._invalidate = function (index) {\r\n        this._isValid = false;\r\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\r\n    };\r\n    LineNumberMapper.prototype._ensureValid = function () {\r\n        if (this._isValid) {\r\n            return;\r\n        }\r\n        for (var i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\r\n            var viewLineCount = this._counts[i];\r\n            var viewLinesAbove = (i > 0 ? this._modelToView[i - 1] : 0);\r\n            this._modelToView[i] = viewLinesAbove + viewLineCount;\r\n            for (var j = 0; j < viewLineCount; j++) {\r\n                this._viewToModel[viewLinesAbove + j] = i;\r\n            }\r\n        }\r\n        // trim things\r\n        this._modelToView.length = this._counts.length;\r\n        this._viewToModel.length = this._modelToView[this._modelToView.length - 1];\r\n        // mark as valid\r\n        this._isValid = true;\r\n        this._validEndIndex = this._counts.length - 1;\r\n    };\r\n    LineNumberMapper.prototype.changeValue = function (index, value) {\r\n        if (this._counts[index] === value) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._counts[index] = value;\r\n        this._invalidate(index);\r\n    };\r\n    LineNumberMapper.prototype.removeValues = function (start, deleteCount) {\r\n        this._counts.splice(start, deleteCount);\r\n        this._invalidate(start);\r\n    };\r\n    LineNumberMapper.prototype.insertValues = function (insertIndex, insertArr) {\r\n        this._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\r\n        this._invalidate(insertIndex);\r\n    };\r\n    LineNumberMapper.prototype.getTotalValue = function () {\r\n        this._ensureValid();\r\n        return this._viewToModel.length;\r\n    };\r\n    LineNumberMapper.prototype.getAccumulatedValue = function (index) {\r\n        this._ensureValid();\r\n        return this._modelToView[index];\r\n    };\r\n    LineNumberMapper.prototype.getIndexOf = function (accumulatedValue) {\r\n        this._ensureValid();\r\n        var modelLineIndex = this._viewToModel[accumulatedValue];\r\n        var viewLinesAbove = (modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0);\r\n        return new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\r\n    };\r\n    return LineNumberMapper;\r\n}());\r\nvar SplitLinesCollection = /** @class */ (function () {\r\n    function SplitLinesCollection(model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        this.model = model;\r\n        this._validModelVersionId = -1;\r\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\r\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\r\n        this.fontInfo = fontInfo;\r\n        this.tabSize = tabSize;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    }\r\n    SplitLinesCollection.prototype.dispose = function () {\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\r\n    };\r\n    SplitLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new CoordinatesConverter(this);\r\n    };\r\n    SplitLinesCollection.prototype._constructLines = function (resetHiddenAreas, previousLineBreaks) {\r\n        var _this = this;\r\n        this.lines = [];\r\n        if (resetHiddenAreas) {\r\n            this.hiddenAreasIds = [];\r\n        }\r\n        var linesContent = this.model.getLinesContent();\r\n        var lineCount = linesContent.length;\r\n        var lineBreaksComputer = this.createLineBreaksComputer();\r\n        for (var i = 0; i < lineCount; i++) {\r\n            lineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\r\n        }\r\n        var linesBreaks = lineBreaksComputer.finalize();\r\n        var values = [];\r\n        var hiddenAreas = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n            }\r\n            var isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\r\n            var line = createSplitLine(linesBreaks[i], !isInHiddenArea);\r\n            values[i] = line.getViewLineCount();\r\n            this.lines[i] = line;\r\n        }\r\n        this._validModelVersionId = this.model.getVersionId();\r\n        this.prefixSumComputer = new LineNumberMapper(values);\r\n    };\r\n    SplitLinesCollection.prototype.getHiddenAreas = function () {\r\n        var _this = this;\r\n        return this.hiddenAreasIds.map(function (decId) {\r\n            return _this.model.getDecorationRange(decId);\r\n        });\r\n    };\r\n    SplitLinesCollection.prototype._reduceRanges = function (_ranges) {\r\n        var _this = this;\r\n        if (_ranges.length === 0) {\r\n            return [];\r\n        }\r\n        var ranges = _ranges.map(function (r) { return _this.model.validateRange(r); }).sort(Range.compareRangesUsingStarts);\r\n        var result = [];\r\n        var currentRangeStart = ranges[0].startLineNumber;\r\n        var currentRangeEnd = ranges[0].endLineNumber;\r\n        for (var i = 1, len = ranges.length; i < len; i++) {\r\n            var range = ranges[i];\r\n            if (range.startLineNumber > currentRangeEnd + 1) {\r\n                result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n                currentRangeStart = range.startLineNumber;\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n            else if (range.endLineNumber > currentRangeEnd) {\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n        }\r\n        result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        var _this = this;\r\n        var newRanges = this._reduceRanges(_ranges);\r\n        // BEGIN TODO@Martin: Please stop calling this method on each model change!\r\n        var oldRanges = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        if (newRanges.length === oldRanges.length) {\r\n            var hasDifference = false;\r\n            for (var i = 0; i < newRanges.length; i++) {\r\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\r\n                    hasDifference = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!hasDifference) {\r\n                return false;\r\n            }\r\n        }\r\n        // END TODO@Martin: Please stop calling this method on each model change!\r\n        var newDecorations = [];\r\n        for (var _i = 0, newRanges_1 = newRanges; _i < newRanges_1.length; _i++) {\r\n            var newRange = newRanges_1[_i];\r\n            newDecorations.push({\r\n                range: newRange,\r\n                options: ModelDecorationOptions.EMPTY\r\n            });\r\n        }\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\r\n        var hiddenAreas = newRanges;\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n        var hasVisibleLine = false;\r\n        for (var i = 0; i < this.lines.length; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n            }\r\n            var lineChanged = false;\r\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\r\n                // Line should be hidden\r\n                if (this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(false);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            else {\r\n                hasVisibleLine = true;\r\n                // Line should be visible\r\n                if (!this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(true);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            if (lineChanged) {\r\n                var newOutputLineCount = this.lines[i].getViewLineCount();\r\n                this.prefixSumComputer.changeValue(i, newOutputLineCount);\r\n            }\r\n        }\r\n        if (!hasVisibleLine) {\r\n            // Cannot have everything be hidden => reveal everything!\r\n            this.setHiddenAreas([]);\r\n        }\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.modelPositionIsVisible = function (modelLineNumber, _modelColumn) {\r\n        if (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return this.lines[modelLineNumber - 1].isVisible();\r\n    };\r\n    SplitLinesCollection.prototype.setTabSize = function (newTabSize) {\r\n        if (this.tabSize === newTabSize) {\r\n            return false;\r\n        }\r\n        this.tabSize = newTabSize;\r\n        this._constructLines(/*resetHiddenAreas*/ false, null);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.setWrappingSettings = function (fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        var equalFontInfo = this.fontInfo.equals(fontInfo);\r\n        var equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\r\n        var equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\r\n        var equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\r\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\r\n            return false;\r\n        }\r\n        var onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent);\r\n        this.fontInfo = fontInfo;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        var previousLineBreaks = null;\r\n        if (onlyWrappingColumnChanged) {\r\n            previousLineBreaks = [];\r\n            for (var i = 0, len = this.lines.length; i < len; i++) {\r\n                previousLineBreaks[i] = this.lines[i].getLineBreakData();\r\n            }\r\n        }\r\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\r\n            ? this._domLineBreaksComputerFactory\r\n            : this._monospaceLineBreaksComputerFactory);\r\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\r\n    };\r\n    SplitLinesCollection.prototype.onModelFlushed = function () {\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesDeleted = function (versionId, fromLineNumber, toLineNumber) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\r\n        this.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        this.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesInserted = function (versionId, fromLineNumber, _toLineNumber, lineBreaks) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var hiddenAreas = this.getHiddenAreas();\r\n        var isInHiddenArea = false;\r\n        var testPosition = new Position(fromLineNumber, 1);\r\n        for (var _i = 0, hiddenAreas_1 = hiddenAreas; _i < hiddenAreas_1.length; _i++) {\r\n            var hiddenArea = hiddenAreas_1[_i];\r\n            if (hiddenArea.containsPosition(testPosition)) {\r\n                isInHiddenArea = true;\r\n                break;\r\n            }\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var totalOutputLineCount = 0;\r\n        var insertLines = [];\r\n        var insertPrefixSumValues = [];\r\n        for (var i = 0, len = lineBreaks.length; i < len; i++) {\r\n            var line = createSplitLine(lineBreaks[i], !isInHiddenArea);\r\n            insertLines.push(line);\r\n            var outputLineCount = line.getViewLineCount();\r\n            totalOutputLineCount += outputLineCount;\r\n            insertPrefixSumValues[i] = outputLineCount;\r\n        }\r\n        // TODO@Alex: use arrays.arrayInsert\r\n        this.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\r\n        this.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\r\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLineChanged = function (versionId, lineNumber, lineBreakData) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return [false, null, null, null];\r\n        }\r\n        var lineIndex = lineNumber - 1;\r\n        var oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var isVisible = this.lines[lineIndex].isVisible();\r\n        var line = createSplitLine(lineBreakData, isVisible);\r\n        this.lines[lineIndex] = line;\r\n        var newOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var lineMappingChanged = false;\r\n        var changeFrom = 0;\r\n        var changeTo = -1;\r\n        var insertFrom = 0;\r\n        var insertTo = -1;\r\n        var deleteFrom = 0;\r\n        var deleteTo = -1;\r\n        if (oldOutputLineCount > newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n            deleteFrom = changeTo + 1;\r\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else if (oldOutputLineCount < newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + oldOutputLineCount - 1;\r\n            insertFrom = changeTo + 1;\r\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n        }\r\n        this.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\r\n        var viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null);\r\n        var viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\r\n        var viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\r\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\r\n    };\r\n    SplitLinesCollection.prototype.acceptVersionId = function (versionId) {\r\n        this._validModelVersionId = versionId;\r\n        if (this.lines.length === 1 && !this.lines[0].isVisible()) {\r\n            // At least one line must be visible => reset hidden areas\r\n            this.setHiddenAreas([]);\r\n        }\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.prefixSumComputer.getTotalValue();\r\n    };\r\n    SplitLinesCollection.prototype._toValidViewLineNumber = function (viewLineNumber) {\r\n        if (viewLineNumber < 1) {\r\n            return 1;\r\n        }\r\n        var viewLineCount = this.getViewLineCount();\r\n        if (viewLineNumber > viewLineCount) {\r\n            return viewLineCount;\r\n        }\r\n        return viewLineNumber | 0;\r\n    };\r\n    SplitLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, minLineNumber, maxLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\r\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\r\n        var modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\r\n        var modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\r\n        var modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\r\n        var result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\r\n        var viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\r\n        var viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\r\n        return {\r\n            startLineNumber: viewStartPosition.lineNumber,\r\n            endLineNumber: viewEndPosition.lineNumber,\r\n            indent: result.indent\r\n        };\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\r\n        var modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\r\n        var result = [];\r\n        var resultRepeatCount = [];\r\n        var resultRepeatOption = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                var viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                var viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\r\n                var count = viewLineEndIndex - viewLineStartIndex + 1;\r\n                var option = 0 /* BlockNone */;\r\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\r\n                    // wrapped lines should block indent guides\r\n                    option = (viewLineStartIndex === 0 ? 1 /* BlockSubsequent */ : 2 /* BlockAll */);\r\n                }\r\n                resultRepeatCount.push(count);\r\n                resultRepeatOption.push(option);\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, 0);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\r\n            reqStart = null;\r\n        }\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var viewIndents = new Array(viewLineCount);\r\n        var currIndex = 0;\r\n        for (var i = 0, len = result.length; i < len; i++) {\r\n            var value = result[i];\r\n            var count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\r\n            var option = resultRepeatOption[i];\r\n            var blockAtIndex = void 0;\r\n            if (option === 2 /* BlockAll */) {\r\n                blockAtIndex = 0;\r\n            }\r\n            else if (option === 1 /* BlockSubsequent */) {\r\n                blockAtIndex = 1;\r\n            }\r\n            else {\r\n                blockAtIndex = count;\r\n            }\r\n            for (var j = 0; j < count; j++) {\r\n                if (j === blockAtIndex) {\r\n                    value = 0;\r\n                }\r\n                viewIndents[currIndex++] = value;\r\n            }\r\n        }\r\n        return viewIndents;\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\r\n        var viewLineNumber = viewStartLineNumber;\r\n        var startModelLineIndex = start.index;\r\n        var startRemainder = start.remainder;\r\n        var result = [];\r\n        for (var modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (!line.isVisible()) {\r\n                continue;\r\n            }\r\n            var fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\r\n            var remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\r\n            var lastLine = false;\r\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\r\n                lastLine = true;\r\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\r\n            }\r\n            var toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\r\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\r\n            viewLineNumber += remainingViewLineCount;\r\n            if (lastLine) {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.validateViewPosition = function (viewLineNumber, viewColumn, expectedModelPosition) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var line = this.lines[lineIndex];\r\n        var minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n        var maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n        if (viewColumn < minColumn) {\r\n            viewColumn = minColumn;\r\n        }\r\n        if (viewColumn > maxColumn) {\r\n            viewColumn = maxColumn;\r\n        }\r\n        var computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\r\n        var computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\r\n        if (computedModelPosition.equals(expectedModelPosition)) {\r\n            return new Position(viewLineNumber, viewColumn);\r\n        }\r\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\r\n    };\r\n    SplitLinesCollection.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        var validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\r\n        var validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\r\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertViewPositionToModelPosition = function (viewLineNumber, viewColumn) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn);\r\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\r\n        return this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\r\n    };\r\n    SplitLinesCollection.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        var start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\r\n        var end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertModelPositionToViewPosition = function (_modelLineNumber, _modelColumn) {\r\n        var validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\r\n        var inputLineNumber = validPosition.lineNumber;\r\n        var inputColumn = validPosition.column;\r\n        var lineIndex = inputLineNumber - 1, lineIndexChanged = false;\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n            lineIndexChanged = true;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\r\n            return new Position(1, 1);\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        var r;\r\n        if (lineIndexChanged) {\r\n            r = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n        }\r\n        else {\r\n            r = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\r\n        }\r\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\r\n        return r;\r\n    };\r\n    SplitLinesCollection.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        var start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\r\n        var end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\r\n        if (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\r\n            // This is a single line range that ends up taking more lines due to wrapping\r\n            if (end.column === this.getViewLineMinColumn(end.lineNumber)) {\r\n                // the end column lands on the first column of the next line\r\n                return new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\r\n            }\r\n        }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype._getViewLineNumberForModelPosition = function (inputLineNumber, inputColumn) {\r\n        var lineIndex = inputLineNumber - 1;\r\n        if (this.lines[lineIndex].isVisible()) {\r\n            // this model line is visible\r\n            var deltaLineNumber_1 = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n            return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber_1, inputColumn);\r\n        }\r\n        // this model line is not visible\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            return 1;\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n    };\r\n    SplitLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\r\n            var viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    SplitLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        var modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\r\n        var modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\r\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\r\n            // most likely there are no hidden lines => fast path\r\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\r\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\r\n        }\r\n        var result = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    var maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\r\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\r\n            reqStart = null;\r\n        }\r\n        result.sort(function (a, b) {\r\n            var res = Range.compareRangesUsingStarts(a.range, b.range);\r\n            if (res === 0) {\r\n                if (a.id < b.id) {\r\n                    return -1;\r\n                }\r\n                if (a.id > b.id) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n            return res;\r\n        });\r\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\r\n        var finalResult = [], finalResultLen = 0;\r\n        var prevDecId = null;\r\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\r\n            var dec = result_1[_i];\r\n            var decId = dec.id;\r\n            if (prevDecId === decId) {\r\n                // skip\r\n                continue;\r\n            }\r\n            prevDecId = decId;\r\n            finalResult[finalResultLen++] = dec;\r\n        }\r\n        return finalResult;\r\n    };\r\n    return SplitLinesCollection;\r\n}());\r\nexport { SplitLinesCollection };\r\nvar VisibleIdentitySplitLine = /** @class */ (function () {\r\n    function VisibleIdentitySplitLine() {\r\n    }\r\n    VisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return true;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (isVisible) {\r\n            return this;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 1;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineContent = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineContent(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineLength = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineLength(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMinColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineData = function (model, modelLineNumber, _outputLineIndex) {\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLinesData = function (model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!needed[globalStartIndex]) {\r\n            result[globalStartIndex] = null;\r\n            return;\r\n        }\r\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, outputColumn) {\r\n        return outputColumn;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        return new Position(deltaLineNumber, inputColumn);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, _inputColumn) {\r\n        return deltaLineNumber;\r\n    };\r\n    VisibleIdentitySplitLine.INSTANCE = new VisibleIdentitySplitLine();\r\n    return VisibleIdentitySplitLine;\r\n}());\r\nvar InvisibleIdentitySplitLine = /** @class */ (function () {\r\n    function InvisibleIdentitySplitLine() {\r\n    }\r\n    InvisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return false;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (!isVisible) {\r\n            return this;\r\n        }\r\n        return VisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 0;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineContent = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineLength = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineData = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLinesData = function (_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, _outputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.INSTANCE = new InvisibleIdentitySplitLine();\r\n    return InvisibleIdentitySplitLine;\r\n}());\r\nvar SplitLine = /** @class */ (function () {\r\n    function SplitLine(lineBreakData, isVisible) {\r\n        this._lineBreakData = lineBreakData;\r\n        this._isVisible = isVisible;\r\n    }\r\n    SplitLine.prototype.isVisible = function () {\r\n        return this._isVisible;\r\n    };\r\n    SplitLine.prototype.setVisible = function (isVisible) {\r\n        this._isVisible = isVisible;\r\n        return this;\r\n    };\r\n    SplitLine.prototype.getLineBreakData = function () {\r\n        return this._lineBreakData;\r\n    };\r\n    SplitLine.prototype.getViewLineCount = function () {\r\n        if (!this._isVisible) {\r\n            return 0;\r\n        }\r\n        return this._lineBreakData.breakOffsets.length;\r\n    };\r\n    SplitLine.prototype.getInputStartOffsetOfOutputLineIndex = function (outputLineIndex) {\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\r\n    };\r\n    SplitLine.prototype.getInputEndOffsetOfOutputLineIndex = function (model, modelLineNumber, outputLineIndex) {\r\n        if (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\r\n            return model.getLineMaxColumn(modelLineNumber) - 1;\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\r\n    };\r\n    SplitLine.prototype.getViewLineContent = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            r = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineLength = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = endOffset - startOffset;\r\n        if (outputLineIndex > 0) {\r\n            r = this._lineBreakData.wrappedTextIndentLength + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        if (outputLineIndex > 0) {\r\n            return this._lineBreakData.wrappedTextIndentLength + 1;\r\n        }\r\n        return 1;\r\n    };\r\n    SplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        return this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\r\n    };\r\n    SplitLine.prototype.getViewLineData = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var lineContent = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            lineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\r\n        }\r\n        var minColumn = (outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1);\r\n        var maxColumn = lineContent.length + 1;\r\n        var continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\r\n        var deltaStartIndex = 0;\r\n        if (outputLineIndex > 0) {\r\n            deltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var startVisibleColumn = (outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\r\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, lineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex));\r\n    };\r\n    SplitLine.prototype.getViewLinesData = function (model, modelLineNumber, fromOuputLineIndex, toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        for (var outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\r\n            var globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\r\n            if (!needed[globalIndex]) {\r\n                result[globalIndex] = null;\r\n                continue;\r\n            }\r\n            result[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\r\n        }\r\n    };\r\n    SplitLine.prototype.getModelColumnOfViewPosition = function (outputLineIndex, outputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var adjustedColumn = outputColumn - 1;\r\n        if (outputLineIndex > 0) {\r\n            if (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\r\n                adjustedColumn = 0;\r\n            }\r\n            else {\r\n                adjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\r\n            }\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\r\n    };\r\n    SplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        var outputLineIndex = r.outputLineIndex;\r\n        var outputColumn = r.outputOffset + 1;\r\n        if (outputLineIndex > 0) {\r\n            outputColumn += this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        //\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\r\n        return new Position(deltaLineNumber + outputLineIndex, outputColumn);\r\n    };\r\n    SplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        return (deltaLineNumber + r.outputLineIndex);\r\n    };\r\n    return SplitLine;\r\n}());\r\nexport { SplitLine };\r\nvar _spaces = [''];\r\nfunction spaces(count) {\r\n    if (count >= _spaces.length) {\r\n        for (var i = 1; i <= count; i++) {\r\n            _spaces[i] = _makeSpaces(i);\r\n        }\r\n    }\r\n    return _spaces[count];\r\n}\r\nfunction _makeSpaces(count) {\r\n    return new Array(count + 1).join(' ');\r\n}\r\nfunction createSplitLine(lineBreakData, isVisible) {\r\n    if (lineBreakData === null) {\r\n        // No mapping needed\r\n        if (isVisible) {\r\n            return VisibleIdentitySplitLine.INSTANCE;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    }\r\n    else {\r\n        return new SplitLine(lineBreakData, isVisible);\r\n    }\r\n}\r\nvar IdentityCoordinatesConverter = /** @class */ (function () {\r\n    function IdentityCoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    IdentityCoordinatesConverter.prototype._validPosition = function (pos) {\r\n        return this._lines.model.validatePosition(pos);\r\n    };\r\n    IdentityCoordinatesConverter.prototype._validRange = function (range) {\r\n        return this._lines.model.validateRange(range);\r\n    };\r\n    // View -> Model conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._validPosition(viewPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._validRange(viewRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewPosition = function (_viewPosition, expectedModelPosition) {\r\n        return this._validPosition(expectedModelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewRange = function (_viewRange, expectedModelRange) {\r\n        return this._validRange(expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._validPosition(modelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._validRange(modelRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        var lineCount = this._lines.model.getLineCount();\r\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return IdentityCoordinatesConverter;\r\n}());\r\nexport { IdentityCoordinatesConverter };\r\nvar IdentityLinesCollection = /** @class */ (function () {\r\n    function IdentityLinesCollection(model) {\r\n        this.model = model;\r\n    }\r\n    IdentityLinesCollection.prototype.dispose = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new IdentityCoordinatesConverter(this);\r\n    };\r\n    IdentityLinesCollection.prototype.getHiddenAreas = function () {\r\n        return [];\r\n    };\r\n    IdentityLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setTabSize = function (_newTabSize) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setWrappingSettings = function (_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var result = [];\r\n        return {\r\n            addRequest: function (lineText, previousLineBreakData) {\r\n                result.push(null);\r\n            },\r\n            finalize: function () {\r\n                return result;\r\n            }\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.onModelFlushed = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesDeleted = function (_versionId, fromLineNumber, toLineNumber) {\r\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesInserted = function (_versionId, fromLineNumber, toLineNumber, lineBreaks) {\r\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLineChanged = function (_versionId, lineNumber, lineBreakData) {\r\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\r\n    };\r\n    IdentityLinesCollection.prototype.acceptVersionId = function (_versionId) {\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.model.getLineCount();\r\n    };\r\n    IdentityLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, _minLineNumber, _maxLineNumber) {\r\n        return {\r\n            startLineNumber: viewLineNumber,\r\n            endLineNumber: viewLineNumber,\r\n            indent: 0\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var result = new Array(viewLineCount);\r\n        for (var i = 0; i < viewLineCount; i++) {\r\n            result[i] = 0;\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        return this.model.getLineContent(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        return this.model.getLineLength(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        return this.model.getLineMinColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        return this.model.getLineMaxColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        var lineTokens = this.model.getLineTokens(viewLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        var lineCount = this.model.getLineCount();\r\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\r\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\r\n        var result = [];\r\n        for (var lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\r\n            var idx = lineNumber - viewStartLineNumber;\r\n            if (!needed[idx]) {\r\n                result[idx] = null;\r\n            }\r\n            result[idx] = this.getViewLineData(lineNumber);\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = decoration.range.startLineNumber;\r\n            var viewEndLineNumber = decoration.range.endLineNumber;\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    IdentityLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\r\n    };\r\n    return IdentityLinesCollection;\r\n}());\r\nexport { IdentityLinesCollection };\r\nvar OverviewRulerDecorations = /** @class */ (function () {\r\n    function OverviewRulerDecorations() {\r\n        this.result = Object.create(null);\r\n    }\r\n    OverviewRulerDecorations.prototype.accept = function (color, startLineNumber, endLineNumber, lane) {\r\n        var prev = this.result[color];\r\n        if (prev) {\r\n            var prevLane = prev[prev.length - 3];\r\n            var prevEndLineNumber = prev[prev.length - 1];\r\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\r\n                // merge into prev\r\n                if (endLineNumber > prevEndLineNumber) {\r\n                    prev[prev.length - 1] = endLineNumber;\r\n                }\r\n                return;\r\n            }\r\n            // push\r\n            prev.push(lane, startLineNumber, endLineNumber);\r\n        }\r\n        else {\r\n            this.result[color] = [lane, startLineNumber, endLineNumber];\r\n        }\r\n    };\r\n    return OverviewRulerDecorations;\r\n}());\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,gCAAgC;AACxD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,sBAAsB,QAAQ,uBAAuB;AAC9D,OAAO,KAAKC,UAAU,MAAM,uBAAuB;AACnD,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAc,CAACC,eAAe,EAAEC,YAAY,EAAE;IACnD,IAAI,CAACD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;EACA,OAAOF,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc;AACvB,IAAIG,aAAa,GAAG,aAAe,YAAY;EAC3C,SAASA,aAAa,CAACC,YAAY,EAAEC,yBAAyB,EAAEC,uBAAuB,EAAE;IACrF,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,yBAAyB,GAAGA,yBAAyB;IAC1D,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;EAC1D;EACAH,aAAa,CAACI,8BAA8B,GAAG,UAAUH,YAAY,EAAEH,eAAe,EAAEC,YAAY,EAAE;IAClG,IAAID,eAAe,KAAK,CAAC,EAAE;MACvB,OAAOC,YAAY;IACvB,CAAC,MACI;MACD,OAAOE,YAAY,CAACH,eAAe,GAAG,CAAC,CAAC,GAAGC,YAAY;IAC3D;EACJ,CAAC;EACDC,aAAa,CAACK,8BAA8B,GAAG,UAAUJ,YAAY,EAAEK,WAAW,EAAE;IAChF,IAAIC,GAAG,GAAG,CAAC;IACX,IAAIC,IAAI,GAAGP,YAAY,CAACQ,MAAM,GAAG,CAAC;IAClC,IAAIC,GAAG,GAAG,CAAC;IACX,IAAIC,QAAQ,GAAG,CAAC;IAChB,OAAOJ,GAAG,IAAIC,IAAI,EAAE;MAChBE,GAAG,GAAGH,GAAG,GAAI,CAACC,IAAI,GAAGD,GAAG,IAAI,CAAE,GAAG,CAAC;MAClC,IAAIK,OAAO,GAAGX,YAAY,CAACS,GAAG,CAAC;MAC/BC,QAAQ,GAAGD,GAAG,GAAG,CAAC,GAAGT,YAAY,CAACS,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;MAC9C,IAAIJ,WAAW,GAAGK,QAAQ,EAAE;QACxBH,IAAI,GAAGE,GAAG,GAAG,CAAC;MAClB,CAAC,MACI,IAAIJ,WAAW,IAAIM,OAAO,EAAE;QAC7BL,GAAG,GAAGG,GAAG,GAAG,CAAC;MACjB,CAAC,MACI;QACD;MACJ;IACJ;IACA,OAAO,IAAIb,cAAc,CAACa,GAAG,EAAEJ,WAAW,GAAGK,QAAQ,CAAC;EAC1D,CAAC;EACD,OAAOX,aAAa;AACxB,CAAC,EAAG;AACJ,SAASA,aAAa;AACtB,IAAIa,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoB,CAACC,KAAK,EAAE;IACjC,IAAI,CAACC,MAAM,GAAGD,KAAK;EACvB;EACA;EACAD,oBAAoB,CAACG,SAAS,CAACC,kCAAkC,GAAG,UAAUC,YAAY,EAAE;IACxF,OAAO,IAAI,CAACH,MAAM,CAACE,kCAAkC,CAACC,YAAY,CAACC,UAAU,EAAED,YAAY,CAACE,MAAM,CAAC;EACvG,CAAC;EACDP,oBAAoB,CAACG,SAAS,CAACK,4BAA4B,GAAG,UAAUC,SAAS,EAAE;IAC/E,OAAO,IAAI,CAACP,MAAM,CAACM,4BAA4B,CAACC,SAAS,CAAC;EAC9D,CAAC;EACDT,oBAAoB,CAACG,SAAS,CAACO,oBAAoB,GAAG,UAAUL,YAAY,EAAEM,qBAAqB,EAAE;IACjG,OAAO,IAAI,CAACT,MAAM,CAACQ,oBAAoB,CAACL,YAAY,CAACC,UAAU,EAAED,YAAY,CAACE,MAAM,EAAEI,qBAAqB,CAAC;EAChH,CAAC;EACDX,oBAAoB,CAACG,SAAS,CAACS,iBAAiB,GAAG,UAAUH,SAAS,EAAEI,kBAAkB,EAAE;IACxF,OAAO,IAAI,CAACX,MAAM,CAACU,iBAAiB,CAACH,SAAS,EAAEI,kBAAkB,CAAC;EACvE,CAAC;EACD;EACAb,oBAAoB,CAACG,SAAS,CAACW,kCAAkC,GAAG,UAAUC,aAAa,EAAE;IACzF,OAAO,IAAI,CAACb,MAAM,CAACY,kCAAkC,CAACC,aAAa,CAACT,UAAU,EAAES,aAAa,CAACR,MAAM,CAAC;EACzG,CAAC;EACDP,oBAAoB,CAACG,SAAS,CAACa,4BAA4B,GAAG,UAAUC,UAAU,EAAE;IAChF,OAAO,IAAI,CAACf,MAAM,CAACc,4BAA4B,CAACC,UAAU,CAAC;EAC/D,CAAC;EACDjB,oBAAoB,CAACG,SAAS,CAACe,sBAAsB,GAAG,UAAUH,aAAa,EAAE;IAC7E,OAAO,IAAI,CAACb,MAAM,CAACgB,sBAAsB,CAACH,aAAa,CAACT,UAAU,EAAES,aAAa,CAACR,MAAM,CAAC;EAC7F,CAAC;EACD,OAAOP,oBAAoB;AAC/B,CAAC,EAAG;AACJ,SAASA,oBAAoB;AAC7B,IAAImB,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgB,CAACC,cAAc,EAAE;IACtC,IAAI,CAACC,OAAO,GAAGD,cAAc;IAC7B,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,YAAY,GAAG,EAAE;EAC1B;EACAN,gBAAgB,CAAChB,SAAS,CAACuB,WAAW,GAAG,UAAUC,KAAK,EAAE;IACtD,IAAI,CAACL,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,cAAc,GAAGK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACN,cAAc,EAAEI,KAAK,GAAG,CAAC,CAAC;EAClE,CAAC;EACDR,gBAAgB,CAAChB,SAAS,CAAC2B,YAAY,GAAG,YAAY;IAClD,IAAI,IAAI,CAACR,QAAQ,EAAE;MACf;IACJ;IACA,KAAK,IAAIS,CAAC,GAAG,IAAI,CAACR,cAAc,GAAG,CAAC,EAAES,GAAG,GAAG,IAAI,CAACX,OAAO,CAACzB,MAAM,EAAEmC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC3E,IAAIE,aAAa,GAAG,IAAI,CAACZ,OAAO,CAACU,CAAC,CAAC;MACnC,IAAIG,cAAc,GAAIH,CAAC,GAAG,CAAC,GAAG,IAAI,CAACP,YAAY,CAACO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE;MAC3D,IAAI,CAACP,YAAY,CAACO,CAAC,CAAC,GAAGG,cAAc,GAAGD,aAAa;MACrD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,EAAEE,CAAC,EAAE,EAAE;QACpC,IAAI,CAACV,YAAY,CAACS,cAAc,GAAGC,CAAC,CAAC,GAAGJ,CAAC;MAC7C;IACJ;IACA;IACA,IAAI,CAACP,YAAY,CAAC5B,MAAM,GAAG,IAAI,CAACyB,OAAO,CAACzB,MAAM;IAC9C,IAAI,CAAC6B,YAAY,CAAC7B,MAAM,GAAG,IAAI,CAAC4B,YAAY,CAAC,IAAI,CAACA,YAAY,CAAC5B,MAAM,GAAG,CAAC,CAAC;IAC1E;IACA,IAAI,CAAC0B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,cAAc,GAAG,IAAI,CAACF,OAAO,CAACzB,MAAM,GAAG,CAAC;EACjD,CAAC;EACDuB,gBAAgB,CAAChB,SAAS,CAACiC,WAAW,GAAG,UAAUT,KAAK,EAAEU,KAAK,EAAE;IAC7D,IAAI,IAAI,CAAChB,OAAO,CAACM,KAAK,CAAC,KAAKU,KAAK,EAAE;MAC/B;MACA;IACJ;IACA,IAAI,CAAChB,OAAO,CAACM,KAAK,CAAC,GAAGU,KAAK;IAC3B,IAAI,CAACX,WAAW,CAACC,KAAK,CAAC;EAC3B,CAAC;EACDR,gBAAgB,CAAChB,SAAS,CAACmC,YAAY,GAAG,UAAUC,KAAK,EAAEC,WAAW,EAAE;IACpE,IAAI,CAACnB,OAAO,CAACoB,MAAM,CAACF,KAAK,EAAEC,WAAW,CAAC;IACvC,IAAI,CAACd,WAAW,CAACa,KAAK,CAAC;EAC3B,CAAC;EACDpB,gBAAgB,CAAChB,SAAS,CAACuC,YAAY,GAAG,UAAUC,WAAW,EAAEC,SAAS,EAAE;IACxE,IAAI,CAACvB,OAAO,GAAG5C,MAAM,CAACoE,WAAW,CAAC,IAAI,CAACxB,OAAO,EAAEsB,WAAW,EAAEC,SAAS,CAAC;IACvE,IAAI,CAAClB,WAAW,CAACiB,WAAW,CAAC;EACjC,CAAC;EACDxB,gBAAgB,CAAChB,SAAS,CAAC2C,aAAa,GAAG,YAAY;IACnD,IAAI,CAAChB,YAAY,EAAE;IACnB,OAAO,IAAI,CAACL,YAAY,CAAC7B,MAAM;EACnC,CAAC;EACDuB,gBAAgB,CAAChB,SAAS,CAAC4C,mBAAmB,GAAG,UAAUpB,KAAK,EAAE;IAC9D,IAAI,CAACG,YAAY,EAAE;IACnB,OAAO,IAAI,CAACN,YAAY,CAACG,KAAK,CAAC;EACnC,CAAC;EACDR,gBAAgB,CAAChB,SAAS,CAAC6C,UAAU,GAAG,UAAUC,gBAAgB,EAAE;IAChE,IAAI,CAACnB,YAAY,EAAE;IACnB,IAAIoB,cAAc,GAAG,IAAI,CAACzB,YAAY,CAACwB,gBAAgB,CAAC;IACxD,IAAIf,cAAc,GAAIgB,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC1B,YAAY,CAAC0B,cAAc,GAAG,CAAC,CAAC,GAAG,CAAE;IACrF,OAAO,IAAIpE,sBAAsB,CAACoE,cAAc,EAAED,gBAAgB,GAAGf,cAAc,CAAC;EACxF,CAAC;EACD,OAAOf,gBAAgB;AAC3B,CAAC,EAAG;AACJ,IAAIgC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoB,CAACC,KAAK,EAAEC,4BAA4B,EAAEC,kCAAkC,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,cAAc,EAAE;IACxK,IAAI,CAACP,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACQ,oBAAoB,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACC,6BAA6B,GAAGR,4BAA4B;IACjE,IAAI,CAACS,mCAAmC,GAAGR,kCAAkC;IAC7E,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACI,eAAe,EAAC,oBAAqB,IAAI,EAAE,IAAI,CAAC;EACzD;EACAZ,oBAAoB,CAAChD,SAAS,CAAC6D,OAAO,GAAG,YAAY;IACjD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACb,KAAK,CAACc,gBAAgB,CAAC,IAAI,CAACD,cAAc,EAAE,EAAE,CAAC;EAC9E,CAAC;EACDd,oBAAoB,CAAChD,SAAS,CAACgE,0BAA0B,GAAG,YAAY;IACpE,OAAO,IAAInE,oBAAoB,CAAC,IAAI,CAAC;EACzC,CAAC;EACDmD,oBAAoB,CAAChD,SAAS,CAAC4D,eAAe,GAAG,UAAUK,gBAAgB,EAAEC,kBAAkB,EAAE;IAC7F,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,CAACrE,KAAK,GAAG,EAAE;IACf,IAAImE,gBAAgB,EAAE;MAClB,IAAI,CAACH,cAAc,GAAG,EAAE;IAC5B;IACA,IAAIM,YAAY,GAAG,IAAI,CAACnB,KAAK,CAACoB,eAAe,EAAE;IAC/C,IAAIC,SAAS,GAAGF,YAAY,CAAC3E,MAAM;IACnC,IAAI8E,kBAAkB,GAAG,IAAI,CAACC,wBAAwB,EAAE;IACxD,KAAK,IAAI5C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,SAAS,EAAE1C,CAAC,EAAE,EAAE;MAChC2C,kBAAkB,CAACE,UAAU,CAACL,YAAY,CAACxC,CAAC,CAAC,EAAEsC,kBAAkB,GAAGA,kBAAkB,CAACtC,CAAC,CAAC,GAAG,IAAI,CAAC;IACrG;IACA,IAAI8C,WAAW,GAAGH,kBAAkB,CAACI,QAAQ,EAAE;IAC/C,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,WAAW,GAAG,IAAI,CAACf,cAAc,CAACgB,GAAG,CAAC,UAAUC,MAAM,EAAE;MAAE,OAAOZ,KAAK,CAAClB,KAAK,CAAC+B,kBAAkB,CAACD,MAAM,CAAC;IAAE,CAAC,CAAC,CAACE,IAAI,CAACzG,KAAK,CAAC0G,wBAAwB,CAAC;IACpJ,IAAIC,eAAe,GAAG,CAAC;MAAEC,aAAa,GAAG,CAAC;IAC1C,IAAIC,aAAa,GAAG,CAAC,CAAC;IACtB,IAAIC,gCAAgC,GAAID,aAAa,GAAG,CAAC,GAAGR,WAAW,CAACpF,MAAM,GAAI2F,aAAa,GAAG,CAAC,GAAGd,SAAS,GAAG,CAAC;IACnH,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,SAAS,EAAE1C,CAAC,EAAE,EAAE;MAChC,IAAIzB,UAAU,GAAGyB,CAAC,GAAG,CAAC;MACtB,IAAIzB,UAAU,KAAKmF,gCAAgC,EAAE;QACjDD,aAAa,EAAE;QACfF,eAAe,GAAGN,WAAW,CAACQ,aAAa,CAAC,CAACE,eAAe;QAC5DH,aAAa,GAAGP,WAAW,CAACQ,aAAa,CAAC,CAACG,aAAa;QACxDF,gCAAgC,GAAID,aAAa,GAAG,CAAC,GAAGR,WAAW,CAACpF,MAAM,GAAI2F,aAAa,GAAG,CAAC,GAAGd,SAAS,GAAG,CAAC;MACnH;MACA,IAAImB,cAAc,GAAItF,UAAU,IAAIgF,eAAe,IAAIhF,UAAU,IAAIiF,aAAc;MACnF,IAAIM,IAAI,GAAGC,eAAe,CAACjB,WAAW,CAAC9C,CAAC,CAAC,EAAE,CAAC6D,cAAc,CAAC;MAC3Db,MAAM,CAAChD,CAAC,CAAC,GAAG8D,IAAI,CAACE,gBAAgB,EAAE;MACnC,IAAI,CAAC9F,KAAK,CAAC8B,CAAC,CAAC,GAAG8D,IAAI;IACxB;IACA,IAAI,CAACjC,oBAAoB,GAAG,IAAI,CAACR,KAAK,CAAC4C,YAAY,EAAE;IACrD,IAAI,CAACC,iBAAiB,GAAG,IAAI9E,gBAAgB,CAAC4D,MAAM,CAAC;EACzD,CAAC;EACD5B,oBAAoB,CAAChD,SAAS,CAAC+F,cAAc,GAAG,YAAY;IACxD,IAAI5B,KAAK,GAAG,IAAI;IAChB,OAAO,IAAI,CAACL,cAAc,CAACgB,GAAG,CAAC,UAAUkB,KAAK,EAAE;MAC5C,OAAO7B,KAAK,CAAClB,KAAK,CAAC+B,kBAAkB,CAACgB,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC;EACDhD,oBAAoB,CAAChD,SAAS,CAACiG,aAAa,GAAG,UAAUC,OAAO,EAAE;IAC9D,IAAI/B,KAAK,GAAG,IAAI;IAChB,IAAI+B,OAAO,CAACzG,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,EAAE;IACb;IACA,IAAI0G,MAAM,GAAGD,OAAO,CAACpB,GAAG,CAAC,UAAUsB,CAAC,EAAE;MAAE,OAAOjC,KAAK,CAAClB,KAAK,CAACoD,aAAa,CAACD,CAAC,CAAC;IAAE,CAAC,CAAC,CAACnB,IAAI,CAACzG,KAAK,CAAC0G,wBAAwB,CAAC;IACpH,IAAIoB,MAAM,GAAG,EAAE;IACf,IAAIC,iBAAiB,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAACZ,eAAe;IACjD,IAAIiB,eAAe,GAAGL,MAAM,CAAC,CAAC,CAAC,CAACX,aAAa;IAC7C,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGsE,MAAM,CAAC1G,MAAM,EAAEmC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI6E,KAAK,GAAGN,MAAM,CAACvE,CAAC,CAAC;MACrB,IAAI6E,KAAK,CAAClB,eAAe,GAAGiB,eAAe,GAAG,CAAC,EAAE;QAC7CF,MAAM,CAACI,IAAI,CAAC,IAAIlI,KAAK,CAAC+H,iBAAiB,EAAE,CAAC,EAAEC,eAAe,EAAE,CAAC,CAAC,CAAC;QAChED,iBAAiB,GAAGE,KAAK,CAAClB,eAAe;QACzCiB,eAAe,GAAGC,KAAK,CAACjB,aAAa;MACzC,CAAC,MACI,IAAIiB,KAAK,CAACjB,aAAa,GAAGgB,eAAe,EAAE;QAC5CA,eAAe,GAAGC,KAAK,CAACjB,aAAa;MACzC;IACJ;IACAc,MAAM,CAACI,IAAI,CAAC,IAAIlI,KAAK,CAAC+H,iBAAiB,EAAE,CAAC,EAAEC,eAAe,EAAE,CAAC,CAAC,CAAC;IAChE,OAAOF,MAAM;EACjB,CAAC;EACDtD,oBAAoB,CAAChD,SAAS,CAAC2G,cAAc,GAAG,UAAUT,OAAO,EAAE;IAC/D,IAAI/B,KAAK,GAAG,IAAI;IAChB,IAAIyC,SAAS,GAAG,IAAI,CAACX,aAAa,CAACC,OAAO,CAAC;IAC3C;IACA,IAAIW,SAAS,GAAG,IAAI,CAAC/C,cAAc,CAACgB,GAAG,CAAC,UAAUC,MAAM,EAAE;MAAE,OAAOZ,KAAK,CAAClB,KAAK,CAAC+B,kBAAkB,CAACD,MAAM,CAAC;IAAE,CAAC,CAAC,CAACE,IAAI,CAACzG,KAAK,CAAC0G,wBAAwB,CAAC;IAClJ,IAAI0B,SAAS,CAACnH,MAAM,KAAKoH,SAAS,CAACpH,MAAM,EAAE;MACvC,IAAIqH,aAAa,GAAG,KAAK;MACzB,KAAK,IAAIlF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgF,SAAS,CAACnH,MAAM,EAAEmC,CAAC,EAAE,EAAE;QACvC,IAAI,CAACgF,SAAS,CAAChF,CAAC,CAAC,CAACmF,WAAW,CAACF,SAAS,CAACjF,CAAC,CAAC,CAAC,EAAE;UACzCkF,aAAa,GAAG,IAAI;UACpB;QACJ;MACJ;MACA,IAAI,CAACA,aAAa,EAAE;QAChB,OAAO,KAAK;MAChB;IACJ;IACA;IACA,IAAIE,cAAc,GAAG,EAAE;IACvB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,WAAW,GAAGN,SAAS,EAAEK,EAAE,GAAGC,WAAW,CAACzH,MAAM,EAAEwH,EAAE,EAAE,EAAE;MACrE,IAAIE,QAAQ,GAAGD,WAAW,CAACD,EAAE,CAAC;MAC9BD,cAAc,CAACN,IAAI,CAAC;QAChBD,KAAK,EAAEU,QAAQ;QACfC,OAAO,EAAE3I,sBAAsB,CAAC4I;MACpC,CAAC,CAAC;IACN;IACA,IAAI,CAACvD,cAAc,GAAG,IAAI,CAACb,KAAK,CAACc,gBAAgB,CAAC,IAAI,CAACD,cAAc,EAAEkD,cAAc,CAAC;IACtF,IAAInC,WAAW,GAAG+B,SAAS;IAC3B,IAAIzB,eAAe,GAAG,CAAC;MAAEC,aAAa,GAAG,CAAC;IAC1C,IAAIC,aAAa,GAAG,CAAC,CAAC;IACtB,IAAIC,gCAAgC,GAAID,aAAa,GAAG,CAAC,GAAGR,WAAW,CAACpF,MAAM,GAAI2F,aAAa,GAAG,CAAC,GAAG,IAAI,CAACtF,KAAK,CAACL,MAAM,GAAG,CAAC;IAC3H,IAAI6H,cAAc,GAAG,KAAK;IAC1B,KAAK,IAAI1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,KAAK,CAACL,MAAM,EAAEmC,CAAC,EAAE,EAAE;MACxC,IAAIzB,UAAU,GAAGyB,CAAC,GAAG,CAAC;MACtB,IAAIzB,UAAU,KAAKmF,gCAAgC,EAAE;QACjDD,aAAa,EAAE;QACfF,eAAe,GAAGN,WAAW,CAACQ,aAAa,CAAC,CAACE,eAAe;QAC5DH,aAAa,GAAGP,WAAW,CAACQ,aAAa,CAAC,CAACG,aAAa;QACxDF,gCAAgC,GAAID,aAAa,GAAG,CAAC,GAAGR,WAAW,CAACpF,MAAM,GAAI2F,aAAa,GAAG,CAAC,GAAG,IAAI,CAACtF,KAAK,CAACL,MAAM,GAAG,CAAC;MAC3H;MACA,IAAI8H,WAAW,GAAG,KAAK;MACvB,IAAIpH,UAAU,IAAIgF,eAAe,IAAIhF,UAAU,IAAIiF,aAAa,EAAE;QAC9D;QACA,IAAI,IAAI,CAACtF,KAAK,CAAC8B,CAAC,CAAC,CAAC4F,SAAS,EAAE,EAAE;UAC3B,IAAI,CAAC1H,KAAK,CAAC8B,CAAC,CAAC,GAAG,IAAI,CAAC9B,KAAK,CAAC8B,CAAC,CAAC,CAAC6F,UAAU,CAAC,KAAK,CAAC;UAC/CF,WAAW,GAAG,IAAI;QACtB;MACJ,CAAC,MACI;QACDD,cAAc,GAAG,IAAI;QACrB;QACA,IAAI,CAAC,IAAI,CAACxH,KAAK,CAAC8B,CAAC,CAAC,CAAC4F,SAAS,EAAE,EAAE;UAC5B,IAAI,CAAC1H,KAAK,CAAC8B,CAAC,CAAC,GAAG,IAAI,CAAC9B,KAAK,CAAC8B,CAAC,CAAC,CAAC6F,UAAU,CAAC,IAAI,CAAC;UAC9CF,WAAW,GAAG,IAAI;QACtB;MACJ;MACA,IAAIA,WAAW,EAAE;QACb,IAAIG,kBAAkB,GAAG,IAAI,CAAC5H,KAAK,CAAC8B,CAAC,CAAC,CAACgE,gBAAgB,EAAE;QACzD,IAAI,CAACE,iBAAiB,CAAC7D,WAAW,CAACL,CAAC,EAAE8F,kBAAkB,CAAC;MAC7D;IACJ;IACA,IAAI,CAACJ,cAAc,EAAE;MACjB;MACA,IAAI,CAACX,cAAc,CAAC,EAAE,CAAC;IAC3B;IACA,OAAO,IAAI;EACf,CAAC;EACD3D,oBAAoB,CAAChD,SAAS,CAACe,sBAAsB,GAAG,UAAU4G,eAAe,EAAEC,YAAY,EAAE;IAC7F,IAAID,eAAe,GAAG,CAAC,IAAIA,eAAe,GAAG,IAAI,CAAC7H,KAAK,CAACL,MAAM,EAAE;MAC5D;MACA,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAACK,KAAK,CAAC6H,eAAe,GAAG,CAAC,CAAC,CAACH,SAAS,EAAE;EACtD,CAAC;EACDxE,oBAAoB,CAAChD,SAAS,CAAC6H,UAAU,GAAG,UAAUC,UAAU,EAAE;IAC9D,IAAI,IAAI,CAACzE,OAAO,KAAKyE,UAAU,EAAE;MAC7B,OAAO,KAAK;IAChB;IACA,IAAI,CAACzE,OAAO,GAAGyE,UAAU;IACzB,IAAI,CAAClE,eAAe,EAAC,oBAAqB,KAAK,EAAE,IAAI,CAAC;IACtD,OAAO,IAAI;EACf,CAAC;EACDZ,oBAAoB,CAAChD,SAAS,CAAC+H,mBAAmB,GAAG,UAAU3E,QAAQ,EAAEE,gBAAgB,EAAEC,cAAc,EAAEC,cAAc,EAAE;IACvH,IAAIwE,aAAa,GAAG,IAAI,CAAC5E,QAAQ,CAAC6E,MAAM,CAAC7E,QAAQ,CAAC;IAClD,IAAI8E,qBAAqB,GAAI,IAAI,CAAC5E,gBAAgB,KAAKA,gBAAiB;IACxE,IAAI6E,mBAAmB,GAAI,IAAI,CAAC5E,cAAc,KAAKA,cAAe;IAClE,IAAI6E,mBAAmB,GAAI,IAAI,CAAC5E,cAAc,KAAKA,cAAe;IAClE,IAAIwE,aAAa,IAAIE,qBAAqB,IAAIC,mBAAmB,IAAIC,mBAAmB,EAAE;MACtF,OAAO,KAAK;IAChB;IACA,IAAIC,yBAAyB,GAAIL,aAAa,IAAIE,qBAAqB,IAAI,CAACC,mBAAmB,IAAIC,mBAAoB;IACvH,IAAI,CAAChF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAIU,kBAAkB,GAAG,IAAI;IAC7B,IAAImE,yBAAyB,EAAE;MAC3BnE,kBAAkB,GAAG,EAAE;MACvB,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAAC/B,KAAK,CAACL,MAAM,EAAEmC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QACnDsC,kBAAkB,CAACtC,CAAC,CAAC,GAAG,IAAI,CAAC9B,KAAK,CAAC8B,CAAC,CAAC,CAAC0G,gBAAgB,EAAE;MAC5D;IACJ;IACA,IAAI,CAAC1E,eAAe,EAAC,oBAAqB,KAAK,EAAEM,kBAAkB,CAAC;IACpE,OAAO,IAAI;EACf,CAAC;EACDlB,oBAAoB,CAAChD,SAAS,CAACwE,wBAAwB,GAAG,YAAY;IAClE,IAAI+D,yBAAyB,GAAI,IAAI,CAACjF,gBAAgB,KAAK,UAAU,GAC/D,IAAI,CAACI,6BAA6B,GAClC,IAAI,CAACC,mCAAoC;IAC/C,OAAO4E,yBAAyB,CAAC/D,wBAAwB,CAAC,IAAI,CAACpB,QAAQ,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACE,cAAc,EAAE,IAAI,CAACC,cAAc,CAAC;EACpI,CAAC;EACDR,oBAAoB,CAAChD,SAAS,CAACwI,cAAc,GAAG,YAAY;IACxD,IAAI,CAAC5E,eAAe,EAAC,oBAAqB,IAAI,EAAE,IAAI,CAAC;EACzD,CAAC;EACDZ,oBAAoB,CAAChD,SAAS,CAACyI,mBAAmB,GAAG,UAAUC,SAAS,EAAEC,cAAc,EAAEC,YAAY,EAAE;IACpG,IAAIF,SAAS,IAAI,IAAI,CAACjF,oBAAoB,EAAE;MACxC;MACA;MACA,OAAO,IAAI;IACf;IACA,IAAIoF,oBAAoB,GAAIF,cAAc,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC7C,iBAAiB,CAAClD,mBAAmB,CAAC+F,cAAc,GAAG,CAAC,CAAC,GAAG,CAAE;IAC1H,IAAIG,kBAAkB,GAAG,IAAI,CAAChD,iBAAiB,CAAClD,mBAAmB,CAACgG,YAAY,GAAG,CAAC,CAAC;IACrF,IAAI,CAAC9I,KAAK,CAACwC,MAAM,CAACqG,cAAc,GAAG,CAAC,EAAEC,YAAY,GAAGD,cAAc,GAAG,CAAC,CAAC;IACxE,IAAI,CAAC7C,iBAAiB,CAAC3D,YAAY,CAACwG,cAAc,GAAG,CAAC,EAAEC,YAAY,GAAGD,cAAc,GAAG,CAAC,CAAC;IAC1F,OAAO,IAAIjK,UAAU,CAACqK,qBAAqB,CAACF,oBAAoB,EAAEC,kBAAkB,CAAC;EACzF,CAAC;EACD9F,oBAAoB,CAAChD,SAAS,CAACgJ,oBAAoB,GAAG,UAAUN,SAAS,EAAEC,cAAc,EAAEM,aAAa,EAAEC,UAAU,EAAE;IAClH,IAAIR,SAAS,IAAI,IAAI,CAACjF,oBAAoB,EAAE;MACxC;MACA;MACA,OAAO,IAAI;IACf;IACA,IAAIoB,WAAW,GAAG,IAAI,CAACkB,cAAc,EAAE;IACvC,IAAIN,cAAc,GAAG,KAAK;IAC1B,IAAI0D,YAAY,GAAG,IAAI5K,QAAQ,CAACoK,cAAc,EAAE,CAAC,CAAC;IAClD,KAAK,IAAI1B,EAAE,GAAG,CAAC,EAAEmC,aAAa,GAAGvE,WAAW,EAAEoC,EAAE,GAAGmC,aAAa,CAAC3J,MAAM,EAAEwH,EAAE,EAAE,EAAE;MAC3E,IAAIoC,UAAU,GAAGD,aAAa,CAACnC,EAAE,CAAC;MAClC,IAAIoC,UAAU,CAACC,gBAAgB,CAACH,YAAY,CAAC,EAAE;QAC3C1D,cAAc,GAAG,IAAI;QACrB;MACJ;IACJ;IACA,IAAIoD,oBAAoB,GAAIF,cAAc,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC7C,iBAAiB,CAAClD,mBAAmB,CAAC+F,cAAc,GAAG,CAAC,CAAC,GAAG,CAAE;IAC1H,IAAIY,oBAAoB,GAAG,CAAC;IAC5B,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,qBAAqB,GAAG,EAAE;IAC9B,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGqH,UAAU,CAACzJ,MAAM,EAAEmC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACnD,IAAI8D,IAAI,GAAGC,eAAe,CAACuD,UAAU,CAACtH,CAAC,CAAC,EAAE,CAAC6D,cAAc,CAAC;MAC1D+D,WAAW,CAAC9C,IAAI,CAAChB,IAAI,CAAC;MACtB,IAAIgE,eAAe,GAAGhE,IAAI,CAACE,gBAAgB,EAAE;MAC7C2D,oBAAoB,IAAIG,eAAe;MACvCD,qBAAqB,CAAC7H,CAAC,CAAC,GAAG8H,eAAe;IAC9C;IACA;IACA,IAAI,CAAC5J,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC6J,KAAK,CAAC,CAAC,EAAEhB,cAAc,GAAG,CAAC,CAAC,CAACiB,MAAM,CAACJ,WAAW,CAAC,CAACI,MAAM,CAAC,IAAI,CAAC9J,KAAK,CAAC6J,KAAK,CAAChB,cAAc,GAAG,CAAC,CAAC,CAAC;IACrH,IAAI,CAAC7C,iBAAiB,CAACvD,YAAY,CAACoG,cAAc,GAAG,CAAC,EAAEc,qBAAqB,CAAC;IAC9E,OAAO,IAAI/K,UAAU,CAACmL,sBAAsB,CAAChB,oBAAoB,EAAEA,oBAAoB,GAAGU,oBAAoB,GAAG,CAAC,CAAC;EACvH,CAAC;EACDvG,oBAAoB,CAAChD,SAAS,CAAC8J,kBAAkB,GAAG,UAAUpB,SAAS,EAAEvI,UAAU,EAAE4J,aAAa,EAAE;IAChG,IAAIrB,SAAS,IAAI,IAAI,CAACjF,oBAAoB,EAAE;MACxC;MACA;MACA,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACpC;IACA,IAAIuG,SAAS,GAAG7J,UAAU,GAAG,CAAC;IAC9B,IAAI8J,kBAAkB,GAAG,IAAI,CAACnK,KAAK,CAACkK,SAAS,CAAC,CAACpE,gBAAgB,EAAE;IACjE,IAAI4B,SAAS,GAAG,IAAI,CAAC1H,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE;IACjD,IAAI9B,IAAI,GAAGC,eAAe,CAACoE,aAAa,EAAEvC,SAAS,CAAC;IACpD,IAAI,CAAC1H,KAAK,CAACkK,SAAS,CAAC,GAAGtE,IAAI;IAC5B,IAAIgC,kBAAkB,GAAG,IAAI,CAAC5H,KAAK,CAACkK,SAAS,CAAC,CAACpE,gBAAgB,EAAE;IACjE,IAAIsE,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAIP,kBAAkB,GAAGvC,kBAAkB,EAAE;MACzCyC,UAAU,GAAIhK,UAAU,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC2F,iBAAiB,CAAClD,mBAAmB,CAACzC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAE;MACpGiK,QAAQ,GAAGD,UAAU,GAAGzC,kBAAkB,GAAG,CAAC;MAC9C6C,UAAU,GAAGH,QAAQ,GAAG,CAAC;MACzBI,QAAQ,GAAGD,UAAU,IAAIN,kBAAkB,GAAGvC,kBAAkB,CAAC,GAAG,CAAC;MACrEwC,kBAAkB,GAAG,IAAI;IAC7B,CAAC,MACI,IAAID,kBAAkB,GAAGvC,kBAAkB,EAAE;MAC9CyC,UAAU,GAAIhK,UAAU,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC2F,iBAAiB,CAAClD,mBAAmB,CAACzC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAE;MACpGiK,QAAQ,GAAGD,UAAU,GAAGF,kBAAkB,GAAG,CAAC;MAC9CI,UAAU,GAAGD,QAAQ,GAAG,CAAC;MACzBE,QAAQ,GAAGD,UAAU,IAAI3C,kBAAkB,GAAGuC,kBAAkB,CAAC,GAAG,CAAC;MACrEC,kBAAkB,GAAG,IAAI;IAC7B,CAAC,MACI;MACDC,UAAU,GAAIhK,UAAU,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC2F,iBAAiB,CAAClD,mBAAmB,CAACzC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAE;MACpGiK,QAAQ,GAAGD,UAAU,GAAGzC,kBAAkB,GAAG,CAAC;IAClD;IACA,IAAI,CAAC5B,iBAAiB,CAAC7D,WAAW,CAAC+H,SAAS,EAAEtC,kBAAkB,CAAC;IACjE,IAAI+C,qBAAqB,GAAIN,UAAU,IAAIC,QAAQ,GAAG,IAAI1L,UAAU,CAACgM,qBAAqB,CAACP,UAAU,EAAEC,QAAQ,CAAC,GAAG,IAAK;IACxH,IAAIO,sBAAsB,GAAIN,UAAU,IAAIC,QAAQ,GAAG,IAAI5L,UAAU,CAACmL,sBAAsB,CAACQ,UAAU,EAAEC,QAAQ,CAAC,GAAG,IAAK;IAC1H,IAAIM,qBAAqB,GAAIL,UAAU,IAAIC,QAAQ,GAAG,IAAI9L,UAAU,CAACqK,qBAAqB,CAACwB,UAAU,EAAEC,QAAQ,CAAC,GAAG,IAAK;IACxH,OAAO,CAACN,kBAAkB,EAAEO,qBAAqB,EAAEE,sBAAsB,EAAEC,qBAAqB,CAAC;EACrG,CAAC;EACD5H,oBAAoB,CAAChD,SAAS,CAAC6K,eAAe,GAAG,UAAUnC,SAAS,EAAE;IAClE,IAAI,CAACjF,oBAAoB,GAAGiF,SAAS;IACrC,IAAI,IAAI,CAAC5I,KAAK,CAACL,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC0H,SAAS,EAAE,EAAE;MACvD;MACA,IAAI,CAACb,cAAc,CAAC,EAAE,CAAC;IAC3B;EACJ,CAAC;EACD3D,oBAAoB,CAAChD,SAAS,CAAC4F,gBAAgB,GAAG,YAAY;IAC1D,OAAO,IAAI,CAACE,iBAAiB,CAACnD,aAAa,EAAE;EACjD,CAAC;EACDK,oBAAoB,CAAChD,SAAS,CAAC8K,sBAAsB,GAAG,UAAUC,cAAc,EAAE;IAC9E,IAAIA,cAAc,GAAG,CAAC,EAAE;MACpB,OAAO,CAAC;IACZ;IACA,IAAIjJ,aAAa,GAAG,IAAI,CAAC8D,gBAAgB,EAAE;IAC3C,IAAImF,cAAc,GAAGjJ,aAAa,EAAE;MAChC,OAAOA,aAAa;IACxB;IACA,OAAOiJ,cAAc,GAAG,CAAC;EAC7B,CAAC;EACD/H,oBAAoB,CAAChD,SAAS,CAACgL,oBAAoB,GAAG,UAAUD,cAAc,EAAEE,aAAa,EAAEC,aAAa,EAAE;IAC1GH,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5DE,aAAa,GAAG,IAAI,CAACH,sBAAsB,CAACG,aAAa,CAAC;IAC1DC,aAAa,GAAG,IAAI,CAACJ,sBAAsB,CAACI,aAAa,CAAC;IAC1D,IAAItK,aAAa,GAAG,IAAI,CAACX,kCAAkC,CAAC8K,cAAc,EAAE,IAAI,CAACI,oBAAoB,CAACJ,cAAc,CAAC,CAAC;IACtH,IAAIK,gBAAgB,GAAG,IAAI,CAACnL,kCAAkC,CAACgL,aAAa,EAAE,IAAI,CAACE,oBAAoB,CAACF,aAAa,CAAC,CAAC;IACvH,IAAII,gBAAgB,GAAG,IAAI,CAACpL,kCAAkC,CAACiL,aAAa,EAAE,IAAI,CAACC,oBAAoB,CAACD,aAAa,CAAC,CAAC;IACvH,IAAI5E,MAAM,GAAG,IAAI,CAACrD,KAAK,CAAC+H,oBAAoB,CAACpK,aAAa,CAACT,UAAU,EAAEiL,gBAAgB,CAACjL,UAAU,EAAEkL,gBAAgB,CAAClL,UAAU,CAAC;IAChI,IAAImL,iBAAiB,GAAG,IAAI,CAAC3K,kCAAkC,CAAC2F,MAAM,CAACf,eAAe,EAAE,CAAC,CAAC;IAC1F,IAAIgG,eAAe,GAAG,IAAI,CAAC5K,kCAAkC,CAAC2F,MAAM,CAACd,aAAa,EAAE,IAAI,CAACvC,KAAK,CAACuI,gBAAgB,CAAClF,MAAM,CAACd,aAAa,CAAC,CAAC;IACtI,OAAO;MACHD,eAAe,EAAE+F,iBAAiB,CAACnL,UAAU;MAC7CqF,aAAa,EAAE+F,eAAe,CAACpL,UAAU;MACzCsL,MAAM,EAAEnF,MAAM,CAACmF;IACnB,CAAC;EACL,CAAC;EACDzI,oBAAoB,CAAChD,SAAS,CAAC0L,wBAAwB,GAAG,UAAUC,mBAAmB,EAAEC,iBAAiB,EAAE;IACxGD,mBAAmB,GAAG,IAAI,CAACb,sBAAsB,CAACa,mBAAmB,CAAC;IACtEC,iBAAiB,GAAG,IAAI,CAACd,sBAAsB,CAACc,iBAAiB,CAAC;IAClE,IAAIC,UAAU,GAAG,IAAI,CAAC5L,kCAAkC,CAAC0L,mBAAmB,EAAE,IAAI,CAACR,oBAAoB,CAACQ,mBAAmB,CAAC,CAAC;IAC7H,IAAIG,QAAQ,GAAG,IAAI,CAAC7L,kCAAkC,CAAC2L,iBAAiB,EAAE,IAAI,CAACG,oBAAoB,CAACH,iBAAiB,CAAC,CAAC;IACvH,IAAItF,MAAM,GAAG,EAAE;IACf,IAAI0F,iBAAiB,GAAG,EAAE;IAC1B,IAAIC,kBAAkB,GAAG,EAAE;IAC3B,IAAIC,mBAAmB,GAAGL,UAAU,CAAC1L,UAAU,GAAG,CAAC;IACnD,IAAIgM,iBAAiB,GAAGL,QAAQ,CAAC3L,UAAU,GAAG,CAAC;IAC/C,IAAIiM,QAAQ,GAAG,IAAI;IACnB,KAAK,IAAIrJ,cAAc,GAAGmJ,mBAAmB,EAAEnJ,cAAc,IAAIoJ,iBAAiB,EAAEpJ,cAAc,EAAE,EAAE;MAClG,IAAI2C,IAAI,GAAG,IAAI,CAAC5F,KAAK,CAACiD,cAAc,CAAC;MACrC,IAAI2C,IAAI,CAAC8B,SAAS,EAAE,EAAE;QAClB,IAAI6E,kBAAkB,GAAG3G,IAAI,CAAC4G,gCAAgC,CAAC,CAAC,EAAEvJ,cAAc,KAAKmJ,mBAAmB,GAAGL,UAAU,CAACzL,MAAM,GAAG,CAAC,CAAC;QACjI,IAAImM,gBAAgB,GAAG7G,IAAI,CAAC4G,gCAAgC,CAAC,CAAC,EAAE,IAAI,CAACrJ,KAAK,CAACuI,gBAAgB,CAACzI,cAAc,GAAG,CAAC,CAAC,CAAC;QAChH,IAAIyJ,KAAK,GAAGD,gBAAgB,GAAGF,kBAAkB,GAAG,CAAC;QACrD,IAAII,MAAM,GAAG,CAAC,CAAC;QACf,IAAID,KAAK,GAAG,CAAC,IAAI9G,IAAI,CAACyF,oBAAoB,CAAC,IAAI,CAAClI,KAAK,EAAEF,cAAc,GAAG,CAAC,EAAEwJ,gBAAgB,CAAC,KAAK,CAAC,EAAE;UAChG;UACAE,MAAM,GAAIJ,kBAAkB,KAAK,CAAC,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,cAAe;QACpF;;QACAL,iBAAiB,CAACtF,IAAI,CAAC8F,KAAK,CAAC;QAC7BP,kBAAkB,CAACvF,IAAI,CAAC+F,MAAM,CAAC;QAC/B;QACA,IAAIL,QAAQ,KAAK,IAAI,EAAE;UACnBA,QAAQ,GAAG,IAAI7N,QAAQ,CAACwE,cAAc,GAAG,CAAC,EAAE,CAAC,CAAC;QAClD;MACJ,CAAC,MACI;QACD;QACA,IAAIqJ,QAAQ,KAAK,IAAI,EAAE;UACnB9F,MAAM,GAAGA,MAAM,CAACsD,MAAM,CAAC,IAAI,CAAC3G,KAAK,CAACyJ,oBAAoB,CAACN,QAAQ,CAACjM,UAAU,EAAE4C,cAAc,CAAC,CAAC;UAC5FqJ,QAAQ,GAAG,IAAI;QACnB;MACJ;IACJ;IACA,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACnB9F,MAAM,GAAGA,MAAM,CAACsD,MAAM,CAAC,IAAI,CAAC3G,KAAK,CAACyJ,oBAAoB,CAACN,QAAQ,CAACjM,UAAU,EAAE2L,QAAQ,CAAC3L,UAAU,CAAC,CAAC;MACjGiM,QAAQ,GAAG,IAAI;IACnB;IACA,IAAItK,aAAa,GAAG8J,iBAAiB,GAAGD,mBAAmB,GAAG,CAAC;IAC/D,IAAIgB,WAAW,GAAG,IAAIC,KAAK,CAAC9K,aAAa,CAAC;IAC1C,IAAI+K,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIjL,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGyE,MAAM,CAAC7G,MAAM,EAAEmC,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAIM,KAAK,GAAGoE,MAAM,CAAC1E,CAAC,CAAC;MACrB,IAAI4K,KAAK,GAAG/K,IAAI,CAACC,GAAG,CAACI,aAAa,GAAG+K,SAAS,EAAEb,iBAAiB,CAACpK,CAAC,CAAC,CAAC;MACrE,IAAI6K,MAAM,GAAGR,kBAAkB,CAACrK,CAAC,CAAC;MAClC,IAAIkL,YAAY,GAAG,KAAK,CAAC;MACzB,IAAIL,MAAM,KAAK,CAAC,CAAC,gBAAgB;QAC7BK,YAAY,GAAG,CAAC;MACpB,CAAC,MACI,IAAIL,MAAM,KAAK,CAAC,CAAC,uBAAuB;QACzCK,YAAY,GAAG,CAAC;MACpB,CAAC,MACI;QACDA,YAAY,GAAGN,KAAK;MACxB;MACA,KAAK,IAAIxK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,KAAK,EAAExK,CAAC,EAAE,EAAE;QAC5B,IAAIA,CAAC,KAAK8K,YAAY,EAAE;UACpB5K,KAAK,GAAG,CAAC;QACb;QACAyK,WAAW,CAACE,SAAS,EAAE,CAAC,GAAG3K,KAAK;MACpC;IACJ;IACA,OAAOyK,WAAW;EACtB,CAAC;EACD3J,oBAAoB,CAAChD,SAAS,CAAC+M,kBAAkB,GAAG,UAAUhC,cAAc,EAAE;IAC1EA,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,OAAO,IAAI,CAAClN,KAAK,CAACkK,SAAS,CAAC,CAAC+C,kBAAkB,CAAC,IAAI,CAAC9J,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;EACzF,CAAC;EACDhK,oBAAoB,CAAChD,SAAS,CAACiN,iBAAiB,GAAG,UAAUlC,cAAc,EAAE;IACzEA,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,OAAO,IAAI,CAAClN,KAAK,CAACkK,SAAS,CAAC,CAACiD,iBAAiB,CAAC,IAAI,CAAChK,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;EACxF,CAAC;EACDhK,oBAAoB,CAAChD,SAAS,CAACmL,oBAAoB,GAAG,UAAUJ,cAAc,EAAE;IAC5EA,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,OAAO,IAAI,CAAClN,KAAK,CAACkK,SAAS,CAAC,CAACmB,oBAAoB,CAAC,IAAI,CAAClI,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;EAC3F,CAAC;EACDhK,oBAAoB,CAAChD,SAAS,CAAC+L,oBAAoB,GAAG,UAAUhB,cAAc,EAAE;IAC5EA,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,OAAO,IAAI,CAAClN,KAAK,CAACkK,SAAS,CAAC,CAAC+B,oBAAoB,CAAC,IAAI,CAAC9I,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;EAC3F,CAAC;EACDhK,oBAAoB,CAAChD,SAAS,CAACkN,eAAe,GAAG,UAAUnC,cAAc,EAAE;IACvEA,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,OAAO,IAAI,CAAClN,KAAK,CAACkK,SAAS,CAAC,CAACkD,eAAe,CAAC,IAAI,CAACjK,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;EACtF,CAAC;EACDhK,oBAAoB,CAAChD,SAAS,CAACmN,gBAAgB,GAAG,UAAUxB,mBAAmB,EAAEC,iBAAiB,EAAEwB,MAAM,EAAE;IACxGzB,mBAAmB,GAAG,IAAI,CAACb,sBAAsB,CAACa,mBAAmB,CAAC;IACtEC,iBAAiB,GAAG,IAAI,CAACd,sBAAsB,CAACc,iBAAiB,CAAC;IAClE,IAAIxJ,KAAK,GAAG,IAAI,CAAC0D,iBAAiB,CAACjD,UAAU,CAAC8I,mBAAmB,GAAG,CAAC,CAAC;IACtE,IAAIZ,cAAc,GAAGY,mBAAmB;IACxC,IAAI0B,mBAAmB,GAAGjL,KAAK,CAACZ,KAAK;IACrC,IAAI8L,cAAc,GAAGlL,KAAK,CAAC4K,SAAS;IACpC,IAAI1G,MAAM,GAAG,EAAE;IACf,KAAK,IAAIvD,cAAc,GAAGsK,mBAAmB,EAAExL,GAAG,GAAG,IAAI,CAACoB,KAAK,CAACsK,YAAY,EAAE,EAAExK,cAAc,GAAGlB,GAAG,EAAEkB,cAAc,EAAE,EAAE;MACpH,IAAI2C,IAAI,GAAG,IAAI,CAAC5F,KAAK,CAACiD,cAAc,CAAC;MACrC,IAAI,CAAC2C,IAAI,CAAC8B,SAAS,EAAE,EAAE;QACnB;MACJ;MACA,IAAIgG,iBAAiB,GAAIzK,cAAc,KAAKsK,mBAAmB,GAAGC,cAAc,GAAG,CAAE;MACrF,IAAIG,sBAAsB,GAAG/H,IAAI,CAACE,gBAAgB,EAAE,GAAG4H,iBAAiB;MACxE,IAAIE,QAAQ,GAAG,KAAK;MACpB,IAAI3C,cAAc,GAAG0C,sBAAsB,GAAG7B,iBAAiB,EAAE;QAC7D8B,QAAQ,GAAG,IAAI;QACfD,sBAAsB,GAAG7B,iBAAiB,GAAGb,cAAc,GAAG,CAAC;MACnE;MACA,IAAI4C,eAAe,GAAGH,iBAAiB,GAAGC,sBAAsB;MAChE/H,IAAI,CAACyH,gBAAgB,CAAC,IAAI,CAAClK,KAAK,EAAEF,cAAc,GAAG,CAAC,EAAEyK,iBAAiB,EAAEG,eAAe,EAAE5C,cAAc,GAAGY,mBAAmB,EAAEyB,MAAM,EAAE9G,MAAM,CAAC;MAC/IyE,cAAc,IAAI0C,sBAAsB;MACxC,IAAIC,QAAQ,EAAE;QACV;MACJ;IACJ;IACA,OAAOpH,MAAM;EACjB,CAAC;EACDtD,oBAAoB,CAAChD,SAAS,CAACO,oBAAoB,GAAG,UAAUwK,cAAc,EAAE6C,UAAU,EAAEpN,qBAAqB,EAAE;IAC/GuK,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,IAAItH,IAAI,GAAG,IAAI,CAAC5F,KAAK,CAACkK,SAAS,CAAC;IAChC,IAAI6D,SAAS,GAAGnI,IAAI,CAACyF,oBAAoB,CAAC,IAAI,CAAClI,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;IAC/E,IAAIc,SAAS,GAAGpI,IAAI,CAACqG,oBAAoB,CAAC,IAAI,CAAC9I,KAAK,EAAE+G,SAAS,GAAG,CAAC,EAAEgD,SAAS,CAAC;IAC/E,IAAIY,UAAU,GAAGC,SAAS,EAAE;MACxBD,UAAU,GAAGC,SAAS;IAC1B;IACA,IAAID,UAAU,GAAGE,SAAS,EAAE;MACxBF,UAAU,GAAGE,SAAS;IAC1B;IACA,IAAIC,mBAAmB,GAAGrI,IAAI,CAACsI,4BAA4B,CAAChB,SAAS,EAAEY,UAAU,CAAC;IAClF,IAAIK,qBAAqB,GAAG,IAAI,CAAChL,KAAK,CAACiL,gBAAgB,CAAC,IAAI3P,QAAQ,CAACyL,SAAS,GAAG,CAAC,EAAE+D,mBAAmB,CAAC,CAAC;IACzG,IAAIE,qBAAqB,CAAChG,MAAM,CAACzH,qBAAqB,CAAC,EAAE;MACrD,OAAO,IAAIjC,QAAQ,CAACwM,cAAc,EAAE6C,UAAU,CAAC;IACnD;IACA,OAAO,IAAI,CAACjN,kCAAkC,CAACH,qBAAqB,CAACL,UAAU,EAAEK,qBAAqB,CAACJ,MAAM,CAAC;EAClH,CAAC;EACD4C,oBAAoB,CAAChD,SAAS,CAACS,iBAAiB,GAAG,UAAUH,SAAS,EAAEI,kBAAkB,EAAE;IACxF,IAAIyN,cAAc,GAAG,IAAI,CAAC5N,oBAAoB,CAACD,SAAS,CAACiF,eAAe,EAAEjF,SAAS,CAAC8N,WAAW,EAAE1N,kBAAkB,CAAC2N,gBAAgB,EAAE,CAAC;IACvI,IAAIC,YAAY,GAAG,IAAI,CAAC/N,oBAAoB,CAACD,SAAS,CAACkF,aAAa,EAAElF,SAAS,CAACiO,SAAS,EAAE7N,kBAAkB,CAAC8N,cAAc,EAAE,CAAC;IAC/H,OAAO,IAAIhQ,KAAK,CAAC2P,cAAc,CAAChO,UAAU,EAAEgO,cAAc,CAAC/N,MAAM,EAAEkO,YAAY,CAACnO,UAAU,EAAEmO,YAAY,CAAClO,MAAM,CAAC;EACpH,CAAC;EACD4C,oBAAoB,CAAChD,SAAS,CAACC,kCAAkC,GAAG,UAAU8K,cAAc,EAAE6C,UAAU,EAAE;IACtG7C,cAAc,GAAG,IAAI,CAACD,sBAAsB,CAACC,cAAc,CAAC;IAC5D,IAAI3E,CAAC,GAAG,IAAI,CAACN,iBAAiB,CAACjD,UAAU,CAACkI,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAIf,SAAS,GAAG5D,CAAC,CAAC5E,KAAK;IACvB,IAAIwL,SAAS,GAAG5G,CAAC,CAAC4G,SAAS;IAC3B,IAAIyB,WAAW,GAAG,IAAI,CAAC3O,KAAK,CAACkK,SAAS,CAAC,CAACgE,4BAA4B,CAAChB,SAAS,EAAEY,UAAU,CAAC;IAC3F;IACA,OAAO,IAAI,CAAC3K,KAAK,CAACiL,gBAAgB,CAAC,IAAI3P,QAAQ,CAACyL,SAAS,GAAG,CAAC,EAAEyE,WAAW,CAAC,CAAC;EAChF,CAAC;EACDzL,oBAAoB,CAAChD,SAAS,CAACK,4BAA4B,GAAG,UAAUC,SAAS,EAAE;IAC/E,IAAI8B,KAAK,GAAG,IAAI,CAACnC,kCAAkC,CAACK,SAAS,CAACiF,eAAe,EAAEjF,SAAS,CAAC8N,WAAW,CAAC;IACrG,IAAIM,GAAG,GAAG,IAAI,CAACzO,kCAAkC,CAACK,SAAS,CAACkF,aAAa,EAAElF,SAAS,CAACiO,SAAS,CAAC;IAC/F,OAAO,IAAI/P,KAAK,CAAC4D,KAAK,CAACjC,UAAU,EAAEiC,KAAK,CAAChC,MAAM,EAAEsO,GAAG,CAACvO,UAAU,EAAEuO,GAAG,CAACtO,MAAM,CAAC;EAChF,CAAC;EACD4C,oBAAoB,CAAChD,SAAS,CAACW,kCAAkC,GAAG,UAAUgO,gBAAgB,EAAE/G,YAAY,EAAE;IAC1G,IAAIgH,aAAa,GAAG,IAAI,CAAC3L,KAAK,CAACiL,gBAAgB,CAAC,IAAI3P,QAAQ,CAACoQ,gBAAgB,EAAE/G,YAAY,CAAC,CAAC;IAC7F,IAAIiH,eAAe,GAAGD,aAAa,CAACzO,UAAU;IAC9C,IAAIsO,WAAW,GAAGG,aAAa,CAACxO,MAAM;IACtC,IAAI4J,SAAS,GAAG6E,eAAe,GAAG,CAAC;MAAEC,gBAAgB,GAAG,KAAK;IAC7D,OAAO9E,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE,EAAE;MACxDwC,SAAS,EAAE;MACX8E,gBAAgB,GAAG,IAAI;IAC3B;IACA,IAAI9E,SAAS,KAAK,CAAC,IAAI,CAAC,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE,EAAE;MACvD;MACA;MACA,OAAO,IAAIjJ,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7B;IACA,IAAIwQ,eAAe,GAAG,CAAC,IAAI/E,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAClE,iBAAiB,CAAClD,mBAAmB,CAACoH,SAAS,GAAG,CAAC,CAAC,CAAC;IAC3G,IAAI5D,CAAC;IACL,IAAI0I,gBAAgB,EAAE;MAClB1I,CAAC,GAAG,IAAI,CAACtG,KAAK,CAACkK,SAAS,CAAC,CAACgF,8BAA8B,CAACD,eAAe,EAAE,IAAI,CAAC9L,KAAK,CAACuI,gBAAgB,CAACxB,SAAS,GAAG,CAAC,CAAC,CAAC;IACzH,CAAC,MACI;MACD5D,CAAC,GAAG,IAAI,CAACtG,KAAK,CAAC+O,eAAe,GAAG,CAAC,CAAC,CAACG,8BAA8B,CAACD,eAAe,EAAEN,WAAW,CAAC;IACpG;IACA;IACA,OAAOrI,CAAC;EACZ,CAAC;EACDpD,oBAAoB,CAAChD,SAAS,CAACa,4BAA4B,GAAG,UAAUC,UAAU,EAAE;IAChF,IAAIsB,KAAK,GAAG,IAAI,CAACzB,kCAAkC,CAACG,UAAU,CAACyE,eAAe,EAAEzE,UAAU,CAACsN,WAAW,CAAC;IACvG,IAAIM,GAAG,GAAG,IAAI,CAAC/N,kCAAkC,CAACG,UAAU,CAAC0E,aAAa,EAAE1E,UAAU,CAACyN,SAAS,CAAC;IACjG,IAAIzN,UAAU,CAACyE,eAAe,KAAKzE,UAAU,CAAC0E,aAAa,IAAIpD,KAAK,CAACjC,UAAU,KAAKuO,GAAG,CAACvO,UAAU,EAAE;MAChG;MACA,IAAIuO,GAAG,CAACtO,MAAM,KAAK,IAAI,CAAC+K,oBAAoB,CAACuD,GAAG,CAACvO,UAAU,CAAC,EAAE;QAC1D;QACA,OAAO,IAAI3B,KAAK,CAAC4D,KAAK,CAACjC,UAAU,EAAEiC,KAAK,CAAChC,MAAM,EAAEsO,GAAG,CAACvO,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC4L,oBAAoB,CAAC2C,GAAG,CAACvO,UAAU,GAAG,CAAC,CAAC,CAAC;MACvH;IACJ;IACA,OAAO,IAAI3B,KAAK,CAAC4D,KAAK,CAACjC,UAAU,EAAEiC,KAAK,CAAChC,MAAM,EAAEsO,GAAG,CAACvO,UAAU,EAAEuO,GAAG,CAACtO,MAAM,CAAC;EAChF,CAAC;EACD4C,oBAAoB,CAAChD,SAAS,CAACiP,kCAAkC,GAAG,UAAUJ,eAAe,EAAEJ,WAAW,EAAE;IACxG,IAAIzE,SAAS,GAAG6E,eAAe,GAAG,CAAC;IACnC,IAAI,IAAI,CAAC/O,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE,EAAE;MACnC;MACA,IAAI0H,iBAAiB,GAAG,CAAC,IAAIlF,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAClE,iBAAiB,CAAClD,mBAAmB,CAACoH,SAAS,GAAG,CAAC,CAAC,CAAC;MAC7G,OAAO,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACsC,gCAAgC,CAAC4C,iBAAiB,EAAET,WAAW,CAAC;IACjG;IACA;IACA,OAAOzE,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE,EAAE;MACxDwC,SAAS,EAAE;IACf;IACA,IAAIA,SAAS,KAAK,CAAC,IAAI,CAAC,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACxC,SAAS,EAAE,EAAE;MACvD;MACA,OAAO,CAAC;IACZ;IACA,IAAIuH,eAAe,GAAG,CAAC,IAAI/E,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAClE,iBAAiB,CAAClD,mBAAmB,CAACoH,SAAS,GAAG,CAAC,CAAC,CAAC;IAC3G,OAAO,IAAI,CAAClK,KAAK,CAACkK,SAAS,CAAC,CAACsC,gCAAgC,CAACyC,eAAe,EAAE,IAAI,CAAC9L,KAAK,CAACuI,gBAAgB,CAACxB,SAAS,GAAG,CAAC,CAAC,CAAC;EAC9H,CAAC;EACDhH,oBAAoB,CAAChD,SAAS,CAACmP,8BAA8B,GAAG,UAAUC,OAAO,EAAEC,mBAAmB,EAAEC,KAAK,EAAE;IAC3G,IAAIC,WAAW,GAAG,IAAI,CAACtM,KAAK,CAACuM,2BAA2B,CAACJ,OAAO,EAAEC,mBAAmB,CAAC;IACtF,IAAI/I,MAAM,GAAG,IAAImJ,wBAAwB,EAAE;IAC3C,KAAK,IAAIxI,EAAE,GAAG,CAAC,EAAEyI,aAAa,GAAGH,WAAW,EAAEtI,EAAE,GAAGyI,aAAa,CAACjQ,MAAM,EAAEwH,EAAE,EAAE,EAAE;MAC3E,IAAI0I,UAAU,GAAGD,aAAa,CAACzI,EAAE,CAAC;MAClC,IAAI2I,IAAI,GAAGD,UAAU,CAACvI,OAAO,CAACyI,aAAa;MAC3C,IAAIC,IAAI,GAAGF,IAAI,GAAGA,IAAI,CAACG,QAAQ,GAAG,CAAC;MACnC,IAAID,IAAI,KAAK,CAAC,EAAE;QACZ;MACJ;MACA,IAAIE,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAACX,KAAK,CAAC;MAChC,IAAI3D,mBAAmB,GAAG,IAAI,CAACsD,kCAAkC,CAACU,UAAU,CAAClJ,KAAK,CAAClB,eAAe,EAAEoK,UAAU,CAAClJ,KAAK,CAAC2H,WAAW,CAAC;MACjI,IAAIxC,iBAAiB,GAAG,IAAI,CAACqD,kCAAkC,CAACU,UAAU,CAAClJ,KAAK,CAACjB,aAAa,EAAEmK,UAAU,CAAClJ,KAAK,CAAC8H,SAAS,CAAC;MAC3HjI,MAAM,CAAC4J,MAAM,CAACF,KAAK,EAAErE,mBAAmB,EAAEC,iBAAiB,EAAEkE,IAAI,CAAC;IACtE;IACA,OAAOxJ,MAAM,CAACA,MAAM;EACxB,CAAC;EACDtD,oBAAoB,CAAChD,SAAS,CAACmQ,qBAAqB,GAAG,UAAU1J,KAAK,EAAE2I,OAAO,EAAEC,mBAAmB,EAAE;IAClG,IAAIxD,UAAU,GAAG,IAAI,CAAC5L,kCAAkC,CAACwG,KAAK,CAAClB,eAAe,EAAEkB,KAAK,CAAC2H,WAAW,CAAC;IAClG,IAAItC,QAAQ,GAAG,IAAI,CAAC7L,kCAAkC,CAACwG,KAAK,CAACjB,aAAa,EAAEiB,KAAK,CAAC8H,SAAS,CAAC;IAC5F,IAAIzC,QAAQ,CAAC3L,UAAU,GAAG0L,UAAU,CAAC1L,UAAU,IAAIsG,KAAK,CAACjB,aAAa,GAAGiB,KAAK,CAAClB,eAAe,EAAE;MAC5F;MACA;MACA,OAAO,IAAI,CAACtC,KAAK,CAACkN,qBAAqB,CAAC,IAAI3R,KAAK,CAACqN,UAAU,CAAC1L,UAAU,EAAE,CAAC,EAAE2L,QAAQ,CAAC3L,UAAU,EAAE2L,QAAQ,CAAC1L,MAAM,CAAC,EAAEgP,OAAO,EAAEC,mBAAmB,CAAC;IACpJ;IACA,IAAI/I,MAAM,GAAG,EAAE;IACf,IAAI4F,mBAAmB,GAAGL,UAAU,CAAC1L,UAAU,GAAG,CAAC;IACnD,IAAIgM,iBAAiB,GAAGL,QAAQ,CAAC3L,UAAU,GAAG,CAAC;IAC/C,IAAIiM,QAAQ,GAAG,IAAI;IACnB,KAAK,IAAIrJ,cAAc,GAAGmJ,mBAAmB,EAAEnJ,cAAc,IAAIoJ,iBAAiB,EAAEpJ,cAAc,EAAE,EAAE;MAClG,IAAI2C,IAAI,GAAG,IAAI,CAAC5F,KAAK,CAACiD,cAAc,CAAC;MACrC,IAAI2C,IAAI,CAAC8B,SAAS,EAAE,EAAE;QAClB;QACA,IAAI4E,QAAQ,KAAK,IAAI,EAAE;UACnBA,QAAQ,GAAG,IAAI7N,QAAQ,CAACwE,cAAc,GAAG,CAAC,EAAEA,cAAc,KAAKmJ,mBAAmB,GAAGL,UAAU,CAACzL,MAAM,GAAG,CAAC,CAAC;QAC/G;MACJ,CAAC,MACI;QACD;QACA,IAAIgM,QAAQ,KAAK,IAAI,EAAE;UACnB,IAAIgE,aAAa,GAAG,IAAI,CAACnN,KAAK,CAACuI,gBAAgB,CAACzI,cAAc,CAAC;UAC/DuD,MAAM,GAAGA,MAAM,CAACsD,MAAM,CAAC,IAAI,CAAC3G,KAAK,CAACkN,qBAAqB,CAAC,IAAI3R,KAAK,CAAC4N,QAAQ,CAACjM,UAAU,EAAEiM,QAAQ,CAAChM,MAAM,EAAE2C,cAAc,EAAEqN,aAAa,CAAC,EAAEhB,OAAO,EAAEC,mBAAmB,CAAC,CAAC;UACtKjD,QAAQ,GAAG,IAAI;QACnB;MACJ;IACJ;IACA,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACnB9F,MAAM,GAAGA,MAAM,CAACsD,MAAM,CAAC,IAAI,CAAC3G,KAAK,CAACkN,qBAAqB,CAAC,IAAI3R,KAAK,CAAC4N,QAAQ,CAACjM,UAAU,EAAEiM,QAAQ,CAAChM,MAAM,EAAE0L,QAAQ,CAAC3L,UAAU,EAAE2L,QAAQ,CAAC1L,MAAM,CAAC,EAAEgP,OAAO,EAAEC,mBAAmB,CAAC,CAAC;MAC7KjD,QAAQ,GAAG,IAAI;IACnB;IACA9F,MAAM,CAACrB,IAAI,CAAC,UAAUoL,CAAC,EAAEC,CAAC,EAAE;MACxB,IAAIC,GAAG,GAAG/R,KAAK,CAAC0G,wBAAwB,CAACmL,CAAC,CAAC5J,KAAK,EAAE6J,CAAC,CAAC7J,KAAK,CAAC;MAC1D,IAAI8J,GAAG,KAAK,CAAC,EAAE;QACX,IAAIF,CAAC,CAACG,EAAE,GAAGF,CAAC,CAACE,EAAE,EAAE;UACb,OAAO,CAAC,CAAC;QACb;QACA,IAAIH,CAAC,CAACG,EAAE,GAAGF,CAAC,CAACE,EAAE,EAAE;UACb,OAAO,CAAC;QACZ;QACA,OAAO,CAAC;MACZ;MACA,OAAOD,GAAG;IACd,CAAC,CAAC;IACF;IACA,IAAIE,WAAW,GAAG,EAAE;MAAEC,cAAc,GAAG,CAAC;IACxC,IAAIC,SAAS,GAAG,IAAI;IACpB,KAAK,IAAI1J,EAAE,GAAG,CAAC,EAAE2J,QAAQ,GAAGtK,MAAM,EAAEW,EAAE,GAAG2J,QAAQ,CAACnR,MAAM,EAAEwH,EAAE,EAAE,EAAE;MAC5D,IAAI4J,GAAG,GAAGD,QAAQ,CAAC3J,EAAE,CAAC;MACtB,IAAIjB,KAAK,GAAG6K,GAAG,CAACL,EAAE;MAClB,IAAIG,SAAS,KAAK3K,KAAK,EAAE;QACrB;QACA;MACJ;MACA2K,SAAS,GAAG3K,KAAK;MACjByK,WAAW,CAACC,cAAc,EAAE,CAAC,GAAGG,GAAG;IACvC;IACA,OAAOJ,WAAW;EACtB,CAAC;EACD,OAAOzN,oBAAoB;AAC/B,CAAC,EAAG;AACJ,SAASA,oBAAoB;AAC7B,IAAI8N,wBAAwB,GAAG,aAAe,YAAY;EACtD,SAASA,wBAAwB,GAAG,CACpC;EACAA,wBAAwB,CAAC9Q,SAAS,CAACwH,SAAS,GAAG,YAAY;IACvD,OAAO,IAAI;EACf,CAAC;EACDsJ,wBAAwB,CAAC9Q,SAAS,CAACyH,UAAU,GAAG,UAAUD,SAAS,EAAE;IACjE,IAAIA,SAAS,EAAE;MACX,OAAO,IAAI;IACf;IACA,OAAOuJ,0BAA0B,CAACC,QAAQ;EAC9C,CAAC;EACDF,wBAAwB,CAAC9Q,SAAS,CAACsI,gBAAgB,GAAG,YAAY;IAC9D,OAAO,IAAI;EACf,CAAC;EACDwI,wBAAwB,CAAC9Q,SAAS,CAAC4F,gBAAgB,GAAG,YAAY;IAC9D,OAAO,CAAC;EACZ,CAAC;EACDkL,wBAAwB,CAAC9Q,SAAS,CAAC+M,kBAAkB,GAAG,UAAU9J,KAAK,EAAE0E,eAAe,EAAEsJ,gBAAgB,EAAE;IACxG,OAAOhO,KAAK,CAACiO,cAAc,CAACvJ,eAAe,CAAC;EAChD,CAAC;EACDmJ,wBAAwB,CAAC9Q,SAAS,CAACiN,iBAAiB,GAAG,UAAUhK,KAAK,EAAE0E,eAAe,EAAEsJ,gBAAgB,EAAE;IACvG,OAAOhO,KAAK,CAACkO,aAAa,CAACxJ,eAAe,CAAC;EAC/C,CAAC;EACDmJ,wBAAwB,CAAC9Q,SAAS,CAACmL,oBAAoB,GAAG,UAAUlI,KAAK,EAAE0E,eAAe,EAAEsJ,gBAAgB,EAAE;IAC1G,OAAOhO,KAAK,CAACmO,gBAAgB,CAACzJ,eAAe,CAAC;EAClD,CAAC;EACDmJ,wBAAwB,CAAC9Q,SAAS,CAAC+L,oBAAoB,GAAG,UAAU9I,KAAK,EAAE0E,eAAe,EAAEsJ,gBAAgB,EAAE;IAC1G,OAAOhO,KAAK,CAACuI,gBAAgB,CAAC7D,eAAe,CAAC;EAClD,CAAC;EACDmJ,wBAAwB,CAAC9Q,SAAS,CAACkN,eAAe,GAAG,UAAUjK,KAAK,EAAE0E,eAAe,EAAEsJ,gBAAgB,EAAE;IACrG,IAAII,UAAU,GAAGpO,KAAK,CAACqO,aAAa,CAAC3J,eAAe,CAAC;IACrD,IAAI4J,WAAW,GAAGF,UAAU,CAACH,cAAc,EAAE;IAC7C,OAAO,IAAItS,YAAY,CAAC2S,WAAW,EAAE,KAAK,EAAE,CAAC,EAAEA,WAAW,CAAC9R,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE4R,UAAU,CAACG,OAAO,EAAE,CAAC;EACnG,CAAC;EACDV,wBAAwB,CAAC9Q,SAAS,CAACmN,gBAAgB,GAAG,UAAUlK,KAAK,EAAE0E,eAAe,EAAE8J,mBAAmB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEvE,MAAM,EAAE9G,MAAM,EAAE;IAC/J,IAAI,CAAC8G,MAAM,CAACuE,gBAAgB,CAAC,EAAE;MAC3BrL,MAAM,CAACqL,gBAAgB,CAAC,GAAG,IAAI;MAC/B;IACJ;IACArL,MAAM,CAACqL,gBAAgB,CAAC,GAAG,IAAI,CAACzE,eAAe,CAACjK,KAAK,EAAE0E,eAAe,EAAE,CAAC,CAAC;EAC9E,CAAC;EACDmJ,wBAAwB,CAAC9Q,SAAS,CAACgO,4BAA4B,GAAG,UAAUiD,gBAAgB,EAAEW,YAAY,EAAE;IACxG,OAAOA,YAAY;EACvB,CAAC;EACDd,wBAAwB,CAAC9Q,SAAS,CAACgP,8BAA8B,GAAG,UAAUD,eAAe,EAAEN,WAAW,EAAE;IACxG,OAAO,IAAIlQ,QAAQ,CAACwQ,eAAe,EAAEN,WAAW,CAAC;EACrD,CAAC;EACDqC,wBAAwB,CAAC9Q,SAAS,CAACsM,gCAAgC,GAAG,UAAUyC,eAAe,EAAE8C,YAAY,EAAE;IAC3G,OAAO9C,eAAe;EAC1B,CAAC;EACD+B,wBAAwB,CAACE,QAAQ,GAAG,IAAIF,wBAAwB,EAAE;EAClE,OAAOA,wBAAwB;AACnC,CAAC,EAAG;AACJ,IAAIC,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0B,GAAG,CACtC;EACAA,0BAA0B,CAAC/Q,SAAS,CAACwH,SAAS,GAAG,YAAY;IACzD,OAAO,KAAK;EAChB,CAAC;EACDuJ,0BAA0B,CAAC/Q,SAAS,CAACyH,UAAU,GAAG,UAAUD,SAAS,EAAE;IACnE,IAAI,CAACA,SAAS,EAAE;MACZ,OAAO,IAAI;IACf;IACA,OAAOsJ,wBAAwB,CAACE,QAAQ;EAC5C,CAAC;EACDD,0BAA0B,CAAC/Q,SAAS,CAACsI,gBAAgB,GAAG,YAAY;IAChE,OAAO,IAAI;EACf,CAAC;EACDyI,0BAA0B,CAAC/Q,SAAS,CAAC4F,gBAAgB,GAAG,YAAY;IAChE,OAAO,CAAC;EACZ,CAAC;EACDmL,0BAA0B,CAAC/Q,SAAS,CAAC+M,kBAAkB,GAAG,UAAU+E,MAAM,EAAEnD,gBAAgB,EAAEsC,gBAAgB,EAAE;IAC5G,MAAM,IAAIc,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACiN,iBAAiB,GAAG,UAAU6E,MAAM,EAAEnD,gBAAgB,EAAEsC,gBAAgB,EAAE;IAC3G,MAAM,IAAIc,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACmL,oBAAoB,GAAG,UAAU2G,MAAM,EAAEnD,gBAAgB,EAAEsC,gBAAgB,EAAE;IAC9G,MAAM,IAAIc,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAAC+L,oBAAoB,GAAG,UAAU+F,MAAM,EAAEnD,gBAAgB,EAAEsC,gBAAgB,EAAE;IAC9G,MAAM,IAAIc,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACkN,eAAe,GAAG,UAAU4E,MAAM,EAAEnD,gBAAgB,EAAEsC,gBAAgB,EAAE;IACzG,MAAM,IAAIc,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACmN,gBAAgB,GAAG,UAAU2E,MAAM,EAAEnD,gBAAgB,EAAE8C,mBAAmB,EAAEC,kBAAkB,EAAEM,iBAAiB,EAAEC,OAAO,EAAEC,OAAO,EAAE;IACtK,MAAM,IAAIH,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACgO,4BAA4B,GAAG,UAAUiD,gBAAgB,EAAEkB,aAAa,EAAE;IAC3G,MAAM,IAAIJ,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACgP,8BAA8B,GAAG,UAAUoD,gBAAgB,EAAEP,YAAY,EAAE;IAC5G,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAAC/Q,SAAS,CAACsM,gCAAgC,GAAG,UAAU8F,gBAAgB,EAAEP,YAAY,EAAE;IAC9G,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC;EACDhB,0BAA0B,CAACC,QAAQ,GAAG,IAAID,0BAA0B,EAAE;EACtE,OAAOA,0BAA0B;AACrC,CAAC,EAAG;AACJ,IAAIsB,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAAS,CAACtI,aAAa,EAAEvC,SAAS,EAAE;IACzC,IAAI,CAAC8K,cAAc,GAAGvI,aAAa;IACnC,IAAI,CAACwI,UAAU,GAAG/K,SAAS;EAC/B;EACA6K,SAAS,CAACrS,SAAS,CAACwH,SAAS,GAAG,YAAY;IACxC,OAAO,IAAI,CAAC+K,UAAU;EAC1B,CAAC;EACDF,SAAS,CAACrS,SAAS,CAACyH,UAAU,GAAG,UAAUD,SAAS,EAAE;IAClD,IAAI,CAAC+K,UAAU,GAAG/K,SAAS;IAC3B,OAAO,IAAI;EACf,CAAC;EACD6K,SAAS,CAACrS,SAAS,CAACsI,gBAAgB,GAAG,YAAY;IAC/C,OAAO,IAAI,CAACgK,cAAc;EAC9B,CAAC;EACDD,SAAS,CAACrS,SAAS,CAAC4F,gBAAgB,GAAG,YAAY;IAC/C,IAAI,CAAC,IAAI,CAAC2M,UAAU,EAAE;MAClB,OAAO,CAAC;IACZ;IACA,OAAO,IAAI,CAACD,cAAc,CAACrT,YAAY,CAACQ,MAAM;EAClD,CAAC;EACD4S,SAAS,CAACrS,SAAS,CAACwS,oCAAoC,GAAG,UAAU1T,eAAe,EAAE;IAClF,OAAOE,aAAa,CAACI,8BAA8B,CAAC,IAAI,CAACkT,cAAc,CAACrT,YAAY,EAAEH,eAAe,EAAE,CAAC,CAAC;EAC7G,CAAC;EACDuT,SAAS,CAACrS,SAAS,CAACyS,kCAAkC,GAAG,UAAUxP,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,EAAE;IACxG,IAAIA,eAAe,GAAG,CAAC,KAAK,IAAI,CAACwT,cAAc,CAACrT,YAAY,CAACQ,MAAM,EAAE;MACjE,OAAOwD,KAAK,CAACuI,gBAAgB,CAAC7D,eAAe,CAAC,GAAG,CAAC;IACtD;IACA,OAAO3I,aAAa,CAACI,8BAA8B,CAAC,IAAI,CAACkT,cAAc,CAACrT,YAAY,EAAEH,eAAe,GAAG,CAAC,EAAE,CAAC,CAAC;EACjH,CAAC;EACDuT,SAAS,CAACrS,SAAS,CAAC+M,kBAAkB,GAAG,UAAU9J,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,EAAE;IACxF,IAAI,CAAC,IAAI,CAACyT,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAIW,WAAW,GAAG,IAAI,CAACF,oCAAoC,CAAC1T,eAAe,CAAC;IAC5E,IAAI6T,SAAS,GAAG,IAAI,CAACF,kCAAkC,CAACxP,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,CAAC;IAChG,IAAIsH,CAAC,GAAGnD,KAAK,CAAC2P,eAAe,CAAC;MAC1BrN,eAAe,EAAEoC,eAAe;MAChCyG,WAAW,EAAEsE,WAAW,GAAG,CAAC;MAC5BlN,aAAa,EAAEmC,eAAe;MAC9B4G,SAAS,EAAEoE,SAAS,GAAG;IAC3B,CAAC,CAAC;IACF,IAAI7T,eAAe,GAAG,CAAC,EAAE;MACrBsH,CAAC,GAAGyM,MAAM,CAAC,IAAI,CAACP,cAAc,CAACnT,uBAAuB,CAAC,GAAGiH,CAAC;IAC/D;IACA,OAAOA,CAAC;EACZ,CAAC;EACDiM,SAAS,CAACrS,SAAS,CAACiN,iBAAiB,GAAG,UAAUhK,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,EAAE;IACvF,IAAI,CAAC,IAAI,CAACyT,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAIW,WAAW,GAAG,IAAI,CAACF,oCAAoC,CAAC1T,eAAe,CAAC;IAC5E,IAAI6T,SAAS,GAAG,IAAI,CAACF,kCAAkC,CAACxP,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,CAAC;IAChG,IAAIsH,CAAC,GAAGuM,SAAS,GAAGD,WAAW;IAC/B,IAAI5T,eAAe,GAAG,CAAC,EAAE;MACrBsH,CAAC,GAAG,IAAI,CAACkM,cAAc,CAACnT,uBAAuB,GAAGiH,CAAC;IACvD;IACA,OAAOA,CAAC;EACZ,CAAC;EACDiM,SAAS,CAACrS,SAAS,CAACmL,oBAAoB,GAAG,UAAU2G,MAAM,EAAEnD,gBAAgB,EAAE7P,eAAe,EAAE;IAC5F,IAAI,CAAC,IAAI,CAACyT,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAIjT,eAAe,GAAG,CAAC,EAAE;MACrB,OAAO,IAAI,CAACwT,cAAc,CAACnT,uBAAuB,GAAG,CAAC;IAC1D;IACA,OAAO,CAAC;EACZ,CAAC;EACDkT,SAAS,CAACrS,SAAS,CAAC+L,oBAAoB,GAAG,UAAU9I,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,EAAE;IAC1F,IAAI,CAAC,IAAI,CAACyT,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,OAAO,IAAI,CAAChF,kBAAkB,CAAC9J,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,CAAC,CAACW,MAAM,GAAG,CAAC;EACtF,CAAC;EACD4S,SAAS,CAACrS,SAAS,CAACkN,eAAe,GAAG,UAAUjK,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,EAAE;IACrF,IAAI,CAAC,IAAI,CAACyT,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAIW,WAAW,GAAG,IAAI,CAACF,oCAAoC,CAAC1T,eAAe,CAAC;IAC5E,IAAI6T,SAAS,GAAG,IAAI,CAACF,kCAAkC,CAACxP,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,CAAC;IAChG,IAAIyS,WAAW,GAAGtO,KAAK,CAAC2P,eAAe,CAAC;MACpCrN,eAAe,EAAEoC,eAAe;MAChCyG,WAAW,EAAEsE,WAAW,GAAG,CAAC;MAC5BlN,aAAa,EAAEmC,eAAe;MAC9B4G,SAAS,EAAEoE,SAAS,GAAG;IAC3B,CAAC,CAAC;IACF,IAAI7T,eAAe,GAAG,CAAC,EAAE;MACrByS,WAAW,GAAGsB,MAAM,CAAC,IAAI,CAACP,cAAc,CAACnT,uBAAuB,CAAC,GAAGoS,WAAW;IACnF;IACA,IAAI1D,SAAS,GAAI/O,eAAe,GAAG,CAAC,GAAG,IAAI,CAACwT,cAAc,CAACnT,uBAAuB,GAAG,CAAC,GAAG,CAAE;IAC3F,IAAI2O,SAAS,GAAGyD,WAAW,CAAC9R,MAAM,GAAG,CAAC;IACtC,IAAIqT,wBAAwB,GAAIhU,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC8G,gBAAgB,EAAG;IAC9E,IAAImN,eAAe,GAAG,CAAC;IACvB,IAAIjU,eAAe,GAAG,CAAC,EAAE;MACrBiU,eAAe,GAAG,IAAI,CAACT,cAAc,CAACnT,uBAAuB;IACjE;IACA,IAAIkS,UAAU,GAAGpO,KAAK,CAACqO,aAAa,CAAC3J,eAAe,CAAC;IACrD,IAAIqL,kBAAkB,GAAIlU,eAAe,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAACwT,cAAc,CAACpT,yBAAyB,CAACJ,eAAe,GAAG,CAAC,CAAE;IACzH,OAAO,IAAIF,YAAY,CAAC2S,WAAW,EAAEuB,wBAAwB,EAAEjF,SAAS,EAAEC,SAAS,EAAEkF,kBAAkB,EAAE3B,UAAU,CAAC4B,eAAe,CAACP,WAAW,EAAEC,SAAS,EAAEI,eAAe,CAAC,CAAC;EACjL,CAAC;EACDV,SAAS,CAACrS,SAAS,CAACmN,gBAAgB,GAAG,UAAUlK,KAAK,EAAE0E,eAAe,EAAEuL,kBAAkB,EAAEC,iBAAiB,EAAExB,gBAAgB,EAAEvE,MAAM,EAAE9G,MAAM,EAAE;IAC9I,IAAI,CAAC,IAAI,CAACiM,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,KAAK,IAAIjT,eAAe,GAAGoU,kBAAkB,EAAEpU,eAAe,GAAGqU,iBAAiB,EAAErU,eAAe,EAAE,EAAE;MACnG,IAAIsU,WAAW,GAAGzB,gBAAgB,GAAG7S,eAAe,GAAGoU,kBAAkB;MACzE,IAAI,CAAC9F,MAAM,CAACgG,WAAW,CAAC,EAAE;QACtB9M,MAAM,CAAC8M,WAAW,CAAC,GAAG,IAAI;QAC1B;MACJ;MACA9M,MAAM,CAAC8M,WAAW,CAAC,GAAG,IAAI,CAAClG,eAAe,CAACjK,KAAK,EAAE0E,eAAe,EAAE7I,eAAe,CAAC;IACvF;EACJ,CAAC;EACDuT,SAAS,CAACrS,SAAS,CAACgO,4BAA4B,GAAG,UAAUlP,eAAe,EAAE8S,YAAY,EAAE;IACxF,IAAI,CAAC,IAAI,CAACW,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAIsB,cAAc,GAAGzB,YAAY,GAAG,CAAC;IACrC,IAAI9S,eAAe,GAAG,CAAC,EAAE;MACrB,IAAIuU,cAAc,GAAG,IAAI,CAACf,cAAc,CAACnT,uBAAuB,EAAE;QAC9DkU,cAAc,GAAG,CAAC;MACtB,CAAC,MACI;QACDA,cAAc,IAAI,IAAI,CAACf,cAAc,CAACnT,uBAAuB;MACjE;IACJ;IACA,OAAOH,aAAa,CAACI,8BAA8B,CAAC,IAAI,CAACkT,cAAc,CAACrT,YAAY,EAAEH,eAAe,EAAEuU,cAAc,CAAC,GAAG,CAAC;EAC9H,CAAC;EACDhB,SAAS,CAACrS,SAAS,CAACgP,8BAA8B,GAAG,UAAUD,eAAe,EAAEN,WAAW,EAAE;IACzF,IAAI,CAAC,IAAI,CAAC8D,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAI3L,CAAC,GAAGpH,aAAa,CAACK,8BAA8B,CAAC,IAAI,CAACiT,cAAc,CAACrT,YAAY,EAAEwP,WAAW,GAAG,CAAC,CAAC;IACvG,IAAI3P,eAAe,GAAGsH,CAAC,CAACtH,eAAe;IACvC,IAAI8S,YAAY,GAAGxL,CAAC,CAACrH,YAAY,GAAG,CAAC;IACrC,IAAID,eAAe,GAAG,CAAC,EAAE;MACrB8S,YAAY,IAAI,IAAI,CAACU,cAAc,CAACnT,uBAAuB;IAC/D;IACA;IACA,OAAO,IAAIZ,QAAQ,CAACwQ,eAAe,GAAGjQ,eAAe,EAAE8S,YAAY,CAAC;EACxE,CAAC;EACDS,SAAS,CAACrS,SAAS,CAACsM,gCAAgC,GAAG,UAAUyC,eAAe,EAAEN,WAAW,EAAE;IAC3F,IAAI,CAAC,IAAI,CAAC8D,UAAU,EAAE;MAClB,MAAM,IAAIR,KAAK,CAAC,eAAe,CAAC;IACpC;IACA,IAAI3L,CAAC,GAAGpH,aAAa,CAACK,8BAA8B,CAAC,IAAI,CAACiT,cAAc,CAACrT,YAAY,EAAEwP,WAAW,GAAG,CAAC,CAAC;IACvG,OAAQM,eAAe,GAAG3I,CAAC,CAACtH,eAAe;EAC/C,CAAC;EACD,OAAOuT,SAAS;AACpB,CAAC,EAAG;AACJ,SAASA,SAAS;AAClB,IAAIiB,OAAO,GAAG,CAAC,EAAE,CAAC;AAClB,SAAST,MAAM,CAACrG,KAAK,EAAE;EACnB,IAAIA,KAAK,IAAI8G,OAAO,CAAC7T,MAAM,EAAE;IACzB,KAAK,IAAImC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI4K,KAAK,EAAE5K,CAAC,EAAE,EAAE;MAC7B0R,OAAO,CAAC1R,CAAC,CAAC,GAAG2R,WAAW,CAAC3R,CAAC,CAAC;IAC/B;EACJ;EACA,OAAO0R,OAAO,CAAC9G,KAAK,CAAC;AACzB;AACA,SAAS+G,WAAW,CAAC/G,KAAK,EAAE;EACxB,OAAO,IAAII,KAAK,CAACJ,KAAK,GAAG,CAAC,CAAC,CAACgH,IAAI,CAAC,GAAG,CAAC;AACzC;AACA,SAAS7N,eAAe,CAACoE,aAAa,EAAEvC,SAAS,EAAE;EAC/C,IAAIuC,aAAa,KAAK,IAAI,EAAE;IACxB;IACA,IAAIvC,SAAS,EAAE;MACX,OAAOsJ,wBAAwB,CAACE,QAAQ;IAC5C;IACA,OAAOD,0BAA0B,CAACC,QAAQ;EAC9C,CAAC,MACI;IACD,OAAO,IAAIqB,SAAS,CAACtI,aAAa,EAAEvC,SAAS,CAAC;EAClD;AACJ;AACA,IAAIiM,4BAA4B,GAAG,aAAe,YAAY;EAC1D,SAASA,4BAA4B,CAAC3T,KAAK,EAAE;IACzC,IAAI,CAACC,MAAM,GAAGD,KAAK;EACvB;EACA2T,4BAA4B,CAACzT,SAAS,CAAC0T,cAAc,GAAG,UAAUC,GAAG,EAAE;IACnE,OAAO,IAAI,CAAC5T,MAAM,CAACkD,KAAK,CAACiL,gBAAgB,CAACyF,GAAG,CAAC;EAClD,CAAC;EACDF,4BAA4B,CAACzT,SAAS,CAAC4T,WAAW,GAAG,UAAUnN,KAAK,EAAE;IAClE,OAAO,IAAI,CAAC1G,MAAM,CAACkD,KAAK,CAACoD,aAAa,CAACI,KAAK,CAAC;EACjD,CAAC;EACD;EACAgN,4BAA4B,CAACzT,SAAS,CAACC,kCAAkC,GAAG,UAAUC,YAAY,EAAE;IAChG,OAAO,IAAI,CAACwT,cAAc,CAACxT,YAAY,CAAC;EAC5C,CAAC;EACDuT,4BAA4B,CAACzT,SAAS,CAACK,4BAA4B,GAAG,UAAUC,SAAS,EAAE;IACvF,OAAO,IAAI,CAACsT,WAAW,CAACtT,SAAS,CAAC;EACtC,CAAC;EACDmT,4BAA4B,CAACzT,SAAS,CAACO,oBAAoB,GAAG,UAAUsT,aAAa,EAAErT,qBAAqB,EAAE;IAC1G,OAAO,IAAI,CAACkT,cAAc,CAAClT,qBAAqB,CAAC;EACrD,CAAC;EACDiT,4BAA4B,CAACzT,SAAS,CAACS,iBAAiB,GAAG,UAAUqT,UAAU,EAAEpT,kBAAkB,EAAE;IACjG,OAAO,IAAI,CAACkT,WAAW,CAAClT,kBAAkB,CAAC;EAC/C,CAAC;EACD;EACA+S,4BAA4B,CAACzT,SAAS,CAACW,kCAAkC,GAAG,UAAUC,aAAa,EAAE;IACjG,OAAO,IAAI,CAAC8S,cAAc,CAAC9S,aAAa,CAAC;EAC7C,CAAC;EACD6S,4BAA4B,CAACzT,SAAS,CAACa,4BAA4B,GAAG,UAAUC,UAAU,EAAE;IACxF,OAAO,IAAI,CAAC8S,WAAW,CAAC9S,UAAU,CAAC;EACvC,CAAC;EACD2S,4BAA4B,CAACzT,SAAS,CAACe,sBAAsB,GAAG,UAAUH,aAAa,EAAE;IACrF,IAAI0D,SAAS,GAAG,IAAI,CAACvE,MAAM,CAACkD,KAAK,CAACsK,YAAY,EAAE;IAChD,IAAI3M,aAAa,CAACT,UAAU,GAAG,CAAC,IAAIS,aAAa,CAACT,UAAU,GAAGmE,SAAS,EAAE;MACtE;MACA,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf,CAAC;EACD,OAAOmP,4BAA4B;AACvC,CAAC,EAAG;AACJ,SAASA,4BAA4B;AACrC,IAAIM,uBAAuB,GAAG,aAAe,YAAY;EACrD,SAASA,uBAAuB,CAAC9Q,KAAK,EAAE;IACpC,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA8Q,uBAAuB,CAAC/T,SAAS,CAAC6D,OAAO,GAAG,YAAY,CACxD,CAAC;EACDkQ,uBAAuB,CAAC/T,SAAS,CAACgE,0BAA0B,GAAG,YAAY;IACvE,OAAO,IAAIyP,4BAA4B,CAAC,IAAI,CAAC;EACjD,CAAC;EACDM,uBAAuB,CAAC/T,SAAS,CAAC+F,cAAc,GAAG,YAAY;IAC3D,OAAO,EAAE;EACb,CAAC;EACDgO,uBAAuB,CAAC/T,SAAS,CAAC2G,cAAc,GAAG,UAAUT,OAAO,EAAE;IAClE,OAAO,KAAK;EAChB,CAAC;EACD6N,uBAAuB,CAAC/T,SAAS,CAAC6H,UAAU,GAAG,UAAUmM,WAAW,EAAE;IAClE,OAAO,KAAK;EAChB,CAAC;EACDD,uBAAuB,CAAC/T,SAAS,CAAC+H,mBAAmB,GAAG,UAAUkM,SAAS,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,eAAe,EAAE;IAC9H,OAAO,KAAK;EAChB,CAAC;EACDL,uBAAuB,CAAC/T,SAAS,CAACwE,wBAAwB,GAAG,YAAY;IACrE,IAAI8B,MAAM,GAAG,EAAE;IACf,OAAO;MACH7B,UAAU,EAAE,oBAAU4P,QAAQ,EAAEC,qBAAqB,EAAE;QACnDhO,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC;MACrB,CAAC;MACD/B,QAAQ,EAAE,oBAAY;QAClB,OAAO2B,MAAM;MACjB;IACJ,CAAC;EACL,CAAC;EACDyN,uBAAuB,CAAC/T,SAAS,CAACwI,cAAc,GAAG,YAAY,CAC/D,CAAC;EACDuL,uBAAuB,CAAC/T,SAAS,CAACyI,mBAAmB,GAAG,UAAU8L,UAAU,EAAE5L,cAAc,EAAEC,YAAY,EAAE;IACxG,OAAO,IAAIlK,UAAU,CAACqK,qBAAqB,CAACJ,cAAc,EAAEC,YAAY,CAAC;EAC7E,CAAC;EACDmL,uBAAuB,CAAC/T,SAAS,CAACgJ,oBAAoB,GAAG,UAAUuL,UAAU,EAAE5L,cAAc,EAAEC,YAAY,EAAEM,UAAU,EAAE;IACrH,OAAO,IAAIxK,UAAU,CAACmL,sBAAsB,CAAClB,cAAc,EAAEC,YAAY,CAAC;EAC9E,CAAC;EACDmL,uBAAuB,CAAC/T,SAAS,CAAC8J,kBAAkB,GAAG,UAAUyK,UAAU,EAAEpU,UAAU,EAAE4J,aAAa,EAAE;IACpG,OAAO,CAAC,KAAK,EAAE,IAAIrL,UAAU,CAACgM,qBAAqB,CAACvK,UAAU,EAAEA,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;EAC5F,CAAC;EACD4T,uBAAuB,CAAC/T,SAAS,CAAC6K,eAAe,GAAG,UAAU0J,UAAU,EAAE,CAC1E,CAAC;EACDR,uBAAuB,CAAC/T,SAAS,CAAC4F,gBAAgB,GAAG,YAAY;IAC7D,OAAO,IAAI,CAAC3C,KAAK,CAACsK,YAAY,EAAE;EACpC,CAAC;EACDwG,uBAAuB,CAAC/T,SAAS,CAACgL,oBAAoB,GAAG,UAAUD,cAAc,EAAEyJ,cAAc,EAAEC,cAAc,EAAE;IAC/G,OAAO;MACHlP,eAAe,EAAEwF,cAAc;MAC/BvF,aAAa,EAAEuF,cAAc;MAC7BU,MAAM,EAAE;IACZ,CAAC;EACL,CAAC;EACDsI,uBAAuB,CAAC/T,SAAS,CAAC0L,wBAAwB,GAAG,UAAUC,mBAAmB,EAAEC,iBAAiB,EAAE;IAC3G,IAAI9J,aAAa,GAAG8J,iBAAiB,GAAGD,mBAAmB,GAAG,CAAC;IAC/D,IAAIrF,MAAM,GAAG,IAAIsG,KAAK,CAAC9K,aAAa,CAAC;IACrC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,aAAa,EAAEF,CAAC,EAAE,EAAE;MACpC0E,MAAM,CAAC1E,CAAC,CAAC,GAAG,CAAC;IACjB;IACA,OAAO0E,MAAM;EACjB,CAAC;EACDyN,uBAAuB,CAAC/T,SAAS,CAAC+M,kBAAkB,GAAG,UAAUhC,cAAc,EAAE;IAC7E,OAAO,IAAI,CAAC9H,KAAK,CAACiO,cAAc,CAACnG,cAAc,CAAC;EACpD,CAAC;EACDgJ,uBAAuB,CAAC/T,SAAS,CAACiN,iBAAiB,GAAG,UAAUlC,cAAc,EAAE;IAC5E,OAAO,IAAI,CAAC9H,KAAK,CAACkO,aAAa,CAACpG,cAAc,CAAC;EACnD,CAAC;EACDgJ,uBAAuB,CAAC/T,SAAS,CAACmL,oBAAoB,GAAG,UAAUJ,cAAc,EAAE;IAC/E,OAAO,IAAI,CAAC9H,KAAK,CAACmO,gBAAgB,CAACrG,cAAc,CAAC;EACtD,CAAC;EACDgJ,uBAAuB,CAAC/T,SAAS,CAAC+L,oBAAoB,GAAG,UAAUhB,cAAc,EAAE;IAC/E,OAAO,IAAI,CAAC9H,KAAK,CAACuI,gBAAgB,CAACT,cAAc,CAAC;EACtD,CAAC;EACDgJ,uBAAuB,CAAC/T,SAAS,CAACkN,eAAe,GAAG,UAAUnC,cAAc,EAAE;IAC1E,IAAIsG,UAAU,GAAG,IAAI,CAACpO,KAAK,CAACqO,aAAa,CAACvG,cAAc,CAAC;IACzD,IAAIwG,WAAW,GAAGF,UAAU,CAACH,cAAc,EAAE;IAC7C,OAAO,IAAItS,YAAY,CAAC2S,WAAW,EAAE,KAAK,EAAE,CAAC,EAAEA,WAAW,CAAC9R,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE4R,UAAU,CAACG,OAAO,EAAE,CAAC;EACnG,CAAC;EACDuC,uBAAuB,CAAC/T,SAAS,CAACmN,gBAAgB,GAAG,UAAUxB,mBAAmB,EAAEC,iBAAiB,EAAEwB,MAAM,EAAE;IAC3G,IAAI9I,SAAS,GAAG,IAAI,CAACrB,KAAK,CAACsK,YAAY,EAAE;IACzC5B,mBAAmB,GAAGlK,IAAI,CAACC,GAAG,CAACD,IAAI,CAACiT,GAAG,CAAC,CAAC,EAAE/I,mBAAmB,CAAC,EAAErH,SAAS,CAAC;IAC3EsH,iBAAiB,GAAGnK,IAAI,CAACC,GAAG,CAACD,IAAI,CAACiT,GAAG,CAAC,CAAC,EAAE9I,iBAAiB,CAAC,EAAEtH,SAAS,CAAC;IACvE,IAAIgC,MAAM,GAAG,EAAE;IACf,KAAK,IAAInG,UAAU,GAAGwL,mBAAmB,EAAExL,UAAU,IAAIyL,iBAAiB,EAAEzL,UAAU,EAAE,EAAE;MACtF,IAAIwU,GAAG,GAAGxU,UAAU,GAAGwL,mBAAmB;MAC1C,IAAI,CAACyB,MAAM,CAACuH,GAAG,CAAC,EAAE;QACdrO,MAAM,CAACqO,GAAG,CAAC,GAAG,IAAI;MACtB;MACArO,MAAM,CAACqO,GAAG,CAAC,GAAG,IAAI,CAACzH,eAAe,CAAC/M,UAAU,CAAC;IAClD;IACA,OAAOmG,MAAM;EACjB,CAAC;EACDyN,uBAAuB,CAAC/T,SAAS,CAACmP,8BAA8B,GAAG,UAAUC,OAAO,EAAEC,mBAAmB,EAAEC,KAAK,EAAE;IAC9G,IAAIC,WAAW,GAAG,IAAI,CAACtM,KAAK,CAACuM,2BAA2B,CAACJ,OAAO,EAAEC,mBAAmB,CAAC;IACtF,IAAI/I,MAAM,GAAG,IAAImJ,wBAAwB,EAAE;IAC3C,KAAK,IAAIxI,EAAE,GAAG,CAAC,EAAE2N,aAAa,GAAGrF,WAAW,EAAEtI,EAAE,GAAG2N,aAAa,CAACnV,MAAM,EAAEwH,EAAE,EAAE,EAAE;MAC3E,IAAI0I,UAAU,GAAGiF,aAAa,CAAC3N,EAAE,CAAC;MAClC,IAAI2I,IAAI,GAAGD,UAAU,CAACvI,OAAO,CAACyI,aAAa;MAC3C,IAAIC,IAAI,GAAGF,IAAI,GAAGA,IAAI,CAACG,QAAQ,GAAG,CAAC;MACnC,IAAID,IAAI,KAAK,CAAC,EAAE;QACZ;MACJ;MACA,IAAIE,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAACX,KAAK,CAAC;MAChC,IAAI3D,mBAAmB,GAAGgE,UAAU,CAAClJ,KAAK,CAAClB,eAAe;MAC1D,IAAIqG,iBAAiB,GAAG+D,UAAU,CAAClJ,KAAK,CAACjB,aAAa;MACtDc,MAAM,CAAC4J,MAAM,CAACF,KAAK,EAAErE,mBAAmB,EAAEC,iBAAiB,EAAEkE,IAAI,CAAC;IACtE;IACA,OAAOxJ,MAAM,CAACA,MAAM;EACxB,CAAC;EACDyN,uBAAuB,CAAC/T,SAAS,CAACmQ,qBAAqB,GAAG,UAAU1J,KAAK,EAAE2I,OAAO,EAAEC,mBAAmB,EAAE;IACrG,OAAO,IAAI,CAACpM,KAAK,CAACkN,qBAAqB,CAAC1J,KAAK,EAAE2I,OAAO,EAAEC,mBAAmB,CAAC;EAChF,CAAC;EACD,OAAO0E,uBAAuB;AAClC,CAAC,EAAG;AACJ,SAASA,uBAAuB;AAChC,IAAItE,wBAAwB,GAAG,aAAe,YAAY;EACtD,SAASA,wBAAwB,GAAG;IAChC,IAAI,CAACnJ,MAAM,GAAGuO,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACrC;EACArF,wBAAwB,CAACzP,SAAS,CAACkQ,MAAM,GAAG,UAAUF,KAAK,EAAEzK,eAAe,EAAEC,aAAa,EAAEsK,IAAI,EAAE;IAC/F,IAAIiF,IAAI,GAAG,IAAI,CAACzO,MAAM,CAAC0J,KAAK,CAAC;IAC7B,IAAI+E,IAAI,EAAE;MACN,IAAIC,QAAQ,GAAGD,IAAI,CAACA,IAAI,CAACtV,MAAM,GAAG,CAAC,CAAC;MACpC,IAAIwV,iBAAiB,GAAGF,IAAI,CAACA,IAAI,CAACtV,MAAM,GAAG,CAAC,CAAC;MAC7C,IAAIuV,QAAQ,KAAKlF,IAAI,IAAImF,iBAAiB,GAAG,CAAC,IAAI1P,eAAe,EAAE;QAC/D;QACA,IAAIC,aAAa,GAAGyP,iBAAiB,EAAE;UACnCF,IAAI,CAACA,IAAI,CAACtV,MAAM,GAAG,CAAC,CAAC,GAAG+F,aAAa;QACzC;QACA;MACJ;MACA;MACAuP,IAAI,CAACrO,IAAI,CAACoJ,IAAI,EAAEvK,eAAe,EAAEC,aAAa,CAAC;IACnD,CAAC,MACI;MACD,IAAI,CAACc,MAAM,CAAC0J,KAAK,CAAC,GAAG,CAACF,IAAI,EAAEvK,eAAe,EAAEC,aAAa,CAAC;IAC/D;EACJ,CAAC;EACD,OAAOiK,wBAAwB;AACnC,CAAC,EAAG"},"metadata":{},"sourceType":"module"}