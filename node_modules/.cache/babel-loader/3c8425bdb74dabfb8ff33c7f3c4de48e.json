{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as path from '../../../base/common/path.js';\nimport { dirname } from '../../../base/common/resources.js';\nimport { Text } from './snippetParser.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad, endsWith } from '../../../base/common/strings.js';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../platform/workspaces/common/workspaces.js';\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\nvar CompositeSnippetVariableResolver = /** @class */function () {\n  function CompositeSnippetVariableResolver(_delegates) {\n    this._delegates = _delegates;\n    //\n  }\n\n  CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\n    for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\n      var delegate = _a[_i];\n      var value = delegate.resolve(variable);\n      if (value !== undefined) {\n        return value;\n      }\n    }\n    return undefined;\n  };\n  return CompositeSnippetVariableResolver;\n}();\nexport { CompositeSnippetVariableResolver };\nvar SelectionBasedVariableResolver = /** @class */function () {\n  function SelectionBasedVariableResolver(_model, _selection) {\n    this._model = _model;\n    this._selection = _selection;\n    //\n  }\n\n  SelectionBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n      var value = this._model.getValueInRange(this._selection) || undefined;\n      if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n        // Selection is a multiline string which we indentation we now\n        // need to adjust. We compare the indentation of this variable\n        // with the indentation at the editor position and add potential\n        // extra indentation to the value\n        var line = this._model.getLineContent(this._selection.startLineNumber);\n        var lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n        var varLeadingWhitespace_1 = lineLeadingWhitespace;\n        variable.snippet.walk(function (marker) {\n          if (marker === variable) {\n            return false;\n          }\n          if (marker instanceof Text) {\n            varLeadingWhitespace_1 = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\n          }\n          return true;\n        });\n        var whitespaceCommonLength_1 = commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\n        value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) {\n          return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest;\n        });\n      }\n      return value;\n    } else if (name === 'TM_CURRENT_LINE') {\n      return this._model.getLineContent(this._selection.positionLineNumber);\n    } else if (name === 'TM_CURRENT_WORD') {\n      var info = this._model.getWordAtPosition({\n        lineNumber: this._selection.positionLineNumber,\n        column: this._selection.positionColumn\n      });\n      return info && info.word || undefined;\n    } else if (name === 'TM_LINE_INDEX') {\n      return String(this._selection.positionLineNumber - 1);\n    } else if (name === 'TM_LINE_NUMBER') {\n      return String(this._selection.positionLineNumber);\n    }\n    return undefined;\n  };\n  return SelectionBasedVariableResolver;\n}();\nexport { SelectionBasedVariableResolver };\nvar ModelBasedVariableResolver = /** @class */function () {\n  function ModelBasedVariableResolver(_labelService, _model) {\n    this._labelService = _labelService;\n    this._model = _model;\n    //\n  }\n\n  ModelBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n    if (name === 'TM_FILENAME') {\n      return path.basename(this._model.uri.fsPath);\n    } else if (name === 'TM_FILENAME_BASE') {\n      var name_1 = path.basename(this._model.uri.fsPath);\n      var idx = name_1.lastIndexOf('.');\n      if (idx <= 0) {\n        return name_1;\n      } else {\n        return name_1.slice(0, idx);\n      }\n    } else if (name === 'TM_DIRECTORY' && this._labelService) {\n      if (path.dirname(this._model.uri.fsPath) === '.') {\n        return '';\n      }\n      return this._labelService.getUriLabel(dirname(this._model.uri));\n    } else if (name === 'TM_FILEPATH' && this._labelService) {\n      return this._labelService.getUriLabel(this._model.uri);\n    }\n    return undefined;\n  };\n  return ModelBasedVariableResolver;\n}();\nexport { ModelBasedVariableResolver };\nvar ClipboardBasedVariableResolver = /** @class */function () {\n  function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n    this._readClipboardText = _readClipboardText;\n    this._selectionIdx = _selectionIdx;\n    this._selectionCount = _selectionCount;\n    this._spread = _spread;\n    //\n  }\n\n  ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\n    if (variable.name !== 'CLIPBOARD') {\n      return undefined;\n    }\n    var clipboardText = this._readClipboardText();\n    if (!clipboardText) {\n      return undefined;\n    }\n    // `spread` is assigning each cursor a line of the clipboard\n    // text whenever there the line count equals the cursor count\n    // and when enabled\n    if (this._spread) {\n      var lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(function (s) {\n        return !isFalsyOrWhitespace(s);\n      });\n      if (lines.length === this._selectionCount) {\n        return lines[this._selectionIdx];\n      }\n    }\n    return clipboardText;\n  };\n  return ClipboardBasedVariableResolver;\n}();\nexport { ClipboardBasedVariableResolver };\nvar CommentBasedVariableResolver = /** @class */function () {\n  function CommentBasedVariableResolver(_model) {\n    this._model = _model;\n    //\n  }\n\n  CommentBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n    var language = this._model.getLanguageIdentifier();\n    var config = LanguageConfigurationRegistry.getComments(language.id);\n    if (!config) {\n      return undefined;\n    }\n    if (name === 'LINE_COMMENT') {\n      return config.lineCommentToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_START') {\n      return config.blockCommentStartToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_END') {\n      return config.blockCommentEndToken || undefined;\n    }\n    return undefined;\n  };\n  return CommentBasedVariableResolver;\n}();\nexport { CommentBasedVariableResolver };\nvar TimeBasedVariableResolver = /** @class */function () {\n  function TimeBasedVariableResolver() {}\n  TimeBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n    if (name === 'CURRENT_YEAR') {\n      return String(new Date().getFullYear());\n    } else if (name === 'CURRENT_YEAR_SHORT') {\n      return String(new Date().getFullYear()).slice(-2);\n    } else if (name === 'CURRENT_MONTH') {\n      return pad(new Date().getMonth().valueOf() + 1, 2);\n    } else if (name === 'CURRENT_DATE') {\n      return pad(new Date().getDate().valueOf(), 2);\n    } else if (name === 'CURRENT_HOUR') {\n      return pad(new Date().getHours().valueOf(), 2);\n    } else if (name === 'CURRENT_MINUTE') {\n      return pad(new Date().getMinutes().valueOf(), 2);\n    } else if (name === 'CURRENT_SECOND') {\n      return pad(new Date().getSeconds().valueOf(), 2);\n    } else if (name === 'CURRENT_DAY_NAME') {\n      return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n    } else if (name === 'CURRENT_DAY_NAME_SHORT') {\n      return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n    } else if (name === 'CURRENT_MONTH_NAME') {\n      return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n      return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n    } else if (name === 'CURRENT_SECONDS_UNIX') {\n      return String(Math.floor(Date.now() / 1000));\n    }\n    return undefined;\n  };\n  TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n  TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n  TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n  TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n  return TimeBasedVariableResolver;\n}();\nexport { TimeBasedVariableResolver };\nvar WorkspaceBasedVariableResolver = /** @class */function () {\n  function WorkspaceBasedVariableResolver(_workspaceService) {\n    this._workspaceService = _workspaceService;\n    //\n  }\n\n  WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\n    if (!this._workspaceService) {\n      return undefined;\n    }\n    var workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n    if (!workspaceIdentifier) {\n      return undefined;\n    }\n    if (variable.name === 'WORKSPACE_NAME') {\n      return this._resolveWorkspaceName(workspaceIdentifier);\n    } else if (variable.name === 'WORKSPACE_FOLDER') {\n      return this._resoveWorkspacePath(workspaceIdentifier);\n    }\n    return undefined;\n  };\n  WorkspaceBasedVariableResolver.prototype._resolveWorkspaceName = function (workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return path.basename(workspaceIdentifier.path);\n    }\n    var filename = path.basename(workspaceIdentifier.configPath.path);\n    if (endsWith(filename, WORKSPACE_EXTENSION)) {\n      filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n    }\n    return filename;\n  };\n  WorkspaceBasedVariableResolver.prototype._resoveWorkspacePath = function (workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return normalizeDriveLetter(workspaceIdentifier.fsPath);\n    }\n    var filename = path.basename(workspaceIdentifier.configPath.path);\n    var folderpath = workspaceIdentifier.configPath.fsPath;\n    if (endsWith(folderpath, filename)) {\n      folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n    }\n    return folderpath ? normalizeDriveLetter(folderpath) : '/';\n  };\n  return WorkspaceBasedVariableResolver;\n}();\nexport { WorkspaceBasedVariableResolver };\nvar RandomBasedVariableResolver = /** @class */function () {\n  function RandomBasedVariableResolver() {}\n  RandomBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n    if (name === 'RANDOM') {\n      return Math.random().toString().slice(-6);\n    } else if (name === 'RANDOM_HEX') {\n      return Math.random().toString(16).slice(-6);\n    }\n    return undefined;\n  };\n  return RandomBasedVariableResolver;\n}();\nexport { RandomBasedVariableResolver };","map":{"version":3,"names":["nls","path","dirname","Text","LanguageConfigurationRegistry","getLeadingWhitespace","commonPrefixLength","isFalsyOrWhitespace","pad","endsWith","isSingleFolderWorkspaceIdentifier","toWorkspaceIdentifier","WORKSPACE_EXTENSION","normalizeDriveLetter","CompositeSnippetVariableResolver","_delegates","prototype","resolve","variable","_i","_a","length","delegate","value","undefined","SelectionBasedVariableResolver","_model","_selection","name","getValueInRange","startLineNumber","endLineNumber","snippet","line","getLineContent","lineLeadingWhitespace","startColumn","varLeadingWhitespace_1","walk","marker","split","pop","whitespaceCommonLength_1","replace","m","newline","rest","substr","positionLineNumber","info","getWordAtPosition","lineNumber","column","positionColumn","word","String","ModelBasedVariableResolver","_labelService","basename","uri","fsPath","name_1","idx","lastIndexOf","slice","getUriLabel","ClipboardBasedVariableResolver","_readClipboardText","_selectionIdx","_selectionCount","_spread","clipboardText","lines","filter","s","CommentBasedVariableResolver","language","getLanguageIdentifier","config","getComments","id","lineCommentToken","blockCommentStartToken","blockCommentEndToken","TimeBasedVariableResolver","Date","getFullYear","getMonth","valueOf","getDate","getHours","getMinutes","getSeconds","dayNames","getDay","dayNamesShort","monthNames","monthNamesShort","Math","floor","now","localize","WorkspaceBasedVariableResolver","_workspaceService","workspaceIdentifier","getWorkspace","_resolveWorkspaceName","_resoveWorkspacePath","filename","configPath","folderpath","RandomBasedVariableResolver","random","toString"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetVariables.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport * as path from '../../../base/common/path.js';\r\nimport { dirname } from '../../../base/common/resources.js';\r\nimport { Text } from './snippetParser.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad, endsWith } from '../../../base/common/strings.js';\r\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../platform/workspaces/common/workspaces.js';\r\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\r\nvar CompositeSnippetVariableResolver = /** @class */ (function () {\r\n    function CompositeSnippetVariableResolver(_delegates) {\r\n        this._delegates = _delegates;\r\n        //\r\n    }\r\n    CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\r\n        for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\r\n            var delegate = _a[_i];\r\n            var value = delegate.resolve(variable);\r\n            if (value !== undefined) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return CompositeSnippetVariableResolver;\r\n}());\r\nexport { CompositeSnippetVariableResolver };\r\nvar SelectionBasedVariableResolver = /** @class */ (function () {\r\n    function SelectionBasedVariableResolver(_model, _selection) {\r\n        this._model = _model;\r\n        this._selection = _selection;\r\n        //\r\n    }\r\n    SelectionBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\r\n            var value = this._model.getValueInRange(this._selection) || undefined;\r\n            if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\r\n                // Selection is a multiline string which we indentation we now\r\n                // need to adjust. We compare the indentation of this variable\r\n                // with the indentation at the editor position and add potential\r\n                // extra indentation to the value\r\n                var line = this._model.getLineContent(this._selection.startLineNumber);\r\n                var lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\r\n                var varLeadingWhitespace_1 = lineLeadingWhitespace;\r\n                variable.snippet.walk(function (marker) {\r\n                    if (marker === variable) {\r\n                        return false;\r\n                    }\r\n                    if (marker instanceof Text) {\r\n                        varLeadingWhitespace_1 = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\r\n                    }\r\n                    return true;\r\n                });\r\n                var whitespaceCommonLength_1 = commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\r\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) { return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest; });\r\n            }\r\n            return value;\r\n        }\r\n        else if (name === 'TM_CURRENT_LINE') {\r\n            return this._model.getLineContent(this._selection.positionLineNumber);\r\n        }\r\n        else if (name === 'TM_CURRENT_WORD') {\r\n            var info = this._model.getWordAtPosition({\r\n                lineNumber: this._selection.positionLineNumber,\r\n                column: this._selection.positionColumn\r\n            });\r\n            return info && info.word || undefined;\r\n        }\r\n        else if (name === 'TM_LINE_INDEX') {\r\n            return String(this._selection.positionLineNumber - 1);\r\n        }\r\n        else if (name === 'TM_LINE_NUMBER') {\r\n            return String(this._selection.positionLineNumber);\r\n        }\r\n        return undefined;\r\n    };\r\n    return SelectionBasedVariableResolver;\r\n}());\r\nexport { SelectionBasedVariableResolver };\r\nvar ModelBasedVariableResolver = /** @class */ (function () {\r\n    function ModelBasedVariableResolver(_labelService, _model) {\r\n        this._labelService = _labelService;\r\n        this._model = _model;\r\n        //\r\n    }\r\n    ModelBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'TM_FILENAME') {\r\n            return path.basename(this._model.uri.fsPath);\r\n        }\r\n        else if (name === 'TM_FILENAME_BASE') {\r\n            var name_1 = path.basename(this._model.uri.fsPath);\r\n            var idx = name_1.lastIndexOf('.');\r\n            if (idx <= 0) {\r\n                return name_1;\r\n            }\r\n            else {\r\n                return name_1.slice(0, idx);\r\n            }\r\n        }\r\n        else if (name === 'TM_DIRECTORY' && this._labelService) {\r\n            if (path.dirname(this._model.uri.fsPath) === '.') {\r\n                return '';\r\n            }\r\n            return this._labelService.getUriLabel(dirname(this._model.uri));\r\n        }\r\n        else if (name === 'TM_FILEPATH' && this._labelService) {\r\n            return this._labelService.getUriLabel(this._model.uri);\r\n        }\r\n        return undefined;\r\n    };\r\n    return ModelBasedVariableResolver;\r\n}());\r\nexport { ModelBasedVariableResolver };\r\nvar ClipboardBasedVariableResolver = /** @class */ (function () {\r\n    function ClipboardBasedVariableResolver(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\r\n        this._readClipboardText = _readClipboardText;\r\n        this._selectionIdx = _selectionIdx;\r\n        this._selectionCount = _selectionCount;\r\n        this._spread = _spread;\r\n        //\r\n    }\r\n    ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\r\n        if (variable.name !== 'CLIPBOARD') {\r\n            return undefined;\r\n        }\r\n        var clipboardText = this._readClipboardText();\r\n        if (!clipboardText) {\r\n            return undefined;\r\n        }\r\n        // `spread` is assigning each cursor a line of the clipboard\r\n        // text whenever there the line count equals the cursor count\r\n        // and when enabled\r\n        if (this._spread) {\r\n            var lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(function (s) { return !isFalsyOrWhitespace(s); });\r\n            if (lines.length === this._selectionCount) {\r\n                return lines[this._selectionIdx];\r\n            }\r\n        }\r\n        return clipboardText;\r\n    };\r\n    return ClipboardBasedVariableResolver;\r\n}());\r\nexport { ClipboardBasedVariableResolver };\r\nvar CommentBasedVariableResolver = /** @class */ (function () {\r\n    function CommentBasedVariableResolver(_model) {\r\n        this._model = _model;\r\n        //\r\n    }\r\n    CommentBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        var language = this._model.getLanguageIdentifier();\r\n        var config = LanguageConfigurationRegistry.getComments(language.id);\r\n        if (!config) {\r\n            return undefined;\r\n        }\r\n        if (name === 'LINE_COMMENT') {\r\n            return config.lineCommentToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_START') {\r\n            return config.blockCommentStartToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_END') {\r\n            return config.blockCommentEndToken || undefined;\r\n        }\r\n        return undefined;\r\n    };\r\n    return CommentBasedVariableResolver;\r\n}());\r\nexport { CommentBasedVariableResolver };\r\nvar TimeBasedVariableResolver = /** @class */ (function () {\r\n    function TimeBasedVariableResolver() {\r\n    }\r\n    TimeBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'CURRENT_YEAR') {\r\n            return String(new Date().getFullYear());\r\n        }\r\n        else if (name === 'CURRENT_YEAR_SHORT') {\r\n            return String(new Date().getFullYear()).slice(-2);\r\n        }\r\n        else if (name === 'CURRENT_MONTH') {\r\n            return pad((new Date().getMonth().valueOf() + 1), 2);\r\n        }\r\n        else if (name === 'CURRENT_DATE') {\r\n            return pad(new Date().getDate().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_HOUR') {\r\n            return pad(new Date().getHours().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_MINUTE') {\r\n            return pad(new Date().getMinutes().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_SECOND') {\r\n            return pad(new Date().getSeconds().valueOf(), 2);\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME') {\r\n            return TimeBasedVariableResolver.dayNames[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME') {\r\n            return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_SECONDS_UNIX') {\r\n            return String(Math.floor(Date.now() / 1000));\r\n        }\r\n        return undefined;\r\n    };\r\n    TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\r\n    TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\r\n    TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\r\n    TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\r\n    return TimeBasedVariableResolver;\r\n}());\r\nexport { TimeBasedVariableResolver };\r\nvar WorkspaceBasedVariableResolver = /** @class */ (function () {\r\n    function WorkspaceBasedVariableResolver(_workspaceService) {\r\n        this._workspaceService = _workspaceService;\r\n        //\r\n    }\r\n    WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\r\n        if (!this._workspaceService) {\r\n            return undefined;\r\n        }\r\n        var workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\r\n        if (!workspaceIdentifier) {\r\n            return undefined;\r\n        }\r\n        if (variable.name === 'WORKSPACE_NAME') {\r\n            return this._resolveWorkspaceName(workspaceIdentifier);\r\n        }\r\n        else if (variable.name === 'WORKSPACE_FOLDER') {\r\n            return this._resoveWorkspacePath(workspaceIdentifier);\r\n        }\r\n        return undefined;\r\n    };\r\n    WorkspaceBasedVariableResolver.prototype._resolveWorkspaceName = function (workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return path.basename(workspaceIdentifier.path);\r\n        }\r\n        var filename = path.basename(workspaceIdentifier.configPath.path);\r\n        if (endsWith(filename, WORKSPACE_EXTENSION)) {\r\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\r\n        }\r\n        return filename;\r\n    };\r\n    WorkspaceBasedVariableResolver.prototype._resoveWorkspacePath = function (workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return normalizeDriveLetter(workspaceIdentifier.fsPath);\r\n        }\r\n        var filename = path.basename(workspaceIdentifier.configPath.path);\r\n        var folderpath = workspaceIdentifier.configPath.fsPath;\r\n        if (endsWith(folderpath, filename)) {\r\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\r\n        }\r\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\r\n    };\r\n    return WorkspaceBasedVariableResolver;\r\n}());\r\nexport { WorkspaceBasedVariableResolver };\r\nvar RandomBasedVariableResolver = /** @class */ (function () {\r\n    function RandomBasedVariableResolver() {\r\n    }\r\n    RandomBasedVariableResolver.prototype.resolve = function (variable) {\r\n        var name = variable.name;\r\n        if (name === 'RANDOM') {\r\n            return Math.random().toString().slice(-6);\r\n        }\r\n        else if (name === 'RANDOM_HEX') {\r\n            return Math.random().toString(16).slice(-6);\r\n        }\r\n        return undefined;\r\n    };\r\n    return RandomBasedVariableResolver;\r\n}());\r\nexport { RandomBasedVariableResolver };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}