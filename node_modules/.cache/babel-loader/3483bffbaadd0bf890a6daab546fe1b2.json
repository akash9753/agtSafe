{"ast":null,"code":"// Allows us to pass arrays and numbers instead of just strings to the format function.\nvar stringify = function stringify(arg) {\n  return Array.isArray(arg) ? arg.join(\", \") : typeof arg === \"string\" ? arg : \"\" + arg;\n}; // Replaces a string with the values of an object. Google \"format unicorn\" on an explanation of how to use.\n\nvar format = function format(str, args) {\n  return args ? Object.keys(args).reduce(function (str, arg) {\n    return str.replace(new RegExp(\"\\\\{\".concat(arg, \"\\\\}\"), 'gi'), stringify(args[arg]));\n  }, str) : str;\n};\nexport { format };","map":{"version":3,"names":["stringify","arg","Array","isArray","join","format","str","args","Object","keys","reduce","replace","RegExp"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/react-json-editor-ajrm/es/locale/index.js"],"sourcesContent":["// Allows us to pass arrays and numbers instead of just strings to the format function.\nconst stringify = arg => Array.isArray(arg) ? arg.join(\", \") : typeof arg === \"string\" ? arg : \"\" + arg; // Replaces a string with the values of an object. Google \"format unicorn\" on an explanation of how to use.\n\n\nconst format = (str, args) => args ? Object.keys(args).reduce((str, arg) => str.replace(new RegExp(`\\\\{${arg}\\\\}`, 'gi'), stringify(args[arg])), str) : str;\n\nexport { format };"],"mappings":"AAAA;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAS,CAAGC,GAAG;EAAA,OAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,GAAGA,GAAG,CAACG,IAAI,CAAC,IAAI,CAAC,GAAG,OAAOH,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG;AAAA,EAAC,CAAC;;AAGzG,IAAMI,MAAM,GAAG,SAATA,MAAM,CAAIC,GAAG,EAAEC,IAAI;EAAA,OAAKA,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC,UAACJ,GAAG,EAAEL,GAAG;IAAA,OAAKK,GAAG,CAACK,OAAO,CAAC,IAAIC,MAAM,cAAOX,GAAG,UAAO,IAAI,CAAC,EAAED,SAAS,CAACO,IAAI,CAACN,GAAG,CAAC,CAAC,CAAC;EAAA,GAAEK,GAAG,CAAC,GAAGA,GAAG;AAAA;AAE3J,SAASD,MAAM"},"metadata":{},"sourceType":"module"}