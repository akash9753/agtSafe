{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport { Symbols } from '../parser/cssSymbolScope.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport * as strings from '../utils/strings.js';\nimport { Position, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind, CompletionItemTag } from '../cssLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nimport { isDefined } from '../utils/objects.js';\nvar localize = nls.loadMessageBundle();\nvar SnippetFormat = InsertTextFormat.Snippet;\nvar SortTexts;\n(function (SortTexts) {\n  // char code 32, comes before everything\n  SortTexts[\"Enums\"] = \" \";\n  SortTexts[\"Normal\"] = \"d\";\n  SortTexts[\"VendorPrefixed\"] = \"x\";\n  SortTexts[\"Term\"] = \"y\";\n  SortTexts[\"Variable\"] = \"z\";\n})(SortTexts || (SortTexts = {}));\nvar CSSCompletion = /** @class */function () {\n  function CSSCompletion(variablePrefix, clientCapabilities) {\n    if (variablePrefix === void 0) {\n      variablePrefix = null;\n    }\n    this.variablePrefix = variablePrefix;\n    this.clientCapabilities = clientCapabilities;\n    this.completionParticipants = [];\n    this.valueTypes = [nodes.NodeType.Identifier, nodes.NodeType.Value, nodes.NodeType.StringLiteral, nodes.NodeType.URILiteral, nodes.NodeType.NumericValue, nodes.NodeType.HexColorValue, nodes.NodeType.VariableName, nodes.NodeType.Prio];\n  }\n  CSSCompletion.prototype.configure = function (settings) {\n    this.settings = settings;\n  };\n  CSSCompletion.prototype.getSymbolContext = function () {\n    if (!this.symbolContext) {\n      this.symbolContext = new Symbols(this.styleSheet);\n    }\n    return this.symbolContext;\n  };\n  CSSCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {\n    this.completionParticipants = registeredCompletionParticipants || [];\n  };\n  CSSCompletion.prototype.doComplete = function (document, position, styleSheet) {\n    this.offset = document.offsetAt(position);\n    this.position = position;\n    this.currentWord = getCurrentWord(document, this.offset);\n    this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n    this.textDocument = document;\n    this.styleSheet = styleSheet;\n    try {\n      var result = {\n        isIncomplete: false,\n        items: []\n      };\n      this.nodePath = nodes.getNodePath(this.styleSheet, this.offset);\n      for (var i = this.nodePath.length - 1; i >= 0; i--) {\n        var node = this.nodePath[i];\n        if (node instanceof nodes.Property) {\n          this.getCompletionsForDeclarationProperty(node.getParent(), result);\n        } else if (node instanceof nodes.Expression) {\n          if (node.parent instanceof nodes.Interpolation) {\n            this.getVariableProposals(null, result);\n          } else {\n            this.getCompletionsForExpression(node, result);\n          }\n        } else if (node instanceof nodes.SimpleSelector) {\n          var parentRef = node.findAParent(nodes.NodeType.ExtendsReference, nodes.NodeType.Ruleset);\n          if (parentRef) {\n            if (parentRef.type === nodes.NodeType.ExtendsReference) {\n              this.getCompletionsForExtendsReference(parentRef, node, result);\n            } else {\n              var parentRuleSet = parentRef;\n              this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);\n            }\n          }\n        } else if (node instanceof nodes.FunctionArgument) {\n          this.getCompletionsForFunctionArgument(node, node.getParent(), result);\n        } else if (node instanceof nodes.Declarations) {\n          this.getCompletionsForDeclarations(node, result);\n        } else if (node instanceof nodes.VariableDeclaration) {\n          this.getCompletionsForVariableDeclaration(node, result);\n        } else if (node instanceof nodes.RuleSet) {\n          this.getCompletionsForRuleSet(node, result);\n        } else if (node instanceof nodes.Interpolation) {\n          this.getCompletionsForInterpolation(node, result);\n        } else if (node instanceof nodes.FunctionDeclaration) {\n          this.getCompletionsForFunctionDeclaration(node, result);\n        } else if (node instanceof nodes.MixinReference) {\n          this.getCompletionsForMixinReference(node, result);\n        } else if (node instanceof nodes.Function) {\n          this.getCompletionsForFunctionArgument(null, node, result);\n        } else if (node instanceof nodes.Supports) {\n          this.getCompletionsForSupports(node, result);\n        } else if (node instanceof nodes.SupportsCondition) {\n          this.getCompletionsForSupportsCondition(node, result);\n        } else if (node instanceof nodes.ExtendsReference) {\n          this.getCompletionsForExtendsReference(node, null, result);\n        } else if (node.type === nodes.NodeType.URILiteral) {\n          this.getCompletionForUriLiteralValue(node, result);\n        } else if (node.parent === null) {\n          this.getCompletionForTopLevel(result);\n        } else if (node.type === nodes.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {\n          this.getCompletionForImportPath(node, result);\n          // } else if (node instanceof nodes.Variable) {\n          // this.getCompletionsForVariableDeclaration()\n        } else {\n          continue;\n        }\n        if (result.items.length > 0 || this.offset > node.offset) {\n          return this.finalize(result);\n        }\n      }\n      this.getCompletionsForStylesheet(result);\n      if (result.items.length === 0) {\n        if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {\n          this.getVariableProposals(null, result);\n        }\n      }\n      return this.finalize(result);\n    } finally {\n      // don't hold on any state, clear symbolContext\n      this.position = null;\n      this.currentWord = null;\n      this.textDocument = null;\n      this.styleSheet = null;\n      this.symbolContext = null;\n      this.defaultReplaceRange = null;\n      this.nodePath = null;\n    }\n  };\n  CSSCompletion.prototype.isImportPathParent = function (type) {\n    return type === nodes.NodeType.Import;\n  };\n  CSSCompletion.prototype.finalize = function (result) {\n    var needsSortText = result.items.some(function (i) {\n      return !!i.sortText || i.label[0] === '-';\n    });\n    if (needsSortText) {\n      result.items.forEach(function (item, index) {\n        if (!item.sortText) {\n          if (item.label[0] === '-') {\n            item.sortText = SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n          } else {\n            item.sortText = SortTexts.Normal + '_' + computeRankNumber(index);\n          }\n        } else {\n          if (item.label[0] === '-') {\n            item.sortText += SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n          } else {\n            item.sortText += SortTexts.Normal + '_' + computeRankNumber(index);\n          }\n        }\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.findInNodePath = function () {\n    var types = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      types[_i] = arguments[_i];\n    }\n    for (var i = this.nodePath.length - 1; i >= 0; i--) {\n      var node = this.nodePath[i];\n      if (types.indexOf(node.type) !== -1) {\n        return node;\n      }\n    }\n    return null;\n  };\n  CSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {\n    return this.getPropertyProposals(declaration, result);\n  };\n  CSSCompletion.prototype.getPropertyProposals = function (declaration, result) {\n    var _this = this;\n    var triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;\n    var completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;\n    var properties = languageFacts.cssDataManager.getProperties();\n    properties.forEach(function (entry) {\n      var range;\n      var insertText;\n      var retrigger = false;\n      if (declaration) {\n        range = _this.getCompletionRange(declaration.getProperty());\n        insertText = entry.name;\n        if (!isDefined(declaration.colonPosition)) {\n          insertText += ': ';\n          retrigger = true;\n        }\n      } else {\n        range = _this.getCompletionRange(null);\n        insertText = entry.name + ': ';\n        retrigger = true;\n      }\n      // Empty .selector { | } case\n      if (!declaration && completePropertyWithSemicolon) {\n        insertText += '$0;';\n      }\n      // Cases such as .selector { p; } or .selector { p:; }\n      if (declaration && !declaration.semicolonPosition) {\n        if (completePropertyWithSemicolon && _this.offset >= _this.textDocument.offsetAt(range.end)) {\n          insertText += '$0;';\n        }\n      }\n      var item = {\n        label: entry.name,\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        textEdit: TextEdit.replace(range, insertText),\n        insertTextFormat: InsertTextFormat.Snippet,\n        kind: CompletionItemKind.Property\n      };\n      if (!entry.restrictions) {\n        retrigger = false;\n      }\n      if (triggerPropertyValueCompletion && retrigger) {\n        item.command = {\n          title: 'Suggest',\n          command: 'editor.action.triggerSuggest'\n        };\n      }\n      if (strings.startsWith(entry.name, '-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n      result.items.push(item);\n    });\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssProperty) {\n        participant.onCssProperty({\n          propertyName: _this.currentWord,\n          range: _this.defaultReplaceRange\n        });\n      }\n    });\n    return result;\n  };\n  Object.defineProperty(CSSCompletion.prototype, \"isTriggerPropertyValueCompletionEnabled\", {\n    get: function get() {\n      if (!this.settings || !this.settings.completion || this.settings.completion.triggerPropertyValueCompletion === undefined) {\n        return true;\n      }\n      return this.settings.completion.triggerPropertyValueCompletion;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CSSCompletion.prototype, \"isCompletePropertyWithSemicolonEnabled\", {\n    get: function get() {\n      if (!this.settings || !this.settings.completion || this.settings.completion.completePropertyWithSemicolon === undefined) {\n        return true;\n      }\n      return this.settings.completion.completePropertyWithSemicolon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  CSSCompletion.prototype.getCompletionsForDeclarationValue = function (node, result) {\n    var _this = this;\n    var propertyName = node.getFullPropertyName();\n    var entry = languageFacts.cssDataManager.getProperty(propertyName);\n    var existingNode = node.getValue() || null;\n    while (existingNode && existingNode.hasChildren()) {\n      existingNode = existingNode.findChildAtOffset(this.offset, false);\n    }\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssPropertyValue) {\n        participant.onCssPropertyValue({\n          propertyName: propertyName,\n          propertyValue: _this.currentWord,\n          range: _this.getCompletionRange(existingNode)\n        });\n      }\n    });\n    if (entry) {\n      if (entry.restrictions) {\n        for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n          var restriction = _a[_i];\n          switch (restriction) {\n            case 'color':\n              this.getColorProposals(entry, existingNode, result);\n              break;\n            case 'position':\n              this.getPositionProposals(entry, existingNode, result);\n              break;\n            case 'repeat':\n              this.getRepeatStyleProposals(entry, existingNode, result);\n              break;\n            case 'line-style':\n              this.getLineStyleProposals(entry, existingNode, result);\n              break;\n            case 'line-width':\n              this.getLineWidthProposals(entry, existingNode, result);\n              break;\n            case 'geometry-box':\n              this.getGeometryBoxProposals(entry, existingNode, result);\n              break;\n            case 'box':\n              this.getBoxProposals(entry, existingNode, result);\n              break;\n            case 'image':\n              this.getImageProposals(entry, existingNode, result);\n              break;\n            case 'timing-function':\n              this.getTimingFunctionProposals(entry, existingNode, result);\n              break;\n            case 'shape':\n              this.getBasicShapeProposals(entry, existingNode, result);\n              break;\n          }\n        }\n      }\n      this.getValueEnumProposals(entry, existingNode, result);\n      this.getCSSWideKeywordProposals(entry, existingNode, result);\n      this.getUnitProposals(entry, existingNode, result);\n    } else {\n      var existingValues = collectValues(this.styleSheet, node);\n      for (var _b = 0, _c = existingValues.getEntries(); _b < _c.length; _b++) {\n        var existingValue = _c[_b];\n        result.items.push({\n          label: existingValue,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), existingValue),\n          kind: CompletionItemKind.Value\n        });\n      }\n    }\n    this.getVariableProposals(existingNode, result);\n    this.getTermProposals(entry, existingNode, result);\n    return result;\n  };\n  CSSCompletion.prototype.getValueEnumProposals = function (entry, existingNode, result) {\n    if (entry.values) {\n      for (var _i = 0, _a = entry.values; _i < _a.length; _i++) {\n        var value = _a[_i];\n        var insertString = value.name;\n        var insertTextFormat = void 0;\n        if (strings.endsWith(insertString, ')')) {\n          var from = insertString.lastIndexOf('(');\n          if (from !== -1) {\n            insertString = insertString.substr(0, from) + '($1)';\n            insertTextFormat = SnippetFormat;\n          }\n        }\n        var item = {\n          label: value.name,\n          documentation: languageFacts.getEntryDescription(value, this.doesSupportMarkdown()),\n          tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertString),\n          sortText: SortTexts.Enums,\n          kind: CompletionItemKind.Value,\n          insertTextFormat: insertTextFormat\n        };\n        result.items.push(item);\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCSSWideKeywordProposals = function (entry, existingNode, result) {\n    for (var keywords in languageFacts.cssWideKeywords) {\n      result.items.push({\n        label: keywords,\n        documentation: languageFacts.cssWideKeywords[keywords],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), keywords),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForInterpolation = function (node, result) {\n    if (this.offset >= node.offset + 2) {\n      this.getVariableProposals(null, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getVariableProposals = function (existingNode, result) {\n    var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n    for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n      var symbol = symbols_1[_i];\n      var insertText = strings.startsWith(symbol.name, '--') ? \"var(\" + symbol.name + \")\" : symbol.name;\n      var completionItem = {\n        label: symbol.name,\n        documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Variable,\n        sortText: SortTexts.Variable\n      };\n      if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n        completionItem.kind = CompletionItemKind.Color;\n      }\n      if (symbol.node.type === nodes.NodeType.FunctionParameter) {\n        var mixinNode = symbol.node.getParent();\n        if (mixinNode.type === nodes.NodeType.MixinDeclaration) {\n          completionItem.detail = localize('completion.argument', 'argument from \\'{0}\\'', mixinNode.getName());\n        }\n      }\n      result.items.push(completionItem);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getVariableProposalsForCSSVarFunction = function (result) {\n    var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n    symbols = symbols.filter(function (symbol) {\n      return strings.startsWith(symbol.name, '--');\n    });\n    for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {\n      var symbol = symbols_2[_i];\n      var completionItem = {\n        label: symbol.name,\n        documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n        textEdit: TextEdit.replace(this.getCompletionRange(null), symbol.name),\n        kind: CompletionItemKind.Variable\n      };\n      if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n        completionItem.kind = CompletionItemKind.Color;\n      }\n      result.items.push(completionItem);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getUnitProposals = function (entry, existingNode, result) {\n    var currentWord = '0';\n    if (this.currentWord.length > 0) {\n      var numMatch = this.currentWord.match(/^-?\\d[\\.\\d+]*/);\n      if (numMatch) {\n        currentWord = numMatch[0];\n        result.isIncomplete = currentWord.length === this.currentWord.length;\n      }\n    } else if (this.currentWord.length === 0) {\n      result.isIncomplete = true;\n    }\n    if (existingNode && existingNode.parent && existingNode.parent.type === nodes.NodeType.Term) {\n      existingNode = existingNode.getParent(); // include the unary operator\n    }\n\n    if (entry.restrictions) {\n      for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n        var restriction = _a[_i];\n        var units = languageFacts.units[restriction];\n        if (units) {\n          for (var _b = 0, units_1 = units; _b < units_1.length; _b++) {\n            var unit = units_1[_b];\n            var insertText = currentWord + unit;\n            result.items.push({\n              label: insertText,\n              textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n              kind: CompletionItemKind.Unit\n            });\n          }\n        }\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionRange = function (existingNode) {\n    if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {\n      var end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;\n      var start = this.textDocument.positionAt(existingNode.offset);\n      if (start.line === end.line) {\n        return Range.create(start, end); // multi line edits are not allowed\n      }\n    }\n\n    return this.defaultReplaceRange;\n  };\n  CSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {\n    for (var color in languageFacts.colors) {\n      result.items.push({\n        label: color,\n        documentation: languageFacts.colors[color],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Color\n      });\n    }\n    for (var color in languageFacts.colorKeywords) {\n      result.items.push({\n        label: color,\n        documentation: languageFacts.colorKeywords[color],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Value\n      });\n    }\n    var colorValues = new Set();\n    this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));\n    for (var _i = 0, _a = colorValues.getEntries(); _i < _a.length; _i++) {\n      var color = _a[_i];\n      result.items.push({\n        label: color,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n        kind: CompletionItemKind.Color\n      });\n    }\n    var _loop_1 = function _loop_1(p) {\n      var tabStop = 1;\n      var replaceFunction = function replaceFunction(_match, p1) {\n        return '${' + tabStop++ + ':' + p1 + '}';\n      };\n      var insertText = p.func.replace(/\\[?\\$(\\w+)\\]?/g, replaceFunction);\n      result.items.push({\n        label: p.func.substr(0, p.func.indexOf('(')),\n        detail: p.func,\n        documentation: p.desc,\n        textEdit: TextEdit.replace(this_1.getCompletionRange(existingNode), insertText),\n        insertTextFormat: SnippetFormat,\n        kind: CompletionItemKind.Function\n      });\n    };\n    var this_1 = this;\n    for (var _b = 0, _c = languageFacts.colorFunctions; _b < _c.length; _b++) {\n      var p = _c[_b];\n      _loop_1(p);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getPositionProposals = function (entry, existingNode, result) {\n    for (var position in languageFacts.positionKeywords) {\n      result.items.push({\n        label: position,\n        documentation: languageFacts.positionKeywords[position],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), position),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getRepeatStyleProposals = function (entry, existingNode, result) {\n    for (var repeat in languageFacts.repeatStyleKeywords) {\n      result.items.push({\n        label: repeat,\n        documentation: languageFacts.repeatStyleKeywords[repeat],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), repeat),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getLineStyleProposals = function (entry, existingNode, result) {\n    for (var lineStyle in languageFacts.lineStyleKeywords) {\n      result.items.push({\n        label: lineStyle,\n        documentation: languageFacts.lineStyleKeywords[lineStyle],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getLineWidthProposals = function (entry, existingNode, result) {\n    for (var _i = 0, _a = languageFacts.lineWidthKeywords; _i < _a.length; _i++) {\n      var lineWidth = _a[_i];\n      result.items.push({\n        label: lineWidth,\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getGeometryBoxProposals = function (entry, existingNode, result) {\n    for (var box in languageFacts.geometryBoxKeywords) {\n      result.items.push({\n        label: box,\n        documentation: languageFacts.geometryBoxKeywords[box],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getBoxProposals = function (entry, existingNode, result) {\n    for (var box in languageFacts.boxKeywords) {\n      result.items.push({\n        label: box,\n        documentation: languageFacts.boxKeywords[box],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n        kind: CompletionItemKind.Value\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getImageProposals = function (entry, existingNode, result) {\n    for (var image in languageFacts.imageFunctions) {\n      var insertText = moveCursorInsideParenthesis(image);\n      result.items.push({\n        label: image,\n        documentation: languageFacts.imageFunctions[image],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: image !== insertText ? SnippetFormat : void 0\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getTimingFunctionProposals = function (entry, existingNode, result) {\n    for (var timing in languageFacts.transitionTimingFunctions) {\n      var insertText = moveCursorInsideParenthesis(timing);\n      result.items.push({\n        label: timing,\n        documentation: languageFacts.transitionTimingFunctions[timing],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: timing !== insertText ? SnippetFormat : void 0\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getBasicShapeProposals = function (entry, existingNode, result) {\n    for (var shape in languageFacts.basicShapeFunctions) {\n      var insertText = moveCursorInsideParenthesis(shape);\n      result.items.push({\n        label: shape,\n        documentation: languageFacts.basicShapeFunctions[shape],\n        textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n        kind: CompletionItemKind.Function,\n        insertTextFormat: shape !== insertText ? SnippetFormat : void 0\n      });\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForStylesheet = function (result) {\n    var node = this.styleSheet.findFirstChildBeforeOffset(this.offset);\n    if (!node) {\n      return this.getCompletionForTopLevel(result);\n    }\n    if (node instanceof nodes.RuleSet) {\n      return this.getCompletionsForRuleSet(node, result);\n    }\n    if (node instanceof nodes.Supports) {\n      return this.getCompletionsForSupports(node, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionForTopLevel = function (result) {\n    var _this = this;\n    languageFacts.cssDataManager.getAtDirectives().forEach(function (entry) {\n      result.items.push({\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(null), entry.name),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Keyword\n      });\n    });\n    this.getCompletionsForSelector(null, false, result);\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForRuleSet = function (ruleSet, result) {\n    var declarations = ruleSet.getDeclarations();\n    var isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;\n    if (isAfter) {\n      return this.getCompletionForTopLevel(result);\n    }\n    var isInSelectors = !declarations || this.offset <= declarations.offset;\n    if (isInSelectors) {\n      return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);\n    }\n    return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);\n  };\n  CSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {\n    var _this = this;\n    var existingNode = this.findInNodePath(nodes.NodeType.PseudoSelector, nodes.NodeType.IdentifierSelector, nodes.NodeType.ClassSelector, nodes.NodeType.ElementNameSelector);\n    if (!existingNode && this.offset - this.currentWord.length > 0 && this.textDocument.getText()[this.offset - this.currentWord.length - 1] === ':') {\n      // after the ':' of a pseudo selector, no node generated for just ':'\n      this.currentWord = ':' + this.currentWord;\n      this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n    }\n    var pseudoClasses = languageFacts.cssDataManager.getPseudoClasses();\n    pseudoClasses.forEach(function (entry) {\n      var insertText = moveCursorInsideParenthesis(entry.name);\n      var item = {\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Function,\n        insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n      };\n      if (strings.startsWith(entry.name, ':-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n      result.items.push(item);\n    });\n    var pseudoElements = languageFacts.cssDataManager.getPseudoElements();\n    pseudoElements.forEach(function (entry) {\n      var insertText = moveCursorInsideParenthesis(entry.name);\n      var item = {\n        label: entry.name,\n        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n        documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n        tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n        kind: CompletionItemKind.Function,\n        insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n      };\n      if (strings.startsWith(entry.name, '::-')) {\n        item.sortText = SortTexts.VendorPrefixed;\n      }\n      result.items.push(item);\n    });\n    if (!isNested) {\n      // show html tags only for top level\n      for (var _i = 0, _a = languageFacts.html5Tags; _i < _a.length; _i++) {\n        var entry = _a[_i];\n        result.items.push({\n          label: entry,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n          kind: CompletionItemKind.Keyword\n        });\n      }\n      for (var _b = 0, _c = languageFacts.svgElements; _b < _c.length; _b++) {\n        var entry = _c[_b];\n        result.items.push({\n          label: entry,\n          textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n          kind: CompletionItemKind.Keyword\n        });\n      }\n    }\n    var visited = {};\n    visited[this.currentWord] = true;\n    var docText = this.textDocument.getText();\n    this.styleSheet.accept(function (n) {\n      if (n.type === nodes.NodeType.SimpleSelector && n.length > 0) {\n        var selector = docText.substr(n.offset, n.length);\n        if (selector.charAt(0) === '.' && !visited[selector]) {\n          visited[selector] = true;\n          result.items.push({\n            label: selector,\n            textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), selector),\n            kind: CompletionItemKind.Keyword\n          });\n        }\n        return false;\n      }\n      return true;\n    });\n    if (ruleSet && ruleSet.isNested()) {\n      var selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);\n      if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {\n        this.getPropertyProposals(null, result);\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForDeclarations = function (declarations, result) {\n    if (!declarations || this.offset === declarations.offset) {\n      // incomplete nodes\n      return result;\n    }\n    var node = declarations.findFirstChildBeforeOffset(this.offset);\n    if (!node) {\n      return this.getCompletionsForDeclarationProperty(null, result);\n    }\n    if (node instanceof nodes.AbstractDeclaration) {\n      var declaration = node;\n      if (!isDefined(declaration.colonPosition) || this.offset <= declaration.colonPosition) {\n        // complete property\n        return this.getCompletionsForDeclarationProperty(declaration, result);\n      } else if (isDefined(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset) {\n        if (this.offset === declaration.semicolonPosition + 1) {\n          return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)\n        }\n        // complete next property\n        return this.getCompletionsForDeclarationProperty(null, result);\n      }\n      if (declaration instanceof nodes.Declaration) {\n        // complete value\n        return this.getCompletionsForDeclarationValue(declaration, result);\n      }\n    } else if (node instanceof nodes.ExtendsReference) {\n      this.getCompletionsForExtendsReference(node, null, result);\n    } else if (this.currentWord && this.currentWord[0] === '@') {\n      this.getCompletionsForDeclarationProperty(null, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForVariableDeclaration = function (declaration, result) {\n    if (this.offset && isDefined(declaration.colonPosition) && this.offset > declaration.colonPosition) {\n      this.getVariableProposals(declaration.getValue(), result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForExpression = function (expression, result) {\n    var parent = expression.getParent();\n    if (parent instanceof nodes.FunctionArgument) {\n      this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);\n      return result;\n    }\n    var declaration = expression.findParent(nodes.NodeType.Declaration);\n    if (!declaration) {\n      this.getTermProposals(null, null, result);\n      return result;\n    }\n    var node = expression.findChildAtOffset(this.offset, true);\n    if (!node) {\n      return this.getCompletionsForDeclarationValue(declaration, result);\n    }\n    if (node instanceof nodes.NumericValue || node instanceof nodes.Identifier) {\n      return this.getCompletionsForDeclarationValue(declaration, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForFunctionArgument = function (arg, func, result) {\n    var identifier = func.getIdentifier();\n    if (identifier && identifier.matches('var')) {\n      if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {\n        this.getVariableProposalsForCSSVarFunction(result);\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForFunctionDeclaration = function (decl, result) {\n    var declarations = decl.getDeclarations();\n    if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {\n      this.getTermProposals(null, null, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForMixinReference = function (ref, result) {\n    var allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Mixin);\n    for (var _i = 0, allMixins_1 = allMixins; _i < allMixins_1.length; _i++) {\n      var mixinSymbol = allMixins_1[_i];\n      if (mixinSymbol.node instanceof nodes.MixinDeclaration) {\n        result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {\n    var allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Function);\n    for (var _i = 0, allFunctions_1 = allFunctions; _i < allFunctions_1.length; _i++) {\n      var functionSymbol = allFunctions_1[_i];\n      if (functionSymbol.node instanceof nodes.FunctionDeclaration) {\n        result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));\n      }\n    }\n    return result;\n  };\n  CSSCompletion.prototype.makeTermProposal = function (symbol, parameters, existingNode) {\n    var decl = symbol.node;\n    var params = parameters.getChildren().map(function (c) {\n      return c instanceof nodes.FunctionParameter ? c.getName() : c.getText();\n    });\n    var insertText = symbol.name + '(' + params.map(function (p, index) {\n      return '${' + (index + 1) + ':' + p + '}';\n    }).join(', ') + ')';\n    return {\n      label: symbol.name,\n      detail: symbol.name + '(' + params.join(', ') + ')',\n      textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n      insertTextFormat: SnippetFormat,\n      kind: CompletionItemKind.Function,\n      sortText: SortTexts.Term\n    };\n  };\n  CSSCompletion.prototype.getCompletionsForSupportsCondition = function (supportsCondition, result) {\n    var child = supportsCondition.findFirstChildBeforeOffset(this.offset);\n    if (child) {\n      if (child instanceof nodes.Declaration) {\n        if (!isDefined(child.colonPosition) || this.offset <= child.colonPosition) {\n          return this.getCompletionsForDeclarationProperty(child, result);\n        } else {\n          return this.getCompletionsForDeclarationValue(child, result);\n        }\n      } else if (child instanceof nodes.SupportsCondition) {\n        return this.getCompletionsForSupportsCondition(child, result);\n      }\n    }\n    if (isDefined(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!isDefined(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {\n      return this.getCompletionsForDeclarationProperty(null, result);\n    }\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionsForSupports = function (supports, result) {\n    var declarations = supports.getDeclarations();\n    var inInCondition = !declarations || this.offset <= declarations.offset;\n    if (inInCondition) {\n      var child = supports.findFirstChildBeforeOffset(this.offset);\n      if (child instanceof nodes.SupportsCondition) {\n        return this.getCompletionsForSupportsCondition(child, result);\n      }\n      return result;\n    }\n    return this.getCompletionForTopLevel(result);\n  };\n  CSSCompletion.prototype.getCompletionsForExtendsReference = function (extendsRef, existingNode, result) {\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionForUriLiteralValue = function (uriLiteralNode, result) {\n    var uriValue;\n    var position;\n    var range;\n    // No children, empty value\n    if (!uriLiteralNode.hasChildren()) {\n      uriValue = '';\n      position = this.position;\n      var emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);\n      range = Range.create(emptyURIValuePosition, emptyURIValuePosition);\n    } else {\n      var uriValueNode = uriLiteralNode.getChild(0);\n      uriValue = uriValueNode.getText();\n      position = this.position;\n      range = this.getCompletionRange(uriValueNode);\n    }\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssURILiteralValue) {\n        participant.onCssURILiteralValue({\n          uriValue: uriValue,\n          position: position,\n          range: range\n        });\n      }\n    });\n    return result;\n  };\n  CSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {\n    var _this = this;\n    this.completionParticipants.forEach(function (participant) {\n      if (participant.onCssImportPath) {\n        participant.onCssImportPath({\n          pathValue: importPathNode.getText(),\n          position: _this.position,\n          range: _this.getCompletionRange(importPathNode)\n        });\n      }\n    });\n    return result;\n  };\n  CSSCompletion.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n      var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n      this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n    return this.supportsMarkdown;\n  };\n  return CSSCompletion;\n}();\nexport { CSSCompletion };\nfunction isDeprecated(entry) {\n  if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {\n    return true;\n  }\n  return false;\n}\n/**\n * Rank number should all be same length strings\n */\nfunction computeRankNumber(n) {\n  var nstr = n.toString();\n  switch (nstr.length) {\n    case 4:\n      return nstr;\n    case 3:\n      return '0' + nstr;\n    case 2:\n      return '00' + nstr;\n    case 1:\n      return '000' + nstr;\n    default:\n      return '0000';\n  }\n}\nvar Set = /** @class */function () {\n  function Set() {\n    this.entries = {};\n  }\n  Set.prototype.add = function (entry) {\n    this.entries[entry] = true;\n  };\n  Set.prototype.getEntries = function () {\n    return Object.keys(this.entries);\n  };\n  return Set;\n}();\nfunction moveCursorInsideParenthesis(text) {\n  return text.replace(/\\(\\)$/, \"($1)\");\n}\nfunction collectValues(styleSheet, declaration) {\n  var fullPropertyName = declaration.getFullPropertyName();\n  var entries = new Set();\n  function visitValue(node) {\n    if (node instanceof nodes.Identifier || node instanceof nodes.NumericValue || node instanceof nodes.HexColorValue) {\n      entries.add(node.getText());\n    }\n    return true;\n  }\n  function matchesProperty(decl) {\n    var propertyName = decl.getFullPropertyName();\n    return fullPropertyName === propertyName;\n  }\n  function vistNode(node) {\n    if (node instanceof nodes.Declaration && node !== declaration) {\n      if (matchesProperty(node)) {\n        var value = node.getValue();\n        if (value) {\n          value.accept(visitValue);\n        }\n      }\n    }\n    return true;\n  }\n  styleSheet.accept(vistNode);\n  return entries;\n}\nvar ColorValueCollector = /** @class */function () {\n  function ColorValueCollector(entries, currentOffset) {\n    this.entries = entries;\n    this.currentOffset = currentOffset;\n    // nothing to do\n  }\n\n  ColorValueCollector.prototype.visitNode = function (node) {\n    if (node instanceof nodes.HexColorValue || node instanceof nodes.Function && languageFacts.isColorConstructor(node)) {\n      if (this.currentOffset < node.offset || node.end < this.currentOffset) {\n        this.entries.add(node.getText());\n      }\n    }\n    return true;\n  };\n  return ColorValueCollector;\n}();\nfunction getCurrentWord(document, offset) {\n  var i = offset - 1;\n  var text = document.getText();\n  while (i >= 0 && ' \\t\\n\\r\":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {\n    i--;\n  }\n  return text.substring(i + 1, offset);\n}\nfunction isColorString(s) {\n  // From https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\n  return s.toLowerCase() in languageFacts.colors || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(s);\n}","map":{"version":3,"names":["nodes","Symbols","languageFacts","strings","Position","CompletionItemKind","Range","TextEdit","InsertTextFormat","MarkupKind","CompletionItemTag","nls","isDefined","localize","loadMessageBundle","SnippetFormat","Snippet","SortTexts","CSSCompletion","variablePrefix","clientCapabilities","completionParticipants","valueTypes","NodeType","Identifier","Value","StringLiteral","URILiteral","NumericValue","HexColorValue","VariableName","Prio","prototype","configure","settings","getSymbolContext","symbolContext","styleSheet","setCompletionParticipants","registeredCompletionParticipants","doComplete","document","position","offset","offsetAt","currentWord","getCurrentWord","defaultReplaceRange","create","line","character","length","textDocument","result","isIncomplete","items","nodePath","getNodePath","i","node","Property","getCompletionsForDeclarationProperty","getParent","Expression","parent","Interpolation","getVariableProposals","getCompletionsForExpression","SimpleSelector","parentRef","findAParent","ExtendsReference","Ruleset","type","getCompletionsForExtendsReference","parentRuleSet","getCompletionsForSelector","isNested","FunctionArgument","getCompletionsForFunctionArgument","Declarations","getCompletionsForDeclarations","VariableDeclaration","getCompletionsForVariableDeclaration","RuleSet","getCompletionsForRuleSet","getCompletionsForInterpolation","FunctionDeclaration","getCompletionsForFunctionDeclaration","MixinReference","getCompletionsForMixinReference","Function","Supports","getCompletionsForSupports","SupportsCondition","getCompletionsForSupportsCondition","getCompletionForUriLiteralValue","getCompletionForTopLevel","isImportPathParent","getCompletionForImportPath","finalize","getCompletionsForStylesheet","indexOf","Import","needsSortText","some","sortText","label","forEach","item","index","VendorPrefixed","computeRankNumber","Normal","findInNodePath","types","_i","arguments","declaration","getPropertyProposals","_this","triggerPropertyValueCompletion","isTriggerPropertyValueCompletionEnabled","completePropertyWithSemicolon","isCompletePropertyWithSemicolonEnabled","properties","cssDataManager","getProperties","entry","range","insertText","retrigger","getCompletionRange","getProperty","name","colonPosition","semicolonPosition","end","documentation","getEntryDescription","doesSupportMarkdown","tags","isDeprecated","Deprecated","textEdit","replace","insertTextFormat","kind","restrictions","command","title","startsWith","push","participant","onCssProperty","propertyName","Object","defineProperty","get","completion","undefined","enumerable","configurable","getCompletionsForDeclarationValue","getFullPropertyName","existingNode","getValue","hasChildren","findChildAtOffset","onCssPropertyValue","propertyValue","_a","restriction","getColorProposals","getPositionProposals","getRepeatStyleProposals","getLineStyleProposals","getLineWidthProposals","getGeometryBoxProposals","getBoxProposals","getImageProposals","getTimingFunctionProposals","getBasicShapeProposals","getValueEnumProposals","getCSSWideKeywordProposals","getUnitProposals","existingValues","collectValues","_b","_c","getEntries","existingValue","getTermProposals","values","value","insertString","endsWith","from","lastIndexOf","substr","Enums","keywords","cssWideKeywords","symbols","findSymbolsAtOffset","ReferenceType","Variable","symbols_1","symbol","completionItem","getLimitedString","isColorString","Color","FunctionParameter","mixinNode","MixinDeclaration","detail","getName","getVariableProposalsForCSSVarFunction","filter","symbols_2","numMatch","match","Term","units","units_1","unit","Unit","positionAt","start","color","colors","colorKeywords","colorValues","Set","acceptVisitor","ColorValueCollector","_loop_1","p","tabStop","replaceFunction","_match","p1","func","desc","this_1","colorFunctions","positionKeywords","repeat","repeatStyleKeywords","lineStyle","lineStyleKeywords","lineWidthKeywords","lineWidth","box","geometryBoxKeywords","boxKeywords","image","imageFunctions","moveCursorInsideParenthesis","timing","transitionTimingFunctions","shape","basicShapeFunctions","findFirstChildBeforeOffset","getAtDirectives","Keyword","ruleSet","declarations","getDeclarations","isAfter","isInSelectors","PseudoSelector","IdentifierSelector","ClassSelector","ElementNameSelector","getText","pseudoClasses","getPseudoClasses","pseudoElements","getPseudoElements","html5Tags","svgElements","visited","docText","accept","n","selector","charAt","getSelectors","getChildren","AbstractDeclaration","Declaration","expression","findParent","arg","identifier","getIdentifier","matches","getArguments","getChild","decl","ref","allMixins","Mixin","allMixins_1","mixinSymbol","makeTermProposal","getParameters","allFunctions","allFunctions_1","functionSymbol","parameters","params","map","c","join","supportsCondition","child","lParent","rParent","supports","inInCondition","extendsRef","uriLiteralNode","uriValue","emptyURIValuePosition","uriValueNode","onCssURILiteralValue","importPathNode","onCssImportPath","pathValue","supportsMarkdown","Array","isArray","documentationFormat","Markdown","status","nstr","toString","entries","add","keys","text","fullPropertyName","visitValue","matchesProperty","vistNode","currentOffset","visitNode","isColorConstructor","substring","s","toLowerCase","test"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssCompletion.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nodes from '../parser/cssNodes.js';\nimport { Symbols } from '../parser/cssSymbolScope.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport * as strings from '../utils/strings.js';\nimport { Position, CompletionItemKind, Range, TextEdit, InsertTextFormat, MarkupKind, CompletionItemTag } from '../cssLanguageTypes.js';\nimport * as nls from './../../../fillers/vscode-nls.js';\nimport { isDefined } from '../utils/objects.js';\nvar localize = nls.loadMessageBundle();\nvar SnippetFormat = InsertTextFormat.Snippet;\nvar SortTexts;\n(function (SortTexts) {\n    // char code 32, comes before everything\n    SortTexts[\"Enums\"] = \" \";\n    SortTexts[\"Normal\"] = \"d\";\n    SortTexts[\"VendorPrefixed\"] = \"x\";\n    SortTexts[\"Term\"] = \"y\";\n    SortTexts[\"Variable\"] = \"z\";\n})(SortTexts || (SortTexts = {}));\nvar CSSCompletion = /** @class */ (function () {\n    function CSSCompletion(variablePrefix, clientCapabilities) {\n        if (variablePrefix === void 0) { variablePrefix = null; }\n        this.variablePrefix = variablePrefix;\n        this.clientCapabilities = clientCapabilities;\n        this.completionParticipants = [];\n        this.valueTypes = [\n            nodes.NodeType.Identifier, nodes.NodeType.Value, nodes.NodeType.StringLiteral, nodes.NodeType.URILiteral, nodes.NodeType.NumericValue,\n            nodes.NodeType.HexColorValue, nodes.NodeType.VariableName, nodes.NodeType.Prio\n        ];\n    }\n    CSSCompletion.prototype.configure = function (settings) {\n        this.settings = settings;\n    };\n    CSSCompletion.prototype.getSymbolContext = function () {\n        if (!this.symbolContext) {\n            this.symbolContext = new Symbols(this.styleSheet);\n        }\n        return this.symbolContext;\n    };\n    CSSCompletion.prototype.setCompletionParticipants = function (registeredCompletionParticipants) {\n        this.completionParticipants = registeredCompletionParticipants || [];\n    };\n    CSSCompletion.prototype.doComplete = function (document, position, styleSheet) {\n        this.offset = document.offsetAt(position);\n        this.position = position;\n        this.currentWord = getCurrentWord(document, this.offset);\n        this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n        this.textDocument = document;\n        this.styleSheet = styleSheet;\n        try {\n            var result = { isIncomplete: false, items: [] };\n            this.nodePath = nodes.getNodePath(this.styleSheet, this.offset);\n            for (var i = this.nodePath.length - 1; i >= 0; i--) {\n                var node = this.nodePath[i];\n                if (node instanceof nodes.Property) {\n                    this.getCompletionsForDeclarationProperty(node.getParent(), result);\n                }\n                else if (node instanceof nodes.Expression) {\n                    if (node.parent instanceof nodes.Interpolation) {\n                        this.getVariableProposals(null, result);\n                    }\n                    else {\n                        this.getCompletionsForExpression(node, result);\n                    }\n                }\n                else if (node instanceof nodes.SimpleSelector) {\n                    var parentRef = node.findAParent(nodes.NodeType.ExtendsReference, nodes.NodeType.Ruleset);\n                    if (parentRef) {\n                        if (parentRef.type === nodes.NodeType.ExtendsReference) {\n                            this.getCompletionsForExtendsReference(parentRef, node, result);\n                        }\n                        else {\n                            var parentRuleSet = parentRef;\n                            this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);\n                        }\n                    }\n                }\n                else if (node instanceof nodes.FunctionArgument) {\n                    this.getCompletionsForFunctionArgument(node, node.getParent(), result);\n                }\n                else if (node instanceof nodes.Declarations) {\n                    this.getCompletionsForDeclarations(node, result);\n                }\n                else if (node instanceof nodes.VariableDeclaration) {\n                    this.getCompletionsForVariableDeclaration(node, result);\n                }\n                else if (node instanceof nodes.RuleSet) {\n                    this.getCompletionsForRuleSet(node, result);\n                }\n                else if (node instanceof nodes.Interpolation) {\n                    this.getCompletionsForInterpolation(node, result);\n                }\n                else if (node instanceof nodes.FunctionDeclaration) {\n                    this.getCompletionsForFunctionDeclaration(node, result);\n                }\n                else if (node instanceof nodes.MixinReference) {\n                    this.getCompletionsForMixinReference(node, result);\n                }\n                else if (node instanceof nodes.Function) {\n                    this.getCompletionsForFunctionArgument(null, node, result);\n                }\n                else if (node instanceof nodes.Supports) {\n                    this.getCompletionsForSupports(node, result);\n                }\n                else if (node instanceof nodes.SupportsCondition) {\n                    this.getCompletionsForSupportsCondition(node, result);\n                }\n                else if (node instanceof nodes.ExtendsReference) {\n                    this.getCompletionsForExtendsReference(node, null, result);\n                }\n                else if (node.type === nodes.NodeType.URILiteral) {\n                    this.getCompletionForUriLiteralValue(node, result);\n                }\n                else if (node.parent === null) {\n                    this.getCompletionForTopLevel(result);\n                }\n                else if (node.type === nodes.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {\n                    this.getCompletionForImportPath(node, result);\n                    // } else if (node instanceof nodes.Variable) {\n                    // this.getCompletionsForVariableDeclaration()\n                }\n                else {\n                    continue;\n                }\n                if (result.items.length > 0 || this.offset > node.offset) {\n                    return this.finalize(result);\n                }\n            }\n            this.getCompletionsForStylesheet(result);\n            if (result.items.length === 0) {\n                if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {\n                    this.getVariableProposals(null, result);\n                }\n            }\n            return this.finalize(result);\n        }\n        finally {\n            // don't hold on any state, clear symbolContext\n            this.position = null;\n            this.currentWord = null;\n            this.textDocument = null;\n            this.styleSheet = null;\n            this.symbolContext = null;\n            this.defaultReplaceRange = null;\n            this.nodePath = null;\n        }\n    };\n    CSSCompletion.prototype.isImportPathParent = function (type) {\n        return type === nodes.NodeType.Import;\n    };\n    CSSCompletion.prototype.finalize = function (result) {\n        var needsSortText = result.items.some(function (i) { return !!i.sortText || i.label[0] === '-'; });\n        if (needsSortText) {\n            result.items.forEach(function (item, index) {\n                if (!item.sortText) {\n                    if (item.label[0] === '-') {\n                        item.sortText = SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n                    }\n                    else {\n                        item.sortText = SortTexts.Normal + '_' + computeRankNumber(index);\n                    }\n                }\n                else {\n                    if (item.label[0] === '-') {\n                        item.sortText += SortTexts.VendorPrefixed + '_' + computeRankNumber(index);\n                    }\n                    else {\n                        item.sortText += SortTexts.Normal + '_' + computeRankNumber(index);\n                    }\n                }\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.findInNodePath = function () {\n        var types = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            types[_i] = arguments[_i];\n        }\n        for (var i = this.nodePath.length - 1; i >= 0; i--) {\n            var node = this.nodePath[i];\n            if (types.indexOf(node.type) !== -1) {\n                return node;\n            }\n        }\n        return null;\n    };\n    CSSCompletion.prototype.getCompletionsForDeclarationProperty = function (declaration, result) {\n        return this.getPropertyProposals(declaration, result);\n    };\n    CSSCompletion.prototype.getPropertyProposals = function (declaration, result) {\n        var _this = this;\n        var triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;\n        var completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;\n        var properties = languageFacts.cssDataManager.getProperties();\n        properties.forEach(function (entry) {\n            var range;\n            var insertText;\n            var retrigger = false;\n            if (declaration) {\n                range = _this.getCompletionRange(declaration.getProperty());\n                insertText = entry.name;\n                if (!isDefined(declaration.colonPosition)) {\n                    insertText += ': ';\n                    retrigger = true;\n                }\n            }\n            else {\n                range = _this.getCompletionRange(null);\n                insertText = entry.name + ': ';\n                retrigger = true;\n            }\n            // Empty .selector { | } case\n            if (!declaration && completePropertyWithSemicolon) {\n                insertText += '$0;';\n            }\n            // Cases such as .selector { p; } or .selector { p:; }\n            if (declaration && !declaration.semicolonPosition) {\n                if (completePropertyWithSemicolon && _this.offset >= _this.textDocument.offsetAt(range.end)) {\n                    insertText += '$0;';\n                }\n            }\n            var item = {\n                label: entry.name,\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                textEdit: TextEdit.replace(range, insertText),\n                insertTextFormat: InsertTextFormat.Snippet,\n                kind: CompletionItemKind.Property\n            };\n            if (!entry.restrictions) {\n                retrigger = false;\n            }\n            if (triggerPropertyValueCompletion && retrigger) {\n                item.command = {\n                    title: 'Suggest',\n                    command: 'editor.action.triggerSuggest'\n                };\n            }\n            if (strings.startsWith(entry.name, '-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssProperty) {\n                participant.onCssProperty({\n                    propertyName: _this.currentWord,\n                    range: _this.defaultReplaceRange\n                });\n            }\n        });\n        return result;\n    };\n    Object.defineProperty(CSSCompletion.prototype, \"isTriggerPropertyValueCompletionEnabled\", {\n        get: function () {\n            if (!this.settings ||\n                !this.settings.completion ||\n                this.settings.completion.triggerPropertyValueCompletion === undefined) {\n                return true;\n            }\n            return this.settings.completion.triggerPropertyValueCompletion;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CSSCompletion.prototype, \"isCompletePropertyWithSemicolonEnabled\", {\n        get: function () {\n            if (!this.settings ||\n                !this.settings.completion ||\n                this.settings.completion.completePropertyWithSemicolon === undefined) {\n                return true;\n            }\n            return this.settings.completion.completePropertyWithSemicolon;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CSSCompletion.prototype.getCompletionsForDeclarationValue = function (node, result) {\n        var _this = this;\n        var propertyName = node.getFullPropertyName();\n        var entry = languageFacts.cssDataManager.getProperty(propertyName);\n        var existingNode = node.getValue() || null;\n        while (existingNode && existingNode.hasChildren()) {\n            existingNode = existingNode.findChildAtOffset(this.offset, false);\n        }\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssPropertyValue) {\n                participant.onCssPropertyValue({\n                    propertyName: propertyName,\n                    propertyValue: _this.currentWord,\n                    range: _this.getCompletionRange(existingNode)\n                });\n            }\n        });\n        if (entry) {\n            if (entry.restrictions) {\n                for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n                    var restriction = _a[_i];\n                    switch (restriction) {\n                        case 'color':\n                            this.getColorProposals(entry, existingNode, result);\n                            break;\n                        case 'position':\n                            this.getPositionProposals(entry, existingNode, result);\n                            break;\n                        case 'repeat':\n                            this.getRepeatStyleProposals(entry, existingNode, result);\n                            break;\n                        case 'line-style':\n                            this.getLineStyleProposals(entry, existingNode, result);\n                            break;\n                        case 'line-width':\n                            this.getLineWidthProposals(entry, existingNode, result);\n                            break;\n                        case 'geometry-box':\n                            this.getGeometryBoxProposals(entry, existingNode, result);\n                            break;\n                        case 'box':\n                            this.getBoxProposals(entry, existingNode, result);\n                            break;\n                        case 'image':\n                            this.getImageProposals(entry, existingNode, result);\n                            break;\n                        case 'timing-function':\n                            this.getTimingFunctionProposals(entry, existingNode, result);\n                            break;\n                        case 'shape':\n                            this.getBasicShapeProposals(entry, existingNode, result);\n                            break;\n                    }\n                }\n            }\n            this.getValueEnumProposals(entry, existingNode, result);\n            this.getCSSWideKeywordProposals(entry, existingNode, result);\n            this.getUnitProposals(entry, existingNode, result);\n        }\n        else {\n            var existingValues = collectValues(this.styleSheet, node);\n            for (var _b = 0, _c = existingValues.getEntries(); _b < _c.length; _b++) {\n                var existingValue = _c[_b];\n                result.items.push({\n                    label: existingValue,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), existingValue),\n                    kind: CompletionItemKind.Value\n                });\n            }\n        }\n        this.getVariableProposals(existingNode, result);\n        this.getTermProposals(entry, existingNode, result);\n        return result;\n    };\n    CSSCompletion.prototype.getValueEnumProposals = function (entry, existingNode, result) {\n        if (entry.values) {\n            for (var _i = 0, _a = entry.values; _i < _a.length; _i++) {\n                var value = _a[_i];\n                var insertString = value.name;\n                var insertTextFormat = void 0;\n                if (strings.endsWith(insertString, ')')) {\n                    var from = insertString.lastIndexOf('(');\n                    if (from !== -1) {\n                        insertString = insertString.substr(0, from) + '($1)';\n                        insertTextFormat = SnippetFormat;\n                    }\n                }\n                var item = {\n                    label: value.name,\n                    documentation: languageFacts.getEntryDescription(value, this.doesSupportMarkdown()),\n                    tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertString),\n                    sortText: SortTexts.Enums,\n                    kind: CompletionItemKind.Value,\n                    insertTextFormat: insertTextFormat\n                };\n                result.items.push(item);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCSSWideKeywordProposals = function (entry, existingNode, result) {\n        for (var keywords in languageFacts.cssWideKeywords) {\n            result.items.push({\n                label: keywords,\n                documentation: languageFacts.cssWideKeywords[keywords],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), keywords),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForInterpolation = function (node, result) {\n        if (this.offset >= node.offset + 2) {\n            this.getVariableProposals(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getVariableProposals = function (existingNode, result) {\n        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n            var symbol = symbols_1[_i];\n            var insertText = strings.startsWith(symbol.name, '--') ? \"var(\" + symbol.name + \")\" : symbol.name;\n            var completionItem = {\n                label: symbol.name,\n                documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Variable,\n                sortText: SortTexts.Variable\n            };\n            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n                completionItem.kind = CompletionItemKind.Color;\n            }\n            if (symbol.node.type === nodes.NodeType.FunctionParameter) {\n                var mixinNode = (symbol.node.getParent());\n                if (mixinNode.type === nodes.NodeType.MixinDeclaration) {\n                    completionItem.detail = localize('completion.argument', 'argument from \\'{0}\\'', mixinNode.getName());\n                }\n            }\n            result.items.push(completionItem);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getVariableProposalsForCSSVarFunction = function (result) {\n        var symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Variable);\n        symbols = symbols.filter(function (symbol) {\n            return strings.startsWith(symbol.name, '--');\n        });\n        for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {\n            var symbol = symbols_2[_i];\n            var completionItem = {\n                label: symbol.name,\n                documentation: symbol.value ? strings.getLimitedString(symbol.value) : symbol.value,\n                textEdit: TextEdit.replace(this.getCompletionRange(null), symbol.name),\n                kind: CompletionItemKind.Variable\n            };\n            if (typeof completionItem.documentation === 'string' && isColorString(completionItem.documentation)) {\n                completionItem.kind = CompletionItemKind.Color;\n            }\n            result.items.push(completionItem);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getUnitProposals = function (entry, existingNode, result) {\n        var currentWord = '0';\n        if (this.currentWord.length > 0) {\n            var numMatch = this.currentWord.match(/^-?\\d[\\.\\d+]*/);\n            if (numMatch) {\n                currentWord = numMatch[0];\n                result.isIncomplete = currentWord.length === this.currentWord.length;\n            }\n        }\n        else if (this.currentWord.length === 0) {\n            result.isIncomplete = true;\n        }\n        if (existingNode && existingNode.parent && existingNode.parent.type === nodes.NodeType.Term) {\n            existingNode = existingNode.getParent(); // include the unary operator\n        }\n        if (entry.restrictions) {\n            for (var _i = 0, _a = entry.restrictions; _i < _a.length; _i++) {\n                var restriction = _a[_i];\n                var units = languageFacts.units[restriction];\n                if (units) {\n                    for (var _b = 0, units_1 = units; _b < units_1.length; _b++) {\n                        var unit = units_1[_b];\n                        var insertText = currentWord + unit;\n                        result.items.push({\n                            label: insertText,\n                            textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                            kind: CompletionItemKind.Unit\n                        });\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionRange = function (existingNode) {\n        if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {\n            var end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;\n            var start = this.textDocument.positionAt(existingNode.offset);\n            if (start.line === end.line) {\n                return Range.create(start, end); // multi line edits are not allowed\n            }\n        }\n        return this.defaultReplaceRange;\n    };\n    CSSCompletion.prototype.getColorProposals = function (entry, existingNode, result) {\n        for (var color in languageFacts.colors) {\n            result.items.push({\n                label: color,\n                documentation: languageFacts.colors[color],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Color\n            });\n        }\n        for (var color in languageFacts.colorKeywords) {\n            result.items.push({\n                label: color,\n                documentation: languageFacts.colorKeywords[color],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Value\n            });\n        }\n        var colorValues = new Set();\n        this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));\n        for (var _i = 0, _a = colorValues.getEntries(); _i < _a.length; _i++) {\n            var color = _a[_i];\n            result.items.push({\n                label: color,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), color),\n                kind: CompletionItemKind.Color\n            });\n        }\n        var _loop_1 = function (p) {\n            var tabStop = 1;\n            var replaceFunction = function (_match, p1) { return '${' + tabStop++ + ':' + p1 + '}'; };\n            var insertText = p.func.replace(/\\[?\\$(\\w+)\\]?/g, replaceFunction);\n            result.items.push({\n                label: p.func.substr(0, p.func.indexOf('(')),\n                detail: p.func,\n                documentation: p.desc,\n                textEdit: TextEdit.replace(this_1.getCompletionRange(existingNode), insertText),\n                insertTextFormat: SnippetFormat,\n                kind: CompletionItemKind.Function\n            });\n        };\n        var this_1 = this;\n        for (var _b = 0, _c = languageFacts.colorFunctions; _b < _c.length; _b++) {\n            var p = _c[_b];\n            _loop_1(p);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getPositionProposals = function (entry, existingNode, result) {\n        for (var position in languageFacts.positionKeywords) {\n            result.items.push({\n                label: position,\n                documentation: languageFacts.positionKeywords[position],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), position),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getRepeatStyleProposals = function (entry, existingNode, result) {\n        for (var repeat in languageFacts.repeatStyleKeywords) {\n            result.items.push({\n                label: repeat,\n                documentation: languageFacts.repeatStyleKeywords[repeat],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), repeat),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getLineStyleProposals = function (entry, existingNode, result) {\n        for (var lineStyle in languageFacts.lineStyleKeywords) {\n            result.items.push({\n                label: lineStyle,\n                documentation: languageFacts.lineStyleKeywords[lineStyle],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getLineWidthProposals = function (entry, existingNode, result) {\n        for (var _i = 0, _a = languageFacts.lineWidthKeywords; _i < _a.length; _i++) {\n            var lineWidth = _a[_i];\n            result.items.push({\n                label: lineWidth,\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getGeometryBoxProposals = function (entry, existingNode, result) {\n        for (var box in languageFacts.geometryBoxKeywords) {\n            result.items.push({\n                label: box,\n                documentation: languageFacts.geometryBoxKeywords[box],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getBoxProposals = function (entry, existingNode, result) {\n        for (var box in languageFacts.boxKeywords) {\n            result.items.push({\n                label: box,\n                documentation: languageFacts.boxKeywords[box],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), box),\n                kind: CompletionItemKind.Value\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getImageProposals = function (entry, existingNode, result) {\n        for (var image in languageFacts.imageFunctions) {\n            var insertText = moveCursorInsideParenthesis(image);\n            result.items.push({\n                label: image,\n                documentation: languageFacts.imageFunctions[image],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: image !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getTimingFunctionProposals = function (entry, existingNode, result) {\n        for (var timing in languageFacts.transitionTimingFunctions) {\n            var insertText = moveCursorInsideParenthesis(timing);\n            result.items.push({\n                label: timing,\n                documentation: languageFacts.transitionTimingFunctions[timing],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: timing !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getBasicShapeProposals = function (entry, existingNode, result) {\n        for (var shape in languageFacts.basicShapeFunctions) {\n            var insertText = moveCursorInsideParenthesis(shape);\n            result.items.push({\n                label: shape,\n                documentation: languageFacts.basicShapeFunctions[shape],\n                textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n                kind: CompletionItemKind.Function,\n                insertTextFormat: shape !== insertText ? SnippetFormat : void 0\n            });\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForStylesheet = function (result) {\n        var node = this.styleSheet.findFirstChildBeforeOffset(this.offset);\n        if (!node) {\n            return this.getCompletionForTopLevel(result);\n        }\n        if (node instanceof nodes.RuleSet) {\n            return this.getCompletionsForRuleSet(node, result);\n        }\n        if (node instanceof nodes.Supports) {\n            return this.getCompletionsForSupports(node, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForTopLevel = function (result) {\n        var _this = this;\n        languageFacts.cssDataManager.getAtDirectives().forEach(function (entry) {\n            result.items.push({\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(null), entry.name),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Keyword\n            });\n        });\n        this.getCompletionsForSelector(null, false, result);\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForRuleSet = function (ruleSet, result) {\n        var declarations = ruleSet.getDeclarations();\n        var isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;\n        if (isAfter) {\n            return this.getCompletionForTopLevel(result);\n        }\n        var isInSelectors = !declarations || this.offset <= declarations.offset;\n        if (isInSelectors) {\n            return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);\n        }\n        return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);\n    };\n    CSSCompletion.prototype.getCompletionsForSelector = function (ruleSet, isNested, result) {\n        var _this = this;\n        var existingNode = this.findInNodePath(nodes.NodeType.PseudoSelector, nodes.NodeType.IdentifierSelector, nodes.NodeType.ClassSelector, nodes.NodeType.ElementNameSelector);\n        if (!existingNode && this.offset - this.currentWord.length > 0 && this.textDocument.getText()[this.offset - this.currentWord.length - 1] === ':') {\n            // after the ':' of a pseudo selector, no node generated for just ':'\n            this.currentWord = ':' + this.currentWord;\n            this.defaultReplaceRange = Range.create(Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);\n        }\n        var pseudoClasses = languageFacts.cssDataManager.getPseudoClasses();\n        pseudoClasses.forEach(function (entry) {\n            var insertText = moveCursorInsideParenthesis(entry.name);\n            var item = {\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Function,\n                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n            };\n            if (strings.startsWith(entry.name, ':-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        var pseudoElements = languageFacts.cssDataManager.getPseudoElements();\n        pseudoElements.forEach(function (entry) {\n            var insertText = moveCursorInsideParenthesis(entry.name);\n            var item = {\n                label: entry.name,\n                textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), insertText),\n                documentation: languageFacts.getEntryDescription(entry, _this.doesSupportMarkdown()),\n                tags: isDeprecated(entry) ? [CompletionItemTag.Deprecated] : [],\n                kind: CompletionItemKind.Function,\n                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0\n            };\n            if (strings.startsWith(entry.name, '::-')) {\n                item.sortText = SortTexts.VendorPrefixed;\n            }\n            result.items.push(item);\n        });\n        if (!isNested) { // show html tags only for top level\n            for (var _i = 0, _a = languageFacts.html5Tags; _i < _a.length; _i++) {\n                var entry = _a[_i];\n                result.items.push({\n                    label: entry,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n                    kind: CompletionItemKind.Keyword\n                });\n            }\n            for (var _b = 0, _c = languageFacts.svgElements; _b < _c.length; _b++) {\n                var entry = _c[_b];\n                result.items.push({\n                    label: entry,\n                    textEdit: TextEdit.replace(this.getCompletionRange(existingNode), entry),\n                    kind: CompletionItemKind.Keyword\n                });\n            }\n        }\n        var visited = {};\n        visited[this.currentWord] = true;\n        var docText = this.textDocument.getText();\n        this.styleSheet.accept(function (n) {\n            if (n.type === nodes.NodeType.SimpleSelector && n.length > 0) {\n                var selector = docText.substr(n.offset, n.length);\n                if (selector.charAt(0) === '.' && !visited[selector]) {\n                    visited[selector] = true;\n                    result.items.push({\n                        label: selector,\n                        textEdit: TextEdit.replace(_this.getCompletionRange(existingNode), selector),\n                        kind: CompletionItemKind.Keyword\n                    });\n                }\n                return false;\n            }\n            return true;\n        });\n        if (ruleSet && ruleSet.isNested()) {\n            var selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);\n            if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {\n                this.getPropertyProposals(null, result);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForDeclarations = function (declarations, result) {\n        if (!declarations || this.offset === declarations.offset) { // incomplete nodes\n            return result;\n        }\n        var node = declarations.findFirstChildBeforeOffset(this.offset);\n        if (!node) {\n            return this.getCompletionsForDeclarationProperty(null, result);\n        }\n        if (node instanceof nodes.AbstractDeclaration) {\n            var declaration = node;\n            if (!isDefined(declaration.colonPosition) || this.offset <= declaration.colonPosition) {\n                // complete property\n                return this.getCompletionsForDeclarationProperty(declaration, result);\n            }\n            else if ((isDefined(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset)) {\n                if (this.offset === declaration.semicolonPosition + 1) {\n                    return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)\n                }\n                // complete next property\n                return this.getCompletionsForDeclarationProperty(null, result);\n            }\n            if (declaration instanceof nodes.Declaration) {\n                // complete value\n                return this.getCompletionsForDeclarationValue(declaration, result);\n            }\n        }\n        else if (node instanceof nodes.ExtendsReference) {\n            this.getCompletionsForExtendsReference(node, null, result);\n        }\n        else if (this.currentWord && this.currentWord[0] === '@') {\n            this.getCompletionsForDeclarationProperty(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForVariableDeclaration = function (declaration, result) {\n        if (this.offset && isDefined(declaration.colonPosition) && this.offset > declaration.colonPosition) {\n            this.getVariableProposals(declaration.getValue(), result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForExpression = function (expression, result) {\n        var parent = expression.getParent();\n        if (parent instanceof nodes.FunctionArgument) {\n            this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);\n            return result;\n        }\n        var declaration = expression.findParent(nodes.NodeType.Declaration);\n        if (!declaration) {\n            this.getTermProposals(null, null, result);\n            return result;\n        }\n        var node = expression.findChildAtOffset(this.offset, true);\n        if (!node) {\n            return this.getCompletionsForDeclarationValue(declaration, result);\n        }\n        if (node instanceof nodes.NumericValue || node instanceof nodes.Identifier) {\n            return this.getCompletionsForDeclarationValue(declaration, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForFunctionArgument = function (arg, func, result) {\n        var identifier = func.getIdentifier();\n        if (identifier && identifier.matches('var')) {\n            if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {\n                this.getVariableProposalsForCSSVarFunction(result);\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForFunctionDeclaration = function (decl, result) {\n        var declarations = decl.getDeclarations();\n        if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {\n            this.getTermProposals(null, null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForMixinReference = function (ref, result) {\n        var allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Mixin);\n        for (var _i = 0, allMixins_1 = allMixins; _i < allMixins_1.length; _i++) {\n            var mixinSymbol = allMixins_1[_i];\n            if (mixinSymbol.node instanceof nodes.MixinDeclaration) {\n                result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getTermProposals = function (entry, existingNode, result) {\n        var allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, nodes.ReferenceType.Function);\n        for (var _i = 0, allFunctions_1 = allFunctions; _i < allFunctions_1.length; _i++) {\n            var functionSymbol = allFunctions_1[_i];\n            if (functionSymbol.node instanceof nodes.FunctionDeclaration) {\n                result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));\n            }\n        }\n        return result;\n    };\n    CSSCompletion.prototype.makeTermProposal = function (symbol, parameters, existingNode) {\n        var decl = symbol.node;\n        var params = parameters.getChildren().map(function (c) {\n            return (c instanceof nodes.FunctionParameter) ? c.getName() : c.getText();\n        });\n        var insertText = symbol.name + '(' + params.map(function (p, index) { return '${' + (index + 1) + ':' + p + '}'; }).join(', ') + ')';\n        return {\n            label: symbol.name,\n            detail: symbol.name + '(' + params.join(', ') + ')',\n            textEdit: TextEdit.replace(this.getCompletionRange(existingNode), insertText),\n            insertTextFormat: SnippetFormat,\n            kind: CompletionItemKind.Function,\n            sortText: SortTexts.Term\n        };\n    };\n    CSSCompletion.prototype.getCompletionsForSupportsCondition = function (supportsCondition, result) {\n        var child = supportsCondition.findFirstChildBeforeOffset(this.offset);\n        if (child) {\n            if (child instanceof nodes.Declaration) {\n                if (!isDefined(child.colonPosition) || this.offset <= child.colonPosition) {\n                    return this.getCompletionsForDeclarationProperty(child, result);\n                }\n                else {\n                    return this.getCompletionsForDeclarationValue(child, result);\n                }\n            }\n            else if (child instanceof nodes.SupportsCondition) {\n                return this.getCompletionsForSupportsCondition(child, result);\n            }\n        }\n        if (isDefined(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!isDefined(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {\n            return this.getCompletionsForDeclarationProperty(null, result);\n        }\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionsForSupports = function (supports, result) {\n        var declarations = supports.getDeclarations();\n        var inInCondition = !declarations || this.offset <= declarations.offset;\n        if (inInCondition) {\n            var child = supports.findFirstChildBeforeOffset(this.offset);\n            if (child instanceof nodes.SupportsCondition) {\n                return this.getCompletionsForSupportsCondition(child, result);\n            }\n            return result;\n        }\n        return this.getCompletionForTopLevel(result);\n    };\n    CSSCompletion.prototype.getCompletionsForExtendsReference = function (extendsRef, existingNode, result) {\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForUriLiteralValue = function (uriLiteralNode, result) {\n        var uriValue;\n        var position;\n        var range;\n        // No children, empty value\n        if (!uriLiteralNode.hasChildren()) {\n            uriValue = '';\n            position = this.position;\n            var emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);\n            range = Range.create(emptyURIValuePosition, emptyURIValuePosition);\n        }\n        else {\n            var uriValueNode = uriLiteralNode.getChild(0);\n            uriValue = uriValueNode.getText();\n            position = this.position;\n            range = this.getCompletionRange(uriValueNode);\n        }\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssURILiteralValue) {\n                participant.onCssURILiteralValue({\n                    uriValue: uriValue,\n                    position: position,\n                    range: range\n                });\n            }\n        });\n        return result;\n    };\n    CSSCompletion.prototype.getCompletionForImportPath = function (importPathNode, result) {\n        var _this = this;\n        this.completionParticipants.forEach(function (participant) {\n            if (participant.onCssImportPath) {\n                participant.onCssImportPath({\n                    pathValue: importPathNode.getText(),\n                    position: _this.position,\n                    range: _this.getCompletionRange(importPathNode)\n                });\n            }\n        });\n        return result;\n    };\n    CSSCompletion.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;\n            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return CSSCompletion;\n}());\nexport { CSSCompletion };\nfunction isDeprecated(entry) {\n    if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {\n        return true;\n    }\n    return false;\n}\n/**\n * Rank number should all be same length strings\n */\nfunction computeRankNumber(n) {\n    var nstr = n.toString();\n    switch (nstr.length) {\n        case 4:\n            return nstr;\n        case 3:\n            return '0' + nstr;\n        case 2:\n            return '00' + nstr;\n        case 1:\n            return '000' + nstr;\n        default:\n            return '0000';\n    }\n}\nvar Set = /** @class */ (function () {\n    function Set() {\n        this.entries = {};\n    }\n    Set.prototype.add = function (entry) {\n        this.entries[entry] = true;\n    };\n    Set.prototype.getEntries = function () {\n        return Object.keys(this.entries);\n    };\n    return Set;\n}());\nfunction moveCursorInsideParenthesis(text) {\n    return text.replace(/\\(\\)$/, \"($1)\");\n}\nfunction collectValues(styleSheet, declaration) {\n    var fullPropertyName = declaration.getFullPropertyName();\n    var entries = new Set();\n    function visitValue(node) {\n        if (node instanceof nodes.Identifier || node instanceof nodes.NumericValue || node instanceof nodes.HexColorValue) {\n            entries.add(node.getText());\n        }\n        return true;\n    }\n    function matchesProperty(decl) {\n        var propertyName = decl.getFullPropertyName();\n        return fullPropertyName === propertyName;\n    }\n    function vistNode(node) {\n        if (node instanceof nodes.Declaration && node !== declaration) {\n            if (matchesProperty(node)) {\n                var value = node.getValue();\n                if (value) {\n                    value.accept(visitValue);\n                }\n            }\n        }\n        return true;\n    }\n    styleSheet.accept(vistNode);\n    return entries;\n}\nvar ColorValueCollector = /** @class */ (function () {\n    function ColorValueCollector(entries, currentOffset) {\n        this.entries = entries;\n        this.currentOffset = currentOffset;\n        // nothing to do\n    }\n    ColorValueCollector.prototype.visitNode = function (node) {\n        if (node instanceof nodes.HexColorValue || (node instanceof nodes.Function && languageFacts.isColorConstructor(node))) {\n            if (this.currentOffset < node.offset || node.end < this.currentOffset) {\n                this.entries.add(node.getText());\n            }\n        }\n        return true;\n    };\n    return ColorValueCollector;\n}());\nfunction getCurrentWord(document, offset) {\n    var i = offset - 1;\n    var text = document.getText();\n    while (i >= 0 && ' \\t\\n\\r\":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {\n        i--;\n    }\n    return text.substring(i + 1, offset);\n}\nfunction isColorString(s) {\n    // From https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\n    return (s.toLowerCase() in languageFacts.colors) || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(s);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}