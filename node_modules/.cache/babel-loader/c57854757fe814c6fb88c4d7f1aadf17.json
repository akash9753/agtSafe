{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { selectorToMarkedString, simpleSelectorToMarkedString } from './selectorPrinting.js';\nimport { startsWith } from '../utils/strings.js';\nimport { Range, MarkupKind } from '../cssLanguageTypes.js';\nimport { isDefined } from '../utils/objects.js';\nvar CSSHover = /** @class */function () {\n  function CSSHover(clientCapabilities) {\n    this.clientCapabilities = clientCapabilities;\n  }\n  CSSHover.prototype.doHover = function (document, position, stylesheet) {\n    function getRange(node) {\n      return Range.create(document.positionAt(node.offset), document.positionAt(node.end));\n    }\n    var offset = document.offsetAt(position);\n    var nodepath = nodes.getNodePath(stylesheet, offset);\n    /**\n     * nodepath is top-down\n     * Build up the hover by appending inner node's information\n     */\n    var hover = null;\n    for (var i = 0; i < nodepath.length; i++) {\n      var node = nodepath[i];\n      if (node instanceof nodes.Selector) {\n        hover = {\n          contents: selectorToMarkedString(node),\n          range: getRange(node)\n        };\n        break;\n      }\n      if (node instanceof nodes.SimpleSelector) {\n        /**\n         * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`\n         */\n        if (!startsWith(node.getText(), '@')) {\n          hover = {\n            contents: simpleSelectorToMarkedString(node),\n            range: getRange(node)\n          };\n        }\n        break;\n      }\n      if (node instanceof nodes.Declaration) {\n        var propertyName = node.getFullPropertyName();\n        var entry = languageFacts.cssDataManager.getProperty(propertyName);\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n        continue;\n      }\n      if (node instanceof nodes.UnknownAtRule) {\n        var atRuleName = node.getText();\n        var entry = languageFacts.cssDataManager.getAtDirective(atRuleName);\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n        continue;\n      }\n      if (node instanceof nodes.Node && node.type === nodes.NodeType.PseudoSelector) {\n        var selectorName = node.getText();\n        var entry = selectorName.slice(0, 2) === '::' ? languageFacts.cssDataManager.getPseudoElement(selectorName) : languageFacts.cssDataManager.getPseudoClass(selectorName);\n        if (entry) {\n          hover = {\n            contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n            range: getRange(node)\n          };\n        }\n        continue;\n      }\n    }\n    if (hover) {\n      hover.contents = this.convertContents(hover.contents);\n    }\n    return hover;\n  };\n  CSSHover.prototype.convertContents = function (contents) {\n    if (!this.doesSupportMarkdown()) {\n      if (typeof contents === 'string') {\n        return contents;\n      }\n      // MarkupContent\n      else if ('kind' in contents) {\n        return {\n          kind: 'plaintext',\n          value: contents.value\n        };\n      }\n      // MarkedString[]\n      else if (Array.isArray(contents)) {\n        return contents.map(function (c) {\n          return typeof c === 'string' ? c : c.value;\n        });\n      }\n      // MarkedString\n      else {\n        return contents.value;\n      }\n    }\n    return contents;\n  };\n  CSSHover.prototype.doesSupportMarkdown = function () {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n      var hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;\n      this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n    return this.supportsMarkdown;\n  };\n  return CSSHover;\n}();\nexport { CSSHover };","map":{"version":3,"names":["nodes","languageFacts","selectorToMarkedString","simpleSelectorToMarkedString","startsWith","Range","MarkupKind","isDefined","CSSHover","clientCapabilities","prototype","doHover","document","position","stylesheet","getRange","node","create","positionAt","offset","end","offsetAt","nodepath","getNodePath","hover","i","length","Selector","contents","range","SimpleSelector","getText","Declaration","propertyName","getFullPropertyName","entry","cssDataManager","getProperty","getEntryDescription","doesSupportMarkdown","UnknownAtRule","atRuleName","getAtDirective","Node","type","NodeType","PseudoSelector","selectorName","slice","getPseudoElement","getPseudoClass","convertContents","kind","value","Array","isArray","map","c","supportsMarkdown","textDocument","contentFormat","indexOf","Markdown"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/services/cssHover.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as nodes from '../parser/cssNodes.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { selectorToMarkedString, simpleSelectorToMarkedString } from './selectorPrinting.js';\nimport { startsWith } from '../utils/strings.js';\nimport { Range, MarkupKind } from '../cssLanguageTypes.js';\nimport { isDefined } from '../utils/objects.js';\nvar CSSHover = /** @class */ (function () {\n    function CSSHover(clientCapabilities) {\n        this.clientCapabilities = clientCapabilities;\n    }\n    CSSHover.prototype.doHover = function (document, position, stylesheet) {\n        function getRange(node) {\n            return Range.create(document.positionAt(node.offset), document.positionAt(node.end));\n        }\n        var offset = document.offsetAt(position);\n        var nodepath = nodes.getNodePath(stylesheet, offset);\n        /**\n         * nodepath is top-down\n         * Build up the hover by appending inner node's information\n         */\n        var hover = null;\n        for (var i = 0; i < nodepath.length; i++) {\n            var node = nodepath[i];\n            if (node instanceof nodes.Selector) {\n                hover = {\n                    contents: selectorToMarkedString(node),\n                    range: getRange(node)\n                };\n                break;\n            }\n            if (node instanceof nodes.SimpleSelector) {\n                /**\n                 * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`\n                 */\n                if (!startsWith(node.getText(), '@')) {\n                    hover = {\n                        contents: simpleSelectorToMarkedString(node),\n                        range: getRange(node)\n                    };\n                }\n                break;\n            }\n            if (node instanceof nodes.Declaration) {\n                var propertyName = node.getFullPropertyName();\n                var entry = languageFacts.cssDataManager.getProperty(propertyName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n            if (node instanceof nodes.UnknownAtRule) {\n                var atRuleName = node.getText();\n                var entry = languageFacts.cssDataManager.getAtDirective(atRuleName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n            if (node instanceof nodes.Node && node.type === nodes.NodeType.PseudoSelector) {\n                var selectorName = node.getText();\n                var entry = selectorName.slice(0, 2) === '::'\n                    ? languageFacts.cssDataManager.getPseudoElement(selectorName)\n                    : languageFacts.cssDataManager.getPseudoClass(selectorName);\n                if (entry) {\n                    hover = {\n                        contents: languageFacts.getEntryDescription(entry, this.doesSupportMarkdown()),\n                        range: getRange(node)\n                    };\n                }\n                continue;\n            }\n        }\n        if (hover) {\n            hover.contents = this.convertContents(hover.contents);\n        }\n        return hover;\n    };\n    CSSHover.prototype.convertContents = function (contents) {\n        if (!this.doesSupportMarkdown()) {\n            if (typeof contents === 'string') {\n                return contents;\n            }\n            // MarkupContent\n            else if ('kind' in contents) {\n                return {\n                    kind: 'plaintext',\n                    value: contents.value\n                };\n            }\n            // MarkedString[]\n            else if (Array.isArray(contents)) {\n                return contents.map(function (c) {\n                    return typeof c === 'string' ? c : c.value;\n                });\n            }\n            // MarkedString\n            else {\n                return contents.value;\n            }\n        }\n        return contents;\n    };\n    CSSHover.prototype.doesSupportMarkdown = function () {\n        if (!isDefined(this.supportsMarkdown)) {\n            if (!isDefined(this.clientCapabilities)) {\n                this.supportsMarkdown = true;\n                return this.supportsMarkdown;\n            }\n            var hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;\n            this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n        }\n        return this.supportsMarkdown;\n    };\n    return CSSHover;\n}());\nexport { CSSHover };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}