{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport function startsWith(haystack, needle) {\n  if (haystack.length < needle.length) {\n    return false;\n  }\n  for (var i = 0; i < needle.length; i++) {\n    if (haystack[i] !== needle[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack, needle) {\n  var diff = haystack.length - needle.length;\n  if (diff > 0) {\n    return haystack.lastIndexOf(needle) === diff;\n  } else if (diff === 0) {\n    return haystack === needle;\n  } else {\n    return false;\n  }\n}\n/**\n * Computes the difference score for two strings. More similar strings have a higher score.\n * We use largest common subsequence dynamic programming approach but penalize in the end for length differences.\n * Strings that have a large length difference will get a bad default score 0.\n * Complexity - both time and space O(first.length * second.length)\n * Dynamic programming LCS computation http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n *\n * @param first a string\n * @param second a string\n */\nexport function difference(first, second, maxLenDelta) {\n  if (maxLenDelta === void 0) {\n    maxLenDelta = 4;\n  }\n  var lengthDifference = Math.abs(first.length - second.length);\n  // We only compute score if length of the currentWord and length of entry.name are similar.\n  if (lengthDifference > maxLenDelta) {\n    return 0;\n  }\n  // Initialize LCS (largest common subsequence) matrix.\n  var LCS = [];\n  var zeroArray = [];\n  var i, j;\n  for (i = 0; i < second.length + 1; ++i) {\n    zeroArray.push(0);\n  }\n  for (i = 0; i < first.length + 1; ++i) {\n    LCS.push(zeroArray);\n  }\n  for (i = 1; i < first.length + 1; ++i) {\n    for (j = 1; j < second.length + 1; ++j) {\n      if (first[i - 1] === second[j - 1]) {\n        LCS[i][j] = LCS[i - 1][j - 1] + 1;\n      } else {\n        LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);\n      }\n    }\n  }\n  return LCS[first.length][second.length] - Math.sqrt(lengthDifference);\n}\n/**\n * Limit of string length.\n */\nexport function getLimitedString(str, ellipsis) {\n  if (ellipsis === void 0) {\n    ellipsis = true;\n  }\n  if (!str) {\n    return '';\n  }\n  if (str.length < 140) {\n    return str;\n  }\n  return str.slice(0, 140) + (ellipsis ? \"\\u2026\" : '');\n}","map":{"version":3,"names":["startsWith","haystack","needle","length","i","endsWith","diff","lastIndexOf","difference","first","second","maxLenDelta","lengthDifference","Math","abs","LCS","zeroArray","j","push","max","sqrt","getLimitedString","str","ellipsis","slice"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/css/_deps/vscode-css-languageservice/utils/strings.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport function startsWith(haystack, needle) {\n    if (haystack.length < needle.length) {\n        return false;\n    }\n    for (var i = 0; i < needle.length; i++) {\n        if (haystack[i] !== needle[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Determines if haystack ends with needle.\n */\nexport function endsWith(haystack, needle) {\n    var diff = haystack.length - needle.length;\n    if (diff > 0) {\n        return haystack.lastIndexOf(needle) === diff;\n    }\n    else if (diff === 0) {\n        return haystack === needle;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * Computes the difference score for two strings. More similar strings have a higher score.\n * We use largest common subsequence dynamic programming approach but penalize in the end for length differences.\n * Strings that have a large length difference will get a bad default score 0.\n * Complexity - both time and space O(first.length * second.length)\n * Dynamic programming LCS computation http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n *\n * @param first a string\n * @param second a string\n */\nexport function difference(first, second, maxLenDelta) {\n    if (maxLenDelta === void 0) { maxLenDelta = 4; }\n    var lengthDifference = Math.abs(first.length - second.length);\n    // We only compute score if length of the currentWord and length of entry.name are similar.\n    if (lengthDifference > maxLenDelta) {\n        return 0;\n    }\n    // Initialize LCS (largest common subsequence) matrix.\n    var LCS = [];\n    var zeroArray = [];\n    var i, j;\n    for (i = 0; i < second.length + 1; ++i) {\n        zeroArray.push(0);\n    }\n    for (i = 0; i < first.length + 1; ++i) {\n        LCS.push(zeroArray);\n    }\n    for (i = 1; i < first.length + 1; ++i) {\n        for (j = 1; j < second.length + 1; ++j) {\n            if (first[i - 1] === second[j - 1]) {\n                LCS[i][j] = LCS[i - 1][j - 1] + 1;\n            }\n            else {\n                LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);\n            }\n        }\n    }\n    return LCS[first.length][second.length] - Math.sqrt(lengthDifference);\n}\n/**\n * Limit of string length.\n */\nexport function getLimitedString(str, ellipsis) {\n    if (ellipsis === void 0) { ellipsis = true; }\n    if (!str) {\n        return '';\n    }\n    if (str.length < 140) {\n        return str;\n    }\n    return str.slice(0, 140) + (ellipsis ? '\\u2026' : '');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}