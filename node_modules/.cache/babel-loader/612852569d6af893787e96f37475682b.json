{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\nvar KeybindingsRegistryImpl = /** @class */function () {\n  function KeybindingsRegistryImpl() {\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\r\n   * Take current platform into account and reduce to primary & secondary.\r\n   */\n  KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\n    if (OS === 1 /* Windows */) {\n      if (kb && kb.win) {\n        return kb.win;\n      }\n    } else if (OS === 2 /* Macintosh */) {\n      if (kb && kb.mac) {\n        return kb.mac;\n      }\n    } else {\n      if (kb && kb.linux) {\n        return kb.linux;\n      }\n    }\n    return kb;\n  };\n  KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\n    var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n    if (actualKb && actualKb.primary) {\n      var kk = createKeybinding(actualKb.primary, OS);\n      if (kk) {\n        this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\n      }\n    }\n    if (actualKb && Array.isArray(actualKb.secondary)) {\n      for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\n        var k = actualKb.secondary[i];\n        var kk = createKeybinding(k, OS);\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\n        }\n      }\n    }\n  };\n  KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\n    this.registerKeybindingRule(desc);\n    CommandsRegistry.registerCommand(desc);\n  };\n  KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\n    if (keyCode >= 21 /* KEY_0 */ && keyCode <= 30 /* KEY_9 */) {\n      return true;\n    }\n    if (keyCode >= 31 /* KEY_A */ && keyCode <= 56 /* KEY_Z */) {\n      return true;\n    }\n    return keyCode === 80 /* US_SEMICOLON */ || keyCode === 81 /* US_EQUAL */ || keyCode === 82 /* US_COMMA */ || keyCode === 83 /* US_MINUS */ || keyCode === 84 /* US_DOT */ || keyCode === 85 /* US_SLASH */ || keyCode === 86 /* US_BACKTICK */ || keyCode === 110 /* ABNT_C1 */ || keyCode === 111 /* ABNT_C2 */ || keyCode === 87 /* US_OPEN_SQUARE_BRACKET */ || keyCode === 88 /* US_BACKSLASH */ || keyCode === 89 /* US_CLOSE_SQUARE_BRACKET */ || keyCode === 90 /* US_QUOTE */ || keyCode === 91 /* OEM_8 */ || keyCode === 92 /* OEM_102 */;\n  };\n\n  KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\n    if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n      if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n        console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n      }\n    }\n  };\n  KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\n    if (OS === 1 /* Windows */) {\n      this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n    }\n    this._coreKeybindings.push({\n      keybinding: keybinding,\n      command: commandId,\n      commandArgs: commandArgs,\n      when: when,\n      weight1: weight1,\n      weight2: weight2\n    });\n    this._cachedMergedKeybindings = null;\n  };\n  KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\n    if (!this._cachedMergedKeybindings) {\n      this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n      this._cachedMergedKeybindings.sort(sorter);\n    }\n    return this._cachedMergedKeybindings.slice(0);\n  };\n  return KeybindingsRegistryImpl;\n}();\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl();\n// Define extension point ids\nexport var Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n  if (a.command < b.command) {\n    return -1;\n  }\n  if (a.command > b.command) {\n    return 1;\n  }\n  return a.weight2 - b.weight2;\n}","map":{"version":3,"names":["createKeybinding","OS","CommandsRegistry","Registry","KeybindingsRegistryImpl","_coreKeybindings","_extensionKeybindings","_cachedMergedKeybindings","bindToCurrentPlatform","kb","win","mac","linux","prototype","registerKeybindingRule","rule","actualKb","primary","kk","_registerDefaultKeybinding","id","args","weight","when","Array","isArray","secondary","i","len","length","k","registerCommandAndKeybindingRule","desc","registerCommand","_mightProduceChar","keyCode","_assertNoCtrlAlt","keybinding","commandId","ctrlKey","altKey","metaKey","console","warn","commandArgs","weight1","weight2","parts","push","command","getDefaultKeybindings","concat","sort","sorter","slice","KeybindingsRegistry","Extensions","EditorModes","add","a","b"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\r\nimport { OS } from '../../../base/common/platform.js';\r\nimport { CommandsRegistry } from '../../commands/common/commands.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nvar KeybindingsRegistryImpl = /** @class */ (function () {\r\n    function KeybindingsRegistryImpl() {\r\n        this._coreKeybindings = [];\r\n        this._extensionKeybindings = [];\r\n        this._cachedMergedKeybindings = null;\r\n    }\r\n    /**\r\n     * Take current platform into account and reduce to primary & secondary.\r\n     */\r\n    KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\r\n        if (OS === 1 /* Windows */) {\r\n            if (kb && kb.win) {\r\n                return kb.win;\r\n            }\r\n        }\r\n        else if (OS === 2 /* Macintosh */) {\r\n            if (kb && kb.mac) {\r\n                return kb.mac;\r\n            }\r\n        }\r\n        else {\r\n            if (kb && kb.linux) {\r\n                return kb.linux;\r\n            }\r\n        }\r\n        return kb;\r\n    };\r\n    KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\r\n        var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\r\n        if (actualKb && actualKb.primary) {\r\n            var kk = createKeybinding(actualKb.primary, OS);\r\n            if (kk) {\r\n                this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);\r\n            }\r\n        }\r\n        if (actualKb && Array.isArray(actualKb.secondary)) {\r\n            for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\r\n                var k = actualKb.secondary[i];\r\n                var kk = createKeybinding(k, OS);\r\n                if (kk) {\r\n                    this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\r\n        this.registerKeybindingRule(desc);\r\n        CommandsRegistry.registerCommand(desc);\r\n    };\r\n    KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\r\n        if (keyCode >= 21 /* KEY_0 */ && keyCode <= 30 /* KEY_9 */) {\r\n            return true;\r\n        }\r\n        if (keyCode >= 31 /* KEY_A */ && keyCode <= 56 /* KEY_Z */) {\r\n            return true;\r\n        }\r\n        return (keyCode === 80 /* US_SEMICOLON */\r\n            || keyCode === 81 /* US_EQUAL */\r\n            || keyCode === 82 /* US_COMMA */\r\n            || keyCode === 83 /* US_MINUS */\r\n            || keyCode === 84 /* US_DOT */\r\n            || keyCode === 85 /* US_SLASH */\r\n            || keyCode === 86 /* US_BACKTICK */\r\n            || keyCode === 110 /* ABNT_C1 */\r\n            || keyCode === 111 /* ABNT_C2 */\r\n            || keyCode === 87 /* US_OPEN_SQUARE_BRACKET */\r\n            || keyCode === 88 /* US_BACKSLASH */\r\n            || keyCode === 89 /* US_CLOSE_SQUARE_BRACKET */\r\n            || keyCode === 90 /* US_QUOTE */\r\n            || keyCode === 91 /* OEM_8 */\r\n            || keyCode === 92 /* OEM_102 */);\r\n    };\r\n    KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\r\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\r\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\r\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\r\n            }\r\n        }\r\n    };\r\n    KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\r\n        if (OS === 1 /* Windows */) {\r\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\r\n        }\r\n        this._coreKeybindings.push({\r\n            keybinding: keybinding,\r\n            command: commandId,\r\n            commandArgs: commandArgs,\r\n            when: when,\r\n            weight1: weight1,\r\n            weight2: weight2\r\n        });\r\n        this._cachedMergedKeybindings = null;\r\n    };\r\n    KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\r\n        if (!this._cachedMergedKeybindings) {\r\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\r\n            this._cachedMergedKeybindings.sort(sorter);\r\n        }\r\n        return this._cachedMergedKeybindings.slice(0);\r\n    };\r\n    return KeybindingsRegistryImpl;\r\n}());\r\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl();\r\n// Define extension point ids\r\nexport var Extensions = {\r\n    EditorModes: 'platform.keybindingsRegistry'\r\n};\r\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\r\nfunction sorter(a, b) {\r\n    if (a.weight1 !== b.weight1) {\r\n        return a.weight1 - b.weight1;\r\n    }\r\n    if (a.command < b.command) {\r\n        return -1;\r\n    }\r\n    if (a.command > b.command) {\r\n        return 1;\r\n    }\r\n    return a.weight2 - b.weight2;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}