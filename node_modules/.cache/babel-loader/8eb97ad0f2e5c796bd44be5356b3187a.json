{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar CharWidthRequest = /** @class */function () {\n  function CharWidthRequest(chr, type) {\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n  CharWidthRequest.prototype.fulfill = function (width) {\n    this.width = width;\n  };\n  return CharWidthRequest;\n}();\nexport { CharWidthRequest };\nvar DomCharWidthReader = /** @class */function () {\n  function DomCharWidthReader(bareFontInfo, requests) {\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n  DomCharWidthReader.prototype.read = function () {\n    // Create a test container with all these test elements\n    this._createDomElements();\n    // Add the container to the DOM\n    document.body.appendChild(this._container);\n    // Read character widths\n    this._readFromDomElements();\n    // Remove the container from the DOM\n    document.body.removeChild(this._container);\n    this._container = null;\n    this._testElements = null;\n  };\n  DomCharWidthReader.prototype._createDomElements = function () {\n    var container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    var regularDomNode = document.createElement('div');\n    regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(regularDomNode);\n    var boldDomNode = document.createElement('div');\n    boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    boldDomNode.style.fontWeight = 'bold';\n    boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(boldDomNode);\n    var italicDomNode = document.createElement('div');\n    italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    italicDomNode.style.fontStyle = 'italic';\n    container.appendChild(italicDomNode);\n    var testElements = [];\n    for (var _i = 0, _a = this._requests; _i < _a.length; _i++) {\n      var request = _a[_i];\n      var parent_1 = void 0;\n      if (request.type === 0 /* Regular */) {\n        parent_1 = regularDomNode;\n      }\n      if (request.type === 2 /* Bold */) {\n        parent_1 = boldDomNode;\n      }\n      if (request.type === 1 /* Italic */) {\n        parent_1 = italicDomNode;\n      }\n      parent_1.appendChild(document.createElement('br'));\n      var testElement = document.createElement('span');\n      DomCharWidthReader._render(testElement, request);\n      parent_1.appendChild(testElement);\n      testElements.push(testElement);\n    }\n    this._container = container;\n    this._testElements = testElements;\n  };\n  DomCharWidthReader._render = function (testElement, request) {\n    if (request.chr === ' ') {\n      var htmlString = '&#160;';\n      // Repeat character 256 (2^8) times\n      for (var i = 0; i < 8; i++) {\n        htmlString += htmlString;\n      }\n      testElement.innerHTML = htmlString;\n    } else {\n      var testString = request.chr;\n      // Repeat character 256 (2^8) times\n      for (var i = 0; i < 8; i++) {\n        testString += testString;\n      }\n      testElement.textContent = testString;\n    }\n  };\n  DomCharWidthReader.prototype._readFromDomElements = function () {\n    for (var i = 0, len = this._requests.length; i < len; i++) {\n      var request = this._requests[i];\n      var testElement = this._testElements[i];\n      request.fulfill(testElement.offsetWidth / 256);\n    }\n  };\n  return DomCharWidthReader;\n}();\nexport function readCharWidths(bareFontInfo, requests) {\n  var reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":{"version":3,"names":["CharWidthRequest","chr","type","width","prototype","fulfill","DomCharWidthReader","bareFontInfo","requests","_bareFontInfo","_requests","_container","_testElements","read","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","container","createElement","style","position","top","regularDomNode","fontFamily","getMassagedFontFamily","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","boldDomNode","italicDomNode","fontStyle","testElements","_i","_a","length","request","parent_1","testElement","_render","push","htmlString","i","innerHTML","testString","textContent","len","offsetWidth","readCharWidths","reader"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar CharWidthRequest = /** @class */ (function () {\r\n    function CharWidthRequest(chr, type) {\r\n        this.chr = chr;\r\n        this.type = type;\r\n        this.width = 0;\r\n    }\r\n    CharWidthRequest.prototype.fulfill = function (width) {\r\n        this.width = width;\r\n    };\r\n    return CharWidthRequest;\r\n}());\r\nexport { CharWidthRequest };\r\nvar DomCharWidthReader = /** @class */ (function () {\r\n    function DomCharWidthReader(bareFontInfo, requests) {\r\n        this._bareFontInfo = bareFontInfo;\r\n        this._requests = requests;\r\n        this._container = null;\r\n        this._testElements = null;\r\n    }\r\n    DomCharWidthReader.prototype.read = function () {\r\n        // Create a test container with all these test elements\r\n        this._createDomElements();\r\n        // Add the container to the DOM\r\n        document.body.appendChild(this._container);\r\n        // Read character widths\r\n        this._readFromDomElements();\r\n        // Remove the container from the DOM\r\n        document.body.removeChild(this._container);\r\n        this._container = null;\r\n        this._testElements = null;\r\n    };\r\n    DomCharWidthReader.prototype._createDomElements = function () {\r\n        var container = document.createElement('div');\r\n        container.style.position = 'absolute';\r\n        container.style.top = '-50000px';\r\n        container.style.width = '50000px';\r\n        var regularDomNode = document.createElement('div');\r\n        regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(regularDomNode);\r\n        var boldDomNode = document.createElement('div');\r\n        boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        boldDomNode.style.fontWeight = 'bold';\r\n        boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(boldDomNode);\r\n        var italicDomNode = document.createElement('div');\r\n        italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        italicDomNode.style.fontStyle = 'italic';\r\n        container.appendChild(italicDomNode);\r\n        var testElements = [];\r\n        for (var _i = 0, _a = this._requests; _i < _a.length; _i++) {\r\n            var request = _a[_i];\r\n            var parent_1 = void 0;\r\n            if (request.type === 0 /* Regular */) {\r\n                parent_1 = regularDomNode;\r\n            }\r\n            if (request.type === 2 /* Bold */) {\r\n                parent_1 = boldDomNode;\r\n            }\r\n            if (request.type === 1 /* Italic */) {\r\n                parent_1 = italicDomNode;\r\n            }\r\n            parent_1.appendChild(document.createElement('br'));\r\n            var testElement = document.createElement('span');\r\n            DomCharWidthReader._render(testElement, request);\r\n            parent_1.appendChild(testElement);\r\n            testElements.push(testElement);\r\n        }\r\n        this._container = container;\r\n        this._testElements = testElements;\r\n    };\r\n    DomCharWidthReader._render = function (testElement, request) {\r\n        if (request.chr === ' ') {\r\n            var htmlString = '&#160;';\r\n            // Repeat character 256 (2^8) times\r\n            for (var i = 0; i < 8; i++) {\r\n                htmlString += htmlString;\r\n            }\r\n            testElement.innerHTML = htmlString;\r\n        }\r\n        else {\r\n            var testString = request.chr;\r\n            // Repeat character 256 (2^8) times\r\n            for (var i = 0; i < 8; i++) {\r\n                testString += testString;\r\n            }\r\n            testElement.textContent = testString;\r\n        }\r\n    };\r\n    DomCharWidthReader.prototype._readFromDomElements = function () {\r\n        for (var i = 0, len = this._requests.length; i < len; i++) {\r\n            var request = this._requests[i];\r\n            var testElement = this._testElements[i];\r\n            request.fulfill(testElement.offsetWidth / 256);\r\n        }\r\n    };\r\n    return DomCharWidthReader;\r\n}());\r\nexport function readCharWidths(bareFontInfo, requests) {\r\n    var reader = new DomCharWidthReader(bareFontInfo, requests);\r\n    reader.read();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}