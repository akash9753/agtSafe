{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\nexport var conf = {\n  comments: {\n    lineComment: '#',\n    blockComment: ['\\'\\'\\'', '\\'\\'\\'']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),\n    action: {\n      indentAction: _monaco.languages.IndentAction.Indent\n    }\n  }],\n  folding: {\n    offSide: true,\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.python',\n  keywords: ['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'None', 'not', 'or', 'pass', 'print', 'raise', 'return', 'self', 'try', 'while', 'with', 'yield', 'int', 'float', 'long', 'complex', 'hex', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'file', 'filter', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'id', 'input', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'locals', 'list', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'reversed', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip', 'True', 'False', '__dict__', '__methods__', '__members__', '__class__', '__bases__', '__name__', '__mro__', '__subclasses__', '__init__', '__import__'],\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.bracket'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, [/[,:;]/, 'delimiter'], [/[{}\\[\\]()]/, '@brackets'], [/@[a-zA-Z]\\w*/, 'tag'], [/[a-zA-Z]\\w*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }]],\n    // Deal with white space, including single and multi-line comments\n    whitespace: [[/\\s+/, 'white'], [/(^#.*$)/, 'comment'], [/'''/, 'string', '@endDocString'], [/\"\"\"/, 'string', '@endDblDocString']],\n    endDocString: [[/[^']+/, 'string'], [/\\\\'/, 'string'], [/'''/, 'string', '@popall'], [/'/, 'string']],\n    endDblDocString: [[/[^\"]+/, 'string'], [/\\\\\"/, 'string'], [/\"\"\"/, 'string', '@popall'], [/\"/, 'string']],\n    // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n    numbers: [[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'], [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']],\n    // Recognize strings, including those broken across lines with \\ (but not without)\n    strings: [[/'$/, 'string.escape', '@popall'], [/'/, 'string.escape', '@stringBody'], [/\"$/, 'string.escape', '@popall'], [/\"/, 'string.escape', '@dblStringBody']],\n    stringBody: [[/[^\\\\']+$/, 'string', '@popall'], [/[^\\\\']+/, 'string'], [/\\\\./, 'string'], [/'/, 'string.escape', '@popall'], [/\\\\$/, 'string']],\n    dblStringBody: [[/[^\\\\\"]+$/, 'string', '@popall'], [/[^\\\\\"]+/, 'string'], [/\\\\./, 'string'], [/\"/, 'string.escape', '@popall'], [/\\\\$/, 'string']]\n  }\n};","map":{"version":3,"names":["_monaco","monaco","self","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","languages","IndentAction","Indent","folding","offSide","markers","start","end","language","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n        blockComment: ['\\'\\'\\'', '\\'\\'\\''],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),\r\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\r\n        }\r\n    ],\r\n    folding: {\r\n        offSide: true,\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.python',\r\n    keywords: [\r\n        'and',\r\n        'as',\r\n        'assert',\r\n        'break',\r\n        'class',\r\n        'continue',\r\n        'def',\r\n        'del',\r\n        'elif',\r\n        'else',\r\n        'except',\r\n        'exec',\r\n        'finally',\r\n        'for',\r\n        'from',\r\n        'global',\r\n        'if',\r\n        'import',\r\n        'in',\r\n        'is',\r\n        'lambda',\r\n        'None',\r\n        'not',\r\n        'or',\r\n        'pass',\r\n        'print',\r\n        'raise',\r\n        'return',\r\n        'self',\r\n        'try',\r\n        'while',\r\n        'with',\r\n        'yield',\r\n        'int',\r\n        'float',\r\n        'long',\r\n        'complex',\r\n        'hex',\r\n        'abs',\r\n        'all',\r\n        'any',\r\n        'apply',\r\n        'basestring',\r\n        'bin',\r\n        'bool',\r\n        'buffer',\r\n        'bytearray',\r\n        'callable',\r\n        'chr',\r\n        'classmethod',\r\n        'cmp',\r\n        'coerce',\r\n        'compile',\r\n        'complex',\r\n        'delattr',\r\n        'dict',\r\n        'dir',\r\n        'divmod',\r\n        'enumerate',\r\n        'eval',\r\n        'execfile',\r\n        'file',\r\n        'filter',\r\n        'format',\r\n        'frozenset',\r\n        'getattr',\r\n        'globals',\r\n        'hasattr',\r\n        'hash',\r\n        'help',\r\n        'id',\r\n        'input',\r\n        'intern',\r\n        'isinstance',\r\n        'issubclass',\r\n        'iter',\r\n        'len',\r\n        'locals',\r\n        'list',\r\n        'map',\r\n        'max',\r\n        'memoryview',\r\n        'min',\r\n        'next',\r\n        'object',\r\n        'oct',\r\n        'open',\r\n        'ord',\r\n        'pow',\r\n        'print',\r\n        'property',\r\n        'reversed',\r\n        'range',\r\n        'raw_input',\r\n        'reduce',\r\n        'reload',\r\n        'repr',\r\n        'reversed',\r\n        'round',\r\n        'set',\r\n        'setattr',\r\n        'slice',\r\n        'sorted',\r\n        'staticmethod',\r\n        'str',\r\n        'sum',\r\n        'super',\r\n        'tuple',\r\n        'type',\r\n        'unichr',\r\n        'unicode',\r\n        'vars',\r\n        'xrange',\r\n        'zip',\r\n        'True',\r\n        'False',\r\n        '__dict__',\r\n        '__methods__',\r\n        '__members__',\r\n        '__class__',\r\n        '__bases__',\r\n        '__name__',\r\n        '__mro__',\r\n        '__subclasses__',\r\n        '__init__',\r\n        '__import__'\r\n    ],\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@numbers' },\r\n            { include: '@strings' },\r\n            [/[,:;]/, 'delimiter'],\r\n            [/[{}\\[\\]()]/, '@brackets'],\r\n            [/@[a-zA-Z]\\w*/, 'tag'],\r\n            [/[a-zA-Z]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }]\r\n        ],\r\n        // Deal with white space, including single and multi-line comments\r\n        whitespace: [\r\n            [/\\s+/, 'white'],\r\n            [/(^#.*$)/, 'comment'],\r\n            [/'''/, 'string', '@endDocString'],\r\n            [/\"\"\"/, 'string', '@endDblDocString']\r\n        ],\r\n        endDocString: [\r\n            [/[^']+/, 'string'],\r\n            [/\\\\'/, 'string'],\r\n            [/'''/, 'string', '@popall'],\r\n            [/'/, 'string']\r\n        ],\r\n        endDblDocString: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\\\\\"/, 'string'],\r\n            [/\"\"\"/, 'string', '@popall'],\r\n            [/\"/, 'string']\r\n        ],\r\n        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\r\n        numbers: [\r\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\r\n            [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\r\n        ],\r\n        // Recognize strings, including those broken across lines with \\ (but not without)\r\n        strings: [\r\n            [/'$/, 'string.escape', '@popall'],\r\n            [/'/, 'string.escape', '@stringBody'],\r\n            [/\"$/, 'string.escape', '@popall'],\r\n            [/\"/, 'string.escape', '@dblStringBody']\r\n        ],\r\n        stringBody: [\r\n            [/[^\\\\']+$/, 'string', '@popall'],\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string'],\r\n            [/'/, 'string.escape', '@popall'],\r\n            [/\\\\$/, 'string']\r\n        ],\r\n        dblStringBody: [\r\n            [/[^\\\\\"]+$/, 'string', '@popall'],\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/\\\\./, 'string'],\r\n            [/\"/, 'string.escape', '@popall'],\r\n            [/\\\\$/, 'string']\r\n        ]\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}