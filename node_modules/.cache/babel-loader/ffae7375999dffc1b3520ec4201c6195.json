{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n  var initialIndentLevel;\n  var formatText;\n  var formatTextStart;\n  var rangeStart;\n  var rangeEnd;\n  if (range) {\n    rangeStart = range.offset;\n    rangeEnd = rangeStart + range.length;\n    formatTextStart = rangeStart;\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n      formatTextStart--;\n    }\n    var endOffset = rangeEnd;\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n      endOffset++;\n    }\n    formatText = documentText.substring(formatTextStart, endOffset);\n    initialIndentLevel = computeIndentLevel(formatText, options);\n  } else {\n    formatText = documentText;\n    initialIndentLevel = 0;\n    formatTextStart = 0;\n    rangeStart = 0;\n    rangeEnd = documentText.length;\n  }\n  var eol = getEOL(options, documentText);\n  var lineBreak = false;\n  var indentLevel = 0;\n  var indentValue;\n  if (options.insertSpaces) {\n    indentValue = repeat(' ', options.tabSize || 4);\n  } else {\n    indentValue = '\\t';\n  }\n  var scanner = createScanner(formatText, false);\n  var hasError = false;\n  function newLineAndIndent() {\n    return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n  }\n  function scanNext() {\n    var token = scanner.scan();\n    lineBreak = false;\n    while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n      lineBreak = lineBreak || token === 14 /* LineBreakTrivia */;\n      token = scanner.scan();\n    }\n    hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n    return token;\n  }\n  var editOperations = [];\n  function addEdit(text, startOffset, endOffset) {\n    if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n      editOperations.push({\n        offset: startOffset,\n        length: endOffset - startOffset,\n        content: text\n      });\n    }\n  }\n  var firstToken = scanNext();\n  if (firstToken !== 17 /* EOF */) {\n    var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n    var initialIndent = repeat(indentValue, initialIndentLevel);\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\n  }\n  while (firstToken !== 17 /* EOF */) {\n    var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n    var secondToken = scanNext();\n    var replaceContent = '';\n    while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n      // comments on the same line: keep them on the same line, but ignore them otherwise\n      var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n      addEdit(' ', firstTokenEnd, commentTokenStart);\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n      replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n      secondToken = scanNext();\n    }\n    if (secondToken === 2 /* CloseBraceToken */) {\n      if (firstToken !== 1 /* OpenBraceToken */) {\n        indentLevel--;\n        replaceContent = newLineAndIndent();\n      }\n    } else if (secondToken === 4 /* CloseBracketToken */) {\n      if (firstToken !== 3 /* OpenBracketToken */) {\n        indentLevel--;\n        replaceContent = newLineAndIndent();\n      }\n    } else {\n      switch (firstToken) {\n        case 3 /* OpenBracketToken */:\n        case 1 /* OpenBraceToken */:\n          indentLevel++;\n          replaceContent = newLineAndIndent();\n          break;\n        case 5 /* CommaToken */:\n        case 12 /* LineCommentTrivia */:\n          replaceContent = newLineAndIndent();\n          break;\n        case 13 /* BlockCommentTrivia */:\n          if (lineBreak) {\n            replaceContent = newLineAndIndent();\n          } else {\n            // symbol following comment on the same line: keep on same line, separate with ' '\n            replaceContent = ' ';\n          }\n          break;\n        case 6 /* ColonToken */:\n          replaceContent = ' ';\n          break;\n        case 10 /* StringLiteral */:\n          if (secondToken === 6 /* ColonToken */) {\n            replaceContent = '';\n            break;\n          }\n        // fall through\n        case 7 /* NullKeyword */:\n        case 8 /* TrueKeyword */:\n        case 9 /* FalseKeyword */:\n        case 11 /* NumericLiteral */:\n        case 2 /* CloseBraceToken */:\n        case 4 /* CloseBracketToken */:\n          if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n            replaceContent = ' ';\n          } else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n            hasError = true;\n          }\n          break;\n        case 16 /* Unknown */:\n          hasError = true;\n          break;\n      }\n      if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n        replaceContent = newLineAndIndent();\n      }\n    }\n    var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n    firstToken = secondToken;\n  }\n  return editOperations;\n}\nfunction repeat(s, count) {\n  var result = '';\n  for (var i = 0; i < count; i++) {\n    result += s;\n  }\n  return result;\n}\nfunction computeIndentLevel(content, options) {\n  var i = 0;\n  var nChars = 0;\n  var tabSize = options.tabSize || 4;\n  while (i < content.length) {\n    var ch = content.charAt(i);\n    if (ch === ' ') {\n      nChars++;\n    } else if (ch === '\\t') {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n    if (ch === '\\r') {\n      if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n        return '\\r\\n';\n      }\n      return '\\r';\n    } else if (ch === '\\n') {\n      return '\\n';\n    }\n  }\n  return options && options.eol || '\\n';\n}\nexport function isEOL(text, offset) {\n  return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}","map":{"version":3,"names":["createScanner","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","length","isEOL","endOffset","substring","computeIndentLevel","eol","getEOL","lineBreak","indentLevel","indentValue","insertSpaces","repeat","tabSize","scanner","hasError","newLineAndIndent","scanNext","token","scan","getTokenError","editOperations","addEdit","text","startOffset","push","content","firstToken","firstTokenStart","getTokenOffset","initialIndent","firstTokenEnd","getTokenLength","secondToken","replaceContent","commentTokenStart","secondTokenStart","s","count","result","i","nChars","ch","charAt","Math","floor","indexOf"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}