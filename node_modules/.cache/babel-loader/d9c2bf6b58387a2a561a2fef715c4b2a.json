{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n  return Array.isArray(what);\n}\nexport function isFuzzyAction(what) {\n  return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n  return typeof what === 'string';\n}\nexport function isIAction(what) {\n  return !isString(what);\n}\n// Small helper functions\n/**\r\n * Is a string null, undefined, or empty?\r\n */\nexport function empty(s) {\n  return s ? false : true;\n}\n/**\r\n * Puts a string to lower case if 'ignoreCase' is set.\r\n */\nexport function fixCase(lexer, str) {\n  return lexer.ignoreCase && str ? str.toLowerCase() : str;\n}\n/**\r\n * Ensures there are no bad characters in a CSS token class.\r\n */\nexport function sanitize(s) {\n  return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\r\n * Logs a message.\r\n */\nexport function log(lexer, msg) {\n  console.log(lexer.languageId + \": \" + msg);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n  return new Error(lexer.languageId + \": \" + msg);\n}\n// Helper functions for rule finding and substitution\n/**\r\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\r\n * \t\t$$  => $\r\n * \t\t$#  => id\r\n * \t\t$n  => matched entry n\r\n * \t\t@attr => contents of lexer[attr]\r\n *\r\n * See documentation for more info\r\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n  var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n  var stateMatches = null;\n  return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n    if (!empty(dollar)) {\n      return '$'; // $$\n    }\n\n    if (!empty(hash)) {\n      return fixCase(lexer, id); // default $#\n    }\n\n    if (!empty(n) && n < matches.length) {\n      return fixCase(lexer, matches[n]); // $n\n    }\n\n    if (!empty(attr) && lexer && typeof lexer[attr] === 'string') {\n      return lexer[attr]; //@attribute\n    }\n\n    if (stateMatches === null) {\n      // split state on demand\n      stateMatches = state.split('.');\n      stateMatches.unshift(state);\n    }\n    if (!empty(s) && s < stateMatches.length) {\n      return fixCase(lexer, stateMatches[s]); //$Sn\n    }\n\n    return '';\n  });\n}\n/**\r\n * Find the tokenizer rules for a specific state (i.e. next action)\r\n */\nexport function findRules(lexer, inState) {\n  var state = inState;\n  while (state && state.length > 0) {\n    var rules = lexer.tokenizer[state];\n    if (rules) {\n      return rules;\n    }\n    var idx = state.lastIndexOf('.');\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n  return null;\n}\n/**\r\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\r\n * This is used during compilation where we may know the defined states\r\n * but not yet whether the corresponding rules are correct.\r\n */\nexport function stateExists(lexer, inState) {\n  var state = inState;\n  while (state && state.length > 0) {\n    var exist = lexer.stateNames[state];\n    if (exist) {\n      return true;\n    }\n    var idx = state.lastIndexOf('.');\n    if (idx < 0) {\n      state = null; // no further parent\n    } else {\n      state = state.substr(0, idx);\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["isFuzzyActionArr","what","Array","isArray","isFuzzyAction","isString","isIAction","empty","s","fixCase","lexer","str","ignoreCase","toLowerCase","sanitize","replace","log","msg","console","languageId","createError","Error","substituteMatches","id","matches","state","re","stateMatches","full","sub","dollar","hash","n","attr","ofs","total","length","split","unshift","findRules","inState","rules","tokenizer","idx","lastIndexOf","substr","stateExists","exist","stateNames"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function isFuzzyActionArr(what) {\r\n    return (Array.isArray(what));\r\n}\r\nexport function isFuzzyAction(what) {\r\n    return !isFuzzyActionArr(what);\r\n}\r\nexport function isString(what) {\r\n    return (typeof what === 'string');\r\n}\r\nexport function isIAction(what) {\r\n    return !isString(what);\r\n}\r\n// Small helper functions\r\n/**\r\n * Is a string null, undefined, or empty?\r\n */\r\nexport function empty(s) {\r\n    return (s ? false : true);\r\n}\r\n/**\r\n * Puts a string to lower case if 'ignoreCase' is set.\r\n */\r\nexport function fixCase(lexer, str) {\r\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\r\n}\r\n/**\r\n * Ensures there are no bad characters in a CSS token class.\r\n */\r\nexport function sanitize(s) {\r\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\r\n}\r\n// Logging\r\n/**\r\n * Logs a message.\r\n */\r\nexport function log(lexer, msg) {\r\n    console.log(lexer.languageId + \": \" + msg);\r\n}\r\n// Throwing errors\r\nexport function createError(lexer, msg) {\r\n    return new Error(lexer.languageId + \": \" + msg);\r\n}\r\n// Helper functions for rule finding and substitution\r\n/**\r\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\r\n * \t\t$$  => $\r\n * \t\t$#  => id\r\n * \t\t$n  => matched entry n\r\n * \t\t@attr => contents of lexer[attr]\r\n *\r\n * See documentation for more info\r\n */\r\nexport function substituteMatches(lexer, str, id, matches, state) {\r\n    var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\r\n    var stateMatches = null;\r\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\r\n        if (!empty(dollar)) {\r\n            return '$'; // $$\r\n        }\r\n        if (!empty(hash)) {\r\n            return fixCase(lexer, id); // default $#\r\n        }\r\n        if (!empty(n) && n < matches.length) {\r\n            return fixCase(lexer, matches[n]); // $n\r\n        }\r\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\r\n            return lexer[attr]; //@attribute\r\n        }\r\n        if (stateMatches === null) { // split state on demand\r\n            stateMatches = state.split('.');\r\n            stateMatches.unshift(state);\r\n        }\r\n        if (!empty(s) && s < stateMatches.length) {\r\n            return fixCase(lexer, stateMatches[s]); //$Sn\r\n        }\r\n        return '';\r\n    });\r\n}\r\n/**\r\n * Find the tokenizer rules for a specific state (i.e. next action)\r\n */\r\nexport function findRules(lexer, inState) {\r\n    var state = inState;\r\n    while (state && state.length > 0) {\r\n        var rules = lexer.tokenizer[state];\r\n        if (rules) {\r\n            return rules;\r\n        }\r\n        var idx = state.lastIndexOf('.');\r\n        if (idx < 0) {\r\n            state = null; // no further parent\r\n        }\r\n        else {\r\n            state = state.substr(0, idx);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\r\n * This is used during compilation where we may know the defined states\r\n * but not yet whether the corresponding rules are correct.\r\n */\r\nexport function stateExists(lexer, inState) {\r\n    var state = inState;\r\n    while (state && state.length > 0) {\r\n        var exist = lexer.stateNames[state];\r\n        if (exist) {\r\n            return true;\r\n        }\r\n        var idx = state.lastIndexOf('.');\r\n        if (idx < 0) {\r\n            state = null; // no further parent\r\n        }\r\n        else {\r\n            state = state.substr(0, idx);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}