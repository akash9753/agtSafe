{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n/**\r\n * A position in the editor.\r\n */\nvar Position = /** @class */function () {\n  function Position(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\r\n   * Create a new position from this position.\r\n   *\r\n   * @param newLineNumber new line number\r\n   * @param newColumn new column\r\n   */\n  Position.prototype.with = function (newLineNumber, newColumn) {\n    if (newLineNumber === void 0) {\n      newLineNumber = this.lineNumber;\n    }\n    if (newColumn === void 0) {\n      newColumn = this.column;\n    }\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  };\n  /**\r\n   * Derive a new position from this position.\r\n   *\r\n   * @param deltaLineNumber line number delta\r\n   * @param deltaColumn column delta\r\n   */\n  Position.prototype.delta = function (deltaLineNumber, deltaColumn) {\n    if (deltaLineNumber === void 0) {\n      deltaLineNumber = 0;\n    }\n    if (deltaColumn === void 0) {\n      deltaColumn = 0;\n    }\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  };\n  /**\r\n   * Test if this position equals other position\r\n   */\n  Position.prototype.equals = function (other) {\n    return Position.equals(this, other);\n  };\n  /**\r\n   * Test if position `a` equals position `b`\r\n   */\n  Position.equals = function (a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  };\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n  Position.prototype.isBefore = function (other) {\n    return Position.isBefore(this, other);\n  };\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n  Position.isBefore = function (a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column < b.column;\n  };\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n  Position.prototype.isBeforeOrEqual = function (other) {\n    return Position.isBeforeOrEqual(this, other);\n  };\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n  Position.isBeforeOrEqual = function (a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column <= b.column;\n  };\n  /**\r\n   * A function that compares positions, useful for sorting\r\n   */\n  Position.compare = function (a, b) {\n    var aLineNumber = a.lineNumber | 0;\n    var bLineNumber = b.lineNumber | 0;\n    if (aLineNumber === bLineNumber) {\n      var aColumn = a.column | 0;\n      var bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n    return aLineNumber - bLineNumber;\n  };\n  /**\r\n   * Clone this position.\r\n   */\n  Position.prototype.clone = function () {\n    return new Position(this.lineNumber, this.column);\n  };\n  /**\r\n   * Convert to a human-readable representation.\r\n   */\n  Position.prototype.toString = function () {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  };\n  // ---\n  /**\r\n   * Create a `Position` from an `IPosition`.\r\n   */\n  Position.lift = function (pos) {\n    return new Position(pos.lineNumber, pos.column);\n  };\n  /**\r\n   * Test if `obj` is an `IPosition`.\r\n   */\n  Position.isIPosition = function (obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  };\n  return Position;\n}();\nexport { Position };","map":{"version":3,"names":["Position","lineNumber","column","prototype","with","newLineNumber","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","a","b","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","toString","lift","pos","isIPosition","obj"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nvar Position = /** @class */ (function () {\r\n    function Position(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    Position.prototype.with = function (newLineNumber, newColumn) {\r\n        if (newLineNumber === void 0) { newLineNumber = this.lineNumber; }\r\n        if (newColumn === void 0) { newColumn = this.column; }\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    Position.prototype.delta = function (deltaLineNumber, deltaColumn) {\r\n        if (deltaLineNumber === void 0) { deltaLineNumber = 0; }\r\n        if (deltaColumn === void 0) { deltaColumn = 0; }\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    };\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    Position.prototype.equals = function (other) {\r\n        return Position.equals(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    Position.equals = function (a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.prototype.isBefore = function (other) {\r\n        return Position.isBefore(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.isBefore = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.prototype.isBeforeOrEqual = function (other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.isBeforeOrEqual = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    };\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    Position.compare = function (a, b) {\r\n        var aLineNumber = a.lineNumber | 0;\r\n        var bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            var aColumn = a.column | 0;\r\n            var bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    };\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    Position.prototype.clone = function () {\r\n        return new Position(this.lineNumber, this.column);\r\n    };\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    Position.prototype.toString = function () {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    };\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    Position.lift = function (pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    Position.isIPosition = function (obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    };\r\n    return Position;\r\n}());\r\nexport { Position };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}