{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _element = require(\"./../../../helpers/dom/element\");\nvar _object = require(\"./../../../helpers/object\");\nvar _eventManager = _interopRequireDefault(require(\"./../../../eventManager\"));\nvar _calculator = require(\"./calculator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * @class Viewport\n */\nvar Viewport = /*#__PURE__*/\nfunction () {\n  /**\n   * @param wotInstance\n   */\n  function Viewport(wotInstance) {\n    var _this = this;\n    _classCallCheck(this, Viewport);\n    this.wot = wotInstance; // legacy support\n\n    this.instance = this.wot;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = new _eventManager.default(this.wot);\n    this.eventManager.addEventListener(this.wot.rootWindow, 'resize', function () {\n      _this.clientHeight = _this.getWorkspaceHeight();\n    });\n  }\n  /**\n   * @returns {number}\n   */\n\n  _createClass(Viewport, [{\n    key: \"getWorkspaceHeight\",\n    value: function getWorkspaceHeight() {\n      var currentDocument = this.wot.rootDocument;\n      var trimmingContainer = this.instance.wtOverlays.topOverlay.trimmingContainer;\n      var height = 0;\n      if (trimmingContainer === this.wot.rootWindow) {\n        height = currentDocument.documentElement.clientHeight;\n      } else {\n        var elemHeight = (0, _element.outerHeight)(trimmingContainer); // returns height without DIV scrollbar\n\n        height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n      }\n      return height;\n    }\n  }, {\n    key: \"getWorkspaceWidth\",\n    value: function getWorkspaceWidth() {\n      var wot = this.wot;\n      var rootDocument = wot.rootDocument,\n        rootWindow = wot.rootWindow;\n      var trimmingContainer = this.instance.wtOverlays.leftOverlay.trimmingContainer;\n      var docOffsetWidth = rootDocument.documentElement.offsetWidth;\n      var totalColumns = wot.getSetting('totalColumns');\n      var preventOverflow = wot.getSetting('preventOverflow');\n      var width;\n      var overflow;\n      if (preventOverflow) {\n        return (0, _element.outerWidth)(this.instance.wtTable.wtRootElement);\n      }\n      if (wot.getSetting('freezeOverlays')) {\n        width = Math.min(docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);\n      } else {\n        width = Math.min(this.getContainerFillWidth(), docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);\n      }\n      if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n        // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n        // otherwise continue below, which will allow stretching\n        // this is used in `scroll_window.html`\n        // TODO test me\n        return rootDocument.documentElement.clientWidth;\n      }\n      if (trimmingContainer !== rootWindow) {\n        overflow = (0, _element.getStyle)(this.instance.wtOverlays.leftOverlay.trimmingContainer, 'overflow', rootWindow);\n        if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n          // this is used in `scroll.html`\n          // TODO test me\n          return Math.max(width, trimmingContainer.clientWidth);\n        }\n      }\n      var stretchSetting = wot.getSetting('stretchH');\n      if (stretchSetting === 'none' || !stretchSetting) {\n        // if no stretching is used, return the maximum used workspace width\n        return Math.max(width, (0, _element.outerWidth)(this.instance.wtTable.TABLE));\n      } // if stretching is used, return the actual container width, so the columns can fit inside it\n\n      return width;\n    }\n    /**\n     * Checks if viewport has vertical scroll\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"hasVerticalScroll\",\n    value: function hasVerticalScroll() {\n      return this.getWorkspaceActualHeight() > this.getWorkspaceHeight();\n    }\n    /**\n     * Checks if viewport has horizontal scroll\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"hasHorizontalScroll\",\n    value: function hasHorizontalScroll() {\n      return this.getWorkspaceActualWidth() > this.getWorkspaceWidth();\n    }\n    /**\n     * @param from\n     * @param length\n     * @returns {Number}\n     */\n  }, {\n    key: \"sumColumnWidths\",\n    value: function sumColumnWidths(from, length) {\n      var wtTable = this.wot.wtTable;\n      var sum = 0;\n      var column = from;\n      while (column < length) {\n        sum += wtTable.getColumnWidth(column);\n        column += 1;\n      }\n      return sum;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getContainerFillWidth\",\n    value: function getContainerFillWidth() {\n      if (this.containerWidth) {\n        return this.containerWidth;\n      }\n      var mainContainer = this.instance.wtTable.holder;\n      var dummyElement = this.wot.rootDocument.createElement('div');\n      dummyElement.style.width = '100%';\n      dummyElement.style.height = '1px';\n      mainContainer.appendChild(dummyElement);\n      var fillWidth = dummyElement.offsetWidth;\n      this.containerWidth = fillWidth;\n      mainContainer.removeChild(dummyElement);\n      return fillWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getWorkspaceOffset\",\n    value: function getWorkspaceOffset() {\n      return (0, _element.offset)(this.wot.wtTable.TABLE);\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getWorkspaceActualHeight\",\n    value: function getWorkspaceActualHeight() {\n      return (0, _element.outerHeight)(this.wot.wtTable.TABLE);\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getWorkspaceActualWidth\",\n    value: function getWorkspaceActualWidth() {\n      var wtTable = this.wot.wtTable;\n      return (0, _element.outerWidth)(wtTable.TABLE) || (0, _element.outerWidth)(wtTable.TBODY) || (0, _element.outerWidth)(wtTable.THEAD); // IE8 reports 0 as <table> offsetWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getColumnHeaderHeight\",\n    value: function getColumnHeaderHeight() {\n      var columnHeaders = this.instance.getSetting('columnHeaders');\n      if (!columnHeaders.length) {\n        this.columnHeaderHeight = 0;\n      } else if (isNaN(this.columnHeaderHeight)) {\n        this.columnHeaderHeight = (0, _element.outerHeight)(this.wot.wtTable.THEAD);\n      }\n      return this.columnHeaderHeight;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getViewportHeight\",\n    value: function getViewportHeight() {\n      var containerHeight = this.getWorkspaceHeight();\n      if (containerHeight === Infinity) {\n        return containerHeight;\n      }\n      var columnHeaderHeight = this.getColumnHeaderHeight();\n      if (columnHeaderHeight > 0) {\n        containerHeight -= columnHeaderHeight;\n      }\n      return containerHeight;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getRowHeaderWidth\",\n    value: function getRowHeaderWidth() {\n      var rowHeadersWidthSetting = this.instance.getSetting('rowHeaderWidth');\n      var rowHeaders = this.instance.getSetting('rowHeaders');\n      if (rowHeadersWidthSetting) {\n        this.rowHeaderWidth = 0;\n        for (var i = 0, len = rowHeaders.length; i < len; i++) {\n          this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n        }\n      }\n      if (this.wot.cloneSource) {\n        return this.wot.cloneSource.wtViewport.getRowHeaderWidth();\n      }\n      if (isNaN(this.rowHeaderWidth)) {\n        if (rowHeaders.length) {\n          var TH = this.instance.wtTable.TABLE.querySelector('TH');\n          this.rowHeaderWidth = 0;\n          for (var _i = 0, _len = rowHeaders.length; _i < _len; _i++) {\n            if (TH) {\n              this.rowHeaderWidth += (0, _element.outerWidth)(TH);\n              TH = TH.nextSibling;\n            } else {\n              // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n              // TODO: proper fix\n              this.rowHeaderWidth += 50;\n            }\n          }\n        } else {\n          this.rowHeaderWidth = 0;\n        }\n      }\n      this.rowHeaderWidth = this.instance.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n      return this.rowHeaderWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n  }, {\n    key: \"getViewportWidth\",\n    value: function getViewportWidth() {\n      var containerWidth = this.getWorkspaceWidth();\n      if (containerWidth === Infinity) {\n        return containerWidth;\n      }\n      var rowHeaderWidth = this.getRowHeaderWidth();\n      if (rowHeaderWidth > 0) {\n        return containerWidth - rowHeaderWidth;\n      }\n      return containerWidth;\n    }\n    /**\n     * Creates:\n     *  - rowsRenderCalculator (before draw, to qualify rows for rendering)\n     *  - rowsVisibleCalculator (after draw, to measure which rows are actually visible)\n     *\n     * @returns {ViewportRowsCalculator}\n     */\n  }, {\n    key: \"createRowsCalculator\",\n    value: function createRowsCalculator() {\n      var calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _calculator.RENDER_TYPE;\n      var wot = this.wot;\n      var wtSettings = wot.wtSettings,\n        wtOverlays = wot.wtOverlays,\n        wtTable = wot.wtTable,\n        rootDocument = wot.rootDocument;\n      var height;\n      var scrollbarHeight;\n      var fixedRowsHeight;\n      this.rowHeaderWidth = NaN;\n      if (wtSettings.settings.renderAllRows && calculationType === _calculator.RENDER_TYPE) {\n        height = Infinity;\n      } else {\n        height = this.getViewportHeight();\n      }\n      var pos = wtOverlays.topOverlay.getScrollPosition() - wtOverlays.topOverlay.getTableParentOffset();\n      if (pos < 0) {\n        pos = 0;\n      }\n      var fixedRowsTop = wot.getSetting('fixedRowsTop');\n      var fixedRowsBottom = wot.getSetting('fixedRowsBottom');\n      var totalRows = wot.getSetting('totalRows');\n      if (fixedRowsTop) {\n        fixedRowsHeight = wtOverlays.topOverlay.sumCellSizes(0, fixedRowsTop);\n        pos += fixedRowsHeight;\n        height -= fixedRowsHeight;\n      }\n      if (fixedRowsBottom && wtOverlays.bottomOverlay.clone) {\n        fixedRowsHeight = wtOverlays.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n        height -= fixedRowsHeight;\n      }\n      if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n        scrollbarHeight = 0;\n      } else {\n        scrollbarHeight = (0, _element.getScrollbarWidth)(rootDocument);\n      }\n      return new _calculator.ViewportRowsCalculator({\n        viewportSize: height,\n        scrollOffset: pos,\n        totalItems: wot.getSetting('totalRows'),\n        itemSizeFn: function itemSizeFn(sourceRow) {\n          return wtTable.getRowHeight(sourceRow);\n        },\n        overrideFn: wtSettings.settings.viewportRowCalculatorOverride,\n        calculationType: calculationType,\n        scrollbarHeight: scrollbarHeight\n      });\n    }\n    /**\n     * Creates:\n     *  - columnsRenderCalculator (before draw, to qualify columns for rendering)\n     *  - columnsVisibleCalculator (after draw, to measure which columns are actually visible)\n     *\n     * @returns {ViewportRowsCalculator}\n     */\n  }, {\n    key: \"createColumnsCalculator\",\n    value: function createColumnsCalculator() {\n      var calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _calculator.RENDER_TYPE;\n      var wot = this.wot;\n      var wtSettings = wot.wtSettings,\n        wtOverlays = wot.wtOverlays,\n        wtTable = wot.wtTable,\n        rootDocument = wot.rootDocument;\n      var width = this.getViewportWidth();\n      var pos = wtOverlays.leftOverlay.getScrollPosition() - wtOverlays.leftOverlay.getTableParentOffset();\n      this.columnHeaderHeight = NaN;\n      if (pos < 0) {\n        pos = 0;\n      }\n      var fixedColumnsLeft = wot.getSetting('fixedColumnsLeft');\n      if (fixedColumnsLeft) {\n        var fixedColumnsWidth = wtOverlays.leftOverlay.sumCellSizes(0, fixedColumnsLeft);\n        pos += fixedColumnsWidth;\n        width -= fixedColumnsWidth;\n      }\n      if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n        width -= (0, _element.getScrollbarWidth)(rootDocument);\n      }\n      return new _calculator.ViewportColumnsCalculator({\n        viewportSize: width,\n        scrollOffset: pos,\n        totalItems: wot.getSetting('totalColumns'),\n        itemSizeFn: function itemSizeFn(sourceCol) {\n          return wot.wtTable.getColumnWidth(sourceCol);\n        },\n        overrideFn: wtSettings.settings.viewportColumnCalculatorOverride,\n        calculationType: calculationType,\n        stretchMode: wot.getSetting('stretchH'),\n        stretchingItemWidthFn: function stretchingItemWidthFn(stretchedWidth, column) {\n          return wot.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);\n        }\n      });\n    }\n    /**\n     * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n     * cols should be rendered)\n     *\n     * @param fastDraw {Boolean} If `true`, will try to avoid full redraw and only update the border positions.\n     *                           If `false` or `undefined`, will perform a full redraw\n     * @returns fastDraw {Boolean} The fastDraw value, possibly modified\n     */\n  }, {\n    key: \"createRenderCalculators\",\n    value: function createRenderCalculators() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var runFastDraw = fastDraw;\n      if (runFastDraw) {\n        var proposedRowsVisibleCalculator = this.createRowsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n        var proposedColumnsVisibleCalculator = this.createColumnsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n        if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {\n          runFastDraw = false;\n        }\n      }\n      if (!runFastDraw) {\n        this.rowsRenderCalculator = this.createRowsCalculator(_calculator.RENDER_TYPE);\n        this.columnsRenderCalculator = this.createColumnsCalculator(_calculator.RENDER_TYPE);\n      } // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n\n      this.rowsVisibleCalculator = null;\n      this.columnsVisibleCalculator = null;\n      return runFastDraw;\n    }\n    /**\n     * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n     * the actually fully visible rows and columns)\n     */\n  }, {\n    key: \"createVisibleCalculators\",\n    value: function createVisibleCalculators() {\n      this.rowsVisibleCalculator = this.createRowsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n      this.columnsVisibleCalculator = this.createColumnsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n    }\n    /**\n     * Returns information whether proposedRowsVisibleCalculator viewport\n     * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator)\n     *\n     * @param {Object} proposedRowsVisibleCalculator\n     * @returns {Boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n     *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed)\n     */\n  }, {\n    key: \"areAllProposedVisibleRowsAlreadyRendered\",\n    value: function areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n      if (!this.rowsVisibleCalculator) {\n        return false;\n      }\n      var startRow = proposedRowsVisibleCalculator.startRow,\n        endRow = proposedRowsVisibleCalculator.endRow;\n      var _this$rowsRenderCalcu = this.rowsRenderCalculator,\n        renderedStartRow = _this$rowsRenderCalcu.startRow,\n        renderedEndRow = _this$rowsRenderCalcu.endRow;\n      if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n        return false;\n      } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wot.getSetting('totalRows') - 1) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Returns information whether proposedColumnsVisibleCalculator viewport\n     * is contained inside column rendered in previous draw (cached in columnsRenderCalculator)\n     *\n     * @param {Object} proposedColumnsVisibleCalculator\n     * @returns {Boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n     *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed)\n     */\n  }, {\n    key: \"areAllProposedVisibleColumnsAlreadyRendered\",\n    value: function areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n      if (!this.columnsVisibleCalculator) {\n        return false;\n      }\n      var startColumn = proposedColumnsVisibleCalculator.startColumn,\n        endColumn = proposedColumnsVisibleCalculator.endColumn;\n      var _this$columnsRenderCa = this.columnsRenderCalculator,\n        renderedStartColumn = _this$columnsRenderCa.startColumn,\n        renderedEndColumn = _this$columnsRenderCa.endColumn;\n      if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n        return false;\n      } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wot.getSetting('totalColumns') - 1) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n     */\n  }, {\n    key: \"resetHasOversizedColumnHeadersMarked\",\n    value: function resetHasOversizedColumnHeadersMarked() {\n      (0, _object.objectEach)(this.hasOversizedColumnHeadersMarked, function (value, key, object) {\n        object[key] = void 0;\n      });\n    }\n  }]);\n  return Viewport;\n}();\nvar _default = Viewport;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","_element","require","_object","_eventManager","_interopRequireDefault","_calculator","obj","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Viewport","wotInstance","_this","wot","oversizedRows","oversizedColumnHeaders","hasOversizedColumnHeadersMarked","clientHeight","containerWidth","NaN","rowHeaderWidth","rowsVisibleCalculator","columnsVisibleCalculator","eventManager","addEventListener","rootWindow","getWorkspaceHeight","value","currentDocument","rootDocument","trimmingContainer","wtOverlays","topOverlay","height","documentElement","elemHeight","outerHeight","Infinity","getWorkspaceWidth","leftOverlay","docOffsetWidth","offsetWidth","totalColumns","getSetting","preventOverflow","width","overflow","outerWidth","wtTable","wtRootElement","Math","min","getWorkspaceOffset","left","getContainerFillWidth","sumColumnWidths","clientWidth","getStyle","max","stretchSetting","TABLE","hasVerticalScroll","getWorkspaceActualHeight","hasHorizontalScroll","getWorkspaceActualWidth","from","sum","column","getColumnWidth","mainContainer","holder","dummyElement","createElement","style","appendChild","fillWidth","removeChild","offset","TBODY","THEAD","getColumnHeaderHeight","columnHeaders","columnHeaderHeight","isNaN","getViewportHeight","containerHeight","getRowHeaderWidth","rowHeadersWidthSetting","rowHeaders","len","cloneSource","wtViewport","TH","querySelector","_i","_len","nextSibling","getViewportWidth","createRowsCalculator","calculationType","arguments","undefined","RENDER_TYPE","wtSettings","scrollbarHeight","fixedRowsHeight","settings","renderAllRows","pos","getScrollPosition","getTableParentOffset","fixedRowsTop","fixedRowsBottom","totalRows","sumCellSizes","bottomOverlay","clone","offsetHeight","getScrollbarWidth","ViewportRowsCalculator","viewportSize","scrollOffset","totalItems","itemSizeFn","sourceRow","getRowHeight","overrideFn","viewportRowCalculatorOverride","createColumnsCalculator","fixedColumnsLeft","fixedColumnsWidth","ViewportColumnsCalculator","sourceCol","viewportColumnCalculatorOverride","stretchMode","stretchingItemWidthFn","stretchedWidth","createRenderCalculators","fastDraw","runFastDraw","proposedRowsVisibleCalculator","FULLY_VISIBLE_TYPE","proposedColumnsVisibleCalculator","areAllProposedVisibleRowsAlreadyRendered","areAllProposedVisibleColumnsAlreadyRendered","rowsRenderCalculator","columnsRenderCalculator","createVisibleCalculators","startRow","endRow","_this$rowsRenderCalcu","renderedStartRow","renderedEndRow","startColumn","endColumn","_this$columnsRenderCa","renderedStartColumn","renderedEndColumn","resetHasOversizedColumnHeadersMarked","objectEach","object","_default"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/3rdparty/walkontable/src/viewport.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _element = require(\"./../../../helpers/dom/element\");\n\nvar _object = require(\"./../../../helpers/object\");\n\nvar _eventManager = _interopRequireDefault(require(\"./../../../eventManager\"));\n\nvar _calculator = require(\"./calculator\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @class Viewport\n */\nvar Viewport =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param wotInstance\n   */\n  function Viewport(wotInstance) {\n    var _this = this;\n\n    _classCallCheck(this, Viewport);\n\n    this.wot = wotInstance; // legacy support\n\n    this.instance = this.wot;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = new _eventManager.default(this.wot);\n    this.eventManager.addEventListener(this.wot.rootWindow, 'resize', function () {\n      _this.clientHeight = _this.getWorkspaceHeight();\n    });\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  _createClass(Viewport, [{\n    key: \"getWorkspaceHeight\",\n    value: function getWorkspaceHeight() {\n      var currentDocument = this.wot.rootDocument;\n      var trimmingContainer = this.instance.wtOverlays.topOverlay.trimmingContainer;\n      var height = 0;\n\n      if (trimmingContainer === this.wot.rootWindow) {\n        height = currentDocument.documentElement.clientHeight;\n      } else {\n        var elemHeight = (0, _element.outerHeight)(trimmingContainer); // returns height without DIV scrollbar\n\n        height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getWorkspaceWidth\",\n    value: function getWorkspaceWidth() {\n      var wot = this.wot;\n      var rootDocument = wot.rootDocument,\n          rootWindow = wot.rootWindow;\n      var trimmingContainer = this.instance.wtOverlays.leftOverlay.trimmingContainer;\n      var docOffsetWidth = rootDocument.documentElement.offsetWidth;\n      var totalColumns = wot.getSetting('totalColumns');\n      var preventOverflow = wot.getSetting('preventOverflow');\n      var width;\n      var overflow;\n\n      if (preventOverflow) {\n        return (0, _element.outerWidth)(this.instance.wtTable.wtRootElement);\n      }\n\n      if (wot.getSetting('freezeOverlays')) {\n        width = Math.min(docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);\n      } else {\n        width = Math.min(this.getContainerFillWidth(), docOffsetWidth - this.getWorkspaceOffset().left, docOffsetWidth);\n      }\n\n      if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n        // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n        // otherwise continue below, which will allow stretching\n        // this is used in `scroll_window.html`\n        // TODO test me\n        return rootDocument.documentElement.clientWidth;\n      }\n\n      if (trimmingContainer !== rootWindow) {\n        overflow = (0, _element.getStyle)(this.instance.wtOverlays.leftOverlay.trimmingContainer, 'overflow', rootWindow);\n\n        if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n          // this is used in `scroll.html`\n          // TODO test me\n          return Math.max(width, trimmingContainer.clientWidth);\n        }\n      }\n\n      var stretchSetting = wot.getSetting('stretchH');\n\n      if (stretchSetting === 'none' || !stretchSetting) {\n        // if no stretching is used, return the maximum used workspace width\n        return Math.max(width, (0, _element.outerWidth)(this.instance.wtTable.TABLE));\n      } // if stretching is used, return the actual container width, so the columns can fit inside it\n\n\n      return width;\n    }\n    /**\n     * Checks if viewport has vertical scroll\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"hasVerticalScroll\",\n    value: function hasVerticalScroll() {\n      return this.getWorkspaceActualHeight() > this.getWorkspaceHeight();\n    }\n    /**\n     * Checks if viewport has horizontal scroll\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"hasHorizontalScroll\",\n    value: function hasHorizontalScroll() {\n      return this.getWorkspaceActualWidth() > this.getWorkspaceWidth();\n    }\n    /**\n     * @param from\n     * @param length\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"sumColumnWidths\",\n    value: function sumColumnWidths(from, length) {\n      var wtTable = this.wot.wtTable;\n      var sum = 0;\n      var column = from;\n\n      while (column < length) {\n        sum += wtTable.getColumnWidth(column);\n        column += 1;\n      }\n\n      return sum;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getContainerFillWidth\",\n    value: function getContainerFillWidth() {\n      if (this.containerWidth) {\n        return this.containerWidth;\n      }\n\n      var mainContainer = this.instance.wtTable.holder;\n      var dummyElement = this.wot.rootDocument.createElement('div');\n      dummyElement.style.width = '100%';\n      dummyElement.style.height = '1px';\n      mainContainer.appendChild(dummyElement);\n      var fillWidth = dummyElement.offsetWidth;\n      this.containerWidth = fillWidth;\n      mainContainer.removeChild(dummyElement);\n      return fillWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getWorkspaceOffset\",\n    value: function getWorkspaceOffset() {\n      return (0, _element.offset)(this.wot.wtTable.TABLE);\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getWorkspaceActualHeight\",\n    value: function getWorkspaceActualHeight() {\n      return (0, _element.outerHeight)(this.wot.wtTable.TABLE);\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getWorkspaceActualWidth\",\n    value: function getWorkspaceActualWidth() {\n      var wtTable = this.wot.wtTable;\n      return (0, _element.outerWidth)(wtTable.TABLE) || (0, _element.outerWidth)(wtTable.TBODY) || (0, _element.outerWidth)(wtTable.THEAD); // IE8 reports 0 as <table> offsetWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getColumnHeaderHeight\",\n    value: function getColumnHeaderHeight() {\n      var columnHeaders = this.instance.getSetting('columnHeaders');\n\n      if (!columnHeaders.length) {\n        this.columnHeaderHeight = 0;\n      } else if (isNaN(this.columnHeaderHeight)) {\n        this.columnHeaderHeight = (0, _element.outerHeight)(this.wot.wtTable.THEAD);\n      }\n\n      return this.columnHeaderHeight;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getViewportHeight\",\n    value: function getViewportHeight() {\n      var containerHeight = this.getWorkspaceHeight();\n\n      if (containerHeight === Infinity) {\n        return containerHeight;\n      }\n\n      var columnHeaderHeight = this.getColumnHeaderHeight();\n\n      if (columnHeaderHeight > 0) {\n        containerHeight -= columnHeaderHeight;\n      }\n\n      return containerHeight;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getRowHeaderWidth\",\n    value: function getRowHeaderWidth() {\n      var rowHeadersWidthSetting = this.instance.getSetting('rowHeaderWidth');\n      var rowHeaders = this.instance.getSetting('rowHeaders');\n\n      if (rowHeadersWidthSetting) {\n        this.rowHeaderWidth = 0;\n\n        for (var i = 0, len = rowHeaders.length; i < len; i++) {\n          this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n        }\n      }\n\n      if (this.wot.cloneSource) {\n        return this.wot.cloneSource.wtViewport.getRowHeaderWidth();\n      }\n\n      if (isNaN(this.rowHeaderWidth)) {\n        if (rowHeaders.length) {\n          var TH = this.instance.wtTable.TABLE.querySelector('TH');\n          this.rowHeaderWidth = 0;\n\n          for (var _i = 0, _len = rowHeaders.length; _i < _len; _i++) {\n            if (TH) {\n              this.rowHeaderWidth += (0, _element.outerWidth)(TH);\n              TH = TH.nextSibling;\n            } else {\n              // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n              // TODO: proper fix\n              this.rowHeaderWidth += 50;\n            }\n          }\n        } else {\n          this.rowHeaderWidth = 0;\n        }\n      }\n\n      this.rowHeaderWidth = this.instance.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n      return this.rowHeaderWidth;\n    }\n    /**\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getViewportWidth\",\n    value: function getViewportWidth() {\n      var containerWidth = this.getWorkspaceWidth();\n\n      if (containerWidth === Infinity) {\n        return containerWidth;\n      }\n\n      var rowHeaderWidth = this.getRowHeaderWidth();\n\n      if (rowHeaderWidth > 0) {\n        return containerWidth - rowHeaderWidth;\n      }\n\n      return containerWidth;\n    }\n    /**\n     * Creates:\n     *  - rowsRenderCalculator (before draw, to qualify rows for rendering)\n     *  - rowsVisibleCalculator (after draw, to measure which rows are actually visible)\n     *\n     * @returns {ViewportRowsCalculator}\n     */\n\n  }, {\n    key: \"createRowsCalculator\",\n    value: function createRowsCalculator() {\n      var calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _calculator.RENDER_TYPE;\n      var wot = this.wot;\n      var wtSettings = wot.wtSettings,\n          wtOverlays = wot.wtOverlays,\n          wtTable = wot.wtTable,\n          rootDocument = wot.rootDocument;\n      var height;\n      var scrollbarHeight;\n      var fixedRowsHeight;\n      this.rowHeaderWidth = NaN;\n\n      if (wtSettings.settings.renderAllRows && calculationType === _calculator.RENDER_TYPE) {\n        height = Infinity;\n      } else {\n        height = this.getViewportHeight();\n      }\n\n      var pos = wtOverlays.topOverlay.getScrollPosition() - wtOverlays.topOverlay.getTableParentOffset();\n\n      if (pos < 0) {\n        pos = 0;\n      }\n\n      var fixedRowsTop = wot.getSetting('fixedRowsTop');\n      var fixedRowsBottom = wot.getSetting('fixedRowsBottom');\n      var totalRows = wot.getSetting('totalRows');\n\n      if (fixedRowsTop) {\n        fixedRowsHeight = wtOverlays.topOverlay.sumCellSizes(0, fixedRowsTop);\n        pos += fixedRowsHeight;\n        height -= fixedRowsHeight;\n      }\n\n      if (fixedRowsBottom && wtOverlays.bottomOverlay.clone) {\n        fixedRowsHeight = wtOverlays.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n        height -= fixedRowsHeight;\n      }\n\n      if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n        scrollbarHeight = 0;\n      } else {\n        scrollbarHeight = (0, _element.getScrollbarWidth)(rootDocument);\n      }\n\n      return new _calculator.ViewportRowsCalculator({\n        viewportSize: height,\n        scrollOffset: pos,\n        totalItems: wot.getSetting('totalRows'),\n        itemSizeFn: function itemSizeFn(sourceRow) {\n          return wtTable.getRowHeight(sourceRow);\n        },\n        overrideFn: wtSettings.settings.viewportRowCalculatorOverride,\n        calculationType: calculationType,\n        scrollbarHeight: scrollbarHeight\n      });\n    }\n    /**\n     * Creates:\n     *  - columnsRenderCalculator (before draw, to qualify columns for rendering)\n     *  - columnsVisibleCalculator (after draw, to measure which columns are actually visible)\n     *\n     * @returns {ViewportRowsCalculator}\n     */\n\n  }, {\n    key: \"createColumnsCalculator\",\n    value: function createColumnsCalculator() {\n      var calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _calculator.RENDER_TYPE;\n      var wot = this.wot;\n      var wtSettings = wot.wtSettings,\n          wtOverlays = wot.wtOverlays,\n          wtTable = wot.wtTable,\n          rootDocument = wot.rootDocument;\n      var width = this.getViewportWidth();\n      var pos = wtOverlays.leftOverlay.getScrollPosition() - wtOverlays.leftOverlay.getTableParentOffset();\n      this.columnHeaderHeight = NaN;\n\n      if (pos < 0) {\n        pos = 0;\n      }\n\n      var fixedColumnsLeft = wot.getSetting('fixedColumnsLeft');\n\n      if (fixedColumnsLeft) {\n        var fixedColumnsWidth = wtOverlays.leftOverlay.sumCellSizes(0, fixedColumnsLeft);\n        pos += fixedColumnsWidth;\n        width -= fixedColumnsWidth;\n      }\n\n      if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n        width -= (0, _element.getScrollbarWidth)(rootDocument);\n      }\n\n      return new _calculator.ViewportColumnsCalculator({\n        viewportSize: width,\n        scrollOffset: pos,\n        totalItems: wot.getSetting('totalColumns'),\n        itemSizeFn: function itemSizeFn(sourceCol) {\n          return wot.wtTable.getColumnWidth(sourceCol);\n        },\n        overrideFn: wtSettings.settings.viewportColumnCalculatorOverride,\n        calculationType: calculationType,\n        stretchMode: wot.getSetting('stretchH'),\n        stretchingItemWidthFn: function stretchingItemWidthFn(stretchedWidth, column) {\n          return wot.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);\n        }\n      });\n    }\n    /**\n     * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n     * cols should be rendered)\n     *\n     * @param fastDraw {Boolean} If `true`, will try to avoid full redraw and only update the border positions.\n     *                           If `false` or `undefined`, will perform a full redraw\n     * @returns fastDraw {Boolean} The fastDraw value, possibly modified\n     */\n\n  }, {\n    key: \"createRenderCalculators\",\n    value: function createRenderCalculators() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var runFastDraw = fastDraw;\n\n      if (runFastDraw) {\n        var proposedRowsVisibleCalculator = this.createRowsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n        var proposedColumnsVisibleCalculator = this.createColumnsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n\n        if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {\n          runFastDraw = false;\n        }\n      }\n\n      if (!runFastDraw) {\n        this.rowsRenderCalculator = this.createRowsCalculator(_calculator.RENDER_TYPE);\n        this.columnsRenderCalculator = this.createColumnsCalculator(_calculator.RENDER_TYPE);\n      } // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n\n\n      this.rowsVisibleCalculator = null;\n      this.columnsVisibleCalculator = null;\n      return runFastDraw;\n    }\n    /**\n     * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n     * the actually fully visible rows and columns)\n     */\n\n  }, {\n    key: \"createVisibleCalculators\",\n    value: function createVisibleCalculators() {\n      this.rowsVisibleCalculator = this.createRowsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n      this.columnsVisibleCalculator = this.createColumnsCalculator(_calculator.FULLY_VISIBLE_TYPE);\n    }\n    /**\n     * Returns information whether proposedRowsVisibleCalculator viewport\n     * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator)\n     *\n     * @param {Object} proposedRowsVisibleCalculator\n     * @returns {Boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n     *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed)\n     */\n\n  }, {\n    key: \"areAllProposedVisibleRowsAlreadyRendered\",\n    value: function areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n      if (!this.rowsVisibleCalculator) {\n        return false;\n      }\n\n      var startRow = proposedRowsVisibleCalculator.startRow,\n          endRow = proposedRowsVisibleCalculator.endRow;\n      var _this$rowsRenderCalcu = this.rowsRenderCalculator,\n          renderedStartRow = _this$rowsRenderCalcu.startRow,\n          renderedEndRow = _this$rowsRenderCalcu.endRow;\n\n      if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n        return false;\n      } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wot.getSetting('totalRows') - 1) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Returns information whether proposedColumnsVisibleCalculator viewport\n     * is contained inside column rendered in previous draw (cached in columnsRenderCalculator)\n     *\n     * @param {Object} proposedColumnsVisibleCalculator\n     * @returns {Boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n     *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed)\n     */\n\n  }, {\n    key: \"areAllProposedVisibleColumnsAlreadyRendered\",\n    value: function areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n      if (!this.columnsVisibleCalculator) {\n        return false;\n      }\n\n      var startColumn = proposedColumnsVisibleCalculator.startColumn,\n          endColumn = proposedColumnsVisibleCalculator.endColumn;\n      var _this$columnsRenderCa = this.columnsRenderCalculator,\n          renderedStartColumn = _this$columnsRenderCa.startColumn,\n          renderedEndColumn = _this$columnsRenderCa.endColumn;\n\n      if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n        return false;\n      } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wot.getSetting('totalColumns') - 1) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n     */\n\n  }, {\n    key: \"resetHasOversizedColumnHeadersMarked\",\n    value: function resetHasOversizedColumnHeadersMarked() {\n      (0, _object.objectEach)(this.hasOversizedColumnHeadersMarked, function (value, key, object) {\n        object[key] = void 0;\n      });\n    }\n  }]);\n\n  return Viewport;\n}();\n\nvar _default = Viewport;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}