{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nexport var CopyOptions = {\n  forceCopyWithSyntaxHighlighting: false\n};\n/**\r\n * Every time we write to the clipboard, we record a bit of extra metadata here.\r\n * Every time we read from the cipboard, if the text matches our last written text,\r\n * we can fetch the previous metadata.\r\n */\nvar InMemoryClipboardMetadataManager = /** @class */function () {\n  function InMemoryClipboardMetadataManager() {\n    this._lastState = null;\n  }\n  InMemoryClipboardMetadataManager.prototype.set = function (lastCopiedValue, data) {\n    this._lastState = {\n      lastCopiedValue: lastCopiedValue,\n      data: data\n    };\n  };\n  InMemoryClipboardMetadataManager.prototype.get = function (pastedText) {\n    if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n      // match!\n      return this._lastState.data;\n    }\n    this._lastState = null;\n    return null;\n  };\n  InMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\n  return InMemoryClipboardMetadataManager;\n}();\n/**\r\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\r\n *  - onCut\r\n *  - onPaste\r\n *  - onType\r\n *\r\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\r\n */\nvar TextAreaInput = /** @class */function (_super) {\n  __extends(TextAreaInput, _super);\n  function TextAreaInput(host, textArea) {\n    var _this = _super.call(this) || this;\n    _this.textArea = textArea;\n    _this._onFocus = _this._register(new Emitter());\n    _this.onFocus = _this._onFocus.event;\n    _this._onBlur = _this._register(new Emitter());\n    _this.onBlur = _this._onBlur.event;\n    _this._onKeyDown = _this._register(new Emitter());\n    _this.onKeyDown = _this._onKeyDown.event;\n    _this._onKeyUp = _this._register(new Emitter());\n    _this.onKeyUp = _this._onKeyUp.event;\n    _this._onCut = _this._register(new Emitter());\n    _this.onCut = _this._onCut.event;\n    _this._onPaste = _this._register(new Emitter());\n    _this.onPaste = _this._onPaste.event;\n    _this._onType = _this._register(new Emitter());\n    _this.onType = _this._onType.event;\n    _this._onCompositionStart = _this._register(new Emitter());\n    _this.onCompositionStart = _this._onCompositionStart.event;\n    _this._onCompositionUpdate = _this._register(new Emitter());\n    _this.onCompositionUpdate = _this._onCompositionUpdate.event;\n    _this._onCompositionEnd = _this._register(new Emitter());\n    _this.onCompositionEnd = _this._onCompositionEnd.event;\n    _this._onSelectionChangeRequest = _this._register(new Emitter());\n    _this.onSelectionChangeRequest = _this._onSelectionChangeRequest.event;\n    _this._host = host;\n    _this._textArea = _this._register(new TextAreaWrapper(textArea));\n    _this._asyncTriggerCut = _this._register(new RunOnceScheduler(function () {\n      return _this._onCut.fire();\n    }, 0));\n    _this._textAreaState = TextAreaState.EMPTY;\n    _this._selectionChangeListener = null;\n    _this.writeScreenReaderContent('ctor');\n    _this._hasFocus = false;\n    _this._isDoingComposition = false;\n    _this._nextCommand = 0 /* Type */;\n    _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keydown', function (e) {\n      if (_this._isDoingComposition && (e.keyCode === 109 /* KEY_IN_COMPOSITION */ || e.keyCode === 1 /* Backspace */)) {\n        // Stop propagation for keyDown events if the IME is processing key input\n        e.stopPropagation();\n      }\n      if (e.equals(9 /* Escape */)) {\n        // Prevent default always for `Esc`, otherwise it will generate a keypress\n        // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n        e.preventDefault();\n      }\n      _this._onKeyDown.fire(e);\n    }));\n    _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keyup', function (e) {\n      _this._onKeyUp.fire(e);\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionstart', function (e) {\n      if (_this._isDoingComposition) {\n        return;\n      }\n      _this._isDoingComposition = true;\n      // In IE we cannot set .value when handling 'compositionstart' because the entire composition will get canceled.\n      if (!browser.isEdgeOrIE) {\n        _this._setAndWriteTextAreaState('compositionstart', TextAreaState.EMPTY);\n      }\n      _this._onCompositionStart.fire();\n    }));\n    /**\r\n     * Deduce the typed input from a text area's value and the last observed state.\r\n     */\n    var deduceInputFromTextAreaValue = function deduceInputFromTextAreaValue(couldBeEmojiInput) {\n      var oldState = _this._textAreaState;\n      var newState = TextAreaState.readFromTextArea(_this._textArea);\n      return [newState, TextAreaState.deduceInput(oldState, newState, couldBeEmojiInput)];\n    };\n    /**\r\n     * Deduce the composition input from a string.\r\n     */\n    var deduceComposition = function deduceComposition(text) {\n      var oldState = _this._textAreaState;\n      var newState = TextAreaState.selectedText(text);\n      var typeInput = {\n        text: newState.value,\n        replaceCharCnt: oldState.selectionEnd - oldState.selectionStart\n      };\n      return [newState, typeInput];\n    };\n    var compositionDataInValid = function compositionDataInValid(locale) {\n      // https://github.com/Microsoft/monaco-editor/issues/339\n      // Multi-part Japanese compositions reset cursor in Edge/IE, Chinese and Korean IME don't have this issue.\n      // The reason that we can't use this path for all CJK IME is IE and Edge behave differently when handling Korean IME,\n      // which breaks this path of code.\n      if (browser.isEdgeOrIE && locale === 'ja') {\n        return true;\n      }\n      // https://github.com/Microsoft/monaco-editor/issues/545\n      // On IE11, we can't trust composition data when typing Chinese as IE11 doesn't emit correct\n      // events when users type numbers in IME.\n      // Chinese: zh-Hans-CN, zh-Hans-SG, zh-Hant-TW, zh-Hant-HK\n      if (browser.isIE && locale.indexOf('zh-Han') === 0) {\n        return true;\n      }\n      return false;\n    };\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionupdate', function (e) {\n      if (compositionDataInValid(e.locale)) {\n        var _a = deduceInputFromTextAreaValue( /*couldBeEmojiInput*/false),\n          newState_1 = _a[0],\n          typeInput_1 = _a[1];\n        _this._textAreaState = newState_1;\n        _this._onType.fire(typeInput_1);\n        _this._onCompositionUpdate.fire(e);\n        return;\n      }\n      var _b = deduceComposition(e.data),\n        newState = _b[0],\n        typeInput = _b[1];\n      _this._textAreaState = newState;\n      _this._onType.fire(typeInput);\n      _this._onCompositionUpdate.fire(e);\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'compositionend', function (e) {\n      // https://github.com/microsoft/monaco-editor/issues/1663\n      // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n      if (!_this._isDoingComposition) {\n        return;\n      }\n      if (compositionDataInValid(e.locale)) {\n        // https://github.com/Microsoft/monaco-editor/issues/339\n        var _a = deduceInputFromTextAreaValue( /*couldBeEmojiInput*/false),\n          newState = _a[0],\n          typeInput = _a[1];\n        _this._textAreaState = newState;\n        _this._onType.fire(typeInput);\n      } else {\n        var _b = deduceComposition(e.data),\n          newState = _b[0],\n          typeInput = _b[1];\n        _this._textAreaState = newState;\n        _this._onType.fire(typeInput);\n      }\n      // Due to isEdgeOrIE (where the textarea was not cleared initially) and isChrome (the textarea is not updated correctly when composition ends)\n      // we cannot assume the text at the end consists only of the composited text\n      if (browser.isEdgeOrIE || browser.isChrome) {\n        _this._textAreaState = TextAreaState.readFromTextArea(_this._textArea);\n      }\n      if (!_this._isDoingComposition) {\n        return;\n      }\n      _this._isDoingComposition = false;\n      _this._onCompositionEnd.fire();\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'input', function () {\n      // Pretend here we touched the text area, as the `input` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received input event');\n      if (_this._isDoingComposition) {\n        return;\n      }\n      var _a = deduceInputFromTextAreaValue( /*couldBeEmojiInput*/platform.isMacintosh),\n        newState = _a[0],\n        typeInput = _a[1];\n      if (typeInput.replaceCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\n        // Ignore invalid input but keep it around for next time\n        return;\n      }\n      _this._textAreaState = newState;\n      if (_this._nextCommand === 0 /* Type */) {\n        if (typeInput.text !== '') {\n          _this._onType.fire(typeInput);\n        }\n      } else {\n        if (typeInput.text !== '' || typeInput.replaceCharCnt !== 0) {\n          _this._firePaste(typeInput.text, null);\n        }\n        _this._nextCommand = 0 /* Type */;\n      }\n    }));\n    // --- Clipboard operations\n    _this._register(dom.addDisposableListener(textArea.domNode, 'cut', function (e) {\n      // Pretend here we touched the text area, as the `cut` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received cut event');\n      _this._ensureClipboardGetsEditorSelection(e);\n      _this._asyncTriggerCut.schedule();\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'copy', function (e) {\n      _this._ensureClipboardGetsEditorSelection(e);\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'paste', function (e) {\n      // Pretend here we touched the text area, as the `paste` event will most likely\n      // result in a `selectionchange` event which we want to ignore\n      _this._textArea.setIgnoreSelectionChangeTime('received paste event');\n      if (ClipboardEventUtils.canUseTextData(e)) {\n        var _a = ClipboardEventUtils.getTextData(e),\n          pastePlainText = _a[0],\n          metadata = _a[1];\n        if (pastePlainText !== '') {\n          _this._firePaste(pastePlainText, metadata);\n        }\n      } else {\n        if (_this._textArea.getSelectionStart() !== _this._textArea.getSelectionEnd()) {\n          // Clean up the textarea, to get a clean paste\n          _this._setAndWriteTextAreaState('paste', TextAreaState.EMPTY);\n        }\n        _this._nextCommand = 1 /* Paste */;\n      }\n    }));\n\n    _this._register(dom.addDisposableListener(textArea.domNode, 'focus', function () {\n      _this._setHasFocus(true);\n    }));\n    _this._register(dom.addDisposableListener(textArea.domNode, 'blur', function () {\n      _this._setHasFocus(false);\n    }));\n    return _this;\n  }\n  TextAreaInput.prototype._installSelectionChangeListener = function () {\n    // See https://github.com/Microsoft/vscode/issues/27216\n    // When using a Braille display, it is possible for users to reposition the\n    // system caret. This is reflected in Chrome as a `selectionchange` event.\n    //\n    // The `selectionchange` event appears to be emitted under numerous other circumstances,\n    // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n    // using a Braille display from all the other cases.\n    //\n    // The problems with the `selectionchange` event are:\n    //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n    //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n    //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n    //  * the event is emitted when tabbing into the textarea\n    //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n    //  * the event sometimes comes in bursts for a single logical textarea operation\n    var _this = this;\n    // `selectionchange` events often come multiple times for a single logical change\n    // so throttle multiple `selectionchange` events that burst in a short period of time.\n    var previousSelectionChangeEventTime = 0;\n    return dom.addDisposableListener(document, 'selectionchange', function (e) {\n      if (!_this._hasFocus) {\n        return;\n      }\n      if (_this._isDoingComposition) {\n        return;\n      }\n      if (!browser.isChrome || !platform.isWindows) {\n        // Support only for Chrome on Windows until testing happens on other browsers + OS configurations\n        return;\n      }\n      var now = Date.now();\n      var delta1 = now - previousSelectionChangeEventTime;\n      previousSelectionChangeEventTime = now;\n      if (delta1 < 5) {\n        // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n        // => ignore it\n        return;\n      }\n      var delta2 = now - _this._textArea.getIgnoreSelectionChangeTime();\n      _this._textArea.resetSelectionChangeTime();\n      if (delta2 < 100) {\n        // received a `selectionchange` event within 100ms since we touched the textarea\n        // => ignore it, since we caused it\n        return;\n      }\n      if (!_this._textAreaState.selectionStartPosition || !_this._textAreaState.selectionEndPosition) {\n        // Cannot correlate a position in the textarea with a position in the editor...\n        return;\n      }\n      var newValue = _this._textArea.getValue();\n      if (_this._textAreaState.value !== newValue) {\n        // Cannot correlate a position in the textarea with a position in the editor...\n        return;\n      }\n      var newSelectionStart = _this._textArea.getSelectionStart();\n      var newSelectionEnd = _this._textArea.getSelectionEnd();\n      if (_this._textAreaState.selectionStart === newSelectionStart && _this._textAreaState.selectionEnd === newSelectionEnd) {\n        // Nothing to do...\n        return;\n      }\n      var _newSelectionStartPosition = _this._textAreaState.deduceEditorPosition(newSelectionStart);\n      var newSelectionStartPosition = _this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n      var _newSelectionEndPosition = _this._textAreaState.deduceEditorPosition(newSelectionEnd);\n      var newSelectionEndPosition = _this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n      var newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n      _this._onSelectionChangeRequest.fire(newSelection);\n    });\n  };\n  TextAreaInput.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this._selectionChangeListener) {\n      this._selectionChangeListener.dispose();\n      this._selectionChangeListener = null;\n    }\n  };\n  TextAreaInput.prototype.focusTextArea = function () {\n    // Setting this._hasFocus and writing the screen reader content\n    // will result in a focus() and setSelectionRange() in the textarea\n    this._setHasFocus(true);\n    // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n    this.refreshFocusState();\n  };\n  TextAreaInput.prototype.isFocused = function () {\n    return this._hasFocus;\n  };\n  TextAreaInput.prototype.refreshFocusState = function () {\n    var shadowRoot = dom.getShadowRoot(this.textArea.domNode);\n    if (shadowRoot) {\n      this._setHasFocus(shadowRoot.activeElement === this.textArea.domNode);\n    } else if (dom.isInDOM(this.textArea.domNode)) {\n      this._setHasFocus(document.activeElement === this.textArea.domNode);\n    } else {\n      this._setHasFocus(false);\n    }\n  };\n  TextAreaInput.prototype._setHasFocus = function (newHasFocus) {\n    if (this._hasFocus === newHasFocus) {\n      // no change\n      return;\n    }\n    this._hasFocus = newHasFocus;\n    if (this._selectionChangeListener) {\n      this._selectionChangeListener.dispose();\n      this._selectionChangeListener = null;\n    }\n    if (this._hasFocus) {\n      this._selectionChangeListener = this._installSelectionChangeListener();\n    }\n    if (this._hasFocus) {\n      if (browser.isEdge) {\n        // Edge has a bug where setting the selection range while the focus event\n        // is dispatching doesn't work. To reproduce, \"tab into\" the editor.\n        this._setAndWriteTextAreaState('focusgain', TextAreaState.EMPTY);\n      } else {\n        this.writeScreenReaderContent('focusgain');\n      }\n    }\n    if (this._hasFocus) {\n      this._onFocus.fire();\n    } else {\n      this._onBlur.fire();\n    }\n  };\n  TextAreaInput.prototype._setAndWriteTextAreaState = function (reason, textAreaState) {\n    if (!this._hasFocus) {\n      textAreaState = textAreaState.collapseSelection();\n    }\n    textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n    this._textAreaState = textAreaState;\n  };\n  TextAreaInput.prototype.writeScreenReaderContent = function (reason) {\n    if (this._isDoingComposition) {\n      // Do not write to the text area when doing composition\n      return;\n    }\n    this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\n  };\n  TextAreaInput.prototype._ensureClipboardGetsEditorSelection = function (e) {\n    var dataToCopy = this._host.getDataToCopy(ClipboardEventUtils.canUseTextData(e) && BrowserFeatures.clipboard.richText);\n    var storedMetadata = {\n      version: 1,\n      isFromEmptySelection: dataToCopy.isFromEmptySelection,\n      multicursorText: dataToCopy.multicursorText,\n      mode: dataToCopy.mode\n    };\n    InMemoryClipboardMetadataManager.INSTANCE.set(\n    // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n    // Firefox pastes \"LINE\\n\", so let's work around this quirk\n    browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text, storedMetadata);\n    if (!ClipboardEventUtils.canUseTextData(e)) {\n      // Looks like an old browser. The strategy is to place the text\n      // we'd like to be copied to the clipboard in the textarea and select it.\n      this._setAndWriteTextAreaState('copy or cut', TextAreaState.selectedText(dataToCopy.text));\n      return;\n    }\n    ClipboardEventUtils.setTextData(e, dataToCopy.text, dataToCopy.html, storedMetadata);\n  };\n  TextAreaInput.prototype._firePaste = function (text, metadata) {\n    if (!metadata) {\n      // try the in-memory store\n      metadata = InMemoryClipboardMetadataManager.INSTANCE.get(text);\n    }\n    this._onPaste.fire({\n      text: text,\n      metadata: metadata\n    });\n  };\n  return TextAreaInput;\n}(Disposable);\nexport { TextAreaInput };\nvar ClipboardEventUtils = /** @class */function () {\n  function ClipboardEventUtils() {}\n  ClipboardEventUtils.canUseTextData = function (e) {\n    if (e.clipboardData) {\n      return true;\n    }\n    if (window.clipboardData) {\n      return true;\n    }\n    return false;\n  };\n  ClipboardEventUtils.getTextData = function (e) {\n    if (e.clipboardData) {\n      e.preventDefault();\n      var text = e.clipboardData.getData('text/plain');\n      var metadata = null;\n      var rawmetadata = e.clipboardData.getData('vscode-editor-data');\n      if (typeof rawmetadata === 'string') {\n        try {\n          metadata = JSON.parse(rawmetadata);\n          if (metadata.version !== 1) {\n            metadata = null;\n          }\n        } catch (err) {\n          // no problem!\n        }\n      }\n      return [text, metadata];\n    }\n    if (window.clipboardData) {\n      e.preventDefault();\n      var text = window.clipboardData.getData('Text');\n      return [text, null];\n    }\n    throw new Error('ClipboardEventUtils.getTextData: Cannot use text data!');\n  };\n  ClipboardEventUtils.setTextData = function (e, text, html, metadata) {\n    if (e.clipboardData) {\n      e.clipboardData.setData('text/plain', text);\n      if (typeof html === 'string') {\n        e.clipboardData.setData('text/html', html);\n      }\n      e.clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n      e.preventDefault();\n      return;\n    }\n    if (window.clipboardData) {\n      window.clipboardData.setData('Text', text);\n      e.preventDefault();\n      return;\n    }\n    throw new Error('ClipboardEventUtils.setTextData: Cannot use text data!');\n  };\n  return ClipboardEventUtils;\n}();\nvar TextAreaWrapper = /** @class */function (_super) {\n  __extends(TextAreaWrapper, _super);\n  function TextAreaWrapper(_textArea) {\n    var _this = _super.call(this) || this;\n    _this._actual = _textArea;\n    _this._ignoreSelectionChangeTime = 0;\n    return _this;\n  }\n  TextAreaWrapper.prototype.setIgnoreSelectionChangeTime = function (reason) {\n    this._ignoreSelectionChangeTime = Date.now();\n  };\n  TextAreaWrapper.prototype.getIgnoreSelectionChangeTime = function () {\n    return this._ignoreSelectionChangeTime;\n  };\n  TextAreaWrapper.prototype.resetSelectionChangeTime = function () {\n    this._ignoreSelectionChangeTime = 0;\n  };\n  TextAreaWrapper.prototype.getValue = function () {\n    // console.log('current value: ' + this._textArea.value);\n    return this._actual.domNode.value;\n  };\n  TextAreaWrapper.prototype.setValue = function (reason, value) {\n    var textArea = this._actual.domNode;\n    if (textArea.value === value) {\n      // No change\n      return;\n    }\n    // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n    this.setIgnoreSelectionChangeTime('setValue');\n    textArea.value = value;\n  };\n  TextAreaWrapper.prototype.getSelectionStart = function () {\n    return this._actual.domNode.selectionStart;\n  };\n  TextAreaWrapper.prototype.getSelectionEnd = function () {\n    return this._actual.domNode.selectionEnd;\n  };\n  TextAreaWrapper.prototype.setSelectionRange = function (reason, selectionStart, selectionEnd) {\n    var textArea = this._actual.domNode;\n    var activeElement = null;\n    var shadowRoot = dom.getShadowRoot(textArea);\n    if (shadowRoot) {\n      activeElement = shadowRoot.activeElement;\n    } else {\n      activeElement = document.activeElement;\n    }\n    var currentIsFocused = activeElement === textArea;\n    var currentSelectionStart = textArea.selectionStart;\n    var currentSelectionEnd = textArea.selectionEnd;\n    if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n      // No change\n      // Firefox iframe bug https://github.com/Microsoft/monaco-editor/issues/643#issuecomment-367871377\n      if (browser.isFirefox && window.parent !== window) {\n        textArea.focus();\n      }\n      return;\n    }\n    // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n    if (currentIsFocused) {\n      // No need to focus, only need to change the selection range\n      this.setIgnoreSelectionChangeTime('setSelectionRange');\n      textArea.setSelectionRange(selectionStart, selectionEnd);\n      if (browser.isFirefox && window.parent !== window) {\n        textArea.focus();\n      }\n      return;\n    }\n    // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n    // Here, we try to undo the browser's desperate reveal.\n    try {\n      var scrollState = dom.saveParentsScrollTop(textArea);\n      this.setIgnoreSelectionChangeTime('setSelectionRange');\n      textArea.focus();\n      textArea.setSelectionRange(selectionStart, selectionEnd);\n      dom.restoreParentsScrollTop(textArea, scrollState);\n    } catch (e) {\n      // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n    }\n  };\n  return TextAreaWrapper;\n}(Disposable);","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","browser","dom","RunOnceScheduler","Emitter","Disposable","platform","strings","TextAreaState","Selection","BrowserFeatures","CopyOptions","forceCopyWithSyntaxHighlighting","InMemoryClipboardMetadataManager","_lastState","set","lastCopiedValue","data","get","pastedText","INSTANCE","TextAreaInput","_super","host","textArea","_this","call","_onFocus","_register","onFocus","event","_onBlur","onBlur","_onKeyDown","onKeyDown","_onKeyUp","onKeyUp","_onCut","onCut","_onPaste","onPaste","_onType","onType","_onCompositionStart","onCompositionStart","_onCompositionUpdate","onCompositionUpdate","_onCompositionEnd","onCompositionEnd","_onSelectionChangeRequest","onSelectionChangeRequest","_host","_textArea","TextAreaWrapper","_asyncTriggerCut","fire","_textAreaState","EMPTY","_selectionChangeListener","writeScreenReaderContent","_hasFocus","_isDoingComposition","_nextCommand","addStandardDisposableListener","domNode","e","keyCode","stopPropagation","equals","preventDefault","addDisposableListener","isEdgeOrIE","_setAndWriteTextAreaState","deduceInputFromTextAreaValue","couldBeEmojiInput","oldState","newState","readFromTextArea","deduceInput","deduceComposition","text","selectedText","typeInput","value","replaceCharCnt","selectionEnd","selectionStart","compositionDataInValid","locale","isIE","indexOf","_a","newState_1","typeInput_1","_b","isChrome","setIgnoreSelectionChangeTime","isMacintosh","length","isHighSurrogate","charCodeAt","_firePaste","_ensureClipboardGetsEditorSelection","schedule","ClipboardEventUtils","canUseTextData","getTextData","pastePlainText","metadata","getSelectionStart","getSelectionEnd","_setHasFocus","_installSelectionChangeListener","previousSelectionChangeEventTime","document","isWindows","now","Date","delta1","delta2","getIgnoreSelectionChangeTime","resetSelectionChangeTime","selectionStartPosition","selectionEndPosition","newValue","getValue","newSelectionStart","newSelectionEnd","_newSelectionStartPosition","deduceEditorPosition","newSelectionStartPosition","deduceModelPosition","_newSelectionEndPosition","newSelectionEndPosition","newSelection","lineNumber","column","dispose","focusTextArea","refreshFocusState","isFocused","shadowRoot","getShadowRoot","activeElement","isInDOM","newHasFocus","isEdge","reason","textAreaState","collapseSelection","writeToTextArea","getScreenReaderContent","dataToCopy","getDataToCopy","clipboard","richText","storedMetadata","version","isFromEmptySelection","multicursorText","mode","isFirefox","replace","setTextData","html","clipboardData","window","getData","rawmetadata","JSON","parse","err","Error","setData","stringify","_actual","_ignoreSelectionChangeTime","setValue","setSelectionRange","currentIsFocused","currentSelectionStart","currentSelectionEnd","parent","focus","scrollState","saveParentsScrollTop","restoreParentsScrollTop"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { TextAreaState } from './textAreaState.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\r\nexport var CopyOptions = {\r\n    forceCopyWithSyntaxHighlighting: false\r\n};\r\n/**\r\n * Every time we write to the clipboard, we record a bit of extra metadata here.\r\n * Every time we read from the cipboard, if the text matches our last written text,\r\n * we can fetch the previous metadata.\r\n */\r\nvar InMemoryClipboardMetadataManager = /** @class */ (function () {\r\n    function InMemoryClipboardMetadataManager() {\r\n        this._lastState = null;\r\n    }\r\n    InMemoryClipboardMetadataManager.prototype.set = function (lastCopiedValue, data) {\r\n        this._lastState = { lastCopiedValue: lastCopiedValue, data: data };\r\n    };\r\n    InMemoryClipboardMetadataManager.prototype.get = function (pastedText) {\r\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\r\n            // match!\r\n            return this._lastState.data;\r\n        }\r\n        this._lastState = null;\r\n        return null;\r\n    };\r\n    InMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\r\n    return InMemoryClipboardMetadataManager;\r\n}());\r\n/**\r\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\r\n *  - onCut\r\n *  - onPaste\r\n *  - onType\r\n *\r\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\r\n */\r\nvar TextAreaInput = /** @class */ (function (_super) {\r\n    __extends(TextAreaInput, _super);\r\n    function TextAreaInput(host, textArea) {\r\n        var _this = _super.call(this) || this;\r\n        _this.textArea = textArea;\r\n        _this._onFocus = _this._register(new Emitter());\r\n        _this.onFocus = _this._onFocus.event;\r\n        _this._onBlur = _this._register(new Emitter());\r\n        _this.onBlur = _this._onBlur.event;\r\n        _this._onKeyDown = _this._register(new Emitter());\r\n        _this.onKeyDown = _this._onKeyDown.event;\r\n        _this._onKeyUp = _this._register(new Emitter());\r\n        _this.onKeyUp = _this._onKeyUp.event;\r\n        _this._onCut = _this._register(new Emitter());\r\n        _this.onCut = _this._onCut.event;\r\n        _this._onPaste = _this._register(new Emitter());\r\n        _this.onPaste = _this._onPaste.event;\r\n        _this._onType = _this._register(new Emitter());\r\n        _this.onType = _this._onType.event;\r\n        _this._onCompositionStart = _this._register(new Emitter());\r\n        _this.onCompositionStart = _this._onCompositionStart.event;\r\n        _this._onCompositionUpdate = _this._register(new Emitter());\r\n        _this.onCompositionUpdate = _this._onCompositionUpdate.event;\r\n        _this._onCompositionEnd = _this._register(new Emitter());\r\n        _this.onCompositionEnd = _this._onCompositionEnd.event;\r\n        _this._onSelectionChangeRequest = _this._register(new Emitter());\r\n        _this.onSelectionChangeRequest = _this._onSelectionChangeRequest.event;\r\n        _this._host = host;\r\n        _this._textArea = _this._register(new TextAreaWrapper(textArea));\r\n        _this._asyncTriggerCut = _this._register(new RunOnceScheduler(function () { return _this._onCut.fire(); }, 0));\r\n        _this._textAreaState = TextAreaState.EMPTY;\r\n        _this._selectionChangeListener = null;\r\n        _this.writeScreenReaderContent('ctor');\r\n        _this._hasFocus = false;\r\n        _this._isDoingComposition = false;\r\n        _this._nextCommand = 0 /* Type */;\r\n        _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keydown', function (e) {\r\n            if (_this._isDoingComposition &&\r\n                (e.keyCode === 109 /* KEY_IN_COMPOSITION */ || e.keyCode === 1 /* Backspace */)) {\r\n                // Stop propagation for keyDown events if the IME is processing key input\r\n                e.stopPropagation();\r\n            }\r\n            if (e.equals(9 /* Escape */)) {\r\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\r\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\r\n                e.preventDefault();\r\n            }\r\n            _this._onKeyDown.fire(e);\r\n        }));\r\n        _this._register(dom.addStandardDisposableListener(textArea.domNode, 'keyup', function (e) {\r\n            _this._onKeyUp.fire(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionstart', function (e) {\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            _this._isDoingComposition = true;\r\n            // In IE we cannot set .value when handling 'compositionstart' because the entire composition will get canceled.\r\n            if (!browser.isEdgeOrIE) {\r\n                _this._setAndWriteTextAreaState('compositionstart', TextAreaState.EMPTY);\r\n            }\r\n            _this._onCompositionStart.fire();\r\n        }));\r\n        /**\r\n         * Deduce the typed input from a text area's value and the last observed state.\r\n         */\r\n        var deduceInputFromTextAreaValue = function (couldBeEmojiInput) {\r\n            var oldState = _this._textAreaState;\r\n            var newState = TextAreaState.readFromTextArea(_this._textArea);\r\n            return [newState, TextAreaState.deduceInput(oldState, newState, couldBeEmojiInput)];\r\n        };\r\n        /**\r\n         * Deduce the composition input from a string.\r\n         */\r\n        var deduceComposition = function (text) {\r\n            var oldState = _this._textAreaState;\r\n            var newState = TextAreaState.selectedText(text);\r\n            var typeInput = {\r\n                text: newState.value,\r\n                replaceCharCnt: oldState.selectionEnd - oldState.selectionStart\r\n            };\r\n            return [newState, typeInput];\r\n        };\r\n        var compositionDataInValid = function (locale) {\r\n            // https://github.com/Microsoft/monaco-editor/issues/339\r\n            // Multi-part Japanese compositions reset cursor in Edge/IE, Chinese and Korean IME don't have this issue.\r\n            // The reason that we can't use this path for all CJK IME is IE and Edge behave differently when handling Korean IME,\r\n            // which breaks this path of code.\r\n            if (browser.isEdgeOrIE && locale === 'ja') {\r\n                return true;\r\n            }\r\n            // https://github.com/Microsoft/monaco-editor/issues/545\r\n            // On IE11, we can't trust composition data when typing Chinese as IE11 doesn't emit correct\r\n            // events when users type numbers in IME.\r\n            // Chinese: zh-Hans-CN, zh-Hans-SG, zh-Hant-TW, zh-Hant-HK\r\n            if (browser.isIE && locale.indexOf('zh-Han') === 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionupdate', function (e) {\r\n            if (compositionDataInValid(e.locale)) {\r\n                var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ false), newState_1 = _a[0], typeInput_1 = _a[1];\r\n                _this._textAreaState = newState_1;\r\n                _this._onType.fire(typeInput_1);\r\n                _this._onCompositionUpdate.fire(e);\r\n                return;\r\n            }\r\n            var _b = deduceComposition(e.data), newState = _b[0], typeInput = _b[1];\r\n            _this._textAreaState = newState;\r\n            _this._onType.fire(typeInput);\r\n            _this._onCompositionUpdate.fire(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'compositionend', function (e) {\r\n            // https://github.com/microsoft/monaco-editor/issues/1663\r\n            // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\r\n            if (!_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            if (compositionDataInValid(e.locale)) {\r\n                // https://github.com/Microsoft/monaco-editor/issues/339\r\n                var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ false), newState = _a[0], typeInput = _a[1];\r\n                _this._textAreaState = newState;\r\n                _this._onType.fire(typeInput);\r\n            }\r\n            else {\r\n                var _b = deduceComposition(e.data), newState = _b[0], typeInput = _b[1];\r\n                _this._textAreaState = newState;\r\n                _this._onType.fire(typeInput);\r\n            }\r\n            // Due to isEdgeOrIE (where the textarea was not cleared initially) and isChrome (the textarea is not updated correctly when composition ends)\r\n            // we cannot assume the text at the end consists only of the composited text\r\n            if (browser.isEdgeOrIE || browser.isChrome) {\r\n                _this._textAreaState = TextAreaState.readFromTextArea(_this._textArea);\r\n            }\r\n            if (!_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            _this._isDoingComposition = false;\r\n            _this._onCompositionEnd.fire();\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'input', function () {\r\n            // Pretend here we touched the text area, as the `input` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received input event');\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            var _a = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/ platform.isMacintosh), newState = _a[0], typeInput = _a[1];\r\n            if (typeInput.replaceCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\r\n                // Ignore invalid input but keep it around for next time\r\n                return;\r\n            }\r\n            _this._textAreaState = newState;\r\n            if (_this._nextCommand === 0 /* Type */) {\r\n                if (typeInput.text !== '') {\r\n                    _this._onType.fire(typeInput);\r\n                }\r\n            }\r\n            else {\r\n                if (typeInput.text !== '' || typeInput.replaceCharCnt !== 0) {\r\n                    _this._firePaste(typeInput.text, null);\r\n                }\r\n                _this._nextCommand = 0 /* Type */;\r\n            }\r\n        }));\r\n        // --- Clipboard operations\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'cut', function (e) {\r\n            // Pretend here we touched the text area, as the `cut` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received cut event');\r\n            _this._ensureClipboardGetsEditorSelection(e);\r\n            _this._asyncTriggerCut.schedule();\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'copy', function (e) {\r\n            _this._ensureClipboardGetsEditorSelection(e);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'paste', function (e) {\r\n            // Pretend here we touched the text area, as the `paste` event will most likely\r\n            // result in a `selectionchange` event which we want to ignore\r\n            _this._textArea.setIgnoreSelectionChangeTime('received paste event');\r\n            if (ClipboardEventUtils.canUseTextData(e)) {\r\n                var _a = ClipboardEventUtils.getTextData(e), pastePlainText = _a[0], metadata = _a[1];\r\n                if (pastePlainText !== '') {\r\n                    _this._firePaste(pastePlainText, metadata);\r\n                }\r\n            }\r\n            else {\r\n                if (_this._textArea.getSelectionStart() !== _this._textArea.getSelectionEnd()) {\r\n                    // Clean up the textarea, to get a clean paste\r\n                    _this._setAndWriteTextAreaState('paste', TextAreaState.EMPTY);\r\n                }\r\n                _this._nextCommand = 1 /* Paste */;\r\n            }\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'focus', function () {\r\n            _this._setHasFocus(true);\r\n        }));\r\n        _this._register(dom.addDisposableListener(textArea.domNode, 'blur', function () {\r\n            _this._setHasFocus(false);\r\n        }));\r\n        return _this;\r\n    }\r\n    TextAreaInput.prototype._installSelectionChangeListener = function () {\r\n        // See https://github.com/Microsoft/vscode/issues/27216\r\n        // When using a Braille display, it is possible for users to reposition the\r\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\r\n        //\r\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\r\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\r\n        // using a Braille display from all the other cases.\r\n        //\r\n        // The problems with the `selectionchange` event are:\r\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\r\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\r\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\r\n        //  * the event is emitted when tabbing into the textarea\r\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\r\n        //  * the event sometimes comes in bursts for a single logical textarea operation\r\n        var _this = this;\r\n        // `selectionchange` events often come multiple times for a single logical change\r\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\r\n        var previousSelectionChangeEventTime = 0;\r\n        return dom.addDisposableListener(document, 'selectionchange', function (e) {\r\n            if (!_this._hasFocus) {\r\n                return;\r\n            }\r\n            if (_this._isDoingComposition) {\r\n                return;\r\n            }\r\n            if (!browser.isChrome || !platform.isWindows) {\r\n                // Support only for Chrome on Windows until testing happens on other browsers + OS configurations\r\n                return;\r\n            }\r\n            var now = Date.now();\r\n            var delta1 = now - previousSelectionChangeEventTime;\r\n            previousSelectionChangeEventTime = now;\r\n            if (delta1 < 5) {\r\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\r\n                // => ignore it\r\n                return;\r\n            }\r\n            var delta2 = now - _this._textArea.getIgnoreSelectionChangeTime();\r\n            _this._textArea.resetSelectionChangeTime();\r\n            if (delta2 < 100) {\r\n                // received a `selectionchange` event within 100ms since we touched the textarea\r\n                // => ignore it, since we caused it\r\n                return;\r\n            }\r\n            if (!_this._textAreaState.selectionStartPosition || !_this._textAreaState.selectionEndPosition) {\r\n                // Cannot correlate a position in the textarea with a position in the editor...\r\n                return;\r\n            }\r\n            var newValue = _this._textArea.getValue();\r\n            if (_this._textAreaState.value !== newValue) {\r\n                // Cannot correlate a position in the textarea with a position in the editor...\r\n                return;\r\n            }\r\n            var newSelectionStart = _this._textArea.getSelectionStart();\r\n            var newSelectionEnd = _this._textArea.getSelectionEnd();\r\n            if (_this._textAreaState.selectionStart === newSelectionStart && _this._textAreaState.selectionEnd === newSelectionEnd) {\r\n                // Nothing to do...\r\n                return;\r\n            }\r\n            var _newSelectionStartPosition = _this._textAreaState.deduceEditorPosition(newSelectionStart);\r\n            var newSelectionStartPosition = _this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\r\n            var _newSelectionEndPosition = _this._textAreaState.deduceEditorPosition(newSelectionEnd);\r\n            var newSelectionEndPosition = _this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\r\n            var newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\r\n            _this._onSelectionChangeRequest.fire(newSelection);\r\n        });\r\n    };\r\n    TextAreaInput.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._selectionChangeListener) {\r\n            this._selectionChangeListener.dispose();\r\n            this._selectionChangeListener = null;\r\n        }\r\n    };\r\n    TextAreaInput.prototype.focusTextArea = function () {\r\n        // Setting this._hasFocus and writing the screen reader content\r\n        // will result in a focus() and setSelectionRange() in the textarea\r\n        this._setHasFocus(true);\r\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\r\n        this.refreshFocusState();\r\n    };\r\n    TextAreaInput.prototype.isFocused = function () {\r\n        return this._hasFocus;\r\n    };\r\n    TextAreaInput.prototype.refreshFocusState = function () {\r\n        var shadowRoot = dom.getShadowRoot(this.textArea.domNode);\r\n        if (shadowRoot) {\r\n            this._setHasFocus(shadowRoot.activeElement === this.textArea.domNode);\r\n        }\r\n        else if (dom.isInDOM(this.textArea.domNode)) {\r\n            this._setHasFocus(document.activeElement === this.textArea.domNode);\r\n        }\r\n        else {\r\n            this._setHasFocus(false);\r\n        }\r\n    };\r\n    TextAreaInput.prototype._setHasFocus = function (newHasFocus) {\r\n        if (this._hasFocus === newHasFocus) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._hasFocus = newHasFocus;\r\n        if (this._selectionChangeListener) {\r\n            this._selectionChangeListener.dispose();\r\n            this._selectionChangeListener = null;\r\n        }\r\n        if (this._hasFocus) {\r\n            this._selectionChangeListener = this._installSelectionChangeListener();\r\n        }\r\n        if (this._hasFocus) {\r\n            if (browser.isEdge) {\r\n                // Edge has a bug where setting the selection range while the focus event\r\n                // is dispatching doesn't work. To reproduce, \"tab into\" the editor.\r\n                this._setAndWriteTextAreaState('focusgain', TextAreaState.EMPTY);\r\n            }\r\n            else {\r\n                this.writeScreenReaderContent('focusgain');\r\n            }\r\n        }\r\n        if (this._hasFocus) {\r\n            this._onFocus.fire();\r\n        }\r\n        else {\r\n            this._onBlur.fire();\r\n        }\r\n    };\r\n    TextAreaInput.prototype._setAndWriteTextAreaState = function (reason, textAreaState) {\r\n        if (!this._hasFocus) {\r\n            textAreaState = textAreaState.collapseSelection();\r\n        }\r\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\r\n        this._textAreaState = textAreaState;\r\n    };\r\n    TextAreaInput.prototype.writeScreenReaderContent = function (reason) {\r\n        if (this._isDoingComposition) {\r\n            // Do not write to the text area when doing composition\r\n            return;\r\n        }\r\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\r\n    };\r\n    TextAreaInput.prototype._ensureClipboardGetsEditorSelection = function (e) {\r\n        var dataToCopy = this._host.getDataToCopy(ClipboardEventUtils.canUseTextData(e) && BrowserFeatures.clipboard.richText);\r\n        var storedMetadata = {\r\n            version: 1,\r\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\r\n            multicursorText: dataToCopy.multicursorText,\r\n            mode: dataToCopy.mode\r\n        };\r\n        InMemoryClipboardMetadataManager.INSTANCE.set(\r\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\r\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\r\n        (browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\r\n        if (!ClipboardEventUtils.canUseTextData(e)) {\r\n            // Looks like an old browser. The strategy is to place the text\r\n            // we'd like to be copied to the clipboard in the textarea and select it.\r\n            this._setAndWriteTextAreaState('copy or cut', TextAreaState.selectedText(dataToCopy.text));\r\n            return;\r\n        }\r\n        ClipboardEventUtils.setTextData(e, dataToCopy.text, dataToCopy.html, storedMetadata);\r\n    };\r\n    TextAreaInput.prototype._firePaste = function (text, metadata) {\r\n        if (!metadata) {\r\n            // try the in-memory store\r\n            metadata = InMemoryClipboardMetadataManager.INSTANCE.get(text);\r\n        }\r\n        this._onPaste.fire({\r\n            text: text,\r\n            metadata: metadata\r\n        });\r\n    };\r\n    return TextAreaInput;\r\n}(Disposable));\r\nexport { TextAreaInput };\r\nvar ClipboardEventUtils = /** @class */ (function () {\r\n    function ClipboardEventUtils() {\r\n    }\r\n    ClipboardEventUtils.canUseTextData = function (e) {\r\n        if (e.clipboardData) {\r\n            return true;\r\n        }\r\n        if (window.clipboardData) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ClipboardEventUtils.getTextData = function (e) {\r\n        if (e.clipboardData) {\r\n            e.preventDefault();\r\n            var text = e.clipboardData.getData('text/plain');\r\n            var metadata = null;\r\n            var rawmetadata = e.clipboardData.getData('vscode-editor-data');\r\n            if (typeof rawmetadata === 'string') {\r\n                try {\r\n                    metadata = JSON.parse(rawmetadata);\r\n                    if (metadata.version !== 1) {\r\n                        metadata = null;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // no problem!\r\n                }\r\n            }\r\n            return [text, metadata];\r\n        }\r\n        if (window.clipboardData) {\r\n            e.preventDefault();\r\n            var text = window.clipboardData.getData('Text');\r\n            return [text, null];\r\n        }\r\n        throw new Error('ClipboardEventUtils.getTextData: Cannot use text data!');\r\n    };\r\n    ClipboardEventUtils.setTextData = function (e, text, html, metadata) {\r\n        if (e.clipboardData) {\r\n            e.clipboardData.setData('text/plain', text);\r\n            if (typeof html === 'string') {\r\n                e.clipboardData.setData('text/html', html);\r\n            }\r\n            e.clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        if (window.clipboardData) {\r\n            window.clipboardData.setData('Text', text);\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        throw new Error('ClipboardEventUtils.setTextData: Cannot use text data!');\r\n    };\r\n    return ClipboardEventUtils;\r\n}());\r\nvar TextAreaWrapper = /** @class */ (function (_super) {\r\n    __extends(TextAreaWrapper, _super);\r\n    function TextAreaWrapper(_textArea) {\r\n        var _this = _super.call(this) || this;\r\n        _this._actual = _textArea;\r\n        _this._ignoreSelectionChangeTime = 0;\r\n        return _this;\r\n    }\r\n    TextAreaWrapper.prototype.setIgnoreSelectionChangeTime = function (reason) {\r\n        this._ignoreSelectionChangeTime = Date.now();\r\n    };\r\n    TextAreaWrapper.prototype.getIgnoreSelectionChangeTime = function () {\r\n        return this._ignoreSelectionChangeTime;\r\n    };\r\n    TextAreaWrapper.prototype.resetSelectionChangeTime = function () {\r\n        this._ignoreSelectionChangeTime = 0;\r\n    };\r\n    TextAreaWrapper.prototype.getValue = function () {\r\n        // console.log('current value: ' + this._textArea.value);\r\n        return this._actual.domNode.value;\r\n    };\r\n    TextAreaWrapper.prototype.setValue = function (reason, value) {\r\n        var textArea = this._actual.domNode;\r\n        if (textArea.value === value) {\r\n            // No change\r\n            return;\r\n        }\r\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\r\n        this.setIgnoreSelectionChangeTime('setValue');\r\n        textArea.value = value;\r\n    };\r\n    TextAreaWrapper.prototype.getSelectionStart = function () {\r\n        return this._actual.domNode.selectionStart;\r\n    };\r\n    TextAreaWrapper.prototype.getSelectionEnd = function () {\r\n        return this._actual.domNode.selectionEnd;\r\n    };\r\n    TextAreaWrapper.prototype.setSelectionRange = function (reason, selectionStart, selectionEnd) {\r\n        var textArea = this._actual.domNode;\r\n        var activeElement = null;\r\n        var shadowRoot = dom.getShadowRoot(textArea);\r\n        if (shadowRoot) {\r\n            activeElement = shadowRoot.activeElement;\r\n        }\r\n        else {\r\n            activeElement = document.activeElement;\r\n        }\r\n        var currentIsFocused = (activeElement === textArea);\r\n        var currentSelectionStart = textArea.selectionStart;\r\n        var currentSelectionEnd = textArea.selectionEnd;\r\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\r\n            // No change\r\n            // Firefox iframe bug https://github.com/Microsoft/monaco-editor/issues/643#issuecomment-367871377\r\n            if (browser.isFirefox && window.parent !== window) {\r\n                textArea.focus();\r\n            }\r\n            return;\r\n        }\r\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\r\n        if (currentIsFocused) {\r\n            // No need to focus, only need to change the selection range\r\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\r\n            textArea.setSelectionRange(selectionStart, selectionEnd);\r\n            if (browser.isFirefox && window.parent !== window) {\r\n                textArea.focus();\r\n            }\r\n            return;\r\n        }\r\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\r\n        // Here, we try to undo the browser's desperate reveal.\r\n        try {\r\n            var scrollState = dom.saveParentsScrollTop(textArea);\r\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\r\n            textArea.focus();\r\n            textArea.setSelectionRange(selectionStart, selectionEnd);\r\n            dom.restoreParentsScrollTop(textArea, scrollState);\r\n        }\r\n        catch (e) {\r\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\r\n        }\r\n    };\r\n    return TextAreaWrapper;\r\n}(Disposable));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}