{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nvar ViewController = /** @class */function () {\n  function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.outgoingEvents = outgoingEvents;\n    this.commandDelegate = commandDelegate;\n  }\n  ViewController.prototype._execMouseCommand = function (editorCommand, args) {\n    args.source = 'mouse';\n    this.commandDelegate.executeEditorCommand(editorCommand, args);\n  };\n  ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText, mode) {\n    this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText, mode);\n  };\n  ViewController.prototype.type = function (source, text) {\n    this.commandDelegate.type(source, text);\n  };\n  ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\n    this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\n  };\n  ViewController.prototype.compositionStart = function (source) {\n    this.commandDelegate.compositionStart(source);\n  };\n  ViewController.prototype.compositionEnd = function (source) {\n    this.commandDelegate.compositionEnd(source);\n  };\n  ViewController.prototype.cut = function (source) {\n    this.commandDelegate.cut(source);\n  };\n  ViewController.prototype.setSelection = function (source, modelSelection) {\n    this.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\n      source: source,\n      selection: modelSelection\n    });\n  };\n  ViewController.prototype._validateViewColumn = function (viewPosition) {\n    var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n    if (viewPosition.column < minColumn) {\n      return new Position(viewPosition.lineNumber, minColumn);\n    }\n    return viewPosition;\n  };\n  ViewController.prototype._hasMulticursorModifier = function (data) {\n    switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\n      case 'altKey':\n        return data.altKey;\n      case 'ctrlKey':\n        return data.ctrlKey;\n      case 'metaKey':\n        return data.metaKey;\n    }\n    return false;\n  };\n  ViewController.prototype._hasNonMulticursorModifier = function (data) {\n    switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\n      case 'altKey':\n        return data.ctrlKey || data.metaKey;\n      case 'ctrlKey':\n        return data.altKey || data.metaKey;\n      case 'metaKey':\n        return data.ctrlKey || data.altKey;\n    }\n    return false;\n  };\n  ViewController.prototype.dispatchMouse = function (data) {\n    var selectionClipboardIsOn = platform.isLinux && this.configuration.options.get(81 /* selectionClipboard */);\n    if (data.middleButton && !selectionClipboardIsOn) {\n      this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n    } else if (data.startedOnLineNumbers) {\n      // If the dragging started on the gutter, then have operations work on the entire line\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelect(data.position);\n        } else {\n          this._createCursor(data.position, true);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount >= 4) {\n      this._selectAll();\n    } else if (data.mouseDownCount === 3) {\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelectDrag(data.position);\n        } else {\n          this._lastCursorLineSelect(data.position);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount === 2) {\n      if (this._hasMulticursorModifier(data)) {\n        this._lastCursorWordSelect(data.position);\n      } else {\n        if (data.inSelectionMode) {\n          this._wordSelectDrag(data.position);\n        } else {\n          this._wordSelect(data.position);\n        }\n      }\n    } else {\n      if (this._hasMulticursorModifier(data)) {\n        if (!this._hasNonMulticursorModifier(data)) {\n          if (data.shiftKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            // Do multi-cursor operations only when purely alt is pressed\n            if (data.inSelectionMode) {\n              this._lastCursorMoveToSelect(data.position);\n            } else {\n              this._createCursor(data.position, false);\n            }\n          }\n        }\n      } else {\n        if (data.inSelectionMode) {\n          if (data.altKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            this._moveToSelect(data.position);\n          }\n        } else {\n          this.moveTo(data.position);\n        }\n      }\n    }\n  };\n  ViewController.prototype._usualArgs = function (viewPosition) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    return {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition\n    };\n  };\n  ViewController.prototype.moveTo = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._moveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._columnSelect = function (viewPosition, mouseColumn, doColumnSelect) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    this._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      mouseColumn: mouseColumn,\n      doColumnSelect: doColumnSelect\n    });\n  };\n  ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    this._execMouseCommand(CoreNavigationCommands.CreateCursor, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      wholeLine: wholeLine\n    });\n  };\n  ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._wordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._wordSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._lineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._lineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\n  };\n  ViewController.prototype._selectAll = function () {\n    this._execMouseCommand(CoreNavigationCommands.SelectAll, {});\n  };\n  // ----------------------\n  ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n  };\n  ViewController.prototype.emitKeyDown = function (e) {\n    this.outgoingEvents.emitKeyDown(e);\n  };\n  ViewController.prototype.emitKeyUp = function (e) {\n    this.outgoingEvents.emitKeyUp(e);\n  };\n  ViewController.prototype.emitContextMenu = function (e) {\n    this.outgoingEvents.emitContextMenu(e);\n  };\n  ViewController.prototype.emitMouseMove = function (e) {\n    this.outgoingEvents.emitMouseMove(e);\n  };\n  ViewController.prototype.emitMouseLeave = function (e) {\n    this.outgoingEvents.emitMouseLeave(e);\n  };\n  ViewController.prototype.emitMouseUp = function (e) {\n    this.outgoingEvents.emitMouseUp(e);\n  };\n  ViewController.prototype.emitMouseDown = function (e) {\n    this.outgoingEvents.emitMouseDown(e);\n  };\n  ViewController.prototype.emitMouseDrag = function (e) {\n    this.outgoingEvents.emitMouseDrag(e);\n  };\n  ViewController.prototype.emitMouseDrop = function (e) {\n    this.outgoingEvents.emitMouseDrop(e);\n  };\n  ViewController.prototype.emitMouseWheel = function (e) {\n    this.outgoingEvents.emitMouseWheel(e);\n  };\n  return ViewController;\n}();\nexport { ViewController };","map":{"version":3,"names":["CoreNavigationCommands","Position","platform","ViewController","configuration","viewModel","outgoingEvents","commandDelegate","prototype","_execMouseCommand","editorCommand","args","source","executeEditorCommand","paste","text","pasteOnNewLine","multicursorText","mode","type","replacePreviousChar","replaceCharCnt","compositionStart","compositionEnd","cut","setSelection","modelSelection","SetSelection","selection","_validateViewColumn","viewPosition","minColumn","getLineMinColumn","lineNumber","column","_hasMulticursorModifier","data","options","get","altKey","ctrlKey","metaKey","_hasNonMulticursorModifier","dispatchMouse","selectionClipboardIsOn","isLinux","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_usualArgs","_convertViewToModelPosition","MoveTo","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","emitKeyDown","e","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseWheel"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nvar ViewController = /** @class */ (function () {\r\n    function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\r\n        this.configuration = configuration;\r\n        this.viewModel = viewModel;\r\n        this.outgoingEvents = outgoingEvents;\r\n        this.commandDelegate = commandDelegate;\r\n    }\r\n    ViewController.prototype._execMouseCommand = function (editorCommand, args) {\r\n        args.source = 'mouse';\r\n        this.commandDelegate.executeEditorCommand(editorCommand, args);\r\n    };\r\n    ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText, mode) {\r\n        this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText, mode);\r\n    };\r\n    ViewController.prototype.type = function (source, text) {\r\n        this.commandDelegate.type(source, text);\r\n    };\r\n    ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\r\n        this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\r\n    };\r\n    ViewController.prototype.compositionStart = function (source) {\r\n        this.commandDelegate.compositionStart(source);\r\n    };\r\n    ViewController.prototype.compositionEnd = function (source) {\r\n        this.commandDelegate.compositionEnd(source);\r\n    };\r\n    ViewController.prototype.cut = function (source) {\r\n        this.commandDelegate.cut(source);\r\n    };\r\n    ViewController.prototype.setSelection = function (source, modelSelection) {\r\n        this.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\r\n            source: source,\r\n            selection: modelSelection\r\n        });\r\n    };\r\n    ViewController.prototype._validateViewColumn = function (viewPosition) {\r\n        var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\r\n        if (viewPosition.column < minColumn) {\r\n            return new Position(viewPosition.lineNumber, minColumn);\r\n        }\r\n        return viewPosition;\r\n    };\r\n    ViewController.prototype._hasMulticursorModifier = function (data) {\r\n        switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.altKey;\r\n            case 'ctrlKey':\r\n                return data.ctrlKey;\r\n            case 'metaKey':\r\n                return data.metaKey;\r\n        }\r\n        return false;\r\n    };\r\n    ViewController.prototype._hasNonMulticursorModifier = function (data) {\r\n        switch (this.configuration.options.get(59 /* multiCursorModifier */)) {\r\n            case 'altKey':\r\n                return data.ctrlKey || data.metaKey;\r\n            case 'ctrlKey':\r\n                return data.altKey || data.metaKey;\r\n            case 'metaKey':\r\n                return data.ctrlKey || data.altKey;\r\n        }\r\n        return false;\r\n    };\r\n    ViewController.prototype.dispatchMouse = function (data) {\r\n        var selectionClipboardIsOn = (platform.isLinux && this.configuration.options.get(81 /* selectionClipboard */));\r\n        if (data.middleButton && !selectionClipboardIsOn) {\r\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\r\n        }\r\n        else if (data.startedOnLineNumbers) {\r\n            // If the dragging started on the gutter, then have operations work on the entire line\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n                else {\r\n                    this._createCursor(data.position, true);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount >= 4) {\r\n            this._selectAll();\r\n        }\r\n        else if (data.mouseDownCount === 3) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (data.inSelectionMode) {\r\n                    this._lastCursorLineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lastCursorLineSelect(data.position);\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._lineSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._lineSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else if (data.mouseDownCount === 2) {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                this._lastCursorWordSelect(data.position);\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    this._wordSelectDrag(data.position);\r\n                }\r\n                else {\r\n                    this._wordSelect(data.position);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this._hasMulticursorModifier(data)) {\r\n                if (!this._hasNonMulticursorModifier(data)) {\r\n                    if (data.shiftKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        // Do multi-cursor operations only when purely alt is pressed\r\n                        if (data.inSelectionMode) {\r\n                            this._lastCursorMoveToSelect(data.position);\r\n                        }\r\n                        else {\r\n                            this._createCursor(data.position, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (data.inSelectionMode) {\r\n                    if (data.altKey) {\r\n                        this._columnSelect(data.position, data.mouseColumn, true);\r\n                    }\r\n                    else {\r\n                        this._moveToSelect(data.position);\r\n                    }\r\n                }\r\n                else {\r\n                    this.moveTo(data.position);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    ViewController.prototype._usualArgs = function (viewPosition) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        return {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition\r\n        };\r\n    };\r\n    ViewController.prototype.moveTo = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._moveToSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._columnSelect = function (viewPosition, mouseColumn, doColumnSelect) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        this._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            mouseColumn: mouseColumn,\r\n            doColumnSelect: doColumnSelect\r\n        });\r\n    };\r\n    ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\r\n        viewPosition = this._validateViewColumn(viewPosition);\r\n        this._execMouseCommand(CoreNavigationCommands.CreateCursor, {\r\n            position: this._convertViewToModelPosition(viewPosition),\r\n            viewPosition: viewPosition,\r\n            wholeLine: wholeLine\r\n        });\r\n    };\r\n    ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._wordSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._wordSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lineSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lineSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\r\n        this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\r\n    };\r\n    ViewController.prototype._selectAll = function () {\r\n        this._execMouseCommand(CoreNavigationCommands.SelectAll, {});\r\n    };\r\n    // ----------------------\r\n    ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\r\n    };\r\n    ViewController.prototype.emitKeyDown = function (e) {\r\n        this.outgoingEvents.emitKeyDown(e);\r\n    };\r\n    ViewController.prototype.emitKeyUp = function (e) {\r\n        this.outgoingEvents.emitKeyUp(e);\r\n    };\r\n    ViewController.prototype.emitContextMenu = function (e) {\r\n        this.outgoingEvents.emitContextMenu(e);\r\n    };\r\n    ViewController.prototype.emitMouseMove = function (e) {\r\n        this.outgoingEvents.emitMouseMove(e);\r\n    };\r\n    ViewController.prototype.emitMouseLeave = function (e) {\r\n        this.outgoingEvents.emitMouseLeave(e);\r\n    };\r\n    ViewController.prototype.emitMouseUp = function (e) {\r\n        this.outgoingEvents.emitMouseUp(e);\r\n    };\r\n    ViewController.prototype.emitMouseDown = function (e) {\r\n        this.outgoingEvents.emitMouseDown(e);\r\n    };\r\n    ViewController.prototype.emitMouseDrag = function (e) {\r\n        this.outgoingEvents.emitMouseDrag(e);\r\n    };\r\n    ViewController.prototype.emitMouseDrop = function (e) {\r\n        this.outgoingEvents.emitMouseDrop(e);\r\n    };\r\n    ViewController.prototype.emitMouseWheel = function (e) {\r\n        this.outgoingEvents.emitMouseWheel(e);\r\n    };\r\n    return ViewController;\r\n}());\r\nexport { ViewController };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}