{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"height\", \"width\", \"redraw\", \"datasetIdKey\", \"type\", \"data\", \"options\", \"plugins\", \"fallbackContent\", \"updateMode\"];\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nvar defaultDatasetIdKey = 'label';\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction setOptions(chart, nextOptions) {\n  Object.assign(chart.options, nextOptions);\n}\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n  var datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  var addedDatasets = [];\n  currentData.datasets = nextDatasets.map(function (nextDataset) {\n    // given the new set, find it's current match\n    var currentDataset = currentData.datasets.find(function (dataset) {\n      return dataset[datasetIdKey] === nextDataset[datasetIdKey];\n    });\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return _objectSpread({}, nextDataset);\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction cloneData(data) {\n  var datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  var nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\nfunction ChartComponent(param, ref) {\n  var _param$height = param.height,\n    height = _param$height === void 0 ? 150 : _param$height,\n    _param$width = param.width,\n    width = _param$width === void 0 ? 300 : _param$width,\n    _param$redraw = param.redraw,\n    redraw = _param$redraw === void 0 ? false : _param$redraw,\n    datasetIdKey = param.datasetIdKey,\n    type = param.type,\n    data = param.data,\n    options = param.options,\n    _param$plugins = param.plugins,\n    plugins = _param$plugins === void 0 ? [] : _param$plugins,\n    fallbackContent = param.fallbackContent,\n    updateMode = param.updateMode,\n    props = _objectWithoutProperties(param, _excluded);\n  var canvasRef = useRef(null);\n  var chartRef = useRef();\n  var renderChart = function renderChart() {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type: type,\n      data: cloneData(data, datasetIdKey),\n      options: options && _objectSpread({}, options),\n      plugins: plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n  var destroyChart = function destroyChart() {\n    reforwardRef(ref, null);\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n  useEffect(function () {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(function () {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(function () {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(function () {\n    if (!chartRef.current) return;\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(function () {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(function () {\n    renderChart();\n    return function () {\n      return destroyChart();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\nvar Chart = /*#__PURE__*/forwardRef(ChartComponent);\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Chart, Object.assign({}, props, {\n      ref: ref,\n      type: type\n    }));\n  });\n}\nvar Line = /* #__PURE__ */createTypedChart('line', LineController);\nvar Bar = /* #__PURE__ */createTypedChart('bar', BarController);\nvar Radar = /* #__PURE__ */createTypedChart('radar', RadarController);\nvar Doughnut = /* #__PURE__ */createTypedChart('doughnut', DoughnutController);\nvar PolarArea = /* #__PURE__ */createTypedChart('polarArea', PolarAreaController);\nvar Bubble = /* #__PURE__ */createTypedChart('bubble', BubbleController);\nvar Pie = /* #__PURE__ */createTypedChart('pie', PieController);\nvar Scatter = /* #__PURE__ */createTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"sources":["../src/utils.ts","../src/chart.tsx","../src/typedCharts.tsx"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","Object","assign","options","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","height","width","redraw","type","plugins","fallbackContent","updateMode","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"mappings":"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","sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  Object.assign(chart.options, nextOptions);\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}