{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n  if (ignoreTrivia === void 0) {\n    ignoreTrivia = false;\n  }\n  var len = text.length;\n  var pos = 0,\n    value = '',\n    tokenOffset = 0,\n    token = 16 /* Unknown */,\n    lineNumber = 0,\n    lineStartOffset = 0,\n    tokenLineStartOffset = 0,\n    prevTokenLineStartOffset = 0,\n    scanError = 0 /* None */;\n  function scanHexDigits(count, exact) {\n    var digits = 0;\n    var value = 0;\n    while (digits < count || !exact) {\n      var ch = text.charCodeAt(pos);\n      if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n        value = value * 16 + ch - 48 /* _0 */;\n      } else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n        value = value * 16 + ch - 65 /* A */ + 10;\n      } else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n        value = value * 16 + ch - 97 /* a */ + 10;\n      } else {\n        break;\n      }\n      pos++;\n      digits++;\n    }\n    if (digits < count) {\n      value = -1;\n    }\n    return value;\n  }\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = '';\n    tokenOffset = 0;\n    token = 16 /* Unknown */;\n    scanError = 0 /* None */;\n  }\n\n  function scanNumber() {\n    var start = pos;\n    if (text.charCodeAt(pos) === 48 /* _0 */) {\n      pos++;\n    } else {\n      pos++;\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n    if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n      pos++;\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n      } else {\n        scanError = 3 /* UnexpectedEndOfNumber */;\n        return text.substring(start, pos);\n      }\n    }\n    var end = pos;\n    if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n      pos++;\n      if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n        pos++;\n      }\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n        end = pos;\n      } else {\n        scanError = 3 /* UnexpectedEndOfNumber */;\n      }\n    }\n\n    return text.substring(start, end);\n  }\n  function scanString() {\n    var result = '',\n      start = pos;\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2 /* UnexpectedEndOfString */;\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === 34 /* doubleQuote */) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 /* backslash */) {\n        result += text.substring(start, pos);\n        pos++;\n        if (pos >= len) {\n          scanError = 2 /* UnexpectedEndOfString */;\n          break;\n        }\n        var ch2 = text.charCodeAt(pos++);\n        switch (ch2) {\n          case 34 /* doubleQuote */:\n            result += '\\\"';\n            break;\n          case 92 /* backslash */:\n            result += '\\\\';\n            break;\n          case 47 /* slash */:\n            result += '/';\n            break;\n          case 98 /* b */:\n            result += '\\b';\n            break;\n          case 102 /* f */:\n            result += '\\f';\n            break;\n          case 110 /* n */:\n            result += '\\n';\n            break;\n          case 114 /* r */:\n            result += '\\r';\n            break;\n          case 116 /* t */:\n            result += '\\t';\n            break;\n          case 117 /* u */:\n            var ch3 = scanHexDigits(4, true);\n            if (ch3 >= 0) {\n              result += String.fromCharCode(ch3);\n            } else {\n              scanError = 4 /* InvalidUnicode */;\n            }\n\n            break;\n          default:\n            scanError = 5 /* InvalidEscapeCharacter */;\n        }\n\n        start = pos;\n        continue;\n      }\n      if (ch >= 0 && ch <= 0x1f) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2 /* UnexpectedEndOfString */;\n          break;\n        } else {\n          scanError = 6 /* InvalidCharacter */;\n          // mark as error but continue with string\n        }\n      }\n\n      pos++;\n    }\n    return result;\n  }\n  function scanNext() {\n    value = '';\n    scanError = 0 /* None */;\n    tokenOffset = pos;\n    lineStartOffset = lineNumber;\n    prevTokenLineStartOffset = tokenLineStartOffset;\n    if (pos >= len) {\n      // at the end\n      tokenOffset = len;\n      return token = 17 /* EOF */;\n    }\n\n    var code = text.charCodeAt(pos);\n    // trivia: whitespace\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n      return token = 15 /* Trivia */;\n    }\n    // trivia: newlines\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n      if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n        pos++;\n        value += '\\n';\n      }\n      lineNumber++;\n      tokenLineStartOffset = pos;\n      return token = 14 /* LineBreakTrivia */;\n    }\n\n    switch (code) {\n      // tokens: []{}:,\n      case 123 /* openBrace */:\n        pos++;\n        return token = 1 /* OpenBraceToken */;\n      case 125 /* closeBrace */:\n        pos++;\n        return token = 2 /* CloseBraceToken */;\n      case 91 /* openBracket */:\n        pos++;\n        return token = 3 /* OpenBracketToken */;\n      case 93 /* closeBracket */:\n        pos++;\n        return token = 4 /* CloseBracketToken */;\n      case 58 /* colon */:\n        pos++;\n        return token = 6 /* ColonToken */;\n      case 44 /* comma */:\n        pos++;\n        return token = 5 /* CommaToken */;\n      // strings\n      case 34 /* doubleQuote */:\n        pos++;\n        value = scanString();\n        return token = 10 /* StringLiteral */;\n      // comments\n      case 47 /* slash */:\n        var start = pos - 1;\n        // Single-line comment\n        if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n          pos += 2;\n          while (pos < len) {\n            if (isLineBreak(text.charCodeAt(pos))) {\n              break;\n            }\n            pos++;\n          }\n          value = text.substring(start, pos);\n          return token = 12 /* LineCommentTrivia */;\n        }\n        // Multi-line comment\n        if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n          pos += 2;\n          var safeLength = len - 1; // For lookahead.\n          var commentClosed = false;\n          while (pos < safeLength) {\n            var ch = text.charCodeAt(pos);\n            if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n              pos += 2;\n              commentClosed = true;\n              break;\n            }\n            pos++;\n            if (isLineBreak(ch)) {\n              if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n              }\n              lineNumber++;\n              tokenLineStartOffset = pos;\n            }\n          }\n          if (!commentClosed) {\n            pos++;\n            scanError = 1 /* UnexpectedEndOfComment */;\n          }\n\n          value = text.substring(start, pos);\n          return token = 13 /* BlockCommentTrivia */;\n        }\n        // just a single slash\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16 /* Unknown */;\n      // numbers\n      case 45 /* minus */:\n        value += String.fromCharCode(code);\n        pos++;\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16 /* Unknown */;\n        }\n      // found a minus, followed by a number so\n      // we fall through to proceed with scanning\n      // numbers\n      case 48 /* _0 */:\n      case 49 /* _1 */:\n      case 50 /* _2 */:\n      case 51 /* _3 */:\n      case 52 /* _4 */:\n      case 53 /* _5 */:\n      case 54 /* _6 */:\n      case 55 /* _7 */:\n      case 56 /* _8 */:\n      case 57 /* _9 */:\n        value += scanNumber();\n        return token = 11 /* NumericLiteral */;\n      // literals and unknown symbols\n      default:\n        // is a literal? Read the full word.\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos);\n          // keywords: true, false, null\n          switch (value) {\n            case 'true':\n              return token = 8 /* TrueKeyword */;\n            case 'false':\n              return token = 9 /* FalseKeyword */;\n            case 'null':\n              return token = 7 /* NullKeyword */;\n          }\n\n          return token = 16 /* Unknown */;\n        }\n        // some\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16 /* Unknown */;\n    }\n  }\n\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n    switch (code) {\n      case 125 /* closeBrace */:\n      case 93 /* closeBracket */:\n      case 123 /* openBrace */:\n      case 91 /* openBracket */:\n      case 34 /* doubleQuote */:\n      case 58 /* colon */:\n      case 44 /* comma */:\n      case 47 /* slash */:\n        return false;\n    }\n    return true;\n  }\n  function scanNextNonTrivia() {\n    var result;\n    do {\n      result = scanNext();\n    } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n    return result;\n  }\n  return {\n    setPosition: setPosition,\n    getPosition: function getPosition() {\n      return pos;\n    },\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: function getToken() {\n      return token;\n    },\n    getTokenValue: function getTokenValue() {\n      return value;\n    },\n    getTokenOffset: function getTokenOffset() {\n      return tokenOffset;\n    },\n    getTokenLength: function getTokenLength() {\n      return pos - tokenOffset;\n    },\n    getTokenStartLine: function getTokenStartLine() {\n      return lineStartOffset;\n    },\n    getTokenStartCharacter: function getTokenStartCharacter() {\n      return tokenOffset - prevTokenLineStartOffset;\n    },\n    getTokenError: function getTokenError() {\n      return scanError;\n    }\n  };\n}\nfunction isWhiteSpace(ch) {\n  return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ || ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ || ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\n\nfunction isLineBreak(ch) {\n  return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\n\nfunction isDigit(ch) {\n  return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}","map":{"version":3,"names":["createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","setPosition","newPosition","scanNumber","start","isDigit","substring","end","scanString","result","ch2","ch3","String","fromCharCode","isLineBreak","scanNext","code","isWhiteSpace","safeLength","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}