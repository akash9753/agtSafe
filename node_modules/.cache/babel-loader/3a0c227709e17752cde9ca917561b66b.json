{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\nvar CharacterClassifier = /** @class */function () {\n  function CharacterClassifier(_defaultValue) {\n    var defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n  CharacterClassifier._createAsciiMap = function (defaultValue) {\n    var asciiMap = new Uint8Array(256);\n    for (var i = 0; i < 256; i++) {\n      asciiMap[i] = defaultValue;\n    }\n    return asciiMap;\n  };\n  CharacterClassifier.prototype.set = function (charCode, _value) {\n    var value = toUint8(_value);\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  };\n  CharacterClassifier.prototype.get = function (charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  };\n  return CharacterClassifier;\n}();\nexport { CharacterClassifier };\nvar CharacterSet = /** @class */function () {\n  function CharacterSet() {\n    this._actual = new CharacterClassifier(0 /* False */);\n  }\n\n  CharacterSet.prototype.add = function (charCode) {\n    this._actual.set(charCode, 1 /* True */);\n  };\n\n  CharacterSet.prototype.has = function (charCode) {\n    return this._actual.get(charCode) === 1 /* True */;\n  };\n\n  return CharacterSet;\n}();\nexport { CharacterSet };","map":{"version":3,"names":["toUint8","CharacterClassifier","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","i","prototype","set","charCode","_value","value","get","CharacterSet","_actual","add","has"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint8 } from '../../../base/common/uint.js';\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nvar CharacterClassifier = /** @class */ (function () {\r\n    function CharacterClassifier(_defaultValue) {\r\n        var defaultValue = toUint8(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    CharacterClassifier._createAsciiMap = function (defaultValue) {\r\n        var asciiMap = new Uint8Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            asciiMap[i] = defaultValue;\r\n        }\r\n        return asciiMap;\r\n    };\r\n    CharacterClassifier.prototype.set = function (charCode, _value) {\r\n        var value = toUint8(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    };\r\n    CharacterClassifier.prototype.get = function (charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    };\r\n    return CharacterClassifier;\r\n}());\r\nexport { CharacterClassifier };\r\nvar CharacterSet = /** @class */ (function () {\r\n    function CharacterSet() {\r\n        this._actual = new CharacterClassifier(0 /* False */);\r\n    }\r\n    CharacterSet.prototype.add = function (charCode) {\r\n        this._actual.set(charCode, 1 /* True */);\r\n    };\r\n    CharacterSet.prototype.has = function (charCode) {\r\n        return (this._actual.get(charCode) === 1 /* True */);\r\n    };\r\n    return CharacterSet;\r\n}());\r\nexport { CharacterSet };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,8BAA8B;AACtD;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,CAACC,aAAa,EAAE;IACxC,IAAIC,YAAY,GAAGH,OAAO,CAACE,aAAa,CAAC;IACzC,IAAI,CAACA,aAAa,GAAGC,YAAY;IACjC,IAAI,CAACC,SAAS,GAAGH,mBAAmB,CAACI,eAAe,CAACF,YAAY,CAAC;IAClE,IAAI,CAACG,IAAI,GAAG,IAAIC,GAAG,EAAE;EACzB;EACAN,mBAAmB,CAACI,eAAe,GAAG,UAAUF,YAAY,EAAE;IAC1D,IAAIK,QAAQ,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC1BF,QAAQ,CAACE,CAAC,CAAC,GAAGP,YAAY;IAC9B;IACA,OAAOK,QAAQ;EACnB,CAAC;EACDP,mBAAmB,CAACU,SAAS,CAACC,GAAG,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAE;IAC5D,IAAIC,KAAK,GAAGf,OAAO,CAACc,MAAM,CAAC;IAC3B,IAAID,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,IAAI,CAACT,SAAS,CAACS,QAAQ,CAAC,GAAGE,KAAK;IACpC,CAAC,MACI;MACD,IAAI,CAACT,IAAI,CAACM,GAAG,CAACC,QAAQ,EAAEE,KAAK,CAAC;IAClC;EACJ,CAAC;EACDd,mBAAmB,CAACU,SAAS,CAACK,GAAG,GAAG,UAAUH,QAAQ,EAAE;IACpD,IAAIA,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,OAAO,IAAI,CAACT,SAAS,CAACS,QAAQ,CAAC;IACnC,CAAC,MACI;MACD,OAAQ,IAAI,CAACP,IAAI,CAACU,GAAG,CAACH,QAAQ,CAAC,IAAI,IAAI,CAACX,aAAa;IACzD;EACJ,CAAC;EACD,OAAOD,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB;AAC5B,IAAIgB,YAAY,GAAG,aAAe,YAAY;EAC1C,SAASA,YAAY,GAAG;IACpB,IAAI,CAACC,OAAO,GAAG,IAAIjB,mBAAmB,CAAC,CAAC,CAAC,YAAY;EACzD;;EACAgB,YAAY,CAACN,SAAS,CAACQ,GAAG,GAAG,UAAUN,QAAQ,EAAE;IAC7C,IAAI,CAACK,OAAO,CAACN,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC,WAAW;EAC5C,CAAC;;EACDI,YAAY,CAACN,SAAS,CAACS,GAAG,GAAG,UAAUP,QAAQ,EAAE;IAC7C,OAAQ,IAAI,CAACK,OAAO,CAACF,GAAG,CAACH,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC7C,CAAC;;EACD,OAAOI,YAAY;AACvB,CAAC,EAAG;AACJ,SAASA,YAAY"},"metadata":{},"sourceType":"module"}