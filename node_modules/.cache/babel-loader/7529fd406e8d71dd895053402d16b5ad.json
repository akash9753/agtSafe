{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nvar autoCloseAlways = function autoCloseAlways() {\n  return true;\n};\nvar autoCloseNever = function autoCloseNever() {\n  return false;\n};\nvar autoCloseBeforeWhitespace = function autoCloseBeforeWhitespace(chr) {\n  return chr === ' ' || chr === '\\t';\n};\nfunction appendEntry(target, key, value) {\n  if (target.has(key)) {\n    target.get(key).push(value);\n  } else {\n    target.set(key, [value]);\n  }\n}\nvar CursorConfiguration = /** @class */function () {\n  function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\n    this._languageIdentifier = languageIdentifier;\n    var options = configuration.options;\n    var layoutInfo = options.get(107 /* layoutInfo */);\n    this.readOnly = options.get(68 /* readOnly */);\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.lineHeight = options.get(49 /* lineHeight */);\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(95 /* useTabStops */);\n    this.wordSeparators = options.get(96 /* wordSeparators */);\n    this.emptySelectionClipboard = options.get(25 /* emptySelectionClipboard */);\n    this.copyWithSyntaxHighlighting = options.get(15 /* copyWithSyntaxHighlighting */);\n    this.multiCursorMergeOverlapping = options.get(58 /* multiCursorMergeOverlapping */);\n    this.multiCursorPaste = options.get(60 /* multiCursorPaste */);\n    this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\n    this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\n    this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\n    this.autoSurround = options.get(10 /* autoSurround */);\n    this.autoIndent = options.get(8 /* autoIndent */);\n    this.autoClosingPairsOpen2 = new Map();\n    this.autoClosingPairsClose2 = new Map();\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n    };\n    var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\n    if (autoClosingPairs) {\n      for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\n        var pair = autoClosingPairs_1[_i];\n        appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\n        if (pair.close.length === 1) {\n          appendEntry(this.autoClosingPairsClose2, pair.close, pair);\n        }\n      }\n    }\n    var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n    if (surroundingPairs) {\n      for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\n        var pair = surroundingPairs_1[_a];\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n  CursorConfiguration.shouldRecreate = function (e) {\n    return e.hasChanged(107 /* layoutInfo */) || e.hasChanged(96 /* wordSeparators */) || e.hasChanged(25 /* emptySelectionClipboard */) || e.hasChanged(58 /* multiCursorMergeOverlapping */) || e.hasChanged(60 /* multiCursorPaste */) || e.hasChanged(5 /* autoClosingBrackets */) || e.hasChanged(7 /* autoClosingQuotes */) || e.hasChanged(6 /* autoClosingOvertype */) || e.hasChanged(10 /* autoSurround */) || e.hasChanged(95 /* useTabStops */) || e.hasChanged(49 /* lineHeight */) || e.hasChanged(68 /* readOnly */);\n  };\n\n  Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\n    get: function get() {\n      if (!this._electricChars) {\n        this._electricChars = {};\n        var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n        if (electricChars) {\n          for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\n            var char = electricChars_1[_i];\n            this._electricChars[char] = true;\n          }\n        }\n      }\n      return this._electricChars;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  CursorConfiguration.prototype.normalizeIndentation = function (str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  };\n  CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n  CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n  CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n      case 'languageDefined':\n        return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n      case 'always':\n        return autoCloseAlways;\n      case 'never':\n        return autoCloseNever;\n    }\n  };\n  CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\n    try {\n      var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n      return function (c) {\n        return autoCloseBeforeSet_1.indexOf(c) !== -1;\n      };\n    } catch (e) {\n      onUnexpectedError(e);\n      return autoCloseNever;\n    }\n  };\n  CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n  return CursorConfiguration;\n}();\nexport { CursorConfiguration };\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\nvar SingleCursorState = /** @class */function () {\n  function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n  SingleCursorState.prototype.equals = function (other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  };\n  SingleCursorState.prototype.hasSelection = function () {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  };\n  SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  };\n  SingleCursorState._computeSelection = function (selectionStart, position) {\n    var startLineNumber, startColumn, endLineNumber, endColumn;\n    if (selectionStart.isEmpty()) {\n      startLineNumber = selectionStart.startLineNumber;\n      startColumn = selectionStart.startColumn;\n      endLineNumber = position.lineNumber;\n      endColumn = position.column;\n    } else {\n      if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        startLineNumber = selectionStart.endLineNumber;\n        startColumn = selectionStart.endColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      }\n    }\n    return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n  return SingleCursorState;\n}();\nexport { SingleCursorState };\nvar CursorContext = /** @class */function () {\n  function CursorContext(configuration, model, viewModel) {\n    this.model = model;\n    this.viewModel = viewModel;\n    this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\n  }\n  CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\n    return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\n  };\n  CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\n  };\n  CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n  CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\n  };\n  CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n  };\n  CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\n  };\n  CursorContext.prototype.getCurrentScrollTop = function () {\n    return this.viewModel.viewLayout.getCurrentScrollTop();\n  };\n  CursorContext.prototype.getCompletelyVisibleViewRange = function () {\n    return this.viewModel.getCompletelyVisibleViewRange();\n  };\n  CursorContext.prototype.getCompletelyVisibleModelRange = function () {\n    var viewRange = this.viewModel.getCompletelyVisibleViewRange();\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n  CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n    return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\n  };\n  CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\n    return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n  };\n  return CursorContext;\n}();\nexport { CursorContext };\nvar PartialModelCursorState = /** @class */function () {\n  function PartialModelCursorState(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n  return PartialModelCursorState;\n}();\nexport { PartialModelCursorState };\nvar PartialViewCursorState = /** @class */function () {\n  function PartialViewCursorState(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n  return PartialViewCursorState;\n}();\nexport { PartialViewCursorState };\nvar CursorState = /** @class */function () {\n  function CursorState(modelState, viewState) {\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n  CursorState.fromModelState = function (modelState) {\n    return new PartialModelCursorState(modelState);\n  };\n  CursorState.fromViewState = function (viewState) {\n    return new PartialViewCursorState(viewState);\n  };\n  CursorState.fromModelSelection = function (modelSelection) {\n    var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n    var selectionStartColumn = modelSelection.selectionStartColumn;\n    var positionLineNumber = modelSelection.positionLineNumber;\n    var positionColumn = modelSelection.positionColumn;\n    var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n    return CursorState.fromModelState(modelState);\n  };\n  CursorState.fromModelSelections = function (modelSelections) {\n    var states = [];\n    for (var i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n    return states;\n  };\n  CursorState.prototype.equals = function (other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  };\n  return CursorState;\n}();\nexport { CursorState };\nvar EditOperationResult = /** @class */function () {\n  function EditOperationResult(type, commands, opts) {\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n  return EditOperationResult;\n}();\nexport { EditOperationResult };\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\nvar CursorColumns = /** @class */function () {\n  function CursorColumns() {}\n  CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\n    var lineContentLength = lineContent.length;\n    var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n    var result = 0;\n    var i = 0;\n    while (i < endOffset) {\n      var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n      i += codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n      if (codePoint === 9 /* Tab */) {\n        result = CursorColumns.nextRenderTabStop(result, tabSize);\n      } else {\n        var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n        while (i < endOffset) {\n          var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n          var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n          i += nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          result = result + 2;\n        } else {\n          result = result + 1;\n        }\n      }\n    }\n    return result;\n  };\n  CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\n    return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n  };\n  CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\n    if (visibleColumn <= 0) {\n      return 1;\n    }\n    var lineLength = lineContent.length;\n    var beforeVisibleColumn = 0;\n    var beforeColumn = 1;\n    var i = 0;\n    while (i < lineLength) {\n      var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n      i += codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n      var afterVisibleColumn = void 0;\n      if (codePoint === 9 /* Tab */) {\n        afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\n      } else {\n        var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n        while (i < lineLength) {\n          var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n          var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n          i += nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          afterVisibleColumn = beforeVisibleColumn + 2;\n        } else {\n          afterVisibleColumn = beforeVisibleColumn + 1;\n        }\n      }\n      var afterColumn = i + 1;\n      if (afterVisibleColumn >= visibleColumn) {\n        var beforeDelta = visibleColumn - beforeVisibleColumn;\n        var afterDelta = afterVisibleColumn - visibleColumn;\n        if (afterDelta < beforeDelta) {\n          return afterColumn;\n        } else {\n          return beforeColumn;\n        }\n      }\n      beforeVisibleColumn = afterVisibleColumn;\n      beforeColumn = afterColumn;\n    }\n    // walked the entire string\n    return lineLength + 1;\n  };\n  CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\n    var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n    var minColumn = model.getLineMinColumn(lineNumber);\n    if (result < minColumn) {\n      return minColumn;\n    }\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n    return result;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\n    return visibleColumn + tabSize - visibleColumn % tabSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\n    return visibleColumn + indentSize - visibleColumn % indentSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  CursorColumns.prevRenderTabStop = function (column, tabSize) {\n    return column - 1 - (column - 1) % tabSize;\n  };\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  CursorColumns.prevIndentTabStop = function (column, indentSize) {\n    return column - 1 - (column - 1) % indentSize;\n  };\n  return CursorColumns;\n}();\nexport { CursorColumns };\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"names":["onUnexpectedError","strings","Position","Range","Selection","TextModel","LanguageConfigurationRegistry","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","appendEntry","target","key","value","has","get","push","set","CursorConfiguration","languageIdentifier","modelOptions","configuration","_languageIdentifier","options","layoutInfo","readOnly","tabSize","indentSize","insertSpaces","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingOvertype","autoSurround","autoIndent","autoClosingPairsOpen2","Map","autoClosingPairsClose2","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","_getAutoClosingPairs","_i","autoClosingPairs_1","length","pair","open","charAt","close","_getSurroundingPairs","_a","surroundingPairs_1","shouldRecreate","e","hasChanged","Object","defineProperty","prototype","electricChars","_getElectricCharacters","electricChars_1","char","enumerable","configurable","normalizeIndentation","str","getElectricCharacters","id","getAutoClosingPairs","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet_1","getAutoCloseBeforeSet","c","indexOf","getSurroundingPairs","SingleCursorState","selectionStart","selectionStartLeftoverVisibleColumns","position","leftoverVisibleColumns","selection","_computeSelection","equals","other","equalsRange","hasSelection","isEmpty","move","inSelectionMode","lineNumber","column","startLineNumber","startColumn","endLineNumber","endColumn","isBeforeOrEqual","getStartPosition","CursorContext","model","viewModel","config","getLanguageIdentifier","getOptions","validateViewPosition","viewPosition","modelPosition","coordinatesConverter","validateViewRange","viewRange","expectedModelRange","convertViewRangeToModelRange","convertViewPositionToModelPosition","convertModelPositionToViewPosition","convertModelRangeToViewRange","modelRange","getCurrentScrollTop","viewLayout","getCompletelyVisibleViewRange","getCompletelyVisibleModelRange","getCompletelyVisibleViewRangeAtScrollTop","scrollTop","getVerticalOffsetForViewLine","viewLineNumber","getVerticalOffsetForLineNumber","PartialModelCursorState","modelState","viewState","PartialViewCursorState","CursorState","fromModelState","fromViewState","fromModelSelection","modelSelection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","fromModelSelections","modelSelections","states","i","len","EditOperationResult","type","commands","opts","shouldPushStackElementBefore","shouldPushStackElementAfter","CursorColumns","visibleColumnFromColumn","lineContent","lineContentLength","endOffset","result","codePoint","getNextCodePoint","nextRenderTabStop","graphemeBreakType","getGraphemeBreakType","nextCodePoint","nextGraphemeBreakType","breakBetweenGraphemeBreakType","isFullWidthCharacter","isEmojiImprecise","visibleColumnFromColumn2","getLineContent","columnFromVisibleColumn","visibleColumn","lineLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","columnFromVisibleColumn2","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","nextIndentTabStop","prevRenderTabStop","prevIndentTabStop","isQuote","ch"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar autoCloseAlways = function () { return true; };\r\nvar autoCloseNever = function () { return false; };\r\nvar autoCloseBeforeWhitespace = function (chr) { return (chr === ' ' || chr === '\\t'); };\r\nfunction appendEntry(target, key, value) {\r\n    if (target.has(key)) {\r\n        target.get(key).push(value);\r\n    }\r\n    else {\r\n        target.set(key, [value]);\r\n    }\r\n}\r\nvar CursorConfiguration = /** @class */ (function () {\r\n    function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        var options = configuration.options;\r\n        var layoutInfo = options.get(107 /* layoutInfo */);\r\n        this.readOnly = options.get(68 /* readOnly */);\r\n        this.tabSize = modelOptions.tabSize;\r\n        this.indentSize = modelOptions.indentSize;\r\n        this.insertSpaces = modelOptions.insertSpaces;\r\n        this.lineHeight = options.get(49 /* lineHeight */);\r\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\r\n        this.useTabStops = options.get(95 /* useTabStops */);\r\n        this.wordSeparators = options.get(96 /* wordSeparators */);\r\n        this.emptySelectionClipboard = options.get(25 /* emptySelectionClipboard */);\r\n        this.copyWithSyntaxHighlighting = options.get(15 /* copyWithSyntaxHighlighting */);\r\n        this.multiCursorMergeOverlapping = options.get(58 /* multiCursorMergeOverlapping */);\r\n        this.multiCursorPaste = options.get(60 /* multiCursorPaste */);\r\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\r\n        this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\r\n        this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\r\n        this.autoSurround = options.get(10 /* autoSurround */);\r\n        this.autoIndent = options.get(8 /* autoIndent */);\r\n        this.autoClosingPairsOpen2 = new Map();\r\n        this.autoClosingPairsClose2 = new Map();\r\n        this.surroundingPairs = {};\r\n        this._electricChars = null;\r\n        this.shouldAutoCloseBefore = {\r\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\r\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\r\n        };\r\n        var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\r\n        if (autoClosingPairs) {\r\n            for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\r\n                var pair = autoClosingPairs_1[_i];\r\n                appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\r\n                if (pair.close.length === 1) {\r\n                    appendEntry(this.autoClosingPairsClose2, pair.close, pair);\r\n                }\r\n            }\r\n        }\r\n        var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\r\n        if (surroundingPairs) {\r\n            for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\r\n                var pair = surroundingPairs_1[_a];\r\n                this.surroundingPairs[pair.open] = pair.close;\r\n            }\r\n        }\r\n    }\r\n    CursorConfiguration.shouldRecreate = function (e) {\r\n        return (e.hasChanged(107 /* layoutInfo */)\r\n            || e.hasChanged(96 /* wordSeparators */)\r\n            || e.hasChanged(25 /* emptySelectionClipboard */)\r\n            || e.hasChanged(58 /* multiCursorMergeOverlapping */)\r\n            || e.hasChanged(60 /* multiCursorPaste */)\r\n            || e.hasChanged(5 /* autoClosingBrackets */)\r\n            || e.hasChanged(7 /* autoClosingQuotes */)\r\n            || e.hasChanged(6 /* autoClosingOvertype */)\r\n            || e.hasChanged(10 /* autoSurround */)\r\n            || e.hasChanged(95 /* useTabStops */)\r\n            || e.hasChanged(49 /* lineHeight */)\r\n            || e.hasChanged(68 /* readOnly */));\r\n    };\r\n    Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\r\n        get: function () {\r\n            if (!this._electricChars) {\r\n                this._electricChars = {};\r\n                var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\r\n                if (electricChars) {\r\n                    for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\r\n                        var char = electricChars_1[_i];\r\n                        this._electricChars[char] = true;\r\n                    }\r\n                }\r\n            }\r\n            return this._electricChars;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CursorConfiguration.prototype.normalizeIndentation = function (str) {\r\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\r\n    };\r\n    CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\r\n        switch (autoCloseConfig) {\r\n            case 'beforeWhitespace':\r\n                return autoCloseBeforeWhitespace;\r\n            case 'languageDefined':\r\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\r\n            case 'always':\r\n                return autoCloseAlways;\r\n            case 'never':\r\n                return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\r\n        try {\r\n            var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\r\n            return function (c) { return autoCloseBeforeSet_1.indexOf(c) !== -1; };\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    return CursorConfiguration;\r\n}());\r\nexport { CursorConfiguration };\r\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\r\nvar SingleCursorState = /** @class */ (function () {\r\n    function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\r\n        this.selectionStart = selectionStart;\r\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\r\n        this.position = position;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\r\n    }\r\n    SingleCursorState.prototype.equals = function (other) {\r\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\r\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\r\n            && this.position.equals(other.position)\r\n            && this.selectionStart.equalsRange(other.selectionStart));\r\n    };\r\n    SingleCursorState.prototype.hasSelection = function () {\r\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\r\n    };\r\n    SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n    };\r\n    SingleCursorState._computeSelection = function (selectionStart, position) {\r\n        var startLineNumber, startColumn, endLineNumber, endColumn;\r\n        if (selectionStart.isEmpty()) {\r\n            startLineNumber = selectionStart.startLineNumber;\r\n            startColumn = selectionStart.startColumn;\r\n            endLineNumber = position.lineNumber;\r\n            endColumn = position.column;\r\n        }\r\n        else {\r\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\r\n                startLineNumber = selectionStart.endLineNumber;\r\n                startColumn = selectionStart.endColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n            else {\r\n                startLineNumber = selectionStart.startLineNumber;\r\n                startColumn = selectionStart.startColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n        }\r\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    return SingleCursorState;\r\n}());\r\nexport { SingleCursorState };\r\nvar CursorContext = /** @class */ (function () {\r\n    function CursorContext(configuration, model, viewModel) {\r\n        this.model = model;\r\n        this.viewModel = viewModel;\r\n        this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\r\n    }\r\n    CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\r\n        return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\r\n    };\r\n    CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\r\n    };\r\n    CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n    };\r\n    CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CursorContext.prototype.getCurrentScrollTop = function () {\r\n        return this.viewModel.viewLayout.getCurrentScrollTop();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRange = function () {\r\n        return this.viewModel.getCompletelyVisibleViewRange();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleModelRange = function () {\r\n        var viewRange = this.viewModel.getCompletelyVisibleViewRange();\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\r\n    };\r\n    CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\r\n        return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\r\n    };\r\n    return CursorContext;\r\n}());\r\nexport { CursorContext };\r\nvar PartialModelCursorState = /** @class */ (function () {\r\n    function PartialModelCursorState(modelState) {\r\n        this.modelState = modelState;\r\n        this.viewState = null;\r\n    }\r\n    return PartialModelCursorState;\r\n}());\r\nexport { PartialModelCursorState };\r\nvar PartialViewCursorState = /** @class */ (function () {\r\n    function PartialViewCursorState(viewState) {\r\n        this.modelState = null;\r\n        this.viewState = viewState;\r\n    }\r\n    return PartialViewCursorState;\r\n}());\r\nexport { PartialViewCursorState };\r\nvar CursorState = /** @class */ (function () {\r\n    function CursorState(modelState, viewState) {\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n    }\r\n    CursorState.fromModelState = function (modelState) {\r\n        return new PartialModelCursorState(modelState);\r\n    };\r\n    CursorState.fromViewState = function (viewState) {\r\n        return new PartialViewCursorState(viewState);\r\n    };\r\n    CursorState.fromModelSelection = function (modelSelection) {\r\n        var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\r\n        var selectionStartColumn = modelSelection.selectionStartColumn;\r\n        var positionLineNumber = modelSelection.positionLineNumber;\r\n        var positionColumn = modelSelection.positionColumn;\r\n        var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\r\n        return CursorState.fromModelState(modelState);\r\n    };\r\n    CursorState.fromModelSelections = function (modelSelections) {\r\n        var states = [];\r\n        for (var i = 0, len = modelSelections.length; i < len; i++) {\r\n            states[i] = this.fromModelSelection(modelSelections[i]);\r\n        }\r\n        return states;\r\n    };\r\n    CursorState.prototype.equals = function (other) {\r\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\r\n    };\r\n    return CursorState;\r\n}());\r\nexport { CursorState };\r\nvar EditOperationResult = /** @class */ (function () {\r\n    function EditOperationResult(type, commands, opts) {\r\n        this.type = type;\r\n        this.commands = commands;\r\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\r\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\r\n    }\r\n    return EditOperationResult;\r\n}());\r\nexport { EditOperationResult };\r\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\r\nvar CursorColumns = /** @class */ (function () {\r\n    function CursorColumns() {\r\n    }\r\n    CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\r\n        var lineContentLength = lineContent.length;\r\n        var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\r\n        var result = 0;\r\n        var i = 0;\r\n        while (i < endOffset) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            if (codePoint === 9 /* Tab */) {\r\n                result = CursorColumns.nextRenderTabStop(result, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < endOffset) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    result = result + 2;\r\n                }\r\n                else {\r\n                    result = result + 1;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\r\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\r\n    };\r\n    CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\r\n        if (visibleColumn <= 0) {\r\n            return 1;\r\n        }\r\n        var lineLength = lineContent.length;\r\n        var beforeVisibleColumn = 0;\r\n        var beforeColumn = 1;\r\n        var i = 0;\r\n        while (i < lineLength) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            var afterVisibleColumn = void 0;\r\n            if (codePoint === 9 /* Tab */) {\r\n                afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < lineLength) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    afterVisibleColumn = beforeVisibleColumn + 2;\r\n                }\r\n                else {\r\n                    afterVisibleColumn = beforeVisibleColumn + 1;\r\n                }\r\n            }\r\n            var afterColumn = i + 1;\r\n            if (afterVisibleColumn >= visibleColumn) {\r\n                var beforeDelta = visibleColumn - beforeVisibleColumn;\r\n                var afterDelta = afterVisibleColumn - visibleColumn;\r\n                if (afterDelta < beforeDelta) {\r\n                    return afterColumn;\r\n                }\r\n                else {\r\n                    return beforeColumn;\r\n                }\r\n            }\r\n            beforeVisibleColumn = afterVisibleColumn;\r\n            beforeColumn = afterColumn;\r\n        }\r\n        // walked the entire string\r\n        return lineLength + 1;\r\n    };\r\n    CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\r\n        var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        if (result < minColumn) {\r\n            return minColumn;\r\n        }\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (result > maxColumn) {\r\n            return maxColumn;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\r\n        return visibleColumn + tabSize - visibleColumn % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\r\n        return visibleColumn + indentSize - visibleColumn % indentSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevRenderTabStop = function (column, tabSize) {\r\n        return column - 1 - (column - 1) % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevIndentTabStop = function (column, indentSize) {\r\n        return column - 1 - (column - 1) % indentSize;\r\n    };\r\n    return CursorColumns;\r\n}());\r\nexport { CursorColumns };\r\nexport function isQuote(ch) {\r\n    return (ch === '\\'' || ch === '\"' || ch === '`');\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}