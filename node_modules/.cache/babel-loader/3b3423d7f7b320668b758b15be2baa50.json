{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport * as model from '../model.js';\nimport { EditStack } from './editStack.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, getNodeIsInOverviewRuler, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { InternalModelContentChangeEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from './textModelEvents.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TextModelTokenization } from './textModelTokens.js';\nimport { getWordAtText } from './wordHelper.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\nimport { ignoreBracketsInToken } from '../modes/supports.js';\nimport { BracketsUtils } from '../modes/supports/richEditBrackets.js';\nimport { withUndefinedAsNull } from '../../../base/common/types.js';\nimport { TokensStore, countEOL, TokensStore2 } from './tokensStore.js';\nimport { Color } from '../../../base/common/color.js';\nfunction createTextBufferBuilder() {\n  return new PieceTreeTextBufferBuilder();\n}\nexport function createTextBufferFactory(text) {\n  var builder = createTextBufferBuilder();\n  builder.acceptChunk(text);\n  return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n  var factory = typeof value === 'string' ? createTextBufferFactory(value) : value;\n  return factory.create(defaultEOL);\n}\nvar MODEL_ID = 0;\nvar LIMIT_FIND_COUNT = 999;\nexport var LONG_LINE_BOUNDARY = 10000;\nvar invalidFunc = function invalidFunc() {\n  throw new Error(\"Invalid change accessor\");\n};\nvar TextModel = /** @class */function (_super) {\n  __extends(TextModel, _super);\n  //#endregion\n  function TextModel(source, creationOptions, languageIdentifier, associatedResource) {\n    if (associatedResource === void 0) {\n      associatedResource = null;\n    }\n    var _this = _super.call(this) || this;\n    //#region Events\n    _this._onWillDispose = _this._register(new Emitter());\n    _this.onWillDispose = _this._onWillDispose.event;\n    _this._onDidChangeDecorations = _this._register(new DidChangeDecorationsEmitter());\n    _this.onDidChangeDecorations = _this._onDidChangeDecorations.event;\n    _this._onDidChangeLanguage = _this._register(new Emitter());\n    _this.onDidChangeLanguage = _this._onDidChangeLanguage.event;\n    _this._onDidChangeLanguageConfiguration = _this._register(new Emitter());\n    _this.onDidChangeLanguageConfiguration = _this._onDidChangeLanguageConfiguration.event;\n    _this._onDidChangeTokens = _this._register(new Emitter());\n    _this.onDidChangeTokens = _this._onDidChangeTokens.event;\n    _this._onDidChangeOptions = _this._register(new Emitter());\n    _this.onDidChangeOptions = _this._onDidChangeOptions.event;\n    _this._onDidChangeAttached = _this._register(new Emitter());\n    _this.onDidChangeAttached = _this._onDidChangeAttached.event;\n    _this._eventEmitter = _this._register(new DidChangeContentEmitter());\n    // Generate a new unique model id\n    MODEL_ID++;\n    _this.id = '$model' + MODEL_ID;\n    _this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n    if (typeof associatedResource === 'undefined' || associatedResource === null) {\n      _this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n    } else {\n      _this._associatedResource = associatedResource;\n    }\n    _this._attachedEditorCount = 0;\n    _this._buffer = createTextBuffer(source, creationOptions.defaultEOL);\n    _this._options = TextModel.resolveOptions(_this._buffer, creationOptions);\n    var bufferLineCount = _this._buffer.getLineCount();\n    var bufferTextLength = _this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, _this._buffer.getLineLength(bufferLineCount) + 1), 0 /* TextDefined */);\n    // !!! Make a decision in the ctor and permanently respect this decision !!!\n    // If a model is too large at construction time, it will never get tokenized,\n    // under no circumstances.\n    if (creationOptions.largeFileOptimizations) {\n      _this._isTooLargeForTokenization = bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD || bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD;\n    } else {\n      _this._isTooLargeForTokenization = false;\n    }\n    _this._isTooLargeForSyncing = bufferTextLength > TextModel.MODEL_SYNC_LIMIT;\n    _this._versionId = 1;\n    _this._alternativeVersionId = 1;\n    _this._isDisposed = false;\n    _this._isDisposing = false;\n    _this._languageIdentifier = languageIdentifier || NULL_LANGUAGE_IDENTIFIER;\n    _this._languageRegistryListener = LanguageConfigurationRegistry.onDidChange(function (e) {\n      if (e.languageIdentifier.id === _this._languageIdentifier.id) {\n        _this._onDidChangeLanguageConfiguration.fire({});\n      }\n    });\n    _this._instanceId = strings.singleLetterHash(MODEL_ID);\n    _this._lastDecorationId = 0;\n    _this._decorations = Object.create(null);\n    _this._decorationsTree = new DecorationsTrees();\n    _this._commandManager = new EditStack(_this);\n    _this._isUndoing = false;\n    _this._isRedoing = false;\n    _this._trimAutoWhitespaceLines = null;\n    _this._tokens = new TokensStore();\n    _this._tokens2 = new TokensStore2();\n    _this._tokenization = new TextModelTokenization(_this);\n    return _this;\n  }\n  TextModel.createFromString = function (text, options, languageIdentifier, uri) {\n    if (options === void 0) {\n      options = TextModel.DEFAULT_CREATION_OPTIONS;\n    }\n    if (languageIdentifier === void 0) {\n      languageIdentifier = null;\n    }\n    if (uri === void 0) {\n      uri = null;\n    }\n    return new TextModel(text, options, languageIdentifier, uri);\n  };\n  TextModel.resolveOptions = function (textBuffer, options) {\n    if (options.detectIndentation) {\n      var guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n      return new model.TextModelResolvedOptions({\n        tabSize: guessedIndentation.tabSize,\n        indentSize: guessedIndentation.tabSize,\n        insertSpaces: guessedIndentation.insertSpaces,\n        trimAutoWhitespace: options.trimAutoWhitespace,\n        defaultEOL: options.defaultEOL\n      });\n    }\n    return new model.TextModelResolvedOptions({\n      tabSize: options.tabSize,\n      indentSize: options.indentSize,\n      insertSpaces: options.insertSpaces,\n      trimAutoWhitespace: options.trimAutoWhitespace,\n      defaultEOL: options.defaultEOL\n    });\n  };\n  TextModel.prototype.onDidChangeRawContentFast = function (listener) {\n    return this._eventEmitter.fastEvent(function (e) {\n      return listener(e.rawContentChangedEvent);\n    });\n  };\n  TextModel.prototype.onDidChangeRawContent = function (listener) {\n    return this._eventEmitter.slowEvent(function (e) {\n      return listener(e.rawContentChangedEvent);\n    });\n  };\n  TextModel.prototype.onDidChangeContentFast = function (listener) {\n    return this._eventEmitter.fastEvent(function (e) {\n      return listener(e.contentChangedEvent);\n    });\n  };\n  TextModel.prototype.onDidChangeContent = function (listener) {\n    return this._eventEmitter.slowEvent(function (e) {\n      return listener(e.contentChangedEvent);\n    });\n  };\n  TextModel.prototype.dispose = function () {\n    this._isDisposing = true;\n    this._onWillDispose.fire();\n    this._languageRegistryListener.dispose();\n    this._tokenization.dispose();\n    this._isDisposed = true;\n    _super.prototype.dispose.call(this);\n    this._isDisposing = false;\n  };\n  TextModel.prototype._assertNotDisposed = function () {\n    if (this._isDisposed) {\n      throw new Error('Model is disposed!');\n    }\n  };\n  TextModel.prototype._emitContentChangedEvent = function (rawChange, change) {\n    if (this._isDisposing) {\n      // Do not confuse listeners by emitting any event after disposing\n      return;\n    }\n    this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n  };\n  TextModel.prototype.setValue = function (value) {\n    this._assertNotDisposed();\n    if (value === null) {\n      // There's nothing to do\n      return;\n    }\n    var textBuffer = createTextBuffer(value, this._options.defaultEOL);\n    this.setValueFromTextBuffer(textBuffer);\n  };\n  TextModel.prototype._createContentChanged2 = function (range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\n    return {\n      changes: [{\n        range: range,\n        rangeOffset: rangeOffset,\n        rangeLength: rangeLength,\n        text: text\n      }],\n      eol: this._buffer.getEOL(),\n      versionId: this.getVersionId(),\n      isUndoing: isUndoing,\n      isRedoing: isRedoing,\n      isFlush: isFlush\n    };\n  };\n  TextModel.prototype.setValueFromTextBuffer = function (textBuffer) {\n    this._assertNotDisposed();\n    if (textBuffer === null) {\n      // There's nothing to do\n      return;\n    }\n    var oldFullModelRange = this.getFullModelRange();\n    var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n    var endLineNumber = this.getLineCount();\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n    this._buffer = textBuffer;\n    this._increaseVersionId();\n    // Flush all tokens\n    this._tokens.flush();\n    this._tokens2.flush();\n    // Destroy all my decorations\n    this._decorations = Object.create(null);\n    this._decorationsTree = new DecorationsTrees();\n    // Destroy my edit history and settings\n    this._commandManager = new EditStack(this);\n    this._trimAutoWhitespaceLines = null;\n    this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawFlush()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\n  };\n  TextModel.prototype.setEOL = function (eol) {\n    this._assertNotDisposed();\n    var newEOL = eol === 1 /* CRLF */ ? '\\r\\n' : '\\n';\n    if (this._buffer.getEOL() === newEOL) {\n      // Nothing to do\n      return;\n    }\n    var oldFullModelRange = this.getFullModelRange();\n    var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n    var endLineNumber = this.getLineCount();\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n    this._onBeforeEOLChange();\n    this._buffer.setEOL(newEOL);\n    this._increaseVersionId();\n    this._onAfterEOLChange();\n    this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawEOLChanged()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\n  };\n  TextModel.prototype._onBeforeEOLChange = function () {\n    // Ensure all decorations get their `range` set.\n    var versionId = this.getVersionId();\n    var allDecorations = this._decorationsTree.search(0, false, false, versionId);\n    this._ensureNodesHaveRanges(allDecorations);\n  };\n  TextModel.prototype._onAfterEOLChange = function () {\n    // Transform back `range` to offsets\n    var versionId = this.getVersionId();\n    var allDecorations = this._decorationsTree.collectNodesPostOrder();\n    for (var i = 0, len = allDecorations.length; i < len; i++) {\n      var node = allDecorations[i];\n      var delta = node.cachedAbsoluteStart - node.start;\n      var startOffset = this._buffer.getOffsetAt(node.range.startLineNumber, node.range.startColumn);\n      var endOffset = this._buffer.getOffsetAt(node.range.endLineNumber, node.range.endColumn);\n      node.cachedAbsoluteStart = startOffset;\n      node.cachedAbsoluteEnd = endOffset;\n      node.cachedVersionId = versionId;\n      node.start = startOffset - delta;\n      node.end = endOffset - delta;\n      recomputeMaxEnd(node);\n    }\n  };\n  TextModel.prototype.onBeforeAttached = function () {\n    this._attachedEditorCount++;\n    if (this._attachedEditorCount === 1) {\n      this._onDidChangeAttached.fire(undefined);\n    }\n  };\n  TextModel.prototype.onBeforeDetached = function () {\n    this._attachedEditorCount--;\n    if (this._attachedEditorCount === 0) {\n      this._onDidChangeAttached.fire(undefined);\n    }\n  };\n  TextModel.prototype.isAttachedToEditor = function () {\n    return this._attachedEditorCount > 0;\n  };\n  TextModel.prototype.getAttachedEditorCount = function () {\n    return this._attachedEditorCount;\n  };\n  TextModel.prototype.isTooLargeForSyncing = function () {\n    return this._isTooLargeForSyncing;\n  };\n  TextModel.prototype.isTooLargeForTokenization = function () {\n    return this._isTooLargeForTokenization;\n  };\n  TextModel.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n  TextModel.prototype.isDominatedByLongLines = function () {\n    this._assertNotDisposed();\n    if (this.isTooLargeForTokenization()) {\n      // Cannot word wrap huge files anyways, so it doesn't really matter\n      return false;\n    }\n    var smallLineCharCount = 0;\n    var longLineCharCount = 0;\n    var lineCount = this._buffer.getLineCount();\n    for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n      var lineLength = this._buffer.getLineLength(lineNumber);\n      if (lineLength >= LONG_LINE_BOUNDARY) {\n        longLineCharCount += lineLength;\n      } else {\n        smallLineCharCount += lineLength;\n      }\n    }\n    return longLineCharCount > smallLineCharCount;\n  };\n  Object.defineProperty(TextModel.prototype, \"uri\", {\n    get: function get() {\n      return this._associatedResource;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //#region Options\n  TextModel.prototype.getOptions = function () {\n    this._assertNotDisposed();\n    return this._options;\n  };\n  TextModel.prototype.getFormattingOptions = function () {\n    return {\n      tabSize: this._options.indentSize,\n      insertSpaces: this._options.insertSpaces\n    };\n  };\n  TextModel.prototype.updateOptions = function (_newOpts) {\n    this._assertNotDisposed();\n    var tabSize = typeof _newOpts.tabSize !== 'undefined' ? _newOpts.tabSize : this._options.tabSize;\n    var indentSize = typeof _newOpts.indentSize !== 'undefined' ? _newOpts.indentSize : this._options.indentSize;\n    var insertSpaces = typeof _newOpts.insertSpaces !== 'undefined' ? _newOpts.insertSpaces : this._options.insertSpaces;\n    var trimAutoWhitespace = typeof _newOpts.trimAutoWhitespace !== 'undefined' ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n    var newOpts = new model.TextModelResolvedOptions({\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      defaultEOL: this._options.defaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace\n    });\n    if (this._options.equals(newOpts)) {\n      return;\n    }\n    var e = this._options.createChangeEvent(newOpts);\n    this._options = newOpts;\n    this._onDidChangeOptions.fire(e);\n  };\n  TextModel.prototype.detectIndentation = function (defaultInsertSpaces, defaultTabSize) {\n    this._assertNotDisposed();\n    var guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n    this.updateOptions({\n      insertSpaces: guessedIndentation.insertSpaces,\n      tabSize: guessedIndentation.tabSize,\n      indentSize: guessedIndentation.tabSize\n    });\n  };\n  TextModel._normalizeIndentationFromWhitespace = function (str, indentSize, insertSpaces) {\n    var spacesCnt = 0;\n    for (var i = 0; i < str.length; i++) {\n      if (str.charAt(i) === '\\t') {\n        spacesCnt += indentSize;\n      } else {\n        spacesCnt++;\n      }\n    }\n    var result = '';\n    if (!insertSpaces) {\n      var tabsCnt = Math.floor(spacesCnt / indentSize);\n      spacesCnt = spacesCnt % indentSize;\n      for (var i = 0; i < tabsCnt; i++) {\n        result += '\\t';\n      }\n    }\n    for (var i = 0; i < spacesCnt; i++) {\n      result += ' ';\n    }\n    return result;\n  };\n  TextModel.normalizeIndentation = function (str, indentSize, insertSpaces) {\n    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\n    if (firstNonWhitespaceIndex === -1) {\n      firstNonWhitespaceIndex = str.length;\n    }\n    return TextModel._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\n  };\n  TextModel.prototype.normalizeIndentation = function (str) {\n    this._assertNotDisposed();\n    return TextModel.normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n  };\n  //#endregion\n  //#region Reading\n  TextModel.prototype.getVersionId = function () {\n    this._assertNotDisposed();\n    return this._versionId;\n  };\n  TextModel.prototype.mightContainRTL = function () {\n    return this._buffer.mightContainRTL();\n  };\n  TextModel.prototype.mightContainNonBasicASCII = function () {\n    return this._buffer.mightContainNonBasicASCII();\n  };\n  TextModel.prototype.getAlternativeVersionId = function () {\n    this._assertNotDisposed();\n    return this._alternativeVersionId;\n  };\n  TextModel.prototype.getOffsetAt = function (rawPosition) {\n    this._assertNotDisposed();\n    var position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* Relaxed */);\n    return this._buffer.getOffsetAt(position.lineNumber, position.column);\n  };\n  TextModel.prototype.getPositionAt = function (rawOffset) {\n    this._assertNotDisposed();\n    var offset = Math.min(this._buffer.getLength(), Math.max(0, rawOffset));\n    return this._buffer.getPositionAt(offset);\n  };\n  TextModel.prototype._increaseVersionId = function () {\n    this._versionId = this._versionId + 1;\n    this._alternativeVersionId = this._versionId;\n  };\n  TextModel.prototype._overwriteAlternativeVersionId = function (newAlternativeVersionId) {\n    this._alternativeVersionId = newAlternativeVersionId;\n  };\n  TextModel.prototype.getValue = function (eol, preserveBOM) {\n    if (preserveBOM === void 0) {\n      preserveBOM = false;\n    }\n    this._assertNotDisposed();\n    var fullModelRange = this.getFullModelRange();\n    var fullModelValue = this.getValueInRange(fullModelRange, eol);\n    if (preserveBOM) {\n      return this._buffer.getBOM() + fullModelValue;\n    }\n    return fullModelValue;\n  };\n  TextModel.prototype.getValueLength = function (eol, preserveBOM) {\n    if (preserveBOM === void 0) {\n      preserveBOM = false;\n    }\n    this._assertNotDisposed();\n    var fullModelRange = this.getFullModelRange();\n    var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n    if (preserveBOM) {\n      return this._buffer.getBOM().length + fullModelValue;\n    }\n    return fullModelValue;\n  };\n  TextModel.prototype.getValueInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0 /* TextDefined */;\n    }\n    this._assertNotDisposed();\n    return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n  };\n  TextModel.prototype.getValueLengthInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0 /* TextDefined */;\n    }\n    this._assertNotDisposed();\n    return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n  };\n  TextModel.prototype.getCharacterCountInRange = function (rawRange, eol) {\n    if (eol === void 0) {\n      eol = 0 /* TextDefined */;\n    }\n    this._assertNotDisposed();\n    return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n  };\n  TextModel.prototype.getLineCount = function () {\n    this._assertNotDisposed();\n    return this._buffer.getLineCount();\n  };\n  TextModel.prototype.getLineContent = function (lineNumber) {\n    this._assertNotDisposed();\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._buffer.getLineContent(lineNumber);\n  };\n  TextModel.prototype.getLineLength = function (lineNumber) {\n    this._assertNotDisposed();\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._buffer.getLineLength(lineNumber);\n  };\n  TextModel.prototype.getLinesContent = function () {\n    this._assertNotDisposed();\n    return this._buffer.getLinesContent();\n  };\n  TextModel.prototype.getEOL = function () {\n    this._assertNotDisposed();\n    return this._buffer.getEOL();\n  };\n  TextModel.prototype.getLineMinColumn = function (lineNumber) {\n    this._assertNotDisposed();\n    return 1;\n  };\n  TextModel.prototype.getLineMaxColumn = function (lineNumber) {\n    this._assertNotDisposed();\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._buffer.getLineLength(lineNumber) + 1;\n  };\n  TextModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\n    this._assertNotDisposed();\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n  };\n  TextModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\n    this._assertNotDisposed();\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n  };\n  /**\r\n   * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\r\n   * Will try to not allocate if possible.\r\n   */\n  TextModel.prototype._validateRangeRelaxedNoAllocations = function (range) {\n    var linesCount = this._buffer.getLineCount();\n    var initialStartLineNumber = range.startLineNumber;\n    var initialStartColumn = range.startColumn;\n    var startLineNumber;\n    var startColumn;\n    if (initialStartLineNumber < 1) {\n      startLineNumber = 1;\n      startColumn = 1;\n    } else if (initialStartLineNumber > linesCount) {\n      startLineNumber = linesCount;\n      startColumn = this.getLineMaxColumn(startLineNumber);\n    } else {\n      startLineNumber = initialStartLineNumber | 0;\n      if (initialStartColumn <= 1) {\n        startColumn = 1;\n      } else {\n        var maxColumn = this.getLineMaxColumn(startLineNumber);\n        if (initialStartColumn >= maxColumn) {\n          startColumn = maxColumn;\n        } else {\n          startColumn = initialStartColumn | 0;\n        }\n      }\n    }\n    var initialEndLineNumber = range.endLineNumber;\n    var initialEndColumn = range.endColumn;\n    var endLineNumber;\n    var endColumn;\n    if (initialEndLineNumber < 1) {\n      endLineNumber = 1;\n      endColumn = 1;\n    } else if (initialEndLineNumber > linesCount) {\n      endLineNumber = linesCount;\n      endColumn = this.getLineMaxColumn(endLineNumber);\n    } else {\n      endLineNumber = initialEndLineNumber | 0;\n      if (initialEndColumn <= 1) {\n        endColumn = 1;\n      } else {\n        var maxColumn = this.getLineMaxColumn(endLineNumber);\n        if (initialEndColumn >= maxColumn) {\n          endColumn = maxColumn;\n        } else {\n          endColumn = initialEndColumn | 0;\n        }\n      }\n    }\n    if (initialStartLineNumber === startLineNumber && initialStartColumn === startColumn && initialEndLineNumber === endLineNumber && initialEndColumn === endColumn && range instanceof Range && !(range instanceof Selection)) {\n      return range;\n    }\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n  TextModel.prototype._isValidPosition = function (lineNumber, column, validationType) {\n    if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n      return false;\n    }\n    if (isNaN(lineNumber) || isNaN(column)) {\n      return false;\n    }\n    if (lineNumber < 1 || column < 1) {\n      return false;\n    }\n    if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n      return false;\n    }\n    var lineCount = this._buffer.getLineCount();\n    if (lineNumber > lineCount) {\n      return false;\n    }\n    if (column === 1) {\n      return true;\n    }\n    var maxColumn = this.getLineMaxColumn(lineNumber);\n    if (column > maxColumn) {\n      return false;\n    }\n    if (validationType === 1 /* SurrogatePairs */) {\n      // !!At this point, column > 1\n      var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n      if (strings.isHighSurrogate(charCodeBefore)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  TextModel.prototype._validatePosition = function (_lineNumber, _column, validationType) {\n    var lineNumber = Math.floor(typeof _lineNumber === 'number' && !isNaN(_lineNumber) ? _lineNumber : 1);\n    var column = Math.floor(typeof _column === 'number' && !isNaN(_column) ? _column : 1);\n    var lineCount = this._buffer.getLineCount();\n    if (lineNumber < 1) {\n      return new Position(1, 1);\n    }\n    if (lineNumber > lineCount) {\n      return new Position(lineCount, this.getLineMaxColumn(lineCount));\n    }\n    if (column <= 1) {\n      return new Position(lineNumber, 1);\n    }\n    var maxColumn = this.getLineMaxColumn(lineNumber);\n    if (column >= maxColumn) {\n      return new Position(lineNumber, maxColumn);\n    }\n    if (validationType === 1 /* SurrogatePairs */) {\n      // If the position would end up in the middle of a high-low surrogate pair,\n      // we move it to before the pair\n      // !!At this point, column > 1\n      var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n      if (strings.isHighSurrogate(charCodeBefore)) {\n        return new Position(lineNumber, column - 1);\n      }\n    }\n    return new Position(lineNumber, column);\n  };\n  TextModel.prototype.validatePosition = function (position) {\n    var validationType = 1 /* SurrogatePairs */;\n    this._assertNotDisposed();\n    // Avoid object allocation and cover most likely case\n    if (position instanceof Position) {\n      if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n        return position;\n      }\n    }\n    return this._validatePosition(position.lineNumber, position.column, validationType);\n  };\n  TextModel.prototype._isValidRange = function (range, validationType) {\n    var startLineNumber = range.startLineNumber;\n    var startColumn = range.startColumn;\n    var endLineNumber = range.endLineNumber;\n    var endColumn = range.endColumn;\n    if (!this._isValidPosition(startLineNumber, startColumn, 0 /* Relaxed */)) {\n      return false;\n    }\n    if (!this._isValidPosition(endLineNumber, endColumn, 0 /* Relaxed */)) {\n      return false;\n    }\n    if (validationType === 1 /* SurrogatePairs */) {\n      var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n      var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n      var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n      var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n      if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  };\n  TextModel.prototype.validateRange = function (_range) {\n    var validationType = 1 /* SurrogatePairs */;\n    this._assertNotDisposed();\n    // Avoid object allocation and cover most likely case\n    if (_range instanceof Range && !(_range instanceof Selection)) {\n      if (this._isValidRange(_range, validationType)) {\n        return _range;\n      }\n    }\n    var start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* Relaxed */);\n    var end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* Relaxed */);\n    var startLineNumber = start.lineNumber;\n    var startColumn = start.column;\n    var endLineNumber = end.lineNumber;\n    var endColumn = end.column;\n    if (validationType === 1 /* SurrogatePairs */) {\n      var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n      var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n      var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n      var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n      if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n      }\n      if (startLineNumber === endLineNumber && startColumn === endColumn) {\n        // do not expand a collapsed range, simply move it to a valid location\n        return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n      }\n      if (startInsideSurrogatePair && endInsideSurrogatePair) {\n        // expand range at both ends\n        return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n      }\n      if (startInsideSurrogatePair) {\n        // only expand range at the start\n        return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n      }\n      // only expand range at the end\n      return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n    }\n    return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n  TextModel.prototype.modifyPosition = function (rawPosition, offset) {\n    this._assertNotDisposed();\n    var candidate = this.getOffsetAt(rawPosition) + offset;\n    return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n  };\n  TextModel.prototype.getFullModelRange = function () {\n    this._assertNotDisposed();\n    var lineCount = this.getLineCount();\n    return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n  };\n  TextModel.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\n    return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n  };\n  TextModel.prototype.findMatches = function (searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount) {\n    if (limitResultCount === void 0) {\n      limitResultCount = LIMIT_FIND_COUNT;\n    }\n    this._assertNotDisposed();\n    var searchRange;\n    if (Range.isIRange(rawSearchScope)) {\n      searchRange = this.validateRange(rawSearchScope);\n    } else {\n      searchRange = this.getFullModelRange();\n    }\n    if (!isRegex && searchString.indexOf('\\n') < 0) {\n      // not regex, not multi line\n      var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n      var searchData = searchParams.parseSearchRequest();\n      if (!searchData) {\n        return [];\n      }\n      return this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    return TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n  };\n  TextModel.prototype.findNextMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n    this._assertNotDisposed();\n    var searchStart = this.validatePosition(rawSearchStart);\n    if (!isRegex && searchString.indexOf('\\n') < 0) {\n      var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n      var searchData = searchParams.parseSearchRequest();\n      if (!searchData) {\n        return null;\n      }\n      var lineCount = this.getLineCount();\n      var searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n      var ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n      TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n      if (ret.length > 0) {\n        return ret[0];\n      }\n      searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n      ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n      if (ret.length > 0) {\n        return ret[0];\n      }\n      return null;\n    }\n    return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n  };\n  TextModel.prototype.findPreviousMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n    this._assertNotDisposed();\n    var searchStart = this.validatePosition(rawSearchStart);\n    return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n  };\n  //#endregion\n  //#region Editing\n  TextModel.prototype.pushStackElement = function () {\n    this._commandManager.pushStackElement();\n  };\n  TextModel.prototype.pushEOL = function (eol) {\n    var currentEOL = this.getEOL() === '\\n' ? 0 /* LF */ : 1 /* CRLF */;\n    if (currentEOL === eol) {\n      return;\n    }\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._eventEmitter.beginDeferredEmit();\n      this._commandManager.pushEOL(eol);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype.pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._eventEmitter.beginDeferredEmit();\n      return this._pushEditOperations(beforeCursorState, editOperations, cursorStateComputer);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype._pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\n    var _this = this;\n    if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n      // Go through each saved line number and insert a trim whitespace edit\n      // if it is safe to do so (no conflicts with other edits).\n      var incomingEdits = editOperations.map(function (op) {\n        return {\n          range: _this.validateRange(op.range),\n          text: op.text\n        };\n      });\n      // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n      // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n      var editsAreNearCursors = true;\n      for (var i = 0, len = beforeCursorState.length; i < len; i++) {\n        var sel = beforeCursorState[i];\n        var foundEditNearSel = false;\n        for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n          var editRange = incomingEdits[j].range;\n          var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n          var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n          if (!selIsAbove && !selIsBelow) {\n            foundEditNearSel = true;\n            break;\n          }\n        }\n        if (!foundEditNearSel) {\n          editsAreNearCursors = false;\n          break;\n        }\n      }\n      if (editsAreNearCursors) {\n        for (var i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n          var trimLineNumber = this._trimAutoWhitespaceLines[i];\n          var maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n          var allowTrimLine = true;\n          for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n            var editRange = incomingEdits[j].range;\n            var editText = incomingEdits[j].text;\n            if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n              // `trimLine` is completely outside this edit\n              continue;\n            }\n            // At this point:\n            //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n            if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n              // This edit inserts a new line (and maybe other text) after `trimLine`\n              continue;\n            }\n            if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1 && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n              // This edit inserts a new line (and maybe other text) before `trimLine`\n              continue;\n            }\n            // Looks like we can't trim this line as it would interfere with an incoming edit\n            allowTrimLine = false;\n            break;\n          }\n          if (allowTrimLine) {\n            editOperations.push({\n              range: new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\n              text: null\n            });\n          }\n        }\n      }\n      this._trimAutoWhitespaceLines = null;\n    }\n    return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\n  };\n  TextModel.prototype.applyEdits = function (rawOperations) {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._eventEmitter.beginDeferredEmit();\n      return this._applyEdits(rawOperations);\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype._applyEdits = function (rawOperations) {\n    for (var i = 0, len = rawOperations.length; i < len; i++) {\n      rawOperations[i].range = this.validateRange(rawOperations[i].range);\n    }\n    var oldLineCount = this._buffer.getLineCount();\n    var result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace);\n    var newLineCount = this._buffer.getLineCount();\n    var contentChanges = result.changes;\n    this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n    if (contentChanges.length !== 0) {\n      var rawContentChanges = [];\n      var lineCount = oldLineCount;\n      for (var i = 0, len = contentChanges.length; i < len; i++) {\n        var change = contentChanges[i];\n        var _a = countEOL(change.text),\n          eolCount = _a[0],\n          firstLineLength = _a[1],\n          lastLineLength = _a[2];\n        this._tokens.acceptEdit(change.range, eolCount, firstLineLength);\n        this._tokens2.acceptEdit(change.range, eolCount, firstLineLength, lastLineLength, change.text.length > 0 ? change.text.charCodeAt(0) : 0 /* Null */);\n        this._onDidChangeDecorations.fire();\n        this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n        var startLineNumber = change.range.startLineNumber;\n        var endLineNumber = change.range.endLineNumber;\n        var deletingLinesCnt = endLineNumber - startLineNumber;\n        var insertingLinesCnt = eolCount;\n        var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n        var changeLineCountDelta = insertingLinesCnt - deletingLinesCnt;\n        for (var j = editingLinesCnt; j >= 0; j--) {\n          var editLineNumber = startLineNumber + j;\n          var currentEditLineNumber = newLineCount - lineCount - changeLineCountDelta + editLineNumber;\n          rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber)));\n        }\n        if (editingLinesCnt < deletingLinesCnt) {\n          // Must delete some lines\n          var spliceStartLineNumber = startLineNumber + editingLinesCnt;\n          rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n        }\n        if (editingLinesCnt < insertingLinesCnt) {\n          // Must insert some lines\n          var spliceLineNumber = startLineNumber + editingLinesCnt;\n          var cnt = insertingLinesCnt - editingLinesCnt;\n          var fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n          var newLines = [];\n          for (var i_1 = 0; i_1 < cnt; i_1++) {\n            var lineNumber = fromLineNumber + i_1;\n            newLines[lineNumber - fromLineNumber] = this.getLineContent(lineNumber);\n          }\n          rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines));\n        }\n        lineCount += changeLineCountDelta;\n      }\n      this._increaseVersionId();\n      this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n        changes: contentChanges,\n        eol: this._buffer.getEOL(),\n        versionId: this.getVersionId(),\n        isUndoing: this._isUndoing,\n        isRedoing: this._isRedoing,\n        isFlush: false\n      });\n    }\n    return result.reverseEdits;\n  };\n  TextModel.prototype._undo = function () {\n    this._isUndoing = true;\n    var r = this._commandManager.undo();\n    this._isUndoing = false;\n    if (!r) {\n      return null;\n    }\n    this._overwriteAlternativeVersionId(r.recordedVersionId);\n    return r.selections;\n  };\n  TextModel.prototype.undo = function () {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._eventEmitter.beginDeferredEmit();\n      return this._undo();\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype.canUndo = function () {\n    return this._commandManager.canUndo();\n  };\n  TextModel.prototype._redo = function () {\n    this._isRedoing = true;\n    var r = this._commandManager.redo();\n    this._isRedoing = false;\n    if (!r) {\n      return null;\n    }\n    this._overwriteAlternativeVersionId(r.recordedVersionId);\n    return r.selections;\n  };\n  TextModel.prototype.redo = function () {\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._eventEmitter.beginDeferredEmit();\n      return this._redo();\n    } finally {\n      this._eventEmitter.endDeferredEmit();\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype.canRedo = function () {\n    return this._commandManager.canRedo();\n  };\n  //#endregion\n  //#region Decorations\n  TextModel.prototype.changeDecorations = function (callback, ownerId) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    this._assertNotDisposed();\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      return this._changeDecorations(ownerId, callback);\n    } finally {\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype._changeDecorations = function (ownerId, callback) {\n    var _this = this;\n    var changeAccessor = {\n      addDecoration: function addDecoration(range, options) {\n        _this._onDidChangeDecorations.fire();\n        return _this._deltaDecorationsImpl(ownerId, [], [{\n          range: range,\n          options: options\n        }])[0];\n      },\n      changeDecoration: function changeDecoration(id, newRange) {\n        _this._onDidChangeDecorations.fire();\n        _this._changeDecorationImpl(id, newRange);\n      },\n      changeDecorationOptions: function changeDecorationOptions(id, options) {\n        _this._onDidChangeDecorations.fire();\n        _this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n      },\n      removeDecoration: function removeDecoration(id) {\n        _this._onDidChangeDecorations.fire();\n        _this._deltaDecorationsImpl(ownerId, [id], []);\n      },\n      deltaDecorations: function deltaDecorations(oldDecorations, newDecorations) {\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n          // nothing to do\n          return [];\n        }\n        _this._onDidChangeDecorations.fire();\n        return _this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n      }\n    };\n    var result = null;\n    try {\n      result = callback(changeAccessor);\n    } catch (e) {\n      onUnexpectedError(e);\n    }\n    // Invalidate change accessor\n    changeAccessor.addDecoration = invalidFunc;\n    changeAccessor.changeDecoration = invalidFunc;\n    changeAccessor.changeDecorationOptions = invalidFunc;\n    changeAccessor.removeDecoration = invalidFunc;\n    changeAccessor.deltaDecorations = invalidFunc;\n    return result;\n  };\n  TextModel.prototype.deltaDecorations = function (oldDecorations, newDecorations, ownerId) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    this._assertNotDisposed();\n    if (!oldDecorations) {\n      oldDecorations = [];\n    }\n    if (oldDecorations.length === 0 && newDecorations.length === 0) {\n      // nothing to do\n      return [];\n    }\n    try {\n      this._onDidChangeDecorations.beginDeferredEmit();\n      this._onDidChangeDecorations.fire();\n      return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n    } finally {\n      this._onDidChangeDecorations.endDeferredEmit();\n    }\n  };\n  TextModel.prototype._getTrackedRange = function (id) {\n    return this.getDecorationRange(id);\n  };\n  TextModel.prototype._setTrackedRange = function (id, newRange, newStickiness) {\n    var node = id ? this._decorations[id] : null;\n    if (!node) {\n      if (!newRange) {\n        // node doesn't exist, the request is to delete => nothing to do\n        return null;\n      }\n      // node doesn't exist, the request is to set => add the tracked range\n      return this._deltaDecorationsImpl(0, [], [{\n        range: newRange,\n        options: TRACKED_RANGE_OPTIONS[newStickiness]\n      }])[0];\n    }\n    if (!newRange) {\n      // node exists, the request is to delete => delete node\n      this._decorationsTree.delete(node);\n      delete this._decorations[node.id];\n      return null;\n    }\n    // node exists, the request is to set => change the tracked range and its options\n    var range = this._validateRangeRelaxedNoAllocations(newRange);\n    var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n    var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n    this._decorationsTree.delete(node);\n    node.reset(this.getVersionId(), startOffset, endOffset, range);\n    node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n    this._decorationsTree.insert(node);\n    return node.id;\n  };\n  TextModel.prototype.removeAllDecorationsWithOwnerId = function (ownerId) {\n    if (this._isDisposed) {\n      return;\n    }\n    var nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var node = nodes[i];\n      this._decorationsTree.delete(node);\n      delete this._decorations[node.id];\n    }\n  };\n  TextModel.prototype.getDecorationOptions = function (decorationId) {\n    var node = this._decorations[decorationId];\n    if (!node) {\n      return null;\n    }\n    return node.options;\n  };\n  TextModel.prototype.getDecorationRange = function (decorationId) {\n    var node = this._decorations[decorationId];\n    if (!node) {\n      return null;\n    }\n    var versionId = this.getVersionId();\n    if (node.cachedVersionId !== versionId) {\n      this._decorationsTree.resolveNode(node, versionId);\n    }\n    if (node.range === null) {\n      node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n    }\n    return node.range;\n  };\n  TextModel.prototype.getLineDecorations = function (lineNumber, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      return [];\n    }\n    return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n  };\n  TextModel.prototype.getLinesDecorations = function (_startLineNumber, _endLineNumber, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n    var lineCount = this.getLineCount();\n    var startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n    var endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n    var endColumn = this.getLineMaxColumn(endLineNumber);\n    return this._getDecorationsInRange(new Range(startLineNumber, 1, endLineNumber, endColumn), ownerId, filterOutValidation);\n  };\n  TextModel.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n    var validatedRange = this.validateRange(range);\n    return this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\n  };\n  TextModel.prototype.getOverviewRulerDecorations = function (ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n    var versionId = this.getVersionId();\n    var result = this._decorationsTree.search(ownerId, filterOutValidation, true, versionId);\n    return this._ensureNodesHaveRanges(result);\n  };\n  TextModel.prototype.getAllDecorations = function (ownerId, filterOutValidation) {\n    if (ownerId === void 0) {\n      ownerId = 0;\n    }\n    if (filterOutValidation === void 0) {\n      filterOutValidation = false;\n    }\n    var versionId = this.getVersionId();\n    var result = this._decorationsTree.search(ownerId, filterOutValidation, false, versionId);\n    return this._ensureNodesHaveRanges(result);\n  };\n  TextModel.prototype._getDecorationsInRange = function (filterRange, filterOwnerId, filterOutValidation) {\n    var startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n    var endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n    var versionId = this.getVersionId();\n    var result = this._decorationsTree.intervalSearch(startOffset, endOffset, filterOwnerId, filterOutValidation, versionId);\n    return this._ensureNodesHaveRanges(result);\n  };\n  TextModel.prototype._ensureNodesHaveRanges = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var node = nodes[i];\n      if (node.range === null) {\n        node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n      }\n    }\n    return nodes;\n  };\n  TextModel.prototype._getRangeAt = function (start, end) {\n    return this._buffer.getRangeAt(start, end - start);\n  };\n  TextModel.prototype._changeDecorationImpl = function (decorationId, _range) {\n    var node = this._decorations[decorationId];\n    if (!node) {\n      return;\n    }\n    var range = this._validateRangeRelaxedNoAllocations(_range);\n    var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n    var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n    this._decorationsTree.delete(node);\n    node.reset(this.getVersionId(), startOffset, endOffset, range);\n    this._decorationsTree.insert(node);\n  };\n  TextModel.prototype._changeDecorationOptionsImpl = function (decorationId, options) {\n    var node = this._decorations[decorationId];\n    if (!node) {\n      return;\n    }\n    var nodeWasInOverviewRuler = node.options.overviewRuler && node.options.overviewRuler.color ? true : false;\n    var nodeIsInOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n    if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n      // Delete + Insert due to an overview ruler status change\n      this._decorationsTree.delete(node);\n      node.setOptions(options);\n      this._decorationsTree.insert(node);\n    } else {\n      node.setOptions(options);\n    }\n  };\n  TextModel.prototype._deltaDecorationsImpl = function (ownerId, oldDecorationsIds, newDecorations) {\n    var versionId = this.getVersionId();\n    var oldDecorationsLen = oldDecorationsIds.length;\n    var oldDecorationIndex = 0;\n    var newDecorationsLen = newDecorations.length;\n    var newDecorationIndex = 0;\n    var result = new Array(newDecorationsLen);\n    while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n      var node = null;\n      if (oldDecorationIndex < oldDecorationsLen) {\n        // (1) get ourselves an old node\n        do {\n          node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n        } while (!node && oldDecorationIndex < oldDecorationsLen);\n        // (2) remove the node from the tree (if it exists)\n        if (node) {\n          this._decorationsTree.delete(node);\n        }\n      }\n      if (newDecorationIndex < newDecorationsLen) {\n        // (3) create a new node if necessary\n        if (!node) {\n          var internalDecorationId = ++this._lastDecorationId;\n          var decorationId = this._instanceId + \";\" + internalDecorationId;\n          node = new IntervalNode(decorationId, 0, 0);\n          this._decorations[decorationId] = node;\n        }\n        // (4) initialize node\n        var newDecoration = newDecorations[newDecorationIndex];\n        var range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n        var options = _normalizeOptions(newDecoration.options);\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        node.ownerId = ownerId;\n        node.reset(versionId, startOffset, endOffset, range);\n        node.setOptions(options);\n        this._decorationsTree.insert(node);\n        result[newDecorationIndex] = node.id;\n        newDecorationIndex++;\n      } else {\n        if (node) {\n          delete this._decorations[node.id];\n        }\n      }\n    }\n    return result;\n  };\n  //#endregion\n  //#region Tokenization\n  TextModel.prototype.setLineTokens = function (lineNumber, tokens) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    this._tokens.setTokens(this._languageIdentifier.id, lineNumber - 1, this._buffer.getLineLength(lineNumber), tokens);\n  };\n  TextModel.prototype.setTokens = function (tokens) {\n    if (tokens.length === 0) {\n      return;\n    }\n    var ranges = [];\n    for (var i = 0, len = tokens.length; i < len; i++) {\n      var element = tokens[i];\n      ranges.push({\n        fromLineNumber: element.startLineNumber,\n        toLineNumber: element.startLineNumber + element.tokens.length - 1\n      });\n      for (var j = 0, lenJ = element.tokens.length; j < lenJ; j++) {\n        this.setLineTokens(element.startLineNumber + j, element.tokens[j]);\n      }\n    }\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: false,\n      ranges: ranges\n    });\n  };\n  TextModel.prototype.setSemanticTokens = function (tokens) {\n    this._tokens2.set(tokens);\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: false,\n      ranges: [{\n        fromLineNumber: 1,\n        toLineNumber: this.getLineCount()\n      }]\n    });\n  };\n  TextModel.prototype.tokenizeViewport = function (startLineNumber, endLineNumber) {\n    startLineNumber = Math.max(1, startLineNumber);\n    endLineNumber = Math.min(this._buffer.getLineCount(), endLineNumber);\n    this._tokenization.tokenizeViewport(startLineNumber, endLineNumber);\n  };\n  TextModel.prototype.clearTokens = function () {\n    this._tokens.flush();\n    this._emitModelTokensChangedEvent({\n      tokenizationSupportChanged: true,\n      ranges: [{\n        fromLineNumber: 1,\n        toLineNumber: this._buffer.getLineCount()\n      }]\n    });\n  };\n  TextModel.prototype._emitModelTokensChangedEvent = function (e) {\n    if (!this._isDisposing) {\n      this._onDidChangeTokens.fire(e);\n    }\n  };\n  TextModel.prototype.resetTokenization = function () {\n    this._tokenization.reset();\n  };\n  TextModel.prototype.forceTokenization = function (lineNumber) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    this._tokenization.forceTokenization(lineNumber);\n  };\n  TextModel.prototype.isCheapToTokenize = function (lineNumber) {\n    return this._tokenization.isCheapToTokenize(lineNumber);\n  };\n  TextModel.prototype.tokenizeIfCheap = function (lineNumber) {\n    if (this.isCheapToTokenize(lineNumber)) {\n      this.forceTokenization(lineNumber);\n    }\n  };\n  TextModel.prototype.getLineTokens = function (lineNumber) {\n    if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    return this._getLineTokens(lineNumber);\n  };\n  TextModel.prototype._getLineTokens = function (lineNumber) {\n    var lineText = this.getLineContent(lineNumber);\n    var syntacticTokens = this._tokens.getTokens(this._languageIdentifier.id, lineNumber - 1, lineText);\n    return this._tokens2.addSemanticTokens(lineNumber, syntacticTokens);\n  };\n  TextModel.prototype.getLanguageIdentifier = function () {\n    return this._languageIdentifier;\n  };\n  TextModel.prototype.getModeId = function () {\n    return this._languageIdentifier.language;\n  };\n  TextModel.prototype.setMode = function (languageIdentifier) {\n    if (this._languageIdentifier.id === languageIdentifier.id) {\n      // There's nothing to do\n      return;\n    }\n    var e = {\n      oldLanguage: this._languageIdentifier.language,\n      newLanguage: languageIdentifier.language\n    };\n    this._languageIdentifier = languageIdentifier;\n    this._onDidChangeLanguage.fire(e);\n    this._onDidChangeLanguageConfiguration.fire({});\n  };\n  TextModel.prototype.getLanguageIdAtPosition = function (lineNumber, column) {\n    var position = this.validatePosition(new Position(lineNumber, column));\n    var lineTokens = this.getLineTokens(position.lineNumber);\n    return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n  };\n  // Having tokens allows implementing additional helper methods\n  TextModel.prototype.getWordAtPosition = function (_position) {\n    this._assertNotDisposed();\n    var position = this.validatePosition(_position);\n    var lineContent = this.getLineContent(position.lineNumber);\n    var lineTokens = this._getLineTokens(position.lineNumber);\n    var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n    // (1). First try checking right biased word\n    var _a = TextModel._findLanguageBoundaries(lineTokens, tokenIndex),\n      rbStartOffset = _a[0],\n      rbEndOffset = _a[1];\n    var rightBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex)), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n    // Make sure the result touches the original passed in position\n    if (rightBiasedWord && rightBiasedWord.startColumn <= _position.column && _position.column <= rightBiasedWord.endColumn) {\n      return rightBiasedWord;\n    }\n    // (2). Else, if we were at a language boundary, check the left biased word\n    if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n      // edge case, where `position` sits between two tokens belonging to two different languages\n      var _b = TextModel._findLanguageBoundaries(lineTokens, tokenIndex - 1),\n        lbStartOffset = _b[0],\n        lbEndOffset = _b[1];\n      var leftBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex - 1)), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n      // Make sure the result touches the original passed in position\n      if (leftBiasedWord && leftBiasedWord.startColumn <= _position.column && _position.column <= leftBiasedWord.endColumn) {\n        return leftBiasedWord;\n      }\n    }\n    return null;\n  };\n  TextModel._findLanguageBoundaries = function (lineTokens, tokenIndex) {\n    var languageId = lineTokens.getLanguageId(tokenIndex);\n    // go left until a different language is hit\n    var startOffset = 0;\n    for (var i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n      startOffset = lineTokens.getStartOffset(i);\n    }\n    // go right until a different language is hit\n    var endOffset = lineTokens.getLineContent().length;\n    for (var i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n      endOffset = lineTokens.getEndOffset(i);\n    }\n    return [startOffset, endOffset];\n  };\n  TextModel.prototype.getWordUntilPosition = function (position) {\n    var wordAtPosition = this.getWordAtPosition(position);\n    if (!wordAtPosition) {\n      return {\n        word: '',\n        startColumn: position.column,\n        endColumn: position.column\n      };\n    }\n    return {\n      word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n      startColumn: wordAtPosition.startColumn,\n      endColumn: position.column\n    };\n  };\n  TextModel.prototype.findMatchingBracketUp = function (_bracket, _position) {\n    var bracket = _bracket.toLowerCase();\n    var position = this.validatePosition(_position);\n    var lineTokens = this._getLineTokens(position.lineNumber);\n    var languageId = lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    var bracketsSupport = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n    if (!bracketsSupport) {\n      return null;\n    }\n    var data = bracketsSupport.textIsBracket[bracket];\n    if (!data) {\n      return null;\n    }\n    return this._findMatchingBracketUp(data, position);\n  };\n  TextModel.prototype.matchBracket = function (position) {\n    return this._matchBracket(this.validatePosition(position));\n  };\n  TextModel.prototype._matchBracket = function (position) {\n    var lineNumber = position.lineNumber;\n    var lineTokens = this._getLineTokens(lineNumber);\n    var tokenCount = lineTokens.getCount();\n    var lineText = this._buffer.getLineContent(lineNumber);\n    var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n    if (tokenIndex < 0) {\n      return null;\n    }\n    var currentModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(tokenIndex));\n    // check that the token is not to be ignored\n    if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n      // limit search to not go before `maxBracketLength`\n      var searchStartOffset = Math.max(0, position.column - 1 - currentModeBrackets.maxBracketLength);\n      for (var i = tokenIndex - 1; i >= 0; i--) {\n        var tokenEndOffset = lineTokens.getEndOffset(i);\n        if (tokenEndOffset <= searchStartOffset) {\n          break;\n        }\n        if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\n          searchStartOffset = tokenEndOffset;\n        }\n      }\n      // limit search to not go after `maxBracketLength`\n      var searchEndOffset = Math.min(lineText.length, position.column - 1 + currentModeBrackets.maxBracketLength);\n      // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n      // `bestResult` will contain the most right-side result\n      var bestResult = null;\n      while (true) {\n        var foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!foundBracket) {\n          // there are no more brackets in this text\n          break;\n        }\n        // check that we didn't hit a bracket too far away from position\n        if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n          var r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\n          if (r) {\n            bestResult = r;\n          }\n        }\n        searchStartOffset = foundBracket.endColumn - 1;\n      }\n      if (bestResult) {\n        return bestResult;\n      }\n    }\n    // If position is in between two tokens, try also looking in the previous token\n    if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n      var prevTokenIndex = tokenIndex - 1;\n      var prevModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(prevTokenIndex));\n      // check that previous token is not to be ignored\n      if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n        // limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\n        var searchStartOffset = Math.max(0, position.column - 1 - prevModeBrackets.maxBracketLength);\n        var searchEndOffset = Math.min(lineText.length, position.column - 1 + prevModeBrackets.maxBracketLength);\n        for (var i = prevTokenIndex + 1; i < tokenCount; i++) {\n          var tokenStartOffset = lineTokens.getStartOffset(i);\n          if (tokenStartOffset >= searchEndOffset) {\n            break;\n          }\n          if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\n            searchEndOffset = tokenStartOffset;\n          }\n        }\n        var foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        // check that we didn't hit a bracket too far away from position\n        if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n          var r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\n          if (r) {\n            return r;\n          }\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype._matchFoundBracket = function (foundBracket, data, isOpen) {\n    if (!data) {\n      return null;\n    }\n    if (isOpen) {\n      var matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\n      if (matched) {\n        return [foundBracket, matched];\n      }\n    } else {\n      var matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\n      if (matched) {\n        return [foundBracket, matched];\n      }\n    }\n    return null;\n  };\n  TextModel.prototype._findMatchingBracketUp = function (bracket, position) {\n    // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    var languageId = bracket.languageIdentifier.id;\n    var reversedBracketRegex = bracket.reversedRegex;\n    var count = -1;\n    var searchPrevMatchingBracketInRange = function searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n        if (count === 0) {\n          return r;\n        }\n        searchEndOffset = r.startColumn - 1;\n      }\n      return null;\n    };\n    for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      var lineTokens = this._getLineTokens(lineNumber);\n      var tokenCount = lineTokens.getCount();\n      var lineText = this._buffer.getLineContent(lineNumber);\n      var tokenIndex = tokenCount - 1;\n      var searchStartOffset = lineText.length;\n      var searchEndOffset = lineText.length;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n      var prevSearchInToken = true;\n      for (; tokenIndex >= 0; tokenIndex--) {\n        var searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return r;\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype._findMatchingBracketDown = function (bracket, position) {\n    // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    var languageId = bracket.languageIdentifier.id;\n    var bracketRegex = bracket.forwardRegex;\n    var count = 1;\n    var searchNextMatchingBracketInRange = function searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n        if (count === 0) {\n          return r;\n        }\n        searchStartOffset = r.endColumn - 1;\n      }\n      return null;\n    };\n    var lineCount = this.getLineCount();\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var lineTokens = this._getLineTokens(lineNumber);\n      var tokenCount = lineTokens.getCount();\n      var lineText = this._buffer.getLineContent(lineNumber);\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n      var prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return r;\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype.findPrevBracket = function (_position) {\n    var position = this.validatePosition(_position);\n    var languageId = -1;\n    var modeBrackets = null;\n    for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      var lineTokens = this._getLineTokens(lineNumber);\n      var tokenCount = lineTokens.getCount();\n      var lineText = this._buffer.getLineContent(lineNumber);\n      var tokenIndex = tokenCount - 1;\n      var searchStartOffset = lineText.length;\n      var searchEndOffset = lineText.length;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n      }\n      var prevSearchInToken = true;\n      for (; tokenIndex >= 0; tokenIndex--) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return this._toFoundBracket(modeBrackets, r);\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype.findNextBracket = function (_position) {\n    var position = this.validatePosition(_position);\n    var lineCount = this.getLineCount();\n    var languageId = -1;\n    var modeBrackets = null;\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var lineTokens = this._getLineTokens(lineNumber);\n      var tokenCount = lineTokens.getCount();\n      var lineText = this._buffer.getLineContent(lineNumber);\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n      }\n      var prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n        }\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(modeBrackets, r);\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return this._toFoundBracket(modeBrackets, r);\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype.findEnclosingBrackets = function (_position, maxDuration) {\n    var _this = this;\n    if (maxDuration === void 0) {\n      maxDuration = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n    }\n    var position = this.validatePosition(_position);\n    var lineCount = this.getLineCount();\n    var savedCounts = new Map();\n    var counts = [];\n    var resetCounts = function resetCounts(languageId, modeBrackets) {\n      if (!savedCounts.has(languageId)) {\n        var tmp = [];\n        for (var i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n          tmp[i] = 0;\n        }\n        savedCounts.set(languageId, tmp);\n      }\n      counts = savedCounts.get(languageId);\n    };\n    var searchInRange = function searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) {\n      while (true) {\n        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        var bracket = modeBrackets.textIsBracket[hitText];\n        if (bracket) {\n          if (bracket.isOpen(hitText)) {\n            counts[bracket.index]++;\n          } else if (bracket.isClose(hitText)) {\n            counts[bracket.index]--;\n          }\n          if (counts[bracket.index] === -1) {\n            return _this._matchFoundBracket(r, bracket, false);\n          }\n        }\n        searchStartOffset = r.endColumn - 1;\n      }\n      return null;\n    };\n    var languageId = -1;\n    var modeBrackets = null;\n    var startTime = Date.now();\n    for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      var elapsedTime = Date.now() - startTime;\n      if (elapsedTime > maxDuration) {\n        return null;\n      }\n      var lineTokens = this._getLineTokens(lineNumber);\n      var tokenCount = lineTokens.getCount();\n      var lineText = this._buffer.getLineContent(lineNumber);\n      var tokenIndex = 0;\n      var searchStartOffset = 0;\n      var searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n          resetCounts(languageId, modeBrackets);\n        }\n      }\n      var prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\n          resetCounts(languageId, modeBrackets);\n        }\n        var searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return r;\n        }\n      }\n    }\n    return null;\n  };\n  TextModel.prototype._toFoundBracket = function (modeBrackets, r) {\n    if (!r) {\n      return null;\n    }\n    var text = this.getValueInRange(r);\n    text = text.toLowerCase();\n    var data = modeBrackets.textIsBracket[text];\n    if (!data) {\n      return null;\n    }\n    return {\n      range: r,\n      open: data.open,\n      close: data.close,\n      isOpen: modeBrackets.textIsOpenBracket[text]\n    };\n  };\n  /**\r\n   * Returns:\r\n   *  - -1 => the line consists of whitespace\r\n   *  - otherwise => the indent level is returned value\r\n   */\n  TextModel.computeIndentLevel = function (line, tabSize) {\n    var indent = 0;\n    var i = 0;\n    var len = line.length;\n    while (i < len) {\n      var chCode = line.charCodeAt(i);\n      if (chCode === 32 /* Space */) {\n        indent++;\n      } else if (chCode === 9 /* Tab */) {\n        indent = indent - indent % tabSize + tabSize;\n      } else {\n        break;\n      }\n      i++;\n    }\n    if (i === len) {\n      return -1; // line only consists of whitespace\n    }\n\n    return indent;\n  };\n  TextModel.prototype._computeIndentLevel = function (lineIndex) {\n    return TextModel.computeIndentLevel(this._buffer.getLineContent(lineIndex + 1), this._options.tabSize);\n  };\n  TextModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\n    var _this = this;\n    this._assertNotDisposed();\n    var lineCount = this.getLineCount();\n    if (lineNumber < 1 || lineNumber > lineCount) {\n      throw new Error('Illegal value for lineNumber');\n    }\n    var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\n    var offSide = Boolean(foldingRules && foldingRules.offSide);\n    var up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var up_aboveContentLineIndent = -1;\n    var up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var up_belowContentLineIndent = -1;\n    var up_resolveIndents = function up_resolveIndents(lineNumber) {\n      if (up_aboveContentLineIndex !== -1 && (up_aboveContentLineIndex === -2 || up_aboveContentLineIndex > lineNumber - 1)) {\n        up_aboveContentLineIndex = -1;\n        up_aboveContentLineIndent = -1;\n        // must find previous line with content\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent_1 = _this._computeIndentLevel(lineIndex);\n          if (indent_1 >= 0) {\n            up_aboveContentLineIndex = lineIndex;\n            up_aboveContentLineIndent = indent_1;\n            break;\n          }\n        }\n      }\n      if (up_belowContentLineIndex === -2) {\n        up_belowContentLineIndex = -1;\n        up_belowContentLineIndent = -1;\n        // must find next line with content\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent_2 = _this._computeIndentLevel(lineIndex);\n          if (indent_2 >= 0) {\n            up_belowContentLineIndex = lineIndex;\n            up_belowContentLineIndent = indent_2;\n            break;\n          }\n        }\n      }\n    };\n    var down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var down_aboveContentLineIndent = -1;\n    var down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var down_belowContentLineIndent = -1;\n    var down_resolveIndents = function down_resolveIndents(lineNumber) {\n      if (down_aboveContentLineIndex === -2) {\n        down_aboveContentLineIndex = -1;\n        down_aboveContentLineIndent = -1;\n        // must find previous line with content\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent_3 = _this._computeIndentLevel(lineIndex);\n          if (indent_3 >= 0) {\n            down_aboveContentLineIndex = lineIndex;\n            down_aboveContentLineIndent = indent_3;\n            break;\n          }\n        }\n      }\n      if (down_belowContentLineIndex !== -1 && (down_belowContentLineIndex === -2 || down_belowContentLineIndex < lineNumber - 1)) {\n        down_belowContentLineIndex = -1;\n        down_belowContentLineIndent = -1;\n        // must find next line with content\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent_4 = _this._computeIndentLevel(lineIndex);\n          if (indent_4 >= 0) {\n            down_belowContentLineIndex = lineIndex;\n            down_belowContentLineIndent = indent_4;\n            break;\n          }\n        }\n      }\n    };\n    var startLineNumber = 0;\n    var goUp = true;\n    var endLineNumber = 0;\n    var goDown = true;\n    var indent = 0;\n    for (var distance = 0; goUp || goDown; distance++) {\n      var upLineNumber = lineNumber - distance;\n      var downLineNumber = lineNumber + distance;\n      if (distance !== 0 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n        goUp = false;\n      }\n      if (distance !== 0 && (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n        goDown = false;\n      }\n      if (distance > 50000) {\n        // stop processing\n        goUp = false;\n        goDown = false;\n      }\n      if (goUp) {\n        // compute indent level going up\n        var upLineIndentLevel = void 0;\n        var currentIndent = this._computeIndentLevel(upLineNumber - 1);\n        if (currentIndent >= 0) {\n          // This line has content (besides whitespace)\n          // Use the line's indent\n          up_belowContentLineIndex = upLineNumber - 1;\n          up_belowContentLineIndent = currentIndent;\n          upLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\n        } else {\n          up_resolveIndents(upLineNumber);\n          upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n        }\n        if (distance === 0) {\n          // This is the initial line number\n          startLineNumber = upLineNumber;\n          endLineNumber = downLineNumber;\n          indent = upLineIndentLevel;\n          if (indent === 0) {\n            // No need to continue\n            return {\n              startLineNumber: startLineNumber,\n              endLineNumber: endLineNumber,\n              indent: indent\n            };\n          }\n          continue;\n        }\n        if (upLineIndentLevel >= indent) {\n          startLineNumber = upLineNumber;\n        } else {\n          goUp = false;\n        }\n      }\n      if (goDown) {\n        // compute indent level going down\n        var downLineIndentLevel = void 0;\n        var currentIndent = this._computeIndentLevel(downLineNumber - 1);\n        if (currentIndent >= 0) {\n          // This line has content (besides whitespace)\n          // Use the line's indent\n          down_aboveContentLineIndex = downLineNumber - 1;\n          down_aboveContentLineIndent = currentIndent;\n          downLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\n        } else {\n          down_resolveIndents(downLineNumber);\n          downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n        }\n        if (downLineIndentLevel >= indent) {\n          endLineNumber = downLineNumber;\n        } else {\n          goDown = false;\n        }\n      }\n    }\n    return {\n      startLineNumber: startLineNumber,\n      endLineNumber: endLineNumber,\n      indent: indent\n    };\n  };\n  TextModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\n    this._assertNotDisposed();\n    var lineCount = this.getLineCount();\n    if (startLineNumber < 1 || startLineNumber > lineCount) {\n      throw new Error('Illegal value for startLineNumber');\n    }\n    if (endLineNumber < 1 || endLineNumber > lineCount) {\n      throw new Error('Illegal value for endLineNumber');\n    }\n    var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\n    var offSide = Boolean(foldingRules && foldingRules.offSide);\n    var result = new Array(endLineNumber - startLineNumber + 1);\n    var aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var aboveContentLineIndent = -1;\n    var belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n    var belowContentLineIndent = -1;\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var resultIndex = lineNumber - startLineNumber;\n      var currentIndent = this._computeIndentLevel(lineNumber - 1);\n      if (currentIndent >= 0) {\n        // This line has content (besides whitespace)\n        // Use the line's indent\n        aboveContentLineIndex = lineNumber - 1;\n        aboveContentLineIndent = currentIndent;\n        result[resultIndex] = Math.ceil(currentIndent / this._options.indentSize);\n        continue;\n      }\n      if (aboveContentLineIndex === -2) {\n        aboveContentLineIndex = -1;\n        aboveContentLineIndent = -1;\n        // must find previous line with content\n        for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n          var indent = this._computeIndentLevel(lineIndex);\n          if (indent >= 0) {\n            aboveContentLineIndex = lineIndex;\n            aboveContentLineIndent = indent;\n            break;\n          }\n        }\n      }\n      if (belowContentLineIndex !== -1 && (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n        belowContentLineIndex = -1;\n        belowContentLineIndent = -1;\n        // must find next line with content\n        for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n          var indent = this._computeIndentLevel(lineIndex);\n          if (indent >= 0) {\n            belowContentLineIndex = lineIndex;\n            belowContentLineIndent = indent;\n            break;\n          }\n        }\n      }\n      result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n    }\n    return result;\n  };\n  TextModel.prototype._getIndentLevelForWhitespaceLine = function (offSide, aboveContentLineIndent, belowContentLineIndent) {\n    if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n      // At the top or bottom of the file\n      return 0;\n    } else if (aboveContentLineIndent < belowContentLineIndent) {\n      // we are inside the region above\n      return 1 + Math.floor(aboveContentLineIndent / this._options.indentSize);\n    } else if (aboveContentLineIndent === belowContentLineIndent) {\n      // we are in between two regions\n      return Math.ceil(belowContentLineIndent / this._options.indentSize);\n    } else {\n      if (offSide) {\n        // same level as region below\n        return Math.ceil(belowContentLineIndent / this._options.indentSize);\n      } else {\n        // we are inside the region that ends below\n        return 1 + Math.floor(belowContentLineIndent / this._options.indentSize);\n      }\n    }\n  };\n  TextModel.MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB\n  TextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\n  TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\n  TextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations\n  };\n  return TextModel;\n}(Disposable);\nexport { TextModel };\n//#region Decorations\nvar DecorationsTrees = /** @class */function () {\n  function DecorationsTrees() {\n    this._decorationsTree0 = new IntervalTree();\n    this._decorationsTree1 = new IntervalTree();\n  }\n  DecorationsTrees.prototype.intervalSearch = function (start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n    var r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n    var r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n    return r0.concat(r1);\n  };\n  DecorationsTrees.prototype.search = function (filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\n    if (overviewRulerOnly) {\n      return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n    } else {\n      var r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\n      var r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n      return r0.concat(r1);\n    }\n  };\n  DecorationsTrees.prototype.collectNodesFromOwner = function (ownerId) {\n    var r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n    var r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n    return r0.concat(r1);\n  };\n  DecorationsTrees.prototype.collectNodesPostOrder = function () {\n    var r0 = this._decorationsTree0.collectNodesPostOrder();\n    var r1 = this._decorationsTree1.collectNodesPostOrder();\n    return r0.concat(r1);\n  };\n  DecorationsTrees.prototype.insert = function (node) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.insert(node);\n    } else {\n      this._decorationsTree0.insert(node);\n    }\n  };\n  DecorationsTrees.prototype.delete = function (node) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.delete(node);\n    } else {\n      this._decorationsTree0.delete(node);\n    }\n  };\n  DecorationsTrees.prototype.resolveNode = function (node, cachedVersionId) {\n    if (getNodeIsInOverviewRuler(node)) {\n      this._decorationsTree1.resolveNode(node, cachedVersionId);\n    } else {\n      this._decorationsTree0.resolveNode(node, cachedVersionId);\n    }\n  };\n  DecorationsTrees.prototype.acceptReplace = function (offset, length, textLength, forceMoveMarkers) {\n    this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n  };\n  return DecorationsTrees;\n}();\nfunction cleanClassName(className) {\n  return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nvar DecorationOptions = /** @class */function () {\n  function DecorationOptions(options) {\n    this.color = options.color || '';\n    this.darkColor = options.darkColor || '';\n  }\n  return DecorationOptions;\n}();\nvar ModelDecorationOverviewRulerOptions = /** @class */function (_super) {\n  __extends(ModelDecorationOverviewRulerOptions, _super);\n  function ModelDecorationOverviewRulerOptions(options) {\n    var _this = _super.call(this, options) || this;\n    _this._resolvedColor = null;\n    _this.position = typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center;\n    return _this;\n  }\n  ModelDecorationOverviewRulerOptions.prototype.getColor = function (theme) {\n    if (!this._resolvedColor) {\n      if (theme.type !== 'light' && this.darkColor) {\n        this._resolvedColor = this._resolveColor(this.darkColor, theme);\n      } else {\n        this._resolvedColor = this._resolveColor(this.color, theme);\n      }\n    }\n    return this._resolvedColor;\n  };\n  ModelDecorationOverviewRulerOptions.prototype.invalidateCachedColor = function () {\n    this._resolvedColor = null;\n  };\n  ModelDecorationOverviewRulerOptions.prototype._resolveColor = function (color, theme) {\n    if (typeof color === 'string') {\n      return color;\n    }\n    var c = color ? theme.getColor(color.id) : null;\n    if (!c) {\n      return '';\n    }\n    return c.toString();\n  };\n  return ModelDecorationOverviewRulerOptions;\n}(DecorationOptions);\nexport { ModelDecorationOverviewRulerOptions };\nvar ModelDecorationMinimapOptions = /** @class */function (_super) {\n  __extends(ModelDecorationMinimapOptions, _super);\n  function ModelDecorationMinimapOptions(options) {\n    var _this = _super.call(this, options) || this;\n    _this.position = options.position;\n    return _this;\n  }\n  ModelDecorationMinimapOptions.prototype.getColor = function (theme) {\n    if (!this._resolvedColor) {\n      if (theme.type !== 'light' && this.darkColor) {\n        this._resolvedColor = this._resolveColor(this.darkColor, theme);\n      } else {\n        this._resolvedColor = this._resolveColor(this.color, theme);\n      }\n    }\n    return this._resolvedColor;\n  };\n  ModelDecorationMinimapOptions.prototype.invalidateCachedColor = function () {\n    this._resolvedColor = undefined;\n  };\n  ModelDecorationMinimapOptions.prototype._resolveColor = function (color, theme) {\n    if (typeof color === 'string') {\n      return Color.fromHex(color);\n    }\n    return theme.getColor(color.id);\n  };\n  return ModelDecorationMinimapOptions;\n}(DecorationOptions);\nexport { ModelDecorationMinimapOptions };\nvar ModelDecorationOptions = /** @class */function () {\n  function ModelDecorationOptions(options) {\n    this.stickiness = options.stickiness || 0 /* AlwaysGrowsWhenTypingAtEdges */;\n    this.zIndex = options.zIndex || 0;\n    this.className = options.className ? cleanClassName(options.className) : null;\n    this.hoverMessage = withUndefinedAsNull(options.hoverMessage);\n    this.glyphMarginHoverMessage = withUndefinedAsNull(options.glyphMarginHoverMessage);\n    this.isWholeLine = options.isWholeLine || false;\n    this.showIfCollapsed = options.showIfCollapsed || false;\n    this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n    this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n    this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n    this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n    this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n    this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n    this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n    this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n    this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n    this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n  }\n  ModelDecorationOptions.register = function (options) {\n    return new ModelDecorationOptions(options);\n  };\n  ModelDecorationOptions.createDynamic = function (options) {\n    return new ModelDecorationOptions(options);\n  };\n  return ModelDecorationOptions;\n}();\nexport { ModelDecorationOptions };\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({});\n/**\r\n * The order carefully matches the values of the enum.\r\n */\nvar TRACKED_RANGE_OPTIONS = [ModelDecorationOptions.register({\n  stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */\n}), ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\n}), ModelDecorationOptions.register({\n  stickiness: 2 /* GrowsOnlyWhenTypingBefore */\n}), ModelDecorationOptions.register({\n  stickiness: 3 /* GrowsOnlyWhenTypingAfter */\n})];\n\nfunction _normalizeOptions(options) {\n  if (options instanceof ModelDecorationOptions) {\n    return options;\n  }\n  return ModelDecorationOptions.createDynamic(options);\n}\nvar DidChangeDecorationsEmitter = /** @class */function (_super) {\n  __extends(DidChangeDecorationsEmitter, _super);\n  function DidChangeDecorationsEmitter() {\n    var _this = _super.call(this) || this;\n    _this._actual = _this._register(new Emitter());\n    _this.event = _this._actual.event;\n    _this._deferredCnt = 0;\n    _this._shouldFire = false;\n    return _this;\n  }\n  DidChangeDecorationsEmitter.prototype.beginDeferredEmit = function () {\n    this._deferredCnt++;\n  };\n  DidChangeDecorationsEmitter.prototype.endDeferredEmit = function () {\n    this._deferredCnt--;\n    if (this._deferredCnt === 0) {\n      if (this._shouldFire) {\n        this._shouldFire = false;\n        this._actual.fire({});\n      }\n    }\n  };\n  DidChangeDecorationsEmitter.prototype.fire = function () {\n    this._shouldFire = true;\n  };\n  return DidChangeDecorationsEmitter;\n}(Disposable);\nexport { DidChangeDecorationsEmitter };\n//#endregion\nvar DidChangeContentEmitter = /** @class */function (_super) {\n  __extends(DidChangeContentEmitter, _super);\n  function DidChangeContentEmitter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\r\n     */\n    _this._fastEmitter = _this._register(new Emitter());\n    _this.fastEvent = _this._fastEmitter.event;\n    _this._slowEmitter = _this._register(new Emitter());\n    _this.slowEvent = _this._slowEmitter.event;\n    _this._deferredCnt = 0;\n    _this._deferredEvent = null;\n    return _this;\n  }\n  DidChangeContentEmitter.prototype.beginDeferredEmit = function () {\n    this._deferredCnt++;\n  };\n  DidChangeContentEmitter.prototype.endDeferredEmit = function () {\n    this._deferredCnt--;\n    if (this._deferredCnt === 0) {\n      if (this._deferredEvent !== null) {\n        var e = this._deferredEvent;\n        this._deferredEvent = null;\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n      }\n    }\n  };\n  DidChangeContentEmitter.prototype.fire = function (e) {\n    if (this._deferredCnt > 0) {\n      if (this._deferredEvent) {\n        this._deferredEvent = this._deferredEvent.merge(e);\n      } else {\n        this._deferredEvent = e;\n      }\n      return;\n    }\n    this._fastEmitter.fire(e);\n    this._slowEmitter.fire(e);\n  };\n  return DidChangeContentEmitter;\n}(Disposable);\nexport { DidChangeContentEmitter };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","onUnexpectedError","Emitter","Disposable","strings","URI","EDITOR_MODEL_DEFAULTS","Position","Range","Selection","model","EditStack","guessIndentation","IntervalNode","IntervalTree","getNodeIsInOverviewRuler","recomputeMaxEnd","PieceTreeTextBufferBuilder","InternalModelContentChangeEvent","ModelRawContentChangedEvent","ModelRawEOLChanged","ModelRawFlush","ModelRawLineChanged","ModelRawLinesDeleted","ModelRawLinesInserted","SearchParams","TextModelSearch","TextModelTokenization","getWordAtText","LanguageConfigurationRegistry","NULL_LANGUAGE_IDENTIFIER","ignoreBracketsInToken","BracketsUtils","withUndefinedAsNull","TokensStore","countEOL","TokensStore2","Color","createTextBufferBuilder","createTextBufferFactory","text","builder","acceptChunk","finish","createTextBuffer","value","defaultEOL","factory","MODEL_ID","LIMIT_FIND_COUNT","LONG_LINE_BOUNDARY","invalidFunc","Error","TextModel","_super","source","creationOptions","languageIdentifier","associatedResource","_this","call","_onWillDispose","_register","onWillDispose","event","_onDidChangeDecorations","DidChangeDecorationsEmitter","onDidChangeDecorations","_onDidChangeLanguage","onDidChangeLanguage","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_eventEmitter","DidChangeContentEmitter","id","isForSimpleWidget","_associatedResource","parse","_attachedEditorCount","_buffer","_options","resolveOptions","bufferLineCount","getLineCount","bufferTextLength","getValueLengthInRange","getLineLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","MODEL_SYNC_LIMIT","_versionId","_alternativeVersionId","_isDisposed","_isDisposing","_languageIdentifier","_languageRegistryListener","onDidChange","e","fire","_instanceId","singleLetterHash","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","_tokens","_tokens2","_tokenization","createFromString","options","uri","DEFAULT_CREATION_OPTIONS","textBuffer","detectIndentation","guessedIndentation","tabSize","insertSpaces","TextModelResolvedOptions","indentSize","trimAutoWhitespace","onDidChangeRawContentFast","listener","fastEvent","rawContentChangedEvent","onDidChangeRawContent","slowEvent","onDidChangeContentFast","contentChangedEvent","onDidChangeContent","dispose","_assertNotDisposed","_emitContentChangedEvent","rawChange","change","setValue","setValueFromTextBuffer","_createContentChanged2","range","rangeOffset","rangeLength","isUndoing","isRedoing","isFlush","changes","eol","getEOL","versionId","getVersionId","oldFullModelRange","getFullModelRange","oldModelValueLength","endLineNumber","endColumn","getLineMaxColumn","_increaseVersionId","flush","getValue","setEOL","newEOL","_onBeforeEOLChange","_onAfterEOLChange","allDecorations","search","_ensureNodesHaveRanges","collectNodesPostOrder","i","len","length","node","delta","cachedAbsoluteStart","start","startOffset","getOffsetAt","startLineNumber","startColumn","endOffset","cachedAbsoluteEnd","cachedVersionId","end","onBeforeAttached","undefined","onBeforeDetached","isAttachedToEditor","getAttachedEditorCount","isTooLargeForSyncing","isTooLargeForTokenization","isDisposed","isDominatedByLongLines","smallLineCharCount","longLineCharCount","lineCount","lineNumber","lineLength","defineProperty","get","enumerable","configurable","getOptions","getFormattingOptions","updateOptions","_newOpts","newOpts","equals","createChangeEvent","defaultInsertSpaces","defaultTabSize","_normalizeIndentationFromWhitespace","str","spacesCnt","charAt","result","tabsCnt","Math","floor","normalizeIndentation","firstNonWhitespaceIndex","substring","mightContainRTL","mightContainNonBasicASCII","getAlternativeVersionId","rawPosition","position","_validatePosition","column","getPositionAt","rawOffset","offset","min","getLength","max","_overwriteAlternativeVersionId","newAlternativeVersionId","preserveBOM","fullModelRange","fullModelValue","getValueInRange","getBOM","getValueLength","rawRange","validateRange","getCharacterCountInRange","getLineContent","getLinesContent","getLineMinColumn","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","_validateRangeRelaxedNoAllocations","linesCount","initialStartLineNumber","initialStartColumn","maxColumn","initialEndLineNumber","initialEndColumn","_isValidPosition","validationType","isNaN","charCodeBefore","getLineCharCode","isHighSurrogate","_lineNumber","_column","validatePosition","_isValidRange","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","modifyPosition","candidate","findMatchesLineByLine","searchRange","searchData","captureMatches","limitResultCount","findMatches","searchString","rawSearchScope","isRegex","matchCase","wordSeparators","isIRange","indexOf","searchParams","parseSearchRequest","findNextMatch","rawSearchStart","searchStart","ret","findPreviousMatch","pushStackElement","pushEOL","currentEOL","beginDeferredEmit","endDeferredEmit","pushEditOperations","beforeCursorState","editOperations","cursorStateComputer","_pushEditOperations","incomingEdits","map","op","editsAreNearCursors","sel","foundEditNearSel","j","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","isEmpty","push","pushEditOperation","applyEdits","rawOperations","_applyEdits","oldLineCount","newLineCount","contentChanges","trimAutoWhitespaceLineNumbers","rawContentChanges","_a","eolCount","firstLineLength","lastLineLength","acceptEdit","charCodeAt","acceptReplace","forceMoveMarkers","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","editLineNumber","currentEditLineNumber","spliceStartLineNumber","spliceLineNumber","cnt","fromLineNumber","newLines","i_1","reverseEdits","_undo","r","undo","recordedVersionId","selections","canUndo","_redo","redo","canRedo","changeDecorations","callback","ownerId","_changeDecorations","changeAccessor","addDecoration","_deltaDecorationsImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","_getTrackedRange","getDecorationRange","_setTrackedRange","newStickiness","TRACKED_RANGE_OPTIONS","delete","reset","setOptions","insert","removeAllDecorationsWithOwnerId","nodes","collectNodesFromOwner","getDecorationOptions","decorationId","resolveNode","_getRangeAt","getLineDecorations","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","_getDecorationsInRange","getDecorationsInRange","validatedRange","getOverviewRulerDecorations","getAllDecorations","filterRange","filterOwnerId","intervalSearch","getRangeAt","nodeWasInOverviewRuler","overviewRuler","color","nodeIsInOverviewRuler","oldDecorationsIds","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","newDecoration","setLineTokens","tokens","setTokens","ranges","element","toLineNumber","_emitModelTokensChangedEvent","tokenizationSupportChanged","setSemanticTokens","set","tokenizeViewport","clearTokens","resetTokenization","forceTokenization","isCheapToTokenize","tokenizeIfCheap","getLineTokens","_getLineTokens","lineText","syntacticTokens","getTokens","addSemanticTokens","getLanguageIdentifier","getModeId","language","setMode","oldLanguage","newLanguage","getLanguageIdAtPosition","lineTokens","getLanguageId","findTokenIndexAtOffset","getWordAtPosition","_position","lineContent","tokenIndex","_findLanguageBoundaries","rbStartOffset","rbEndOffset","rightBiasedWord","getWordDefinition","_b","lbStartOffset","lbEndOffset","leftBiasedWord","languageId","getStartOffset","tokenCount","getCount","getEndOffset","getWordUntilPosition","wordAtPosition","word","substr","findMatchingBracketUp","_bracket","bracket","toLowerCase","bracketsSupport","getBracketsSupport","data","textIsBracket","_findMatchingBracketUp","matchBracket","_matchBracket","currentModeBrackets","getStandardTokenType","searchStartOffset","maxBracketLength","tokenEndOffset","searchEndOffset","bestResult","foundBracket","findNextBracketInRange","forwardRegex","foundBracketText","_matchFoundBracket","textIsOpenBracket","prevTokenIndex","prevModeBrackets","tokenStartOffset","findPrevBracketInRange","reversedRegex","isOpen","matched","_findMatchingBracketDown","getEndPosition","getStartPosition","reversedBracketRegex","count","searchPrevMatchingBracketInRange","hitText","isClose","prevSearchInToken","searchInToken","bracketRegex","searchNextMatchingBracketInRange","findPrevBracket","modeBrackets","tokenLanguageId","_toFoundBracket","findNextBracket","findEnclosingBrackets","maxDuration","savedCounts","Map","counts","resetCounts","has","tmp","brackets","searchInRange","index","startTime","Date","now","elapsedTime","open","close","computeIndentLevel","line","indent","chCode","_computeIndentLevel","lineIndex","getActiveIndentGuide","minLineNumber","maxLineNumber","foldingRules","getFoldingRules","offSide","Boolean","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","indent_1","indent_2","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","indent_3","indent_4","goUp","goDown","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","ceil","_getIndentLevelForWhitespaceLine","downLineIndentLevel","getLinesIndentGuides","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","_decorationsTree0","_decorationsTree1","r0","r1","concat","overviewRulerOnly","textLength","cleanClassName","className","replace","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_resolvedColor","OverviewRulerLane","Center","getColor","theme","type","_resolveColor","invalidateCachedColor","c","toString","ModelDecorationMinimapOptions","fromHex","ModelDecorationOptions","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","showIfCollapsed","collapseOnReplaceEdit","minimap","glyphMarginClassName","linesDecorationsClassName","marginClassName","inlineClassName","inlineClassNameAffectsLetterSpacing","beforeContentClassName","afterContentClassName","register","createDynamic","EMPTY","_actual","_deferredCnt","_shouldFire","_fastEmitter","_slowEmitter","_deferredEvent","merge"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport * as model from '../model.js';\r\nimport { EditStack } from './editStack.js';\r\nimport { guessIndentation } from './indentationGuesser.js';\r\nimport { IntervalNode, IntervalTree, getNodeIsInOverviewRuler, recomputeMaxEnd } from './intervalTree.js';\r\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\r\nimport { InternalModelContentChangeEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from './textModelEvents.js';\r\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\r\nimport { TextModelTokenization } from './textModelTokens.js';\r\nimport { getWordAtText } from './wordHelper.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\r\nimport { ignoreBracketsInToken } from '../modes/supports.js';\r\nimport { BracketsUtils } from '../modes/supports/richEditBrackets.js';\r\nimport { withUndefinedAsNull } from '../../../base/common/types.js';\r\nimport { TokensStore, countEOL, TokensStore2 } from './tokensStore.js';\r\nimport { Color } from '../../../base/common/color.js';\r\nfunction createTextBufferBuilder() {\r\n    return new PieceTreeTextBufferBuilder();\r\n}\r\nexport function createTextBufferFactory(text) {\r\n    var builder = createTextBufferBuilder();\r\n    builder.acceptChunk(text);\r\n    return builder.finish();\r\n}\r\nexport function createTextBuffer(value, defaultEOL) {\r\n    var factory = (typeof value === 'string' ? createTextBufferFactory(value) : value);\r\n    return factory.create(defaultEOL);\r\n}\r\nvar MODEL_ID = 0;\r\nvar LIMIT_FIND_COUNT = 999;\r\nexport var LONG_LINE_BOUNDARY = 10000;\r\nvar invalidFunc = function () { throw new Error(\"Invalid change accessor\"); };\r\nvar TextModel = /** @class */ (function (_super) {\r\n    __extends(TextModel, _super);\r\n    //#endregion\r\n    function TextModel(source, creationOptions, languageIdentifier, associatedResource) {\r\n        if (associatedResource === void 0) { associatedResource = null; }\r\n        var _this = _super.call(this) || this;\r\n        //#region Events\r\n        _this._onWillDispose = _this._register(new Emitter());\r\n        _this.onWillDispose = _this._onWillDispose.event;\r\n        _this._onDidChangeDecorations = _this._register(new DidChangeDecorationsEmitter());\r\n        _this.onDidChangeDecorations = _this._onDidChangeDecorations.event;\r\n        _this._onDidChangeLanguage = _this._register(new Emitter());\r\n        _this.onDidChangeLanguage = _this._onDidChangeLanguage.event;\r\n        _this._onDidChangeLanguageConfiguration = _this._register(new Emitter());\r\n        _this.onDidChangeLanguageConfiguration = _this._onDidChangeLanguageConfiguration.event;\r\n        _this._onDidChangeTokens = _this._register(new Emitter());\r\n        _this.onDidChangeTokens = _this._onDidChangeTokens.event;\r\n        _this._onDidChangeOptions = _this._register(new Emitter());\r\n        _this.onDidChangeOptions = _this._onDidChangeOptions.event;\r\n        _this._onDidChangeAttached = _this._register(new Emitter());\r\n        _this.onDidChangeAttached = _this._onDidChangeAttached.event;\r\n        _this._eventEmitter = _this._register(new DidChangeContentEmitter());\r\n        // Generate a new unique model id\r\n        MODEL_ID++;\r\n        _this.id = '$model' + MODEL_ID;\r\n        _this.isForSimpleWidget = creationOptions.isForSimpleWidget;\r\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\r\n            _this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\r\n        }\r\n        else {\r\n            _this._associatedResource = associatedResource;\r\n        }\r\n        _this._attachedEditorCount = 0;\r\n        _this._buffer = createTextBuffer(source, creationOptions.defaultEOL);\r\n        _this._options = TextModel.resolveOptions(_this._buffer, creationOptions);\r\n        var bufferLineCount = _this._buffer.getLineCount();\r\n        var bufferTextLength = _this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, _this._buffer.getLineLength(bufferLineCount) + 1), 0 /* TextDefined */);\r\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\r\n        // If a model is too large at construction time, it will never get tokenized,\r\n        // under no circumstances.\r\n        if (creationOptions.largeFileOptimizations) {\r\n            _this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\r\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\r\n        }\r\n        else {\r\n            _this._isTooLargeForTokenization = false;\r\n        }\r\n        _this._isTooLargeForSyncing = (bufferTextLength > TextModel.MODEL_SYNC_LIMIT);\r\n        _this._versionId = 1;\r\n        _this._alternativeVersionId = 1;\r\n        _this._isDisposed = false;\r\n        _this._isDisposing = false;\r\n        _this._languageIdentifier = languageIdentifier || NULL_LANGUAGE_IDENTIFIER;\r\n        _this._languageRegistryListener = LanguageConfigurationRegistry.onDidChange(function (e) {\r\n            if (e.languageIdentifier.id === _this._languageIdentifier.id) {\r\n                _this._onDidChangeLanguageConfiguration.fire({});\r\n            }\r\n        });\r\n        _this._instanceId = strings.singleLetterHash(MODEL_ID);\r\n        _this._lastDecorationId = 0;\r\n        _this._decorations = Object.create(null);\r\n        _this._decorationsTree = new DecorationsTrees();\r\n        _this._commandManager = new EditStack(_this);\r\n        _this._isUndoing = false;\r\n        _this._isRedoing = false;\r\n        _this._trimAutoWhitespaceLines = null;\r\n        _this._tokens = new TokensStore();\r\n        _this._tokens2 = new TokensStore2();\r\n        _this._tokenization = new TextModelTokenization(_this);\r\n        return _this;\r\n    }\r\n    TextModel.createFromString = function (text, options, languageIdentifier, uri) {\r\n        if (options === void 0) { options = TextModel.DEFAULT_CREATION_OPTIONS; }\r\n        if (languageIdentifier === void 0) { languageIdentifier = null; }\r\n        if (uri === void 0) { uri = null; }\r\n        return new TextModel(text, options, languageIdentifier, uri);\r\n    };\r\n    TextModel.resolveOptions = function (textBuffer, options) {\r\n        if (options.detectIndentation) {\r\n            var guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\r\n            return new model.TextModelResolvedOptions({\r\n                tabSize: guessedIndentation.tabSize,\r\n                indentSize: guessedIndentation.tabSize,\r\n                insertSpaces: guessedIndentation.insertSpaces,\r\n                trimAutoWhitespace: options.trimAutoWhitespace,\r\n                defaultEOL: options.defaultEOL\r\n            });\r\n        }\r\n        return new model.TextModelResolvedOptions({\r\n            tabSize: options.tabSize,\r\n            indentSize: options.indentSize,\r\n            insertSpaces: options.insertSpaces,\r\n            trimAutoWhitespace: options.trimAutoWhitespace,\r\n            defaultEOL: options.defaultEOL\r\n        });\r\n    };\r\n    TextModel.prototype.onDidChangeRawContentFast = function (listener) {\r\n        return this._eventEmitter.fastEvent(function (e) { return listener(e.rawContentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeRawContent = function (listener) {\r\n        return this._eventEmitter.slowEvent(function (e) { return listener(e.rawContentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeContentFast = function (listener) {\r\n        return this._eventEmitter.fastEvent(function (e) { return listener(e.contentChangedEvent); });\r\n    };\r\n    TextModel.prototype.onDidChangeContent = function (listener) {\r\n        return this._eventEmitter.slowEvent(function (e) { return listener(e.contentChangedEvent); });\r\n    };\r\n    TextModel.prototype.dispose = function () {\r\n        this._isDisposing = true;\r\n        this._onWillDispose.fire();\r\n        this._languageRegistryListener.dispose();\r\n        this._tokenization.dispose();\r\n        this._isDisposed = true;\r\n        _super.prototype.dispose.call(this);\r\n        this._isDisposing = false;\r\n    };\r\n    TextModel.prototype._assertNotDisposed = function () {\r\n        if (this._isDisposed) {\r\n            throw new Error('Model is disposed!');\r\n        }\r\n    };\r\n    TextModel.prototype._emitContentChangedEvent = function (rawChange, change) {\r\n        if (this._isDisposing) {\r\n            // Do not confuse listeners by emitting any event after disposing\r\n            return;\r\n        }\r\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\r\n    };\r\n    TextModel.prototype.setValue = function (value) {\r\n        this._assertNotDisposed();\r\n        if (value === null) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var textBuffer = createTextBuffer(value, this._options.defaultEOL);\r\n        this.setValueFromTextBuffer(textBuffer);\r\n    };\r\n    TextModel.prototype._createContentChanged2 = function (range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\r\n        return {\r\n            changes: [{\r\n                    range: range,\r\n                    rangeOffset: rangeOffset,\r\n                    rangeLength: rangeLength,\r\n                    text: text,\r\n                }],\r\n            eol: this._buffer.getEOL(),\r\n            versionId: this.getVersionId(),\r\n            isUndoing: isUndoing,\r\n            isRedoing: isRedoing,\r\n            isFlush: isFlush\r\n        };\r\n    };\r\n    TextModel.prototype.setValueFromTextBuffer = function (textBuffer) {\r\n        this._assertNotDisposed();\r\n        if (textBuffer === null) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var oldFullModelRange = this.getFullModelRange();\r\n        var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n        var endLineNumber = this.getLineCount();\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        this._buffer = textBuffer;\r\n        this._increaseVersionId();\r\n        // Flush all tokens\r\n        this._tokens.flush();\r\n        this._tokens2.flush();\r\n        // Destroy all my decorations\r\n        this._decorations = Object.create(null);\r\n        this._decorationsTree = new DecorationsTrees();\r\n        // Destroy my edit history and settings\r\n        this._commandManager = new EditStack(this);\r\n        this._trimAutoWhitespaceLines = null;\r\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\r\n            new ModelRawFlush()\r\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\r\n    };\r\n    TextModel.prototype.setEOL = function (eol) {\r\n        this._assertNotDisposed();\r\n        var newEOL = (eol === 1 /* CRLF */ ? '\\r\\n' : '\\n');\r\n        if (this._buffer.getEOL() === newEOL) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        var oldFullModelRange = this.getFullModelRange();\r\n        var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n        var endLineNumber = this.getLineCount();\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        this._onBeforeEOLChange();\r\n        this._buffer.setEOL(newEOL);\r\n        this._increaseVersionId();\r\n        this._onAfterEOLChange();\r\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\r\n            new ModelRawEOLChanged()\r\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\r\n    };\r\n    TextModel.prototype._onBeforeEOLChange = function () {\r\n        // Ensure all decorations get their `range` set.\r\n        var versionId = this.getVersionId();\r\n        var allDecorations = this._decorationsTree.search(0, false, false, versionId);\r\n        this._ensureNodesHaveRanges(allDecorations);\r\n    };\r\n    TextModel.prototype._onAfterEOLChange = function () {\r\n        // Transform back `range` to offsets\r\n        var versionId = this.getVersionId();\r\n        var allDecorations = this._decorationsTree.collectNodesPostOrder();\r\n        for (var i = 0, len = allDecorations.length; i < len; i++) {\r\n            var node = allDecorations[i];\r\n            var delta = node.cachedAbsoluteStart - node.start;\r\n            var startOffset = this._buffer.getOffsetAt(node.range.startLineNumber, node.range.startColumn);\r\n            var endOffset = this._buffer.getOffsetAt(node.range.endLineNumber, node.range.endColumn);\r\n            node.cachedAbsoluteStart = startOffset;\r\n            node.cachedAbsoluteEnd = endOffset;\r\n            node.cachedVersionId = versionId;\r\n            node.start = startOffset - delta;\r\n            node.end = endOffset - delta;\r\n            recomputeMaxEnd(node);\r\n        }\r\n    };\r\n    TextModel.prototype.onBeforeAttached = function () {\r\n        this._attachedEditorCount++;\r\n        if (this._attachedEditorCount === 1) {\r\n            this._onDidChangeAttached.fire(undefined);\r\n        }\r\n    };\r\n    TextModel.prototype.onBeforeDetached = function () {\r\n        this._attachedEditorCount--;\r\n        if (this._attachedEditorCount === 0) {\r\n            this._onDidChangeAttached.fire(undefined);\r\n        }\r\n    };\r\n    TextModel.prototype.isAttachedToEditor = function () {\r\n        return this._attachedEditorCount > 0;\r\n    };\r\n    TextModel.prototype.getAttachedEditorCount = function () {\r\n        return this._attachedEditorCount;\r\n    };\r\n    TextModel.prototype.isTooLargeForSyncing = function () {\r\n        return this._isTooLargeForSyncing;\r\n    };\r\n    TextModel.prototype.isTooLargeForTokenization = function () {\r\n        return this._isTooLargeForTokenization;\r\n    };\r\n    TextModel.prototype.isDisposed = function () {\r\n        return this._isDisposed;\r\n    };\r\n    TextModel.prototype.isDominatedByLongLines = function () {\r\n        this._assertNotDisposed();\r\n        if (this.isTooLargeForTokenization()) {\r\n            // Cannot word wrap huge files anyways, so it doesn't really matter\r\n            return false;\r\n        }\r\n        var smallLineCharCount = 0;\r\n        var longLineCharCount = 0;\r\n        var lineCount = this._buffer.getLineCount();\r\n        for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\r\n            var lineLength = this._buffer.getLineLength(lineNumber);\r\n            if (lineLength >= LONG_LINE_BOUNDARY) {\r\n                longLineCharCount += lineLength;\r\n            }\r\n            else {\r\n                smallLineCharCount += lineLength;\r\n            }\r\n        }\r\n        return (longLineCharCount > smallLineCharCount);\r\n    };\r\n    Object.defineProperty(TextModel.prototype, \"uri\", {\r\n        get: function () {\r\n            return this._associatedResource;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //#region Options\r\n    TextModel.prototype.getOptions = function () {\r\n        this._assertNotDisposed();\r\n        return this._options;\r\n    };\r\n    TextModel.prototype.getFormattingOptions = function () {\r\n        return {\r\n            tabSize: this._options.indentSize,\r\n            insertSpaces: this._options.insertSpaces\r\n        };\r\n    };\r\n    TextModel.prototype.updateOptions = function (_newOpts) {\r\n        this._assertNotDisposed();\r\n        var tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\r\n        var indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.indentSize;\r\n        var insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\r\n        var trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\r\n        var newOpts = new model.TextModelResolvedOptions({\r\n            tabSize: tabSize,\r\n            indentSize: indentSize,\r\n            insertSpaces: insertSpaces,\r\n            defaultEOL: this._options.defaultEOL,\r\n            trimAutoWhitespace: trimAutoWhitespace\r\n        });\r\n        if (this._options.equals(newOpts)) {\r\n            return;\r\n        }\r\n        var e = this._options.createChangeEvent(newOpts);\r\n        this._options = newOpts;\r\n        this._onDidChangeOptions.fire(e);\r\n    };\r\n    TextModel.prototype.detectIndentation = function (defaultInsertSpaces, defaultTabSize) {\r\n        this._assertNotDisposed();\r\n        var guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\r\n        this.updateOptions({\r\n            insertSpaces: guessedIndentation.insertSpaces,\r\n            tabSize: guessedIndentation.tabSize,\r\n            indentSize: guessedIndentation.tabSize,\r\n        });\r\n    };\r\n    TextModel._normalizeIndentationFromWhitespace = function (str, indentSize, insertSpaces) {\r\n        var spacesCnt = 0;\r\n        for (var i = 0; i < str.length; i++) {\r\n            if (str.charAt(i) === '\\t') {\r\n                spacesCnt += indentSize;\r\n            }\r\n            else {\r\n                spacesCnt++;\r\n            }\r\n        }\r\n        var result = '';\r\n        if (!insertSpaces) {\r\n            var tabsCnt = Math.floor(spacesCnt / indentSize);\r\n            spacesCnt = spacesCnt % indentSize;\r\n            for (var i = 0; i < tabsCnt; i++) {\r\n                result += '\\t';\r\n            }\r\n        }\r\n        for (var i = 0; i < spacesCnt; i++) {\r\n            result += ' ';\r\n        }\r\n        return result;\r\n    };\r\n    TextModel.normalizeIndentation = function (str, indentSize, insertSpaces) {\r\n        var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\r\n        if (firstNonWhitespaceIndex === -1) {\r\n            firstNonWhitespaceIndex = str.length;\r\n        }\r\n        return TextModel._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\r\n    };\r\n    TextModel.prototype.normalizeIndentation = function (str) {\r\n        this._assertNotDisposed();\r\n        return TextModel.normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\r\n    };\r\n    //#endregion\r\n    //#region Reading\r\n    TextModel.prototype.getVersionId = function () {\r\n        this._assertNotDisposed();\r\n        return this._versionId;\r\n    };\r\n    TextModel.prototype.mightContainRTL = function () {\r\n        return this._buffer.mightContainRTL();\r\n    };\r\n    TextModel.prototype.mightContainNonBasicASCII = function () {\r\n        return this._buffer.mightContainNonBasicASCII();\r\n    };\r\n    TextModel.prototype.getAlternativeVersionId = function () {\r\n        this._assertNotDisposed();\r\n        return this._alternativeVersionId;\r\n    };\r\n    TextModel.prototype.getOffsetAt = function (rawPosition) {\r\n        this._assertNotDisposed();\r\n        var position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* Relaxed */);\r\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\r\n    };\r\n    TextModel.prototype.getPositionAt = function (rawOffset) {\r\n        this._assertNotDisposed();\r\n        var offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\r\n        return this._buffer.getPositionAt(offset);\r\n    };\r\n    TextModel.prototype._increaseVersionId = function () {\r\n        this._versionId = this._versionId + 1;\r\n        this._alternativeVersionId = this._versionId;\r\n    };\r\n    TextModel.prototype._overwriteAlternativeVersionId = function (newAlternativeVersionId) {\r\n        this._alternativeVersionId = newAlternativeVersionId;\r\n    };\r\n    TextModel.prototype.getValue = function (eol, preserveBOM) {\r\n        if (preserveBOM === void 0) { preserveBOM = false; }\r\n        this._assertNotDisposed();\r\n        var fullModelRange = this.getFullModelRange();\r\n        var fullModelValue = this.getValueInRange(fullModelRange, eol);\r\n        if (preserveBOM) {\r\n            return this._buffer.getBOM() + fullModelValue;\r\n        }\r\n        return fullModelValue;\r\n    };\r\n    TextModel.prototype.getValueLength = function (eol, preserveBOM) {\r\n        if (preserveBOM === void 0) { preserveBOM = false; }\r\n        this._assertNotDisposed();\r\n        var fullModelRange = this.getFullModelRange();\r\n        var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\r\n        if (preserveBOM) {\r\n            return this._buffer.getBOM().length + fullModelValue;\r\n        }\r\n        return fullModelValue;\r\n    };\r\n    TextModel.prototype.getValueInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getValueLengthInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getCharacterCountInRange = function (rawRange, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        this._assertNotDisposed();\r\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\r\n    };\r\n    TextModel.prototype.getLineCount = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getLineCount();\r\n    };\r\n    TextModel.prototype.getLineContent = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineContent(lineNumber);\r\n    };\r\n    TextModel.prototype.getLineLength = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLength(lineNumber);\r\n    };\r\n    TextModel.prototype.getLinesContent = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getLinesContent();\r\n    };\r\n    TextModel.prototype.getEOL = function () {\r\n        this._assertNotDisposed();\r\n        return this._buffer.getEOL();\r\n    };\r\n    TextModel.prototype.getLineMinColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        return 1;\r\n    };\r\n    TextModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLength(lineNumber) + 1;\r\n    };\r\n    TextModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\r\n    };\r\n    TextModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        this._assertNotDisposed();\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\r\n    };\r\n    /**\r\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\r\n     * Will try to not allocate if possible.\r\n     */\r\n    TextModel.prototype._validateRangeRelaxedNoAllocations = function (range) {\r\n        var linesCount = this._buffer.getLineCount();\r\n        var initialStartLineNumber = range.startLineNumber;\r\n        var initialStartColumn = range.startColumn;\r\n        var startLineNumber;\r\n        var startColumn;\r\n        if (initialStartLineNumber < 1) {\r\n            startLineNumber = 1;\r\n            startColumn = 1;\r\n        }\r\n        else if (initialStartLineNumber > linesCount) {\r\n            startLineNumber = linesCount;\r\n            startColumn = this.getLineMaxColumn(startLineNumber);\r\n        }\r\n        else {\r\n            startLineNumber = initialStartLineNumber | 0;\r\n            if (initialStartColumn <= 1) {\r\n                startColumn = 1;\r\n            }\r\n            else {\r\n                var maxColumn = this.getLineMaxColumn(startLineNumber);\r\n                if (initialStartColumn >= maxColumn) {\r\n                    startColumn = maxColumn;\r\n                }\r\n                else {\r\n                    startColumn = initialStartColumn | 0;\r\n                }\r\n            }\r\n        }\r\n        var initialEndLineNumber = range.endLineNumber;\r\n        var initialEndColumn = range.endColumn;\r\n        var endLineNumber;\r\n        var endColumn;\r\n        if (initialEndLineNumber < 1) {\r\n            endLineNumber = 1;\r\n            endColumn = 1;\r\n        }\r\n        else if (initialEndLineNumber > linesCount) {\r\n            endLineNumber = linesCount;\r\n            endColumn = this.getLineMaxColumn(endLineNumber);\r\n        }\r\n        else {\r\n            endLineNumber = initialEndLineNumber | 0;\r\n            if (initialEndColumn <= 1) {\r\n                endColumn = 1;\r\n            }\r\n            else {\r\n                var maxColumn = this.getLineMaxColumn(endLineNumber);\r\n                if (initialEndColumn >= maxColumn) {\r\n                    endColumn = maxColumn;\r\n                }\r\n                else {\r\n                    endColumn = initialEndColumn | 0;\r\n                }\r\n            }\r\n        }\r\n        if (initialStartLineNumber === startLineNumber\r\n            && initialStartColumn === startColumn\r\n            && initialEndLineNumber === endLineNumber\r\n            && initialEndColumn === endColumn\r\n            && range instanceof Range\r\n            && !(range instanceof Selection)) {\r\n            return range;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    TextModel.prototype._isValidPosition = function (lineNumber, column, validationType) {\r\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\r\n            return false;\r\n        }\r\n        if (isNaN(lineNumber) || isNaN(column)) {\r\n            return false;\r\n        }\r\n        if (lineNumber < 1 || column < 1) {\r\n            return false;\r\n        }\r\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\r\n            return false;\r\n        }\r\n        var lineCount = this._buffer.getLineCount();\r\n        if (lineNumber > lineCount) {\r\n            return false;\r\n        }\r\n        if (column === 1) {\r\n            return true;\r\n        }\r\n        var maxColumn = this.getLineMaxColumn(lineNumber);\r\n        if (column > maxColumn) {\r\n            return false;\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            // !!At this point, column > 1\r\n            var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\r\n            if (strings.isHighSurrogate(charCodeBefore)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TextModel.prototype._validatePosition = function (_lineNumber, _column, validationType) {\r\n        var lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\r\n        var column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\r\n        var lineCount = this._buffer.getLineCount();\r\n        if (lineNumber < 1) {\r\n            return new Position(1, 1);\r\n        }\r\n        if (lineNumber > lineCount) {\r\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\r\n        }\r\n        if (column <= 1) {\r\n            return new Position(lineNumber, 1);\r\n        }\r\n        var maxColumn = this.getLineMaxColumn(lineNumber);\r\n        if (column >= maxColumn) {\r\n            return new Position(lineNumber, maxColumn);\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            // If the position would end up in the middle of a high-low surrogate pair,\r\n            // we move it to before the pair\r\n            // !!At this point, column > 1\r\n            var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\r\n            if (strings.isHighSurrogate(charCodeBefore)) {\r\n                return new Position(lineNumber, column - 1);\r\n            }\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    TextModel.prototype.validatePosition = function (position) {\r\n        var validationType = 1 /* SurrogatePairs */;\r\n        this._assertNotDisposed();\r\n        // Avoid object allocation and cover most likely case\r\n        if (position instanceof Position) {\r\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\r\n                return position;\r\n            }\r\n        }\r\n        return this._validatePosition(position.lineNumber, position.column, validationType);\r\n    };\r\n    TextModel.prototype._isValidRange = function (range, validationType) {\r\n        var startLineNumber = range.startLineNumber;\r\n        var startColumn = range.startColumn;\r\n        var endLineNumber = range.endLineNumber;\r\n        var endColumn = range.endColumn;\r\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* Relaxed */)) {\r\n            return false;\r\n        }\r\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* Relaxed */)) {\r\n            return false;\r\n        }\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            var charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\r\n            var charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\r\n            var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\r\n            var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\r\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    TextModel.prototype.validateRange = function (_range) {\r\n        var validationType = 1 /* SurrogatePairs */;\r\n        this._assertNotDisposed();\r\n        // Avoid object allocation and cover most likely case\r\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\r\n            if (this._isValidRange(_range, validationType)) {\r\n                return _range;\r\n            }\r\n        }\r\n        var start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* Relaxed */);\r\n        var end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* Relaxed */);\r\n        var startLineNumber = start.lineNumber;\r\n        var startColumn = start.column;\r\n        var endLineNumber = end.lineNumber;\r\n        var endColumn = end.column;\r\n        if (validationType === 1 /* SurrogatePairs */) {\r\n            var charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\r\n            var charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\r\n            var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\r\n            var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\r\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\r\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n            }\r\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\r\n                // do not expand a collapsed range, simply move it to a valid location\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\r\n            }\r\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\r\n                // expand range at both ends\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\r\n            }\r\n            if (startInsideSurrogatePair) {\r\n                // only expand range at the start\r\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\r\n            }\r\n            // only expand range at the end\r\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    TextModel.prototype.modifyPosition = function (rawPosition, offset) {\r\n        this._assertNotDisposed();\r\n        var candidate = this.getOffsetAt(rawPosition) + offset;\r\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\r\n    };\r\n    TextModel.prototype.getFullModelRange = function () {\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\r\n    };\r\n    TextModel.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\r\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\r\n    };\r\n    TextModel.prototype.findMatches = function (searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount) {\r\n        if (limitResultCount === void 0) { limitResultCount = LIMIT_FIND_COUNT; }\r\n        this._assertNotDisposed();\r\n        var searchRange;\r\n        if (Range.isIRange(rawSearchScope)) {\r\n            searchRange = this.validateRange(rawSearchScope);\r\n        }\r\n        else {\r\n            searchRange = this.getFullModelRange();\r\n        }\r\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\r\n            // not regex, not multi line\r\n            var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\r\n            var searchData = searchParams.parseSearchRequest();\r\n            if (!searchData) {\r\n                return [];\r\n            }\r\n            return this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\r\n        }\r\n        return TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\r\n    };\r\n    TextModel.prototype.findNextMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\r\n        this._assertNotDisposed();\r\n        var searchStart = this.validatePosition(rawSearchStart);\r\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\r\n            var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\r\n            var searchData = searchParams.parseSearchRequest();\r\n            if (!searchData) {\r\n                return null;\r\n            }\r\n            var lineCount = this.getLineCount();\r\n            var searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\r\n            var ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\r\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n            if (ret.length > 0) {\r\n                return ret[0];\r\n            }\r\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\r\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\r\n            if (ret.length > 0) {\r\n                return ret[0];\r\n            }\r\n            return null;\r\n        }\r\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n    };\r\n    TextModel.prototype.findPreviousMatch = function (searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\r\n        this._assertNotDisposed();\r\n        var searchStart = this.validatePosition(rawSearchStart);\r\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\r\n    };\r\n    //#endregion\r\n    //#region Editing\r\n    TextModel.prototype.pushStackElement = function () {\r\n        this._commandManager.pushStackElement();\r\n    };\r\n    TextModel.prototype.pushEOL = function (eol) {\r\n        var currentEOL = (this.getEOL() === '\\n' ? 0 /* LF */ : 1 /* CRLF */);\r\n        if (currentEOL === eol) {\r\n            return;\r\n        }\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            this._commandManager.pushEOL(eol);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._pushEditOperations(beforeCursorState, editOperations, cursorStateComputer);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n        var _this = this;\r\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\r\n            // Go through each saved line number and insert a trim whitespace edit\r\n            // if it is safe to do so (no conflicts with other edits).\r\n            var incomingEdits = editOperations.map(function (op) {\r\n                return {\r\n                    range: _this.validateRange(op.range),\r\n                    text: op.text\r\n                };\r\n            });\r\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\r\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\r\n            var editsAreNearCursors = true;\r\n            for (var i = 0, len = beforeCursorState.length; i < len; i++) {\r\n                var sel = beforeCursorState[i];\r\n                var foundEditNearSel = false;\r\n                for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                    var editRange = incomingEdits[j].range;\r\n                    var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\r\n                    var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\r\n                    if (!selIsAbove && !selIsBelow) {\r\n                        foundEditNearSel = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!foundEditNearSel) {\r\n                    editsAreNearCursors = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (editsAreNearCursors) {\r\n                for (var i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\r\n                    var trimLineNumber = this._trimAutoWhitespaceLines[i];\r\n                    var maxLineColumn = this.getLineMaxColumn(trimLineNumber);\r\n                    var allowTrimLine = true;\r\n                    for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                        var editRange = incomingEdits[j].range;\r\n                        var editText = incomingEdits[j].text;\r\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\r\n                            // `trimLine` is completely outside this edit\r\n                            continue;\r\n                        }\r\n                        // At this point:\r\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\r\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\r\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\r\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\r\n                            continue;\r\n                        }\r\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\r\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\r\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\r\n                            continue;\r\n                        }\r\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\r\n                        allowTrimLine = false;\r\n                        break;\r\n                    }\r\n                    if (allowTrimLine) {\r\n                        editOperations.push({\r\n                            range: new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\r\n                            text: null\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            this._trimAutoWhitespaceLines = null;\r\n        }\r\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\r\n    };\r\n    TextModel.prototype.applyEdits = function (rawOperations) {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._applyEdits(rawOperations);\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._applyEdits = function (rawOperations) {\r\n        for (var i = 0, len = rawOperations.length; i < len; i++) {\r\n            rawOperations[i].range = this.validateRange(rawOperations[i].range);\r\n        }\r\n        var oldLineCount = this._buffer.getLineCount();\r\n        var result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace);\r\n        var newLineCount = this._buffer.getLineCount();\r\n        var contentChanges = result.changes;\r\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\r\n        if (contentChanges.length !== 0) {\r\n            var rawContentChanges = [];\r\n            var lineCount = oldLineCount;\r\n            for (var i = 0, len = contentChanges.length; i < len; i++) {\r\n                var change = contentChanges[i];\r\n                var _a = countEOL(change.text), eolCount = _a[0], firstLineLength = _a[1], lastLineLength = _a[2];\r\n                this._tokens.acceptEdit(change.range, eolCount, firstLineLength);\r\n                this._tokens2.acceptEdit(change.range, eolCount, firstLineLength, lastLineLength, change.text.length > 0 ? change.text.charCodeAt(0) : 0 /* Null */);\r\n                this._onDidChangeDecorations.fire();\r\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\r\n                var startLineNumber = change.range.startLineNumber;\r\n                var endLineNumber = change.range.endLineNumber;\r\n                var deletingLinesCnt = endLineNumber - startLineNumber;\r\n                var insertingLinesCnt = eolCount;\r\n                var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\r\n                var changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\r\n                for (var j = editingLinesCnt; j >= 0; j--) {\r\n                    var editLineNumber = startLineNumber + j;\r\n                    var currentEditLineNumber = newLineCount - lineCount - changeLineCountDelta + editLineNumber;\r\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber)));\r\n                }\r\n                if (editingLinesCnt < deletingLinesCnt) {\r\n                    // Must delete some lines\r\n                    var spliceStartLineNumber = startLineNumber + editingLinesCnt;\r\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\r\n                }\r\n                if (editingLinesCnt < insertingLinesCnt) {\r\n                    // Must insert some lines\r\n                    var spliceLineNumber = startLineNumber + editingLinesCnt;\r\n                    var cnt = insertingLinesCnt - editingLinesCnt;\r\n                    var fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\r\n                    var newLines = [];\r\n                    for (var i_1 = 0; i_1 < cnt; i_1++) {\r\n                        var lineNumber = fromLineNumber + i_1;\r\n                        newLines[lineNumber - fromLineNumber] = this.getLineContent(lineNumber);\r\n                    }\r\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines));\r\n                }\r\n                lineCount += changeLineCountDelta;\r\n            }\r\n            this._increaseVersionId();\r\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\r\n                changes: contentChanges,\r\n                eol: this._buffer.getEOL(),\r\n                versionId: this.getVersionId(),\r\n                isUndoing: this._isUndoing,\r\n                isRedoing: this._isRedoing,\r\n                isFlush: false\r\n            });\r\n        }\r\n        return result.reverseEdits;\r\n    };\r\n    TextModel.prototype._undo = function () {\r\n        this._isUndoing = true;\r\n        var r = this._commandManager.undo();\r\n        this._isUndoing = false;\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n        return r.selections;\r\n    };\r\n    TextModel.prototype.undo = function () {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._undo();\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.canUndo = function () {\r\n        return this._commandManager.canUndo();\r\n    };\r\n    TextModel.prototype._redo = function () {\r\n        this._isRedoing = true;\r\n        var r = this._commandManager.redo();\r\n        this._isRedoing = false;\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n        return r.selections;\r\n    };\r\n    TextModel.prototype.redo = function () {\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._eventEmitter.beginDeferredEmit();\r\n            return this._redo();\r\n        }\r\n        finally {\r\n            this._eventEmitter.endDeferredEmit();\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype.canRedo = function () {\r\n        return this._commandManager.canRedo();\r\n    };\r\n    //#endregion\r\n    //#region Decorations\r\n    TextModel.prototype.changeDecorations = function (callback, ownerId) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        this._assertNotDisposed();\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            return this._changeDecorations(ownerId, callback);\r\n        }\r\n        finally {\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._changeDecorations = function (ownerId, callback) {\r\n        var _this = this;\r\n        var changeAccessor = {\r\n            addDecoration: function (range, options) {\r\n                _this._onDidChangeDecorations.fire();\r\n                return _this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\r\n            },\r\n            changeDecoration: function (id, newRange) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._changeDecorationImpl(id, newRange);\r\n            },\r\n            changeDecorationOptions: function (id, options) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\r\n            },\r\n            removeDecoration: function (id) {\r\n                _this._onDidChangeDecorations.fire();\r\n                _this._deltaDecorationsImpl(ownerId, [id], []);\r\n            },\r\n            deltaDecorations: function (oldDecorations, newDecorations) {\r\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\r\n                    // nothing to do\r\n                    return [];\r\n                }\r\n                _this._onDidChangeDecorations.fire();\r\n                return _this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\r\n            }\r\n        };\r\n        var result = null;\r\n        try {\r\n            result = callback(changeAccessor);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n        }\r\n        // Invalidate change accessor\r\n        changeAccessor.addDecoration = invalidFunc;\r\n        changeAccessor.changeDecoration = invalidFunc;\r\n        changeAccessor.changeDecorationOptions = invalidFunc;\r\n        changeAccessor.removeDecoration = invalidFunc;\r\n        changeAccessor.deltaDecorations = invalidFunc;\r\n        return result;\r\n    };\r\n    TextModel.prototype.deltaDecorations = function (oldDecorations, newDecorations, ownerId) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        this._assertNotDisposed();\r\n        if (!oldDecorations) {\r\n            oldDecorations = [];\r\n        }\r\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\r\n            // nothing to do\r\n            return [];\r\n        }\r\n        try {\r\n            this._onDidChangeDecorations.beginDeferredEmit();\r\n            this._onDidChangeDecorations.fire();\r\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\r\n        }\r\n        finally {\r\n            this._onDidChangeDecorations.endDeferredEmit();\r\n        }\r\n    };\r\n    TextModel.prototype._getTrackedRange = function (id) {\r\n        return this.getDecorationRange(id);\r\n    };\r\n    TextModel.prototype._setTrackedRange = function (id, newRange, newStickiness) {\r\n        var node = (id ? this._decorations[id] : null);\r\n        if (!node) {\r\n            if (!newRange) {\r\n                // node doesn't exist, the request is to delete => nothing to do\r\n                return null;\r\n            }\r\n            // node doesn't exist, the request is to set => add the tracked range\r\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }])[0];\r\n        }\r\n        if (!newRange) {\r\n            // node exists, the request is to delete => delete node\r\n            this._decorationsTree.delete(node);\r\n            delete this._decorations[node.id];\r\n            return null;\r\n        }\r\n        // node exists, the request is to set => change the tracked range and its options\r\n        var range = this._validateRangeRelaxedNoAllocations(newRange);\r\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n        this._decorationsTree.delete(node);\r\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\r\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\r\n        this._decorationsTree.insert(node);\r\n        return node.id;\r\n    };\r\n    TextModel.prototype.removeAllDecorationsWithOwnerId = function (ownerId) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        var nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var node = nodes[i];\r\n            this._decorationsTree.delete(node);\r\n            delete this._decorations[node.id];\r\n        }\r\n    };\r\n    TextModel.prototype.getDecorationOptions = function (decorationId) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        return node.options;\r\n    };\r\n    TextModel.prototype.getDecorationRange = function (decorationId) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        var versionId = this.getVersionId();\r\n        if (node.cachedVersionId !== versionId) {\r\n            this._decorationsTree.resolveNode(node, versionId);\r\n        }\r\n        if (node.range === null) {\r\n            node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\r\n        }\r\n        return node.range;\r\n    };\r\n    TextModel.prototype.getLineDecorations = function (lineNumber, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            return [];\r\n        }\r\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getLinesDecorations = function (_startLineNumber, _endLineNumber, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var lineCount = this.getLineCount();\r\n        var startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\r\n        var endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\r\n        var endColumn = this.getLineMaxColumn(endLineNumber);\r\n        return this._getDecorationsInRange(new Range(startLineNumber, 1, endLineNumber, endColumn), ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var validatedRange = this.validateRange(range);\r\n        return this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\r\n    };\r\n    TextModel.prototype.getOverviewRulerDecorations = function (ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.search(ownerId, filterOutValidation, true, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype.getAllDecorations = function (ownerId, filterOutValidation) {\r\n        if (ownerId === void 0) { ownerId = 0; }\r\n        if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.search(ownerId, filterOutValidation, false, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype._getDecorationsInRange = function (filterRange, filterOwnerId, filterOutValidation) {\r\n        var startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\r\n        var versionId = this.getVersionId();\r\n        var result = this._decorationsTree.intervalSearch(startOffset, endOffset, filterOwnerId, filterOutValidation, versionId);\r\n        return this._ensureNodesHaveRanges(result);\r\n    };\r\n    TextModel.prototype._ensureNodesHaveRanges = function (nodes) {\r\n        for (var i = 0, len = nodes.length; i < len; i++) {\r\n            var node = nodes[i];\r\n            if (node.range === null) {\r\n                node.range = this._getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\r\n            }\r\n        }\r\n        return nodes;\r\n    };\r\n    TextModel.prototype._getRangeAt = function (start, end) {\r\n        return this._buffer.getRangeAt(start, end - start);\r\n    };\r\n    TextModel.prototype._changeDecorationImpl = function (decorationId, _range) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return;\r\n        }\r\n        var range = this._validateRangeRelaxedNoAllocations(_range);\r\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n        this._decorationsTree.delete(node);\r\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\r\n        this._decorationsTree.insert(node);\r\n    };\r\n    TextModel.prototype._changeDecorationOptionsImpl = function (decorationId, options) {\r\n        var node = this._decorations[decorationId];\r\n        if (!node) {\r\n            return;\r\n        }\r\n        var nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\r\n        var nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\r\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\r\n            // Delete + Insert due to an overview ruler status change\r\n            this._decorationsTree.delete(node);\r\n            node.setOptions(options);\r\n            this._decorationsTree.insert(node);\r\n        }\r\n        else {\r\n            node.setOptions(options);\r\n        }\r\n    };\r\n    TextModel.prototype._deltaDecorationsImpl = function (ownerId, oldDecorationsIds, newDecorations) {\r\n        var versionId = this.getVersionId();\r\n        var oldDecorationsLen = oldDecorationsIds.length;\r\n        var oldDecorationIndex = 0;\r\n        var newDecorationsLen = newDecorations.length;\r\n        var newDecorationIndex = 0;\r\n        var result = new Array(newDecorationsLen);\r\n        while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\r\n            var node = null;\r\n            if (oldDecorationIndex < oldDecorationsLen) {\r\n                // (1) get ourselves an old node\r\n                do {\r\n                    node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\r\n                } while (!node && oldDecorationIndex < oldDecorationsLen);\r\n                // (2) remove the node from the tree (if it exists)\r\n                if (node) {\r\n                    this._decorationsTree.delete(node);\r\n                }\r\n            }\r\n            if (newDecorationIndex < newDecorationsLen) {\r\n                // (3) create a new node if necessary\r\n                if (!node) {\r\n                    var internalDecorationId = (++this._lastDecorationId);\r\n                    var decorationId = this._instanceId + \";\" + internalDecorationId;\r\n                    node = new IntervalNode(decorationId, 0, 0);\r\n                    this._decorations[decorationId] = node;\r\n                }\r\n                // (4) initialize node\r\n                var newDecoration = newDecorations[newDecorationIndex];\r\n                var range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\r\n                var options = _normalizeOptions(newDecoration.options);\r\n                var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\r\n                var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\r\n                node.ownerId = ownerId;\r\n                node.reset(versionId, startOffset, endOffset, range);\r\n                node.setOptions(options);\r\n                this._decorationsTree.insert(node);\r\n                result[newDecorationIndex] = node.id;\r\n                newDecorationIndex++;\r\n            }\r\n            else {\r\n                if (node) {\r\n                    delete this._decorations[node.id];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    //#endregion\r\n    //#region Tokenization\r\n    TextModel.prototype.setLineTokens = function (lineNumber, tokens) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        this._tokens.setTokens(this._languageIdentifier.id, lineNumber - 1, this._buffer.getLineLength(lineNumber), tokens);\r\n    };\r\n    TextModel.prototype.setTokens = function (tokens) {\r\n        if (tokens.length === 0) {\r\n            return;\r\n        }\r\n        var ranges = [];\r\n        for (var i = 0, len = tokens.length; i < len; i++) {\r\n            var element = tokens[i];\r\n            ranges.push({ fromLineNumber: element.startLineNumber, toLineNumber: element.startLineNumber + element.tokens.length - 1 });\r\n            for (var j = 0, lenJ = element.tokens.length; j < lenJ; j++) {\r\n                this.setLineTokens(element.startLineNumber + j, element.tokens[j]);\r\n            }\r\n        }\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: false,\r\n            ranges: ranges\r\n        });\r\n    };\r\n    TextModel.prototype.setSemanticTokens = function (tokens) {\r\n        this._tokens2.set(tokens);\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: false,\r\n            ranges: [{ fromLineNumber: 1, toLineNumber: this.getLineCount() }]\r\n        });\r\n    };\r\n    TextModel.prototype.tokenizeViewport = function (startLineNumber, endLineNumber) {\r\n        startLineNumber = Math.max(1, startLineNumber);\r\n        endLineNumber = Math.min(this._buffer.getLineCount(), endLineNumber);\r\n        this._tokenization.tokenizeViewport(startLineNumber, endLineNumber);\r\n    };\r\n    TextModel.prototype.clearTokens = function () {\r\n        this._tokens.flush();\r\n        this._emitModelTokensChangedEvent({\r\n            tokenizationSupportChanged: true,\r\n            ranges: [{\r\n                    fromLineNumber: 1,\r\n                    toLineNumber: this._buffer.getLineCount()\r\n                }]\r\n        });\r\n    };\r\n    TextModel.prototype._emitModelTokensChangedEvent = function (e) {\r\n        if (!this._isDisposing) {\r\n            this._onDidChangeTokens.fire(e);\r\n        }\r\n    };\r\n    TextModel.prototype.resetTokenization = function () {\r\n        this._tokenization.reset();\r\n    };\r\n    TextModel.prototype.forceTokenization = function (lineNumber) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        this._tokenization.forceTokenization(lineNumber);\r\n    };\r\n    TextModel.prototype.isCheapToTokenize = function (lineNumber) {\r\n        return this._tokenization.isCheapToTokenize(lineNumber);\r\n    };\r\n    TextModel.prototype.tokenizeIfCheap = function (lineNumber) {\r\n        if (this.isCheapToTokenize(lineNumber)) {\r\n            this.forceTokenization(lineNumber);\r\n        }\r\n    };\r\n    TextModel.prototype.getLineTokens = function (lineNumber) {\r\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        return this._getLineTokens(lineNumber);\r\n    };\r\n    TextModel.prototype._getLineTokens = function (lineNumber) {\r\n        var lineText = this.getLineContent(lineNumber);\r\n        var syntacticTokens = this._tokens.getTokens(this._languageIdentifier.id, lineNumber - 1, lineText);\r\n        return this._tokens2.addSemanticTokens(lineNumber, syntacticTokens);\r\n    };\r\n    TextModel.prototype.getLanguageIdentifier = function () {\r\n        return this._languageIdentifier;\r\n    };\r\n    TextModel.prototype.getModeId = function () {\r\n        return this._languageIdentifier.language;\r\n    };\r\n    TextModel.prototype.setMode = function (languageIdentifier) {\r\n        if (this._languageIdentifier.id === languageIdentifier.id) {\r\n            // There's nothing to do\r\n            return;\r\n        }\r\n        var e = {\r\n            oldLanguage: this._languageIdentifier.language,\r\n            newLanguage: languageIdentifier.language\r\n        };\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._onDidChangeLanguage.fire(e);\r\n        this._onDidChangeLanguageConfiguration.fire({});\r\n    };\r\n    TextModel.prototype.getLanguageIdAtPosition = function (lineNumber, column) {\r\n        var position = this.validatePosition(new Position(lineNumber, column));\r\n        var lineTokens = this.getLineTokens(position.lineNumber);\r\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\r\n    };\r\n    // Having tokens allows implementing additional helper methods\r\n    TextModel.prototype.getWordAtPosition = function (_position) {\r\n        this._assertNotDisposed();\r\n        var position = this.validatePosition(_position);\r\n        var lineContent = this.getLineContent(position.lineNumber);\r\n        var lineTokens = this._getLineTokens(position.lineNumber);\r\n        var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n        // (1). First try checking right biased word\r\n        var _a = TextModel._findLanguageBoundaries(lineTokens, tokenIndex), rbStartOffset = _a[0], rbEndOffset = _a[1];\r\n        var rightBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex)), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\r\n        // Make sure the result touches the original passed in position\r\n        if (rightBiasedWord && rightBiasedWord.startColumn <= _position.column && _position.column <= rightBiasedWord.endColumn) {\r\n            return rightBiasedWord;\r\n        }\r\n        // (2). Else, if we were at a language boundary, check the left biased word\r\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\r\n            // edge case, where `position` sits between two tokens belonging to two different languages\r\n            var _b = TextModel._findLanguageBoundaries(lineTokens, tokenIndex - 1), lbStartOffset = _b[0], lbEndOffset = _b[1];\r\n            var leftBiasedWord = getWordAtText(position.column, LanguageConfigurationRegistry.getWordDefinition(lineTokens.getLanguageId(tokenIndex - 1)), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\r\n            // Make sure the result touches the original passed in position\r\n            if (leftBiasedWord && leftBiasedWord.startColumn <= _position.column && _position.column <= leftBiasedWord.endColumn) {\r\n                return leftBiasedWord;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel._findLanguageBoundaries = function (lineTokens, tokenIndex) {\r\n        var languageId = lineTokens.getLanguageId(tokenIndex);\r\n        // go left until a different language is hit\r\n        var startOffset = 0;\r\n        for (var i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\r\n            startOffset = lineTokens.getStartOffset(i);\r\n        }\r\n        // go right until a different language is hit\r\n        var endOffset = lineTokens.getLineContent().length;\r\n        for (var i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\r\n            endOffset = lineTokens.getEndOffset(i);\r\n        }\r\n        return [startOffset, endOffset];\r\n    };\r\n    TextModel.prototype.getWordUntilPosition = function (position) {\r\n        var wordAtPosition = this.getWordAtPosition(position);\r\n        if (!wordAtPosition) {\r\n            return {\r\n                word: '',\r\n                startColumn: position.column,\r\n                endColumn: position.column\r\n            };\r\n        }\r\n        return {\r\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\r\n            startColumn: wordAtPosition.startColumn,\r\n            endColumn: position.column\r\n        };\r\n    };\r\n    TextModel.prototype.findMatchingBracketUp = function (_bracket, _position) {\r\n        var bracket = _bracket.toLowerCase();\r\n        var position = this.validatePosition(_position);\r\n        var lineTokens = this._getLineTokens(position.lineNumber);\r\n        var languageId = lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\r\n        var bracketsSupport = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n        if (!bracketsSupport) {\r\n            return null;\r\n        }\r\n        var data = bracketsSupport.textIsBracket[bracket];\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        return this._findMatchingBracketUp(data, position);\r\n    };\r\n    TextModel.prototype.matchBracket = function (position) {\r\n        return this._matchBracket(this.validatePosition(position));\r\n    };\r\n    TextModel.prototype._matchBracket = function (position) {\r\n        var lineNumber = position.lineNumber;\r\n        var lineTokens = this._getLineTokens(lineNumber);\r\n        var tokenCount = lineTokens.getCount();\r\n        var lineText = this._buffer.getLineContent(lineNumber);\r\n        var tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n        if (tokenIndex < 0) {\r\n            return null;\r\n        }\r\n        var currentModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(tokenIndex));\r\n        // check that the token is not to be ignored\r\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\r\n            // limit search to not go before `maxBracketLength`\r\n            var searchStartOffset = Math.max(0, position.column - 1 - currentModeBrackets.maxBracketLength);\r\n            for (var i = tokenIndex - 1; i >= 0; i--) {\r\n                var tokenEndOffset = lineTokens.getEndOffset(i);\r\n                if (tokenEndOffset <= searchStartOffset) {\r\n                    break;\r\n                }\r\n                if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\r\n                    searchStartOffset = tokenEndOffset;\r\n                }\r\n            }\r\n            // limit search to not go after `maxBracketLength`\r\n            var searchEndOffset = Math.min(lineText.length, position.column - 1 + currentModeBrackets.maxBracketLength);\r\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\r\n            // `bestResult` will contain the most right-side result\r\n            var bestResult = null;\r\n            while (true) {\r\n                var foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!foundBracket) {\r\n                    // there are no more brackets in this text\r\n                    break;\r\n                }\r\n                // check that we didn't hit a bracket too far away from position\r\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                    var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\r\n                    var r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                    if (r) {\r\n                        bestResult = r;\r\n                    }\r\n                }\r\n                searchStartOffset = foundBracket.endColumn - 1;\r\n            }\r\n            if (bestResult) {\r\n                return bestResult;\r\n            }\r\n        }\r\n        // If position is in between two tokens, try also looking in the previous token\r\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\r\n            var prevTokenIndex = tokenIndex - 1;\r\n            var prevModeBrackets = LanguageConfigurationRegistry.getBracketsSupport(lineTokens.getLanguageId(prevTokenIndex));\r\n            // check that previous token is not to be ignored\r\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\r\n                // limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\r\n                var searchStartOffset = Math.max(0, position.column - 1 - prevModeBrackets.maxBracketLength);\r\n                var searchEndOffset = Math.min(lineText.length, position.column - 1 + prevModeBrackets.maxBracketLength);\r\n                for (var i = prevTokenIndex + 1; i < tokenCount; i++) {\r\n                    var tokenStartOffset = lineTokens.getStartOffset(i);\r\n                    if (tokenStartOffset >= searchEndOffset) {\r\n                        break;\r\n                    }\r\n                    if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i))) {\r\n                        searchEndOffset = tokenStartOffset;\r\n                    }\r\n                }\r\n                var foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                // check that we didn't hit a bracket too far away from position\r\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                    var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\r\n                    var r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                    if (r) {\r\n                        return r;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._matchFoundBracket = function (foundBracket, data, isOpen) {\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        if (isOpen) {\r\n            var matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\r\n            if (matched) {\r\n                return [foundBracket, matched];\r\n            }\r\n        }\r\n        else {\r\n            var matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\r\n            if (matched) {\r\n                return [foundBracket, matched];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._findMatchingBracketUp = function (bracket, position) {\r\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n        var languageId = bracket.languageIdentifier.id;\r\n        var reversedBracketRegex = bracket.reversedRegex;\r\n        var count = -1;\r\n        var searchPrevMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                if (bracket.isOpen(hitText)) {\r\n                    count++;\r\n                }\r\n                else if (bracket.isClose(hitText)) {\r\n                    count--;\r\n                }\r\n                if (count === 0) {\r\n                    return r;\r\n                }\r\n                searchEndOffset = r.startColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = tokenCount - 1;\r\n            var searchStartOffset = lineText.length;\r\n            var searchEndOffset = lineText.length;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex >= 0; tokenIndex--) {\r\n                var searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchStartOffset\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._findMatchingBracketDown = function (bracket, position) {\r\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n        var languageId = bracket.languageIdentifier.id;\r\n        var bracketRegex = bracket.forwardRegex;\r\n        var count = 1;\r\n        var searchNextMatchingBracketInRange = function (lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                if (bracket.isOpen(hitText)) {\r\n                    count++;\r\n                }\r\n                else if (bracket.isClose(hitText)) {\r\n                    count--;\r\n                }\r\n                if (count === 0) {\r\n                    return r;\r\n                }\r\n                searchStartOffset = r.endColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        var lineCount = this.getLineCount();\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findPrevBracket = function (_position) {\r\n        var position = this.validatePosition(_position);\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = tokenCount - 1;\r\n            var searchStartOffset = lineText.length;\r\n            var searchEndOffset = lineText.length;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex >= 0; tokenIndex--) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchStartOffset\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return this._toFoundBracket(modeBrackets, r);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findNextBracket = function (_position) {\r\n        var position = this.validatePosition(_position);\r\n        var lineCount = this.getLineCount();\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return this._toFoundBracket(modeBrackets, r);\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return this._toFoundBracket(modeBrackets, r);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype.findEnclosingBrackets = function (_position, maxDuration) {\r\n        var _this = this;\r\n        if (maxDuration === void 0) { maxDuration = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; }\r\n        var position = this.validatePosition(_position);\r\n        var lineCount = this.getLineCount();\r\n        var savedCounts = new Map();\r\n        var counts = [];\r\n        var resetCounts = function (languageId, modeBrackets) {\r\n            if (!savedCounts.has(languageId)) {\r\n                var tmp = [];\r\n                for (var i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\r\n                    tmp[i] = 0;\r\n                }\r\n                savedCounts.set(languageId, tmp);\r\n            }\r\n            counts = savedCounts.get(languageId);\r\n        };\r\n        var searchInRange = function (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) {\r\n            while (true) {\r\n                var r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (!r) {\r\n                    break;\r\n                }\r\n                var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n                var bracket = modeBrackets.textIsBracket[hitText];\r\n                if (bracket) {\r\n                    if (bracket.isOpen(hitText)) {\r\n                        counts[bracket.index]++;\r\n                    }\r\n                    else if (bracket.isClose(hitText)) {\r\n                        counts[bracket.index]--;\r\n                    }\r\n                    if (counts[bracket.index] === -1) {\r\n                        return _this._matchFoundBracket(r, bracket, false);\r\n                    }\r\n                }\r\n                searchStartOffset = r.endColumn - 1;\r\n            }\r\n            return null;\r\n        };\r\n        var languageId = -1;\r\n        var modeBrackets = null;\r\n        var startTime = Date.now();\r\n        for (var lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\r\n            var elapsedTime = Date.now() - startTime;\r\n            if (elapsedTime > maxDuration) {\r\n                return null;\r\n            }\r\n            var lineTokens = this._getLineTokens(lineNumber);\r\n            var tokenCount = lineTokens.getCount();\r\n            var lineText = this._buffer.getLineContent(lineNumber);\r\n            var tokenIndex = 0;\r\n            var searchStartOffset = 0;\r\n            var searchEndOffset = 0;\r\n            if (lineNumber === position.lineNumber) {\r\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\r\n                searchStartOffset = position.column - 1;\r\n                searchEndOffset = position.column - 1;\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                    resetCounts(languageId, modeBrackets);\r\n                }\r\n            }\r\n            var prevSearchInToken = true;\r\n            for (; tokenIndex < tokenCount; tokenIndex++) {\r\n                var tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\r\n                if (languageId !== tokenLanguageId) {\r\n                    // language id change!\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                        prevSearchInToken = false;\r\n                    }\r\n                    languageId = tokenLanguageId;\r\n                    modeBrackets = LanguageConfigurationRegistry.getBracketsSupport(languageId);\r\n                    resetCounts(languageId, modeBrackets);\r\n                }\r\n                var searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\r\n                if (searchInToken) {\r\n                    // this token should be searched\r\n                    if (prevSearchInToken) {\r\n                        // the previous token should be searched, simply extend searchEndOffset\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                    else {\r\n                        // the previous token should not be searched\r\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\r\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    // this token should not be searched\r\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                        var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                        if (r) {\r\n                            return r;\r\n                        }\r\n                    }\r\n                }\r\n                prevSearchInToken = searchInToken;\r\n            }\r\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\r\n                var r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TextModel.prototype._toFoundBracket = function (modeBrackets, r) {\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        var text = this.getValueInRange(r);\r\n        text = text.toLowerCase();\r\n        var data = modeBrackets.textIsBracket[text];\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        return {\r\n            range: r,\r\n            open: data.open,\r\n            close: data.close,\r\n            isOpen: modeBrackets.textIsOpenBracket[text]\r\n        };\r\n    };\r\n    /**\r\n     * Returns:\r\n     *  - -1 => the line consists of whitespace\r\n     *  - otherwise => the indent level is returned value\r\n     */\r\n    TextModel.computeIndentLevel = function (line, tabSize) {\r\n        var indent = 0;\r\n        var i = 0;\r\n        var len = line.length;\r\n        while (i < len) {\r\n            var chCode = line.charCodeAt(i);\r\n            if (chCode === 32 /* Space */) {\r\n                indent++;\r\n            }\r\n            else if (chCode === 9 /* Tab */) {\r\n                indent = indent - indent % tabSize + tabSize;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        if (i === len) {\r\n            return -1; // line only consists of whitespace\r\n        }\r\n        return indent;\r\n    };\r\n    TextModel.prototype._computeIndentLevel = function (lineIndex) {\r\n        return TextModel.computeIndentLevel(this._buffer.getLineContent(lineIndex + 1), this._options.tabSize);\r\n    };\r\n    TextModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\r\n        var _this = this;\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        if (lineNumber < 1 || lineNumber > lineCount) {\r\n            throw new Error('Illegal value for lineNumber');\r\n        }\r\n        var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\r\n        var offSide = Boolean(foldingRules && foldingRules.offSide);\r\n        var up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var up_aboveContentLineIndent = -1;\r\n        var up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var up_belowContentLineIndent = -1;\r\n        var up_resolveIndents = function (lineNumber) {\r\n            if (up_aboveContentLineIndex !== -1 && (up_aboveContentLineIndex === -2 || up_aboveContentLineIndex > lineNumber - 1)) {\r\n                up_aboveContentLineIndex = -1;\r\n                up_aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent_1 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_1 >= 0) {\r\n                        up_aboveContentLineIndex = lineIndex;\r\n                        up_aboveContentLineIndent = indent_1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (up_belowContentLineIndex === -2) {\r\n                up_belowContentLineIndex = -1;\r\n                up_belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent_2 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_2 >= 0) {\r\n                        up_belowContentLineIndex = lineIndex;\r\n                        up_belowContentLineIndent = indent_2;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var down_aboveContentLineIndent = -1;\r\n        var down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var down_belowContentLineIndent = -1;\r\n        var down_resolveIndents = function (lineNumber) {\r\n            if (down_aboveContentLineIndex === -2) {\r\n                down_aboveContentLineIndex = -1;\r\n                down_aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent_3 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_3 >= 0) {\r\n                        down_aboveContentLineIndex = lineIndex;\r\n                        down_aboveContentLineIndent = indent_3;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (down_belowContentLineIndex !== -1 && (down_belowContentLineIndex === -2 || down_belowContentLineIndex < lineNumber - 1)) {\r\n                down_belowContentLineIndex = -1;\r\n                down_belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent_4 = _this._computeIndentLevel(lineIndex);\r\n                    if (indent_4 >= 0) {\r\n                        down_belowContentLineIndex = lineIndex;\r\n                        down_belowContentLineIndent = indent_4;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var startLineNumber = 0;\r\n        var goUp = true;\r\n        var endLineNumber = 0;\r\n        var goDown = true;\r\n        var indent = 0;\r\n        for (var distance = 0; goUp || goDown; distance++) {\r\n            var upLineNumber = lineNumber - distance;\r\n            var downLineNumber = lineNumber + distance;\r\n            if (distance !== 0 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\r\n                goUp = false;\r\n            }\r\n            if (distance !== 0 && (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\r\n                goDown = false;\r\n            }\r\n            if (distance > 50000) {\r\n                // stop processing\r\n                goUp = false;\r\n                goDown = false;\r\n            }\r\n            if (goUp) {\r\n                // compute indent level going up\r\n                var upLineIndentLevel = void 0;\r\n                var currentIndent = this._computeIndentLevel(upLineNumber - 1);\r\n                if (currentIndent >= 0) {\r\n                    // This line has content (besides whitespace)\r\n                    // Use the line's indent\r\n                    up_belowContentLineIndex = upLineNumber - 1;\r\n                    up_belowContentLineIndent = currentIndent;\r\n                    upLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\r\n                }\r\n                else {\r\n                    up_resolveIndents(upLineNumber);\r\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\r\n                }\r\n                if (distance === 0) {\r\n                    // This is the initial line number\r\n                    startLineNumber = upLineNumber;\r\n                    endLineNumber = downLineNumber;\r\n                    indent = upLineIndentLevel;\r\n                    if (indent === 0) {\r\n                        // No need to continue\r\n                        return { startLineNumber: startLineNumber, endLineNumber: endLineNumber, indent: indent };\r\n                    }\r\n                    continue;\r\n                }\r\n                if (upLineIndentLevel >= indent) {\r\n                    startLineNumber = upLineNumber;\r\n                }\r\n                else {\r\n                    goUp = false;\r\n                }\r\n            }\r\n            if (goDown) {\r\n                // compute indent level going down\r\n                var downLineIndentLevel = void 0;\r\n                var currentIndent = this._computeIndentLevel(downLineNumber - 1);\r\n                if (currentIndent >= 0) {\r\n                    // This line has content (besides whitespace)\r\n                    // Use the line's indent\r\n                    down_aboveContentLineIndex = downLineNumber - 1;\r\n                    down_aboveContentLineIndent = currentIndent;\r\n                    downLineIndentLevel = Math.ceil(currentIndent / this._options.indentSize);\r\n                }\r\n                else {\r\n                    down_resolveIndents(downLineNumber);\r\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\r\n                }\r\n                if (downLineIndentLevel >= indent) {\r\n                    endLineNumber = downLineNumber;\r\n                }\r\n                else {\r\n                    goDown = false;\r\n                }\r\n            }\r\n        }\r\n        return { startLineNumber: startLineNumber, endLineNumber: endLineNumber, indent: indent };\r\n    };\r\n    TextModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\r\n        this._assertNotDisposed();\r\n        var lineCount = this.getLineCount();\r\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\r\n            throw new Error('Illegal value for startLineNumber');\r\n        }\r\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\r\n            throw new Error('Illegal value for endLineNumber');\r\n        }\r\n        var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this._languageIdentifier.id);\r\n        var offSide = Boolean(foldingRules && foldingRules.offSide);\r\n        var result = new Array(endLineNumber - startLineNumber + 1);\r\n        var aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var aboveContentLineIndent = -1;\r\n        var belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\r\n        var belowContentLineIndent = -1;\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var resultIndex = lineNumber - startLineNumber;\r\n            var currentIndent = this._computeIndentLevel(lineNumber - 1);\r\n            if (currentIndent >= 0) {\r\n                // This line has content (besides whitespace)\r\n                // Use the line's indent\r\n                aboveContentLineIndex = lineNumber - 1;\r\n                aboveContentLineIndent = currentIndent;\r\n                result[resultIndex] = Math.ceil(currentIndent / this._options.indentSize);\r\n                continue;\r\n            }\r\n            if (aboveContentLineIndex === -2) {\r\n                aboveContentLineIndex = -1;\r\n                aboveContentLineIndent = -1;\r\n                // must find previous line with content\r\n                for (var lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\r\n                    var indent = this._computeIndentLevel(lineIndex);\r\n                    if (indent >= 0) {\r\n                        aboveContentLineIndex = lineIndex;\r\n                        aboveContentLineIndent = indent;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (belowContentLineIndex !== -1 && (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\r\n                belowContentLineIndex = -1;\r\n                belowContentLineIndent = -1;\r\n                // must find next line with content\r\n                for (var lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\r\n                    var indent = this._computeIndentLevel(lineIndex);\r\n                    if (indent >= 0) {\r\n                        belowContentLineIndex = lineIndex;\r\n                        belowContentLineIndent = indent;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\r\n        }\r\n        return result;\r\n    };\r\n    TextModel.prototype._getIndentLevelForWhitespaceLine = function (offSide, aboveContentLineIndent, belowContentLineIndent) {\r\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\r\n            // At the top or bottom of the file\r\n            return 0;\r\n        }\r\n        else if (aboveContentLineIndent < belowContentLineIndent) {\r\n            // we are inside the region above\r\n            return (1 + Math.floor(aboveContentLineIndent / this._options.indentSize));\r\n        }\r\n        else if (aboveContentLineIndent === belowContentLineIndent) {\r\n            // we are in between two regions\r\n            return Math.ceil(belowContentLineIndent / this._options.indentSize);\r\n        }\r\n        else {\r\n            if (offSide) {\r\n                // same level as region below\r\n                return Math.ceil(belowContentLineIndent / this._options.indentSize);\r\n            }\r\n            else {\r\n                // we are inside the region that ends below\r\n                return (1 + Math.floor(belowContentLineIndent / this._options.indentSize));\r\n            }\r\n        }\r\n    };\r\n    TextModel.MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB\r\n    TextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\r\n    TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\r\n    TextModel.DEFAULT_CREATION_OPTIONS = {\r\n        isForSimpleWidget: false,\r\n        tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\r\n        indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\r\n        insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\r\n        detectIndentation: false,\r\n        defaultEOL: 1 /* LF */,\r\n        trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\r\n        largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\r\n    };\r\n    return TextModel;\r\n}(Disposable));\r\nexport { TextModel };\r\n//#region Decorations\r\nvar DecorationsTrees = /** @class */ (function () {\r\n    function DecorationsTrees() {\r\n        this._decorationsTree0 = new IntervalTree();\r\n        this._decorationsTree1 = new IntervalTree();\r\n    }\r\n    DecorationsTrees.prototype.intervalSearch = function (start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\r\n        var r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\r\n        var r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.search = function (filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\r\n        if (overviewRulerOnly) {\r\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n        }\r\n        else {\r\n            var r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n            var r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\r\n            return r0.concat(r1);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.collectNodesFromOwner = function (ownerId) {\r\n        var r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\r\n        var r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.collectNodesPostOrder = function () {\r\n        var r0 = this._decorationsTree0.collectNodesPostOrder();\r\n        var r1 = this._decorationsTree1.collectNodesPostOrder();\r\n        return r0.concat(r1);\r\n    };\r\n    DecorationsTrees.prototype.insert = function (node) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.insert(node);\r\n        }\r\n        else {\r\n            this._decorationsTree0.insert(node);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.delete = function (node) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.delete(node);\r\n        }\r\n        else {\r\n            this._decorationsTree0.delete(node);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.resolveNode = function (node, cachedVersionId) {\r\n        if (getNodeIsInOverviewRuler(node)) {\r\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\r\n        }\r\n        else {\r\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\r\n        }\r\n    };\r\n    DecorationsTrees.prototype.acceptReplace = function (offset, length, textLength, forceMoveMarkers) {\r\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\r\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\r\n    };\r\n    return DecorationsTrees;\r\n}());\r\nfunction cleanClassName(className) {\r\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\r\n}\r\nvar DecorationOptions = /** @class */ (function () {\r\n    function DecorationOptions(options) {\r\n        this.color = options.color || '';\r\n        this.darkColor = options.darkColor || '';\r\n    }\r\n    return DecorationOptions;\r\n}());\r\nvar ModelDecorationOverviewRulerOptions = /** @class */ (function (_super) {\r\n    __extends(ModelDecorationOverviewRulerOptions, _super);\r\n    function ModelDecorationOverviewRulerOptions(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this._resolvedColor = null;\r\n        _this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\r\n        return _this;\r\n    }\r\n    ModelDecorationOverviewRulerOptions.prototype.getColor = function (theme) {\r\n        if (!this._resolvedColor) {\r\n            if (theme.type !== 'light' && this.darkColor) {\r\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\r\n            }\r\n            else {\r\n                this._resolvedColor = this._resolveColor(this.color, theme);\r\n            }\r\n        }\r\n        return this._resolvedColor;\r\n    };\r\n    ModelDecorationOverviewRulerOptions.prototype.invalidateCachedColor = function () {\r\n        this._resolvedColor = null;\r\n    };\r\n    ModelDecorationOverviewRulerOptions.prototype._resolveColor = function (color, theme) {\r\n        if (typeof color === 'string') {\r\n            return color;\r\n        }\r\n        var c = color ? theme.getColor(color.id) : null;\r\n        if (!c) {\r\n            return '';\r\n        }\r\n        return c.toString();\r\n    };\r\n    return ModelDecorationOverviewRulerOptions;\r\n}(DecorationOptions));\r\nexport { ModelDecorationOverviewRulerOptions };\r\nvar ModelDecorationMinimapOptions = /** @class */ (function (_super) {\r\n    __extends(ModelDecorationMinimapOptions, _super);\r\n    function ModelDecorationMinimapOptions(options) {\r\n        var _this = _super.call(this, options) || this;\r\n        _this.position = options.position;\r\n        return _this;\r\n    }\r\n    ModelDecorationMinimapOptions.prototype.getColor = function (theme) {\r\n        if (!this._resolvedColor) {\r\n            if (theme.type !== 'light' && this.darkColor) {\r\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\r\n            }\r\n            else {\r\n                this._resolvedColor = this._resolveColor(this.color, theme);\r\n            }\r\n        }\r\n        return this._resolvedColor;\r\n    };\r\n    ModelDecorationMinimapOptions.prototype.invalidateCachedColor = function () {\r\n        this._resolvedColor = undefined;\r\n    };\r\n    ModelDecorationMinimapOptions.prototype._resolveColor = function (color, theme) {\r\n        if (typeof color === 'string') {\r\n            return Color.fromHex(color);\r\n        }\r\n        return theme.getColor(color.id);\r\n    };\r\n    return ModelDecorationMinimapOptions;\r\n}(DecorationOptions));\r\nexport { ModelDecorationMinimapOptions };\r\nvar ModelDecorationOptions = /** @class */ (function () {\r\n    function ModelDecorationOptions(options) {\r\n        this.stickiness = options.stickiness || 0 /* AlwaysGrowsWhenTypingAtEdges */;\r\n        this.zIndex = options.zIndex || 0;\r\n        this.className = options.className ? cleanClassName(options.className) : null;\r\n        this.hoverMessage = withUndefinedAsNull(options.hoverMessage);\r\n        this.glyphMarginHoverMessage = withUndefinedAsNull(options.glyphMarginHoverMessage);\r\n        this.isWholeLine = options.isWholeLine || false;\r\n        this.showIfCollapsed = options.showIfCollapsed || false;\r\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\r\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\r\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\r\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\r\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\r\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\r\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\r\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\r\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\r\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\r\n    }\r\n    ModelDecorationOptions.register = function (options) {\r\n        return new ModelDecorationOptions(options);\r\n    };\r\n    ModelDecorationOptions.createDynamic = function (options) {\r\n        return new ModelDecorationOptions(options);\r\n    };\r\n    return ModelDecorationOptions;\r\n}());\r\nexport { ModelDecorationOptions };\r\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({});\r\n/**\r\n * The order carefully matches the values of the enum.\r\n */\r\nvar TRACKED_RANGE_OPTIONS = [\r\n    ModelDecorationOptions.register({ stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ }),\r\n    ModelDecorationOptions.register({ stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ }),\r\n    ModelDecorationOptions.register({ stickiness: 2 /* GrowsOnlyWhenTypingBefore */ }),\r\n    ModelDecorationOptions.register({ stickiness: 3 /* GrowsOnlyWhenTypingAfter */ }),\r\n];\r\nfunction _normalizeOptions(options) {\r\n    if (options instanceof ModelDecorationOptions) {\r\n        return options;\r\n    }\r\n    return ModelDecorationOptions.createDynamic(options);\r\n}\r\nvar DidChangeDecorationsEmitter = /** @class */ (function (_super) {\r\n    __extends(DidChangeDecorationsEmitter, _super);\r\n    function DidChangeDecorationsEmitter() {\r\n        var _this = _super.call(this) || this;\r\n        _this._actual = _this._register(new Emitter());\r\n        _this.event = _this._actual.event;\r\n        _this._deferredCnt = 0;\r\n        _this._shouldFire = false;\r\n        return _this;\r\n    }\r\n    DidChangeDecorationsEmitter.prototype.beginDeferredEmit = function () {\r\n        this._deferredCnt++;\r\n    };\r\n    DidChangeDecorationsEmitter.prototype.endDeferredEmit = function () {\r\n        this._deferredCnt--;\r\n        if (this._deferredCnt === 0) {\r\n            if (this._shouldFire) {\r\n                this._shouldFire = false;\r\n                this._actual.fire({});\r\n            }\r\n        }\r\n    };\r\n    DidChangeDecorationsEmitter.prototype.fire = function () {\r\n        this._shouldFire = true;\r\n    };\r\n    return DidChangeDecorationsEmitter;\r\n}(Disposable));\r\nexport { DidChangeDecorationsEmitter };\r\n//#endregion\r\nvar DidChangeContentEmitter = /** @class */ (function (_super) {\r\n    __extends(DidChangeContentEmitter, _super);\r\n    function DidChangeContentEmitter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\r\n         */\r\n        _this._fastEmitter = _this._register(new Emitter());\r\n        _this.fastEvent = _this._fastEmitter.event;\r\n        _this._slowEmitter = _this._register(new Emitter());\r\n        _this.slowEvent = _this._slowEmitter.event;\r\n        _this._deferredCnt = 0;\r\n        _this._deferredEvent = null;\r\n        return _this;\r\n    }\r\n    DidChangeContentEmitter.prototype.beginDeferredEmit = function () {\r\n        this._deferredCnt++;\r\n    };\r\n    DidChangeContentEmitter.prototype.endDeferredEmit = function () {\r\n        this._deferredCnt--;\r\n        if (this._deferredCnt === 0) {\r\n            if (this._deferredEvent !== null) {\r\n                var e = this._deferredEvent;\r\n                this._deferredEvent = null;\r\n                this._fastEmitter.fire(e);\r\n                this._slowEmitter.fire(e);\r\n            }\r\n        }\r\n    };\r\n    DidChangeContentEmitter.prototype.fire = function (e) {\r\n        if (this._deferredCnt > 0) {\r\n            if (this._deferredEvent) {\r\n                this._deferredEvent = this._deferredEvent.merge(e);\r\n            }\r\n            else {\r\n                this._deferredEvent = e;\r\n            }\r\n            return;\r\n        }\r\n        this._fastEmitter.fire(e);\r\n        this._slowEmitter.fire(e);\r\n    };\r\n    return DidChangeContentEmitter;\r\n}(Disposable));\r\nexport { DidChangeContentEmitter };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}