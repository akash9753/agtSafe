{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nimport { TextModel } from '../../common/model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nvar MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;\nexport var ID_INDENT_PROVIDER = 'indent';\nvar IndentRangeProvider = /** @class */function () {\n  function IndentRangeProvider(editorModel) {\n    this.editorModel = editorModel;\n    this.id = ID_INDENT_PROVIDER;\n  }\n  IndentRangeProvider.prototype.dispose = function () {};\n  IndentRangeProvider.prototype.compute = function (cancelationToken) {\n    var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);\n    var offSide = foldingRules && !!foldingRules.offSide;\n    var markers = foldingRules && foldingRules.markers;\n    return Promise.resolve(computeRanges(this.editorModel, offSide, markers));\n  };\n  return IndentRangeProvider;\n}();\nexport { IndentRangeProvider };\n// public only for testing\nvar RangesCollector = /** @class */function () {\n  function RangesCollector(foldingRangesLimit) {\n    this._startIndexes = [];\n    this._endIndexes = [];\n    this._indentOccurrences = [];\n    this._length = 0;\n    this._foldingRangesLimit = foldingRangesLimit;\n  }\n  RangesCollector.prototype.insertFirst = function (startLineNumber, endLineNumber, indent) {\n    if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n      return;\n    }\n    var index = this._length;\n    this._startIndexes[index] = startLineNumber;\n    this._endIndexes[index] = endLineNumber;\n    this._length++;\n    if (indent < 1000) {\n      this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\n    }\n  };\n  RangesCollector.prototype.toIndentRanges = function (model) {\n    if (this._length <= this._foldingRangesLimit) {\n      // reverse and create arrays of the exact length\n      var startIndexes = new Uint32Array(this._length);\n      var endIndexes = new Uint32Array(this._length);\n      for (var i = this._length - 1, k = 0; i >= 0; i--, k++) {\n        startIndexes[k] = this._startIndexes[i];\n        endIndexes[k] = this._endIndexes[i];\n      }\n      return new FoldingRegions(startIndexes, endIndexes);\n    } else {\n      var entries = 0;\n      var maxIndent = this._indentOccurrences.length;\n      for (var i = 0; i < this._indentOccurrences.length; i++) {\n        var n = this._indentOccurrences[i];\n        if (n) {\n          if (n + entries > this._foldingRangesLimit) {\n            maxIndent = i;\n            break;\n          }\n          entries += n;\n        }\n      }\n      var tabSize = model.getOptions().tabSize;\n      // reverse and create arrays of the exact length\n      var startIndexes = new Uint32Array(this._foldingRangesLimit);\n      var endIndexes = new Uint32Array(this._foldingRangesLimit);\n      for (var i = this._length - 1, k = 0; i >= 0; i--) {\n        var startIndex = this._startIndexes[i];\n        var lineContent = model.getLineContent(startIndex);\n        var indent = TextModel.computeIndentLevel(lineContent, tabSize);\n        if (indent < maxIndent || indent === maxIndent && entries++ < this._foldingRangesLimit) {\n          startIndexes[k] = startIndex;\n          endIndexes[k] = this._endIndexes[i];\n          k++;\n        }\n      }\n      return new FoldingRegions(startIndexes, endIndexes);\n    }\n  };\n  return RangesCollector;\n}();\nexport { RangesCollector };\nexport function computeRanges(model, offSide, markers, foldingRangesLimit) {\n  if (foldingRangesLimit === void 0) {\n    foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT;\n  }\n  var tabSize = model.getOptions().tabSize;\n  var result = new RangesCollector(foldingRangesLimit);\n  var pattern = undefined;\n  if (markers) {\n    pattern = new RegExp(\"(\" + markers.start.source + \")|(?:\" + markers.end.source + \")\");\n  }\n  var previousRegions = [];\n  var line = model.getLineCount() + 1;\n  previousRegions.push({\n    indent: -1,\n    endAbove: line,\n    line: line\n  }); // sentinel, to make sure there's at least one entry\n  for (var line_1 = model.getLineCount(); line_1 > 0; line_1--) {\n    var lineContent = model.getLineContent(line_1);\n    var indent = TextModel.computeIndentLevel(lineContent, tabSize);\n    var previous = previousRegions[previousRegions.length - 1];\n    if (indent === -1) {\n      if (offSide) {\n        // for offSide languages, empty lines are associated to the previous block\n        // note: the next block is already written to the results, so this only\n        // impacts the end position of the block before\n        previous.endAbove = line_1;\n      }\n      continue; // only whitespace\n    }\n\n    var m = void 0;\n    if (pattern && (m = lineContent.match(pattern))) {\n      // folding pattern match\n      if (m[1]) {\n        // start pattern match\n        // discard all regions until the folding pattern\n        var i = previousRegions.length - 1;\n        while (i > 0 && previousRegions[i].indent !== -2) {\n          i--;\n        }\n        if (i > 0) {\n          previousRegions.length = i + 1;\n          previous = previousRegions[i];\n          // new folding range from pattern, includes the end line\n          result.insertFirst(line_1, previous.line, indent);\n          previous.line = line_1;\n          previous.indent = indent;\n          previous.endAbove = line_1;\n          continue;\n        } else {\n          // no end marker found, treat line as a regular line\n        }\n      } else {\n        // end pattern match\n        previousRegions.push({\n          indent: -2,\n          endAbove: line_1,\n          line: line_1\n        });\n        continue;\n      }\n    }\n    if (previous.indent > indent) {\n      // discard all regions with larger indent\n      do {\n        previousRegions.pop();\n        previous = previousRegions[previousRegions.length - 1];\n      } while (previous.indent > indent);\n      // new folding range\n      var endLineNumber = previous.endAbove - 1;\n      if (endLineNumber - line_1 >= 1) {\n        // needs at east size 1\n        result.insertFirst(line_1, endLineNumber, indent);\n      }\n    }\n    if (previous.indent === indent) {\n      previous.endAbove = line_1;\n    } else {\n      // previous.indent < indent\n      // new region with a bigger indent\n      previousRegions.push({\n        indent: indent,\n        endAbove: line_1,\n        line: line_1\n      });\n    }\n  }\n  return result.toIndentRanges(model);\n}","map":{"version":3,"names":["FoldingRegions","MAX_LINE_NUMBER","TextModel","LanguageConfigurationRegistry","MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT","ID_INDENT_PROVIDER","IndentRangeProvider","editorModel","id","prototype","dispose","compute","cancelationToken","foldingRules","getFoldingRules","getLanguageIdentifier","offSide","markers","Promise","resolve","computeRanges","RangesCollector","foldingRangesLimit","_startIndexes","_endIndexes","_indentOccurrences","_length","_foldingRangesLimit","insertFirst","startLineNumber","endLineNumber","indent","index","toIndentRanges","model","startIndexes","Uint32Array","endIndexes","i","k","entries","maxIndent","length","n","tabSize","getOptions","startIndex","lineContent","getLineContent","computeIndentLevel","result","pattern","undefined","RegExp","start","source","end","previousRegions","line","getLineCount","push","endAbove","line_1","previous","m","match","pop"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/folding/indentRangeProvider.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\r\nimport { TextModel } from '../../common/model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nvar MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT = 5000;\r\nexport var ID_INDENT_PROVIDER = 'indent';\r\nvar IndentRangeProvider = /** @class */ (function () {\r\n    function IndentRangeProvider(editorModel) {\r\n        this.editorModel = editorModel;\r\n        this.id = ID_INDENT_PROVIDER;\r\n    }\r\n    IndentRangeProvider.prototype.dispose = function () {\r\n    };\r\n    IndentRangeProvider.prototype.compute = function (cancelationToken) {\r\n        var foldingRules = LanguageConfigurationRegistry.getFoldingRules(this.editorModel.getLanguageIdentifier().id);\r\n        var offSide = foldingRules && !!foldingRules.offSide;\r\n        var markers = foldingRules && foldingRules.markers;\r\n        return Promise.resolve(computeRanges(this.editorModel, offSide, markers));\r\n    };\r\n    return IndentRangeProvider;\r\n}());\r\nexport { IndentRangeProvider };\r\n// public only for testing\r\nvar RangesCollector = /** @class */ (function () {\r\n    function RangesCollector(foldingRangesLimit) {\r\n        this._startIndexes = [];\r\n        this._endIndexes = [];\r\n        this._indentOccurrences = [];\r\n        this._length = 0;\r\n        this._foldingRangesLimit = foldingRangesLimit;\r\n    }\r\n    RangesCollector.prototype.insertFirst = function (startLineNumber, endLineNumber, indent) {\r\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\r\n            return;\r\n        }\r\n        var index = this._length;\r\n        this._startIndexes[index] = startLineNumber;\r\n        this._endIndexes[index] = endLineNumber;\r\n        this._length++;\r\n        if (indent < 1000) {\r\n            this._indentOccurrences[indent] = (this._indentOccurrences[indent] || 0) + 1;\r\n        }\r\n    };\r\n    RangesCollector.prototype.toIndentRanges = function (model) {\r\n        if (this._length <= this._foldingRangesLimit) {\r\n            // reverse and create arrays of the exact length\r\n            var startIndexes = new Uint32Array(this._length);\r\n            var endIndexes = new Uint32Array(this._length);\r\n            for (var i = this._length - 1, k = 0; i >= 0; i--, k++) {\r\n                startIndexes[k] = this._startIndexes[i];\r\n                endIndexes[k] = this._endIndexes[i];\r\n            }\r\n            return new FoldingRegions(startIndexes, endIndexes);\r\n        }\r\n        else {\r\n            var entries = 0;\r\n            var maxIndent = this._indentOccurrences.length;\r\n            for (var i = 0; i < this._indentOccurrences.length; i++) {\r\n                var n = this._indentOccurrences[i];\r\n                if (n) {\r\n                    if (n + entries > this._foldingRangesLimit) {\r\n                        maxIndent = i;\r\n                        break;\r\n                    }\r\n                    entries += n;\r\n                }\r\n            }\r\n            var tabSize = model.getOptions().tabSize;\r\n            // reverse and create arrays of the exact length\r\n            var startIndexes = new Uint32Array(this._foldingRangesLimit);\r\n            var endIndexes = new Uint32Array(this._foldingRangesLimit);\r\n            for (var i = this._length - 1, k = 0; i >= 0; i--) {\r\n                var startIndex = this._startIndexes[i];\r\n                var lineContent = model.getLineContent(startIndex);\r\n                var indent = TextModel.computeIndentLevel(lineContent, tabSize);\r\n                if (indent < maxIndent || (indent === maxIndent && entries++ < this._foldingRangesLimit)) {\r\n                    startIndexes[k] = startIndex;\r\n                    endIndexes[k] = this._endIndexes[i];\r\n                    k++;\r\n                }\r\n            }\r\n            return new FoldingRegions(startIndexes, endIndexes);\r\n        }\r\n    };\r\n    return RangesCollector;\r\n}());\r\nexport { RangesCollector };\r\nexport function computeRanges(model, offSide, markers, foldingRangesLimit) {\r\n    if (foldingRangesLimit === void 0) { foldingRangesLimit = MAX_FOLDING_REGIONS_FOR_INDENT_LIMIT; }\r\n    var tabSize = model.getOptions().tabSize;\r\n    var result = new RangesCollector(foldingRangesLimit);\r\n    var pattern = undefined;\r\n    if (markers) {\r\n        pattern = new RegExp(\"(\" + markers.start.source + \")|(?:\" + markers.end.source + \")\");\r\n    }\r\n    var previousRegions = [];\r\n    var line = model.getLineCount() + 1;\r\n    previousRegions.push({ indent: -1, endAbove: line, line: line }); // sentinel, to make sure there's at least one entry\r\n    for (var line_1 = model.getLineCount(); line_1 > 0; line_1--) {\r\n        var lineContent = model.getLineContent(line_1);\r\n        var indent = TextModel.computeIndentLevel(lineContent, tabSize);\r\n        var previous = previousRegions[previousRegions.length - 1];\r\n        if (indent === -1) {\r\n            if (offSide) {\r\n                // for offSide languages, empty lines are associated to the previous block\r\n                // note: the next block is already written to the results, so this only\r\n                // impacts the end position of the block before\r\n                previous.endAbove = line_1;\r\n            }\r\n            continue; // only whitespace\r\n        }\r\n        var m = void 0;\r\n        if (pattern && (m = lineContent.match(pattern))) {\r\n            // folding pattern match\r\n            if (m[1]) { // start pattern match\r\n                // discard all regions until the folding pattern\r\n                var i = previousRegions.length - 1;\r\n                while (i > 0 && previousRegions[i].indent !== -2) {\r\n                    i--;\r\n                }\r\n                if (i > 0) {\r\n                    previousRegions.length = i + 1;\r\n                    previous = previousRegions[i];\r\n                    // new folding range from pattern, includes the end line\r\n                    result.insertFirst(line_1, previous.line, indent);\r\n                    previous.line = line_1;\r\n                    previous.indent = indent;\r\n                    previous.endAbove = line_1;\r\n                    continue;\r\n                }\r\n                else {\r\n                    // no end marker found, treat line as a regular line\r\n                }\r\n            }\r\n            else { // end pattern match\r\n                previousRegions.push({ indent: -2, endAbove: line_1, line: line_1 });\r\n                continue;\r\n            }\r\n        }\r\n        if (previous.indent > indent) {\r\n            // discard all regions with larger indent\r\n            do {\r\n                previousRegions.pop();\r\n                previous = previousRegions[previousRegions.length - 1];\r\n            } while (previous.indent > indent);\r\n            // new folding range\r\n            var endLineNumber = previous.endAbove - 1;\r\n            if (endLineNumber - line_1 >= 1) { // needs at east size 1\r\n                result.insertFirst(line_1, endLineNumber, indent);\r\n            }\r\n        }\r\n        if (previous.indent === indent) {\r\n            previous.endAbove = line_1;\r\n        }\r\n        else { // previous.indent < indent\r\n            // new region with a bigger indent\r\n            previousRegions.push({ indent: indent, endAbove: line_1, line: line_1 });\r\n        }\r\n    }\r\n    return result.toIndentRanges(model);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}