{"ast":null,"code":"export var Validator = function Validator() {\n  //return {\n  //     map_type: (block) => {\n  //         unique.push(block.type);\n\n  //         //for map statement block\n  //         let getStatementBlock = block.getInputTargetBlock(\"map_value\");\n  //         let child = getStatementBlock.getChildren();\n  //         return child.some(x => x.getChildren().length !== 0) &&\n  //             msg.push(<div key={msg.length + 1}>{msg.length + 1}.\n  //                     Only one argument is allowed for {block.name}.</div>);\n\n  //     },\n\n  //     hardcode_type: (block) => {\n  //         unique.push(block.type);\n\n  //         let child = block.getChildren();\n  //         let result = child.some(x => x.getChildren().length !== 0);\n\n  //         return child.some(x => x.getChildren().length !== 0) &&\n  //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\n  //     },\n\n  //     compress_type: (block) => {\n  //         unique.push(block.type);\n\n  //         let child = block.getChildren();\n  //         let result = child.some(x => x.getChildren().length !== 0);\n\n  //         return child.some(x => x.getChildren().length !== 0) &&\n  //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\n  //     },\n\n  //     find_replace_type: (block) => {\n  //         unique.push(block.type);\n\n  //         let child = block.getChildren();\n  //         let result = child.some(x => x.getChildren().length !== 0);\n\n  //         return child.some(x => x.getChildren().length !== 0) &&\n  //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\n\n  //     },\n\n  //     simple_ops_mutiple_args_type: (block) => {\n  //         unique.push(block.type);\n\n  //         let dropvalue = block.getFieldValue(\"op_name\");\n\n  //         if (dropvalue === \"DirectMove\") {\n  //             let child = block.getChildren();\n  //             return child.some(x => x.getChildren().length !== 0) &&\n  //                 msg.push(<div key={msg.length + 1}>{msg.length + 1}.\n  //         Only one argument is allowed for {block.name}.</div>);\n  //         }\n  //     },\n  //  }\n};","map":{"version":3,"names":["Validator"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/Mapper/validator.js"],"sourcesContent":["export let Validator = () => \r\n{\r\n   //return {\r\n   //     map_type: (block) => {\r\n   //         unique.push(block.type);\r\n\r\n   //         //for map statement block\r\n   //         let getStatementBlock = block.getInputTargetBlock(\"map_value\");\r\n   //         let child = getStatementBlock.getChildren();\r\n   //         return child.some(x => x.getChildren().length !== 0) &&\r\n   //             msg.push(<div key={msg.length + 1}>{msg.length + 1}.\r\n   //                     Only one argument is allowed for {block.name}.</div>);\r\n\r\n   //     },\r\n\r\n   //     hardcode_type: (block) => {\r\n   //         unique.push(block.type);\r\n\r\n   //         let child = block.getChildren();\r\n   //         let result = child.some(x => x.getChildren().length !== 0);\r\n\r\n   //         return child.some(x => x.getChildren().length !== 0) &&\r\n   //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\r\n   //     },\r\n\r\n   //     compress_type: (block) => {\r\n   //         unique.push(block.type);\r\n\r\n   //         let child = block.getChildren();\r\n   //         let result = child.some(x => x.getChildren().length !== 0);\r\n\r\n   //         return child.some(x => x.getChildren().length !== 0) &&\r\n   //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\r\n   //     },\r\n\r\n   //     find_replace_type: (block) => {\r\n   //         unique.push(block.type);\r\n\r\n   //         let child = block.getChildren();\r\n   //         let result = child.some(x => x.getChildren().length !== 0);\r\n\r\n   //         return child.some(x => x.getChildren().length !== 0) &&\r\n   //             msg.push(<div key={msg.length + 1}>{msg.length + 1}. Only one argument is allowed for {block.name}.</div>);\r\n\r\n   //     },\r\n\r\n   //     simple_ops_mutiple_args_type: (block) => {\r\n   //         unique.push(block.type);\r\n\r\n\r\n   //         let dropvalue = block.getFieldValue(\"op_name\");\r\n\r\n   //         if (dropvalue === \"DirectMove\") {\r\n   //             let child = block.getChildren();\r\n   //             return child.some(x => x.getChildren().length !== 0) &&\r\n   //                 msg.push(<div key={msg.length + 1}>{msg.length + 1}.\r\n   //         Only one argument is allowed for {block.name}.</div>);\r\n   //         }\r\n   //     },\r\n   //  }\r\n};"],"mappings":"AAAA,OAAO,IAAIA,SAAS,GAAG,SAAZA,SAAS,GACpB;EACG;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACF"},"metadata":{},"sourceType":"module"}