{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['<', '>']],\n  autoClosingPairs: [{\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '\"',\n    close: '\"'\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.xml',\n  ignoreCase: true,\n  // Useful regular expressions\n  qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n  tokenizer: {\n    root: [[/[^<&]+/, ''], {\n      include: '@whitespace'\n    },\n    // Standard opening tag\n    [/(<)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'tag',\n      next: '@tag'\n    }]],\n    // Standard closing tag\n    [/(<\\/)(@qualifiedName)(\\s*)(>)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'tag'\n    }, '', {\n      token: 'delimiter'\n    }]],\n    // Meta tags - instruction\n    [/(<\\?)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'metatag',\n      next: '@tag'\n    }]],\n    // Meta tags - declaration\n    [/(<\\!)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'metatag',\n      next: '@tag'\n    }]],\n    // CDATA\n    [/<\\!\\[CDATA\\[/, {\n      token: 'delimiter.cdata',\n      next: '@cdata'\n    }], [/&\\w+;/, 'string.escape']],\n    cdata: [[/[^\\]]+/, ''], [/\\]\\]>/, {\n      token: 'delimiter.cdata',\n      next: '@pop'\n    }], [/\\]/, '']],\n    tag: [[/[ \\t\\r\\n]+/, ''], [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']], [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']], [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']], [/@qualifiedName/, 'attribute.name'], [/\\?>/, {\n      token: 'delimiter',\n      next: '@pop'\n    }], [/(\\/)(>)/, [{\n      token: 'tag'\n    }, {\n      token: 'delimiter',\n      next: '@pop'\n    }]], [/>/, {\n      token: 'delimiter',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/<!--/, {\n      token: 'comment',\n      next: '@comment'\n    }]],\n    comment: [[/[^<\\-]+/, 'comment.content'], [/-->/, {\n      token: 'comment',\n      next: '@pop'\n    }], [/<!--/, 'comment.content.invalid'], [/[<\\-]/, 'comment.content']]\n  }\n};","map":{"version":3,"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","qualifiedName","tokenizer","root","include","token","next","cdata","tag","whitespace","comment"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->'],\r\n    },\r\n    brackets: [\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '\"', close: '\"' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'tag', next: '@tag' }\r\n                ]],\r\n            // Standard closing tag\r\n            [/(<\\/)(@qualifiedName)(\\s*)(>)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'tag' },\r\n                    '',\r\n                    { token: 'delimiter' }\r\n                ]],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'metatag', next: '@tag' }\r\n                ]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'metatag', next: '@tag' }\r\n                ]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape'],\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [\r\n                    { token: 'tag' },\r\n                    { token: 'delimiter', next: '@pop' }\r\n                ]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ],\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}