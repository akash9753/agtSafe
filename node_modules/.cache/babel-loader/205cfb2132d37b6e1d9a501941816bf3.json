{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nvar CharacterPairSupport = /** @class */function () {\n  function CharacterPairSupport(config) {\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(function (el) {\n        return new StandardAutoClosingPairConditional(el);\n      });\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(function (b) {\n        return new StandardAutoClosingPairConditional({\n          open: b[0],\n          close: b[1]\n        });\n      });\n    } else {\n      this._autoClosingPairs = [];\n    }\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      var docComment = config.__electricCharacterSupport.docComment;\n      // IDocComment is legacy, only partially supported\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n  CharacterPairSupport.prototype.getAutoClosingPairs = function () {\n    return this._autoClosingPairs;\n  };\n  CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\n    return this._autoCloseBefore;\n  };\n  CharacterPairSupport.shouldAutoClosePair = function (autoClosingPair, context, column) {\n    // Always complete on empty line\n    if (context.getTokenCount() === 0) {\n      return true;\n    }\n    var tokenIndex = context.findTokenIndexAtOffset(column - 2);\n    var standardTokenType = context.getStandardTokenType(tokenIndex);\n    return autoClosingPair.isOK(standardTokenType);\n  };\n  CharacterPairSupport.prototype.getSurroundingPairs = function () {\n    return this._surroundingPairs;\n  };\n  CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n  return CharacterPairSupport;\n}();\nexport { CharacterPairSupport };","map":{"version":3,"names":["StandardAutoClosingPairConditional","CharacterPairSupport","config","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","__electricCharacterSupport","docComment","push","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","prototype","getAutoClosingPairs","getAutoCloseBeforeSet","shouldAutoClosePair","autoClosingPair","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","getSurroundingPairs"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/characterPair.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\r\nvar CharacterPairSupport = /** @class */ (function () {\r\n    function CharacterPairSupport(config) {\r\n        if (config.autoClosingPairs) {\r\n            this._autoClosingPairs = config.autoClosingPairs.map(function (el) { return new StandardAutoClosingPairConditional(el); });\r\n        }\r\n        else if (config.brackets) {\r\n            this._autoClosingPairs = config.brackets.map(function (b) { return new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }); });\r\n        }\r\n        else {\r\n            this._autoClosingPairs = [];\r\n        }\r\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\r\n            var docComment = config.__electricCharacterSupport.docComment;\r\n            // IDocComment is legacy, only partially supported\r\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\r\n        }\r\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\r\n    }\r\n    CharacterPairSupport.prototype.getAutoClosingPairs = function () {\r\n        return this._autoClosingPairs;\r\n    };\r\n    CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\r\n        return this._autoCloseBefore;\r\n    };\r\n    CharacterPairSupport.shouldAutoClosePair = function (autoClosingPair, context, column) {\r\n        // Always complete on empty line\r\n        if (context.getTokenCount() === 0) {\r\n            return true;\r\n        }\r\n        var tokenIndex = context.findTokenIndexAtOffset(column - 2);\r\n        var standardTokenType = context.getStandardTokenType(tokenIndex);\r\n        return autoClosingPair.isOK(standardTokenType);\r\n    };\r\n    CharacterPairSupport.prototype.getSurroundingPairs = function () {\r\n        return this._surroundingPairs;\r\n    };\r\n    CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\r\n    return CharacterPairSupport;\r\n}());\r\nexport { CharacterPairSupport };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,6BAA6B;AAChF,IAAIC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoB,CAACC,MAAM,EAAE;IAClC,IAAIA,MAAM,CAACC,gBAAgB,EAAE;MACzB,IAAI,CAACC,iBAAiB,GAAGF,MAAM,CAACC,gBAAgB,CAACE,GAAG,CAAC,UAAUC,EAAE,EAAE;QAAE,OAAO,IAAIN,kCAAkC,CAACM,EAAE,CAAC;MAAE,CAAC,CAAC;IAC9H,CAAC,MACI,IAAIJ,MAAM,CAACK,QAAQ,EAAE;MACtB,IAAI,CAACH,iBAAiB,GAAGF,MAAM,CAACK,QAAQ,CAACF,GAAG,CAAC,UAAUG,CAAC,EAAE;QAAE,OAAO,IAAIR,kCAAkC,CAAC;UAAES,IAAI,EAAED,CAAC,CAAC,CAAC,CAAC;UAAEE,KAAK,EAAEF,CAAC,CAAC,CAAC;QAAE,CAAC,CAAC;MAAE,CAAC,CAAC;IAC9I,CAAC,MACI;MACD,IAAI,CAACJ,iBAAiB,GAAG,EAAE;IAC/B;IACA,IAAIF,MAAM,CAACS,0BAA0B,IAAIT,MAAM,CAACS,0BAA0B,CAACC,UAAU,EAAE;MACnF,IAAIA,UAAU,GAAGV,MAAM,CAACS,0BAA0B,CAACC,UAAU;MAC7D;MACA,IAAI,CAACR,iBAAiB,CAACS,IAAI,CAAC,IAAIb,kCAAkC,CAAC;QAAES,IAAI,EAAEG,UAAU,CAACH,IAAI;QAAEC,KAAK,EAAEE,UAAU,CAACF,KAAK,IAAI;MAAG,CAAC,CAAC,CAAC;IACjI;IACA,IAAI,CAACI,gBAAgB,GAAG,OAAOZ,MAAM,CAACa,eAAe,KAAK,QAAQ,GAAGb,MAAM,CAACa,eAAe,GAAGd,oBAAoB,CAACe,yCAAyC;IAC5J,IAAI,CAACC,iBAAiB,GAAGf,MAAM,CAACgB,gBAAgB,IAAI,IAAI,CAACd,iBAAiB;EAC9E;EACAH,oBAAoB,CAACkB,SAAS,CAACC,mBAAmB,GAAG,YAAY;IAC7D,OAAO,IAAI,CAAChB,iBAAiB;EACjC,CAAC;EACDH,oBAAoB,CAACkB,SAAS,CAACE,qBAAqB,GAAG,YAAY;IAC/D,OAAO,IAAI,CAACP,gBAAgB;EAChC,CAAC;EACDb,oBAAoB,CAACqB,mBAAmB,GAAG,UAAUC,eAAe,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACnF;IACA,IAAID,OAAO,CAACE,aAAa,EAAE,KAAK,CAAC,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,IAAIC,UAAU,GAAGH,OAAO,CAACI,sBAAsB,CAACH,MAAM,GAAG,CAAC,CAAC;IAC3D,IAAII,iBAAiB,GAAGL,OAAO,CAACM,oBAAoB,CAACH,UAAU,CAAC;IAChE,OAAOJ,eAAe,CAACQ,IAAI,CAACF,iBAAiB,CAAC;EAClD,CAAC;EACD5B,oBAAoB,CAACkB,SAAS,CAACa,mBAAmB,GAAG,YAAY;IAC7D,OAAO,IAAI,CAACf,iBAAiB;EACjC,CAAC;EACDhB,oBAAoB,CAACe,yCAAyC,GAAG,gBAAgB;EACjF,OAAOf,oBAAoB;AAC/B,CAAC,EAAG;AACJ,SAASA,oBAAoB"},"metadata":{},"sourceType":"module"}