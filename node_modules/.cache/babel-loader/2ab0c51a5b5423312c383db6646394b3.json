{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nvar BlockCommentCommand = /** @class */function () {\n  function BlockCommentCommand(selection, insertSpace) {\n    this._selection = selection;\n    this._insertSpace = insertSpace;\n    this._usedEndToken = null;\n  }\n  BlockCommentCommand._haystackHasNeedleAtOffset = function (haystack, needle, offset) {\n    if (offset < 0) {\n      return false;\n    }\n    var needleLength = needle.length;\n    var haystackLength = haystack.length;\n    if (offset + needleLength > haystackLength) {\n      return false;\n    }\n    for (var i = 0; i < needleLength; i++) {\n      var codeA = haystack.charCodeAt(offset + i);\n      var codeB = needle.charCodeAt(i);\n      if (codeA === codeB) {\n        continue;\n      }\n      if (codeA >= 65 /* A */ && codeA <= 90 /* Z */ && codeA + 32 === codeB) {\n        // codeA is upper-case variant of codeB\n        continue;\n      }\n      if (codeB >= 65 /* A */ && codeB <= 90 /* Z */ && codeB + 32 === codeA) {\n        // codeB is upper-case variant of codeA\n        continue;\n      }\n      return false;\n    }\n    return true;\n  };\n  BlockCommentCommand.prototype._createOperationsForBlockComment = function (selection, startToken, endToken, insertSpace, model, builder) {\n    var startLineNumber = selection.startLineNumber;\n    var startColumn = selection.startColumn;\n    var endLineNumber = selection.endLineNumber;\n    var endColumn = selection.endColumn;\n    var startLineText = model.getLineContent(startLineNumber);\n    var endLineText = model.getLineContent(endLineNumber);\n    var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n    var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n    if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n      if (startLineNumber === endLineNumber) {\n        var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n        if (lineBetweenTokens.indexOf(endToken) >= 0) {\n          // force to add a block comment\n          startTokenIndex = -1;\n          endTokenIndex = -1;\n        }\n      } else {\n        var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n        var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n        if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n          // force to add a block comment\n          startTokenIndex = -1;\n          endTokenIndex = -1;\n        }\n      }\n    }\n    var ops;\n    if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n      // Consider spaces as part of the comment tokens\n      if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */) {\n        // Pretend the start token contains a trailing space\n        startToken = startToken + ' ';\n      }\n      if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* Space */) {\n        // Pretend the end token contains a leading space\n        endToken = ' ' + endToken;\n        endTokenIndex -= 1;\n      }\n      ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\n    } else {\n      ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n      this._usedEndToken = ops.length === 1 ? endToken : null;\n    }\n    for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {\n      var op = ops_1[_i];\n      builder.addTrackedEditOperation(op.range, op.text);\n    }\n  };\n  BlockCommentCommand._createRemoveBlockCommentOperations = function (r, startToken, endToken) {\n    var res = [];\n    if (!Range.isEmpty(r)) {\n      // Remove block comment start\n      res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));\n      // Remove block comment end\n      res.push(EditOperation.delete(new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\n    } else {\n      // Remove both continuously\n      res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\n    }\n    return res;\n  };\n  BlockCommentCommand._createAddBlockCommentOperations = function (r, startToken, endToken, insertSpace) {\n    var res = [];\n    if (!Range.isEmpty(r)) {\n      // Insert block comment start\n      res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\n      // Insert block comment end\n      res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n    } else {\n      // Insert both continuously\n      res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\n    }\n    return res;\n  };\n  BlockCommentCommand.prototype.getEditOperations = function (model, builder) {\n    var startLineNumber = this._selection.startLineNumber;\n    var startColumn = this._selection.startColumn;\n    model.tokenizeIfCheap(startLineNumber);\n    var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n    var config = LanguageConfigurationRegistry.getComments(languageId);\n    if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n      // Mode does not support block comments\n      return;\n    }\n    this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n  };\n  BlockCommentCommand.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    if (inverseEditOperations.length === 2) {\n      var startTokenEditOperation = inverseEditOperations[0];\n      var endTokenEditOperation = inverseEditOperations[1];\n      return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\n    } else {\n      var srcRange = inverseEditOperations[0].range;\n      var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n      return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\n    }\n  };\n  return BlockCommentCommand;\n}();\nexport { BlockCommentCommand };","map":{"version":3,"names":["EditOperation","Position","Range","Selection","LanguageConfigurationRegistry","BlockCommentCommand","selection","insertSpace","_selection","_insertSpace","_usedEndToken","_haystackHasNeedleAtOffset","haystack","needle","offset","needleLength","length","haystackLength","i","codeA","charCodeAt","codeB","prototype","_createOperationsForBlockComment","startToken","endToken","model","builder","startLineNumber","startColumn","endLineNumber","endColumn","startLineText","getLineContent","endLineText","startTokenIndex","lastIndexOf","endTokenIndex","indexOf","lineBetweenTokens","substring","startLineAfterStartToken","endLineBeforeEndToken","ops","_createRemoveBlockCommentOperations","_createAddBlockCommentOperations","_i","ops_1","op","addTrackedEditOperation","range","text","r","res","isEmpty","push","delete","insert","replace","getEditOperations","tokenizeIfCheap","languageId","getLanguageIdAtPosition","config","getComments","blockCommentStartToken","blockCommentEndToken","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","startTokenEditOperation","endTokenEditOperation","srcRange","deltaColumn"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/contrib/comment/blockCommentCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nvar BlockCommentCommand = /** @class */ (function () {\r\n    function BlockCommentCommand(selection, insertSpace) {\r\n        this._selection = selection;\r\n        this._insertSpace = insertSpace;\r\n        this._usedEndToken = null;\r\n    }\r\n    BlockCommentCommand._haystackHasNeedleAtOffset = function (haystack, needle, offset) {\r\n        if (offset < 0) {\r\n            return false;\r\n        }\r\n        var needleLength = needle.length;\r\n        var haystackLength = haystack.length;\r\n        if (offset + needleLength > haystackLength) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < needleLength; i++) {\r\n            var codeA = haystack.charCodeAt(offset + i);\r\n            var codeB = needle.charCodeAt(i);\r\n            if (codeA === codeB) {\r\n                continue;\r\n            }\r\n            if (codeA >= 65 /* A */ && codeA <= 90 /* Z */ && codeA + 32 === codeB) {\r\n                // codeA is upper-case variant of codeB\r\n                continue;\r\n            }\r\n            if (codeB >= 65 /* A */ && codeB <= 90 /* Z */ && codeB + 32 === codeA) {\r\n                // codeB is upper-case variant of codeA\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    BlockCommentCommand.prototype._createOperationsForBlockComment = function (selection, startToken, endToken, insertSpace, model, builder) {\r\n        var startLineNumber = selection.startLineNumber;\r\n        var startColumn = selection.startColumn;\r\n        var endLineNumber = selection.endLineNumber;\r\n        var endColumn = selection.endColumn;\r\n        var startLineText = model.getLineContent(startLineNumber);\r\n        var endLineText = model.getLineContent(endLineNumber);\r\n        var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\r\n        var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\r\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\r\n            if (startLineNumber === endLineNumber) {\r\n                var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\r\n                if (lineBetweenTokens.indexOf(endToken) >= 0) {\r\n                    // force to add a block comment\r\n                    startTokenIndex = -1;\r\n                    endTokenIndex = -1;\r\n                }\r\n            }\r\n            else {\r\n                var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\r\n                var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\r\n                if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\r\n                    // force to add a block comment\r\n                    startTokenIndex = -1;\r\n                    endTokenIndex = -1;\r\n                }\r\n            }\r\n        }\r\n        var ops;\r\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\r\n            // Consider spaces as part of the comment tokens\r\n            if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* Space */) {\r\n                // Pretend the start token contains a trailing space\r\n                startToken = startToken + ' ';\r\n            }\r\n            if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* Space */) {\r\n                // Pretend the end token contains a leading space\r\n                endToken = ' ' + endToken;\r\n                endTokenIndex -= 1;\r\n            }\r\n            ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\r\n        }\r\n        else {\r\n            ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\r\n            this._usedEndToken = ops.length === 1 ? endToken : null;\r\n        }\r\n        for (var _i = 0, ops_1 = ops; _i < ops_1.length; _i++) {\r\n            var op = ops_1[_i];\r\n            builder.addTrackedEditOperation(op.range, op.text);\r\n        }\r\n    };\r\n    BlockCommentCommand._createRemoveBlockCommentOperations = function (r, startToken, endToken) {\r\n        var res = [];\r\n        if (!Range.isEmpty(r)) {\r\n            // Remove block comment start\r\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));\r\n            // Remove block comment end\r\n            res.push(EditOperation.delete(new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\r\n        }\r\n        else {\r\n            // Remove both continuously\r\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\r\n        }\r\n        return res;\r\n    };\r\n    BlockCommentCommand._createAddBlockCommentOperations = function (r, startToken, endToken, insertSpace) {\r\n        var res = [];\r\n        if (!Range.isEmpty(r)) {\r\n            // Insert block comment start\r\n            res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\r\n            // Insert block comment end\r\n            res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\r\n        }\r\n        else {\r\n            // Insert both continuously\r\n            res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\r\n        }\r\n        return res;\r\n    };\r\n    BlockCommentCommand.prototype.getEditOperations = function (model, builder) {\r\n        var startLineNumber = this._selection.startLineNumber;\r\n        var startColumn = this._selection.startColumn;\r\n        model.tokenizeIfCheap(startLineNumber);\r\n        var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\r\n        var config = LanguageConfigurationRegistry.getComments(languageId);\r\n        if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\r\n            // Mode does not support block comments\r\n            return;\r\n        }\r\n        this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\r\n    };\r\n    BlockCommentCommand.prototype.computeCursorState = function (model, helper) {\r\n        var inverseEditOperations = helper.getInverseEditOperations();\r\n        if (inverseEditOperations.length === 2) {\r\n            var startTokenEditOperation = inverseEditOperations[0];\r\n            var endTokenEditOperation = inverseEditOperations[1];\r\n            return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\r\n        }\r\n        else {\r\n            var srcRange = inverseEditOperations[0].range;\r\n            var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\r\n            return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\r\n        }\r\n    };\r\n    return BlockCommentCommand;\r\n}());\r\nexport { BlockCommentCommand };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}