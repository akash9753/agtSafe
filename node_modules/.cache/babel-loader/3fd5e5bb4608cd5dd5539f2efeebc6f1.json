{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../controller/cursorCommon.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nvar repeatCache = Object.create(null);\nexport function cachedStringRepeat(str, count) {\n  if (!repeatCache[str]) {\n    repeatCache[str] = ['', str];\n  }\n  var cache = repeatCache[str];\n  for (var i = cache.length; i <= count; i++) {\n    cache[i] = cache[i - 1] + str;\n  }\n  return cache[count];\n}\nvar ShiftCommand = /** @class */function () {\n  function ShiftCommand(range, opts) {\n    this._opts = opts;\n    this._selection = range;\n    this._selectionId = null;\n    this._useLastEditRangeForCursorEndPosition = false;\n    this._selectionStartColumnStaysPut = false;\n  }\n  ShiftCommand.unshiftIndent = function (line, column, tabSize, indentSize, insertSpaces) {\n    // Determine the visible column where the content starts\n    var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n    if (insertSpaces) {\n      var indent = cachedStringRepeat(' ', indentSize);\n      var desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n      var indentCount = desiredTabStop / indentSize; // will be an integer\n      return cachedStringRepeat(indent, indentCount);\n    } else {\n      var indent = '\\t';\n      var desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n      var indentCount = desiredTabStop / tabSize; // will be an integer\n      return cachedStringRepeat(indent, indentCount);\n    }\n  };\n  ShiftCommand.shiftIndent = function (line, column, tabSize, indentSize, insertSpaces) {\n    // Determine the visible column where the content starts\n    var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n    if (insertSpaces) {\n      var indent = cachedStringRepeat(' ', indentSize);\n      var desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n      var indentCount = desiredTabStop / indentSize; // will be an integer\n      return cachedStringRepeat(indent, indentCount);\n    } else {\n      var indent = '\\t';\n      var desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n      var indentCount = desiredTabStop / tabSize; // will be an integer\n      return cachedStringRepeat(indent, indentCount);\n    }\n  };\n  ShiftCommand.prototype._addEditOperation = function (builder, range, text) {\n    if (this._useLastEditRangeForCursorEndPosition) {\n      builder.addTrackedEditOperation(range, text);\n    } else {\n      builder.addEditOperation(range, text);\n    }\n  };\n  ShiftCommand.prototype.getEditOperations = function (model, builder) {\n    var startLine = this._selection.startLineNumber;\n    var endLine = this._selection.endLineNumber;\n    if (this._selection.endColumn === 1 && startLine !== endLine) {\n      endLine = endLine - 1;\n    }\n    var _a = this._opts,\n      tabSize = _a.tabSize,\n      indentSize = _a.indentSize,\n      insertSpaces = _a.insertSpaces;\n    var shouldIndentEmptyLines = startLine === endLine;\n    // if indenting or outdenting on a whitespace only line\n    if (this._selection.isEmpty()) {\n      if (/^\\s*$/.test(model.getLineContent(startLine))) {\n        this._useLastEditRangeForCursorEndPosition = true;\n      }\n    }\n    if (this._opts.useTabStops) {\n      // keep track of previous line's \"miss-alignment\"\n      var previousLineExtraSpaces = 0,\n        extraSpaces = 0;\n      for (var lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n        extraSpaces = 0;\n        var lineText = model.getLineContent(lineNumber);\n        var indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n          // empty line or line with no leading whitespace => nothing to do\n          continue;\n        }\n        if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n          // do not indent empty lines => nothing to do\n          continue;\n        }\n        if (indentationEndIndex === -1) {\n          // the entire line is whitespace\n          indentationEndIndex = lineText.length;\n        }\n        if (lineNumber > 1) {\n          var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n          if (contentStartVisibleColumn % indentSize !== 0) {\n            // The current line is \"miss-aligned\", so let's see if this is expected...\n            // This can only happen when it has trailing commas in the indent\n            if (model.isCheapToTokenize(lineNumber - 1)) {\n              var enterAction = LanguageConfigurationRegistry.getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)));\n              if (enterAction) {\n                extraSpaces = previousLineExtraSpaces;\n                if (enterAction.appendText) {\n                  for (var j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n                    if (enterAction.appendText.charCodeAt(j) === 32 /* Space */) {\n                      extraSpaces++;\n                    } else {\n                      break;\n                    }\n                  }\n                }\n                if (enterAction.removeText) {\n                  extraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n                }\n                // Act as if `prefixSpaces` is not part of the indentation\n                for (var j = 0; j < extraSpaces; j++) {\n                  if (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== 32 /* Space */) {\n                    break;\n                  }\n                  indentationEndIndex--;\n                }\n              }\n            }\n          }\n        }\n        if (this._opts.isUnshift && indentationEndIndex === 0) {\n          // line with no leading whitespace => nothing to do\n          continue;\n        }\n        var desiredIndent = void 0;\n        if (this._opts.isUnshift) {\n          desiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n        } else {\n          desiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n        }\n        this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n        if (lineNumber === startLine && !this._selection.isEmpty()) {\n          // Force the startColumn to stay put because we're inserting after it\n          this._selectionStartColumnStaysPut = this._selection.startColumn <= indentationEndIndex + 1;\n        }\n      }\n    } else {\n      var oneIndent = insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t';\n      for (var lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n        var lineText = model.getLineContent(lineNumber);\n        var indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n          // empty line or line with no leading whitespace => nothing to do\n          continue;\n        }\n        if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n          // do not indent empty lines => nothing to do\n          continue;\n        }\n        if (indentationEndIndex === -1) {\n          // the entire line is whitespace\n          indentationEndIndex = lineText.length;\n        }\n        if (this._opts.isUnshift && indentationEndIndex === 0) {\n          // line with no leading whitespace => nothing to do\n          continue;\n        }\n        if (this._opts.isUnshift) {\n          indentationEndIndex = Math.min(indentationEndIndex, indentSize);\n          for (var i = 0; i < indentationEndIndex; i++) {\n            var chr = lineText.charCodeAt(i);\n            if (chr === 9 /* Tab */) {\n              indentationEndIndex = i + 1;\n              break;\n            }\n          }\n          this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n        } else {\n          this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n          if (lineNumber === startLine && !this._selection.isEmpty()) {\n            // Force the startColumn to stay put because we're inserting after it\n            this._selectionStartColumnStaysPut = this._selection.startColumn === 1;\n          }\n        }\n      }\n    }\n    this._selectionId = builder.trackSelection(this._selection);\n  };\n  ShiftCommand.prototype.computeCursorState = function (model, helper) {\n    if (this._useLastEditRangeForCursorEndPosition) {\n      var lastOp = helper.getInverseEditOperations()[0];\n      return new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n    }\n    var result = helper.getTrackedSelection(this._selectionId);\n    if (this._selectionStartColumnStaysPut) {\n      // The selection start should not move\n      var initialStartColumn = this._selection.startColumn;\n      var resultStartColumn = result.startColumn;\n      if (resultStartColumn <= initialStartColumn) {\n        return result;\n      }\n      if (result.getDirection() === 0 /* LTR */) {\n        return new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n      }\n      return new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n    }\n    return result;\n  };\n  return ShiftCommand;\n}();\nexport { ShiftCommand };","map":{"version":3,"names":["strings","CursorColumns","Range","Selection","LanguageConfigurationRegistry","repeatCache","Object","create","cachedStringRepeat","str","count","cache","i","length","ShiftCommand","range","opts","_opts","_selection","_selectionId","_useLastEditRangeForCursorEndPosition","_selectionStartColumnStaysPut","unshiftIndent","line","column","tabSize","indentSize","insertSpaces","contentStartVisibleColumn","visibleColumnFromColumn","indent","desiredTabStop","prevIndentTabStop","indentCount","prevRenderTabStop","shiftIndent","nextIndentTabStop","nextRenderTabStop","prototype","_addEditOperation","builder","text","addTrackedEditOperation","addEditOperation","getEditOperations","model","startLine","startLineNumber","endLine","endLineNumber","endColumn","_a","shouldIndentEmptyLines","isEmpty","test","getLineContent","useTabStops","previousLineExtraSpaces","extraSpaces","lineNumber","lineText","indentationEndIndex","firstNonWhitespaceIndex","isUnshift","isCheapToTokenize","enterAction","getEnterAction","autoIndent","getLineMaxColumn","appendText","j","lenJ","charCodeAt","removeText","Math","max","desiredIndent","startColumn","oneIndent","min","chr","trackSelection","computeCursorState","helper","lastOp","getInverseEditOperations","result","getTrackedSelection","initialStartColumn","resultStartColumn","getDirection"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/commands/shiftCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CursorColumns } from '../controller/cursorCommon.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar repeatCache = Object.create(null);\r\nexport function cachedStringRepeat(str, count) {\r\n    if (!repeatCache[str]) {\r\n        repeatCache[str] = ['', str];\r\n    }\r\n    var cache = repeatCache[str];\r\n    for (var i = cache.length; i <= count; i++) {\r\n        cache[i] = cache[i - 1] + str;\r\n    }\r\n    return cache[count];\r\n}\r\nvar ShiftCommand = /** @class */ (function () {\r\n    function ShiftCommand(range, opts) {\r\n        this._opts = opts;\r\n        this._selection = range;\r\n        this._selectionId = null;\r\n        this._useLastEditRangeForCursorEndPosition = false;\r\n        this._selectionStartColumnStaysPut = false;\r\n    }\r\n    ShiftCommand.unshiftIndent = function (line, column, tabSize, indentSize, insertSpaces) {\r\n        // Determine the visible column where the content starts\r\n        var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\r\n        if (insertSpaces) {\r\n            var indent = cachedStringRepeat(' ', indentSize);\r\n            var desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\r\n            var indentCount = desiredTabStop / indentSize; // will be an integer\r\n            return cachedStringRepeat(indent, indentCount);\r\n        }\r\n        else {\r\n            var indent = '\\t';\r\n            var desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\r\n            var indentCount = desiredTabStop / tabSize; // will be an integer\r\n            return cachedStringRepeat(indent, indentCount);\r\n        }\r\n    };\r\n    ShiftCommand.shiftIndent = function (line, column, tabSize, indentSize, insertSpaces) {\r\n        // Determine the visible column where the content starts\r\n        var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\r\n        if (insertSpaces) {\r\n            var indent = cachedStringRepeat(' ', indentSize);\r\n            var desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\r\n            var indentCount = desiredTabStop / indentSize; // will be an integer\r\n            return cachedStringRepeat(indent, indentCount);\r\n        }\r\n        else {\r\n            var indent = '\\t';\r\n            var desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\r\n            var indentCount = desiredTabStop / tabSize; // will be an integer\r\n            return cachedStringRepeat(indent, indentCount);\r\n        }\r\n    };\r\n    ShiftCommand.prototype._addEditOperation = function (builder, range, text) {\r\n        if (this._useLastEditRangeForCursorEndPosition) {\r\n            builder.addTrackedEditOperation(range, text);\r\n        }\r\n        else {\r\n            builder.addEditOperation(range, text);\r\n        }\r\n    };\r\n    ShiftCommand.prototype.getEditOperations = function (model, builder) {\r\n        var startLine = this._selection.startLineNumber;\r\n        var endLine = this._selection.endLineNumber;\r\n        if (this._selection.endColumn === 1 && startLine !== endLine) {\r\n            endLine = endLine - 1;\r\n        }\r\n        var _a = this._opts, tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\r\n        var shouldIndentEmptyLines = (startLine === endLine);\r\n        // if indenting or outdenting on a whitespace only line\r\n        if (this._selection.isEmpty()) {\r\n            if (/^\\s*$/.test(model.getLineContent(startLine))) {\r\n                this._useLastEditRangeForCursorEndPosition = true;\r\n            }\r\n        }\r\n        if (this._opts.useTabStops) {\r\n            // keep track of previous line's \"miss-alignment\"\r\n            var previousLineExtraSpaces = 0, extraSpaces = 0;\r\n            for (var lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\r\n                extraSpaces = 0;\r\n                var lineText = model.getLineContent(lineNumber);\r\n                var indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\r\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\r\n                    // empty line or line with no leading whitespace => nothing to do\r\n                    continue;\r\n                }\r\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\r\n                    // do not indent empty lines => nothing to do\r\n                    continue;\r\n                }\r\n                if (indentationEndIndex === -1) {\r\n                    // the entire line is whitespace\r\n                    indentationEndIndex = lineText.length;\r\n                }\r\n                if (lineNumber > 1) {\r\n                    var contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\r\n                    if (contentStartVisibleColumn % indentSize !== 0) {\r\n                        // The current line is \"miss-aligned\", so let's see if this is expected...\r\n                        // This can only happen when it has trailing commas in the indent\r\n                        if (model.isCheapToTokenize(lineNumber - 1)) {\r\n                            var enterAction = LanguageConfigurationRegistry.getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)));\r\n                            if (enterAction) {\r\n                                extraSpaces = previousLineExtraSpaces;\r\n                                if (enterAction.appendText) {\r\n                                    for (var j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\r\n                                        if (enterAction.appendText.charCodeAt(j) === 32 /* Space */) {\r\n                                            extraSpaces++;\r\n                                        }\r\n                                        else {\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (enterAction.removeText) {\r\n                                    extraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\r\n                                }\r\n                                // Act as if `prefixSpaces` is not part of the indentation\r\n                                for (var j = 0; j < extraSpaces; j++) {\r\n                                    if (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== 32 /* Space */) {\r\n                                        break;\r\n                                    }\r\n                                    indentationEndIndex--;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\r\n                    // line with no leading whitespace => nothing to do\r\n                    continue;\r\n                }\r\n                var desiredIndent = void 0;\r\n                if (this._opts.isUnshift) {\r\n                    desiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\r\n                }\r\n                else {\r\n                    desiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\r\n                }\r\n                this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\r\n                if (lineNumber === startLine && !this._selection.isEmpty()) {\r\n                    // Force the startColumn to stay put because we're inserting after it\r\n                    this._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\r\n            for (var lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\r\n                var lineText = model.getLineContent(lineNumber);\r\n                var indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\r\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\r\n                    // empty line or line with no leading whitespace => nothing to do\r\n                    continue;\r\n                }\r\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\r\n                    // do not indent empty lines => nothing to do\r\n                    continue;\r\n                }\r\n                if (indentationEndIndex === -1) {\r\n                    // the entire line is whitespace\r\n                    indentationEndIndex = lineText.length;\r\n                }\r\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\r\n                    // line with no leading whitespace => nothing to do\r\n                    continue;\r\n                }\r\n                if (this._opts.isUnshift) {\r\n                    indentationEndIndex = Math.min(indentationEndIndex, indentSize);\r\n                    for (var i = 0; i < indentationEndIndex; i++) {\r\n                        var chr = lineText.charCodeAt(i);\r\n                        if (chr === 9 /* Tab */) {\r\n                            indentationEndIndex = i + 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\r\n                }\r\n                else {\r\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\r\n                    if (lineNumber === startLine && !this._selection.isEmpty()) {\r\n                        // Force the startColumn to stay put because we're inserting after it\r\n                        this._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._selectionId = builder.trackSelection(this._selection);\r\n    };\r\n    ShiftCommand.prototype.computeCursorState = function (model, helper) {\r\n        if (this._useLastEditRangeForCursorEndPosition) {\r\n            var lastOp = helper.getInverseEditOperations()[0];\r\n            return new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\r\n        }\r\n        var result = helper.getTrackedSelection(this._selectionId);\r\n        if (this._selectionStartColumnStaysPut) {\r\n            // The selection start should not move\r\n            var initialStartColumn = this._selection.startColumn;\r\n            var resultStartColumn = result.startColumn;\r\n            if (resultStartColumn <= initialStartColumn) {\r\n                return result;\r\n            }\r\n            if (result.getDirection() === 0 /* LTR */) {\r\n                return new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\r\n            }\r\n            return new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\r\n        }\r\n        return result;\r\n    };\r\n    return ShiftCommand;\r\n}());\r\nexport { ShiftCommand };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}