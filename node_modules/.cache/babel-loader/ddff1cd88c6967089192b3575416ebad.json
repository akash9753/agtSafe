{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\n\nexports[\"default\"] = Compiler;\nfunction Compiler(locales, formats, pluralFn) {\n  this.locales = locales;\n  this.formats = formats;\n  this.pluralFn = pluralFn;\n}\nCompiler.prototype.compile = function (ast) {\n  this.pluralStack = [];\n  this.currentPlural = null;\n  this.pluralNumberFormat = null;\n  return this.compileMessage(ast);\n};\nCompiler.prototype.compileMessage = function (ast) {\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n  }\n  var elements = ast.elements,\n    pattern = [];\n  var i, len, element;\n  for (i = 0, len = elements.length; i < len; i += 1) {\n    element = elements[i];\n    switch (element.type) {\n      case 'messageTextElement':\n        pattern.push(this.compileMessageText(element));\n        break;\n      case 'argumentElement':\n        pattern.push(this.compileArgument(element));\n        break;\n      default:\n        throw new Error('Message element does not have a valid type');\n    }\n  }\n  return pattern;\n};\nCompiler.prototype.compileMessageText = function (element) {\n  // When this `element` is part of plural sub-pattern and its value contains\n  // an unescaped '#', use a `PluralOffsetString` helper to properly output\n  // the number with the correct offset in the string.\n  if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n    // Create a cache a NumberFormat instance that can be reused for any\n    // PluralOffsetString instance in this message.\n    if (!this.pluralNumberFormat) {\n      this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n    }\n    return new PluralOffsetString(this.currentPlural.id, this.currentPlural.format.offset, this.pluralNumberFormat, element.value);\n  }\n\n  // Unescape the escaped '#'s in the message text.\n  return element.value.replace(/\\\\#/g, '#');\n};\nCompiler.prototype.compileArgument = function (element) {\n  var format = element.format;\n  if (!format) {\n    return new StringFormat(element.id);\n  }\n  var formats = this.formats,\n    locales = this.locales,\n    pluralFn = this.pluralFn,\n    options;\n  switch (format.type) {\n    case 'numberFormat':\n      options = formats.number[format.style];\n      return {\n        id: element.id,\n        format: new Intl.NumberFormat(locales, options).format\n      };\n    case 'dateFormat':\n      options = formats.date[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n    case 'timeFormat':\n      options = formats.time[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n    case 'pluralFormat':\n      options = this.compileOptions(element);\n      return new PluralFormat(element.id, format.ordinal, format.offset, options, pluralFn);\n    case 'selectFormat':\n      options = this.compileOptions(element);\n      return new SelectFormat(element.id, options);\n    default:\n      throw new Error('Message element does not have a valid format type');\n  }\n};\nCompiler.prototype.compileOptions = function (element) {\n  var format = element.format,\n    options = format.options,\n    optionsHash = {};\n\n  // Save the current plural element, if any, then set it to a new value when\n  // compiling the options sub-patterns. This conforms the spec's algorithm\n  // for handling `\"#\"` syntax in message text.\n  this.pluralStack.push(this.currentPlural);\n  this.currentPlural = format.type === 'pluralFormat' ? element : null;\n  var i, len, option;\n  for (i = 0, len = options.length; i < len; i += 1) {\n    option = options[i];\n\n    // Compile the sub-pattern and save it under the options's selector.\n    optionsHash[option.selector] = this.compileMessage(option.value);\n  }\n\n  // Pop the plural stack to put back the original current plural value.\n  this.currentPlural = this.pluralStack.pop();\n  return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n  this.id = id;\n}\nStringFormat.prototype.format = function (value) {\n  if (!value && typeof value !== 'number') {\n    return '';\n  }\n  return typeof value === 'string' ? value : String(value);\n};\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n  this.id = id;\n  this.useOrdinal = useOrdinal;\n  this.offset = offset;\n  this.options = options;\n  this.pluralFn = pluralFn;\n}\nPluralFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  var option = options['=' + value] || options[this.pluralFn(value - this.offset, this.useOrdinal)];\n  return option || options.other;\n};\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n  this.id = id;\n  this.offset = offset;\n  this.numberFormat = numberFormat;\n  this.string = string;\n}\nPluralOffsetString.prototype.format = function (value) {\n  var number = this.numberFormat.format(value - this.offset);\n  return this.string.replace(/(^|[^\\\\])#/g, '$1' + number).replace(/\\\\#/g, '#');\n};\nfunction SelectFormat(id, options) {\n  this.id = id;\n  this.options = options;\n}\nSelectFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  return options[value] || options.other;\n};","map":{"version":3,"sources":["src/compiler.js"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nexport default Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n    this.locales  = locales;\n    this.formats  = formats;\n    this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n    this.pluralStack        = [];\n    this.currentPlural      = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n\n    var elements = ast.elements,\n        pattern  = [];\n\n    var i, len, element;\n\n    for (i = 0, len = elements.length; i < len; i += 1) {\n        element = elements[i];\n\n        switch (element.type) {\n            case 'messageTextElement':\n                pattern.push(this.compileMessageText(element));\n                break;\n\n            case 'argumentElement':\n                pattern.push(this.compileArgument(element));\n                break;\n\n            default:\n                throw new Error('Message element does not have a valid type');\n        }\n    }\n\n    return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n        // Create a cache a NumberFormat instance that can be reused for any\n        // PluralOffsetString instance in this message.\n        if (!this.pluralNumberFormat) {\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n        }\n\n        return new PluralOffsetString(\n                this.currentPlural.id,\n                this.currentPlural.format.offset,\n                this.pluralNumberFormat,\n                element.value);\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n    var format = element.format;\n\n    if (!format) {\n        return new StringFormat(element.id);\n    }\n\n    var formats  = this.formats,\n        locales  = this.locales,\n        pluralFn = this.pluralFn,\n        options;\n\n    switch (format.type) {\n        case 'numberFormat':\n            options = formats.number[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.NumberFormat(locales, options).format\n            };\n\n        case 'dateFormat':\n            options = formats.date[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'timeFormat':\n            options = formats.time[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'pluralFormat':\n            options = this.compileOptions(element);\n            return new PluralFormat(\n                element.id, format.ordinal, format.offset, options, pluralFn\n            );\n\n        case 'selectFormat':\n            options = this.compileOptions(element);\n            return new SelectFormat(element.id, options);\n\n        default:\n            throw new Error('Message element does not have a valid format type');\n    }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n    var format      = element.format,\n        options     = format.options,\n        optionsHash = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n        option = options[i];\n\n        // Compile the sub-pattern and save it under the options's selector.\n        optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n    this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n    if (!value && typeof value !== 'number') {\n        return '';\n    }\n\n    return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n    this.id         = id;\n    this.useOrdinal = useOrdinal;\n    this.offset     = offset;\n    this.options    = options;\n    this.pluralFn   = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n    var options = this.options;\n\n    var option = options['=' + value] ||\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\n\n    return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n    this.id           = id;\n    this.offset       = offset;\n    this.numberFormat = numberFormat;\n    this.string       = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n            .replace(/(^|[^\\\\])#/g, '$1' + number)\n            .replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n    this.id      = id;\n    this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n    var options = this.options;\n    return options[value] || options.other;\n};\n"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}