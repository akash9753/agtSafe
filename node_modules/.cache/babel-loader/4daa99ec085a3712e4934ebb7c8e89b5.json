{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nvar Uint8Matrix = /** @class */function () {\n  function Uint8Matrix(rows, cols, defaultValue) {\n    var data = new Uint8Array(rows * cols);\n    for (var i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n  Uint8Matrix.prototype.get = function (row, col) {\n    return this._data[row * this.cols + col];\n  };\n  Uint8Matrix.prototype.set = function (row, col, value) {\n    this._data[row * this.cols + col] = value;\n  };\n  return Uint8Matrix;\n}();\nexport { Uint8Matrix };\nvar StateMachine = /** @class */function () {\n  function StateMachine(edges) {\n    var maxCharCode = 0;\n    var maxState = 0 /* Invalid */;\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _a = edges[i],\n        from = _a[0],\n        chCode = _a[1],\n        to = _a[2];\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n      if (from > maxState) {\n        maxState = from;\n      }\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n    maxCharCode++;\n    maxState++;\n    var states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _b = edges[i],\n        from = _b[0],\n        chCode = _b[1],\n        to = _b[2];\n      states.set(from, chCode, to);\n    }\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n  StateMachine.prototype.nextState = function (currentState, chCode) {\n    if (chCode < 0 || chCode >= this._maxCharCode) {\n      return 0 /* Invalid */;\n    }\n\n    return this._states.get(currentState, chCode);\n  };\n  return StateMachine;\n}();\nexport { StateMachine };\n// State machine for http:// or https:// or file://\nvar _stateMachine = null;\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1 /* Start */, 104 /* h */, 2 /* H */], [1 /* Start */, 72 /* H */, 2 /* H */], [1 /* Start */, 102 /* f */, 6 /* F */], [1 /* Start */, 70 /* F */, 6 /* F */], [2 /* H */, 116 /* t */, 3 /* HT */], [2 /* H */, 84 /* T */, 3 /* HT */], [3 /* HT */, 116 /* t */, 4 /* HTT */], [3 /* HT */, 84 /* T */, 4 /* HTT */], [4 /* HTT */, 112 /* p */, 5 /* HTTP */], [4 /* HTT */, 80 /* P */, 5 /* HTTP */], [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */], [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */], [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */], [6 /* F */, 105 /* i */, 7 /* FI */], [6 /* F */, 73 /* I */, 7 /* FI */], [7 /* FI */, 108 /* l */, 8 /* FIL */], [7 /* FI */, 76 /* L */, 8 /* FIL */], [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */], [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */], [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */], [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */], [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */]]);\n  }\n\n  return _stateMachine;\n}\nvar _classifier = null;\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new CharacterClassifier(0 /* None */);\n    var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\n    for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\n    }\n\n    var CANNOT_END_WITH_CHARACTERS = '.,;';\n    for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\n    }\n  }\n\n  return _classifier;\n}\nvar LinkComputer = /** @class */function () {\n  function LinkComputer() {}\n  LinkComputer._createLink = function (classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n    // Do not allow to end link in certain characters...\n    var lastIncludedCharIndex = linkEndIndex - 1;\n    do {\n      var chCode = line.charCodeAt(lastIncludedCharIndex);\n      var chClass = classifier.get(chCode);\n      if (chClass !== 2 /* CannotEndIn */) {\n        break;\n      }\n      lastIncludedCharIndex--;\n    } while (lastIncludedCharIndex > linkBeginIndex);\n    // Handle links enclosed in parens, square brackets and curlys.\n    if (linkBeginIndex > 0) {\n      var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n      var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n      if (charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */ || charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */ || charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */) {\n        // Do not end in ) if ( is before the link start\n        // Do not end in ] if [ is before the link start\n        // Do not end in } if { is before the link start\n        lastIncludedCharIndex--;\n      }\n    }\n    return {\n      range: {\n        startLineNumber: lineNumber,\n        startColumn: linkBeginIndex + 1,\n        endLineNumber: lineNumber,\n        endColumn: lastIncludedCharIndex + 2\n      },\n      url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n    };\n  };\n  LinkComputer.computeLinks = function (model, stateMachine) {\n    if (stateMachine === void 0) {\n      stateMachine = getStateMachine();\n    }\n    var classifier = getClassifier();\n    var result = [];\n    for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n      var line = model.getLineContent(i);\n      var len = line.length;\n      var j = 0;\n      var linkBeginIndex = 0;\n      var linkBeginChCode = 0;\n      var state = 1 /* Start */;\n      var hasOpenParens = false;\n      var hasOpenSquareBracket = false;\n      var hasOpenCurlyBracket = false;\n      while (j < len) {\n        var resetStateMachine = false;\n        var chCode = line.charCodeAt(j);\n        if (state === 13 /* Accept */) {\n          var chClass = void 0;\n          switch (chCode) {\n            case 40 /* OpenParen */:\n              hasOpenParens = true;\n              chClass = 0 /* None */;\n              break;\n            case 41 /* CloseParen */:\n              chClass = hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            case 91 /* OpenSquareBracket */:\n              hasOpenSquareBracket = true;\n              chClass = 0 /* None */;\n              break;\n            case 93 /* CloseSquareBracket */:\n              chClass = hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            case 123 /* OpenCurlyBrace */:\n              hasOpenCurlyBracket = true;\n              chClass = 0 /* None */;\n              break;\n            case 125 /* CloseCurlyBrace */:\n              chClass = hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n            case 39 /* SingleQuote */:\n              chClass = linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */ ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            case 34 /* DoubleQuote */:\n              chClass = linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */ ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            case 96 /* BackTick */:\n              chClass = linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */ ? 0 /* None */ : 1 /* ForceTermination */;\n              break;\n            case 42 /* Asterisk */:\n              // `*` terminates a link if the link began with `*`\n              chClass = linkBeginChCode === 42 /* Asterisk */ ? 1 /* ForceTermination */ : 0 /* None */;\n              break;\n            case 124 /* Pipe */:\n              // `|` terminates a link if the link began with `|`\n              chClass = linkBeginChCode === 124 /* Pipe */ ? 1 /* ForceTermination */ : 0 /* None */;\n              break;\n            default:\n              chClass = classifier.get(chCode);\n          }\n          // Check if character terminates link\n          if (chClass === 1 /* ForceTermination */) {\n            result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n            resetStateMachine = true;\n          }\n        } else if (state === 12 /* End */) {\n          var chClass = void 0;\n          if (chCode === 91 /* OpenSquareBracket */) {\n            // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n            hasOpenSquareBracket = true;\n            chClass = 0 /* None */;\n          } else {\n            chClass = classifier.get(chCode);\n          }\n          // Check if character terminates link\n          if (chClass === 1 /* ForceTermination */) {\n            resetStateMachine = true;\n          } else {\n            state = 13 /* Accept */;\n          }\n        } else {\n          state = stateMachine.nextState(state, chCode);\n          if (state === 0 /* Invalid */) {\n            resetStateMachine = true;\n          }\n        }\n        if (resetStateMachine) {\n          state = 1 /* Start */;\n          hasOpenParens = false;\n          hasOpenSquareBracket = false;\n          hasOpenCurlyBracket = false;\n          // Record where the link started\n          linkBeginIndex = j + 1;\n          linkBeginChCode = chCode;\n        }\n        j++;\n      }\n      if (state === 13 /* Accept */) {\n        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n      }\n    }\n    return result;\n  };\n  return LinkComputer;\n}();\nexport { LinkComputer };\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\nexport function computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n  return LinkComputer.computeLinks(model);\n}","map":{"version":3,"names":["CharacterClassifier","Uint8Matrix","rows","cols","defaultValue","data","Uint8Array","i","len","_data","prototype","get","row","col","set","value","StateMachine","edges","maxCharCode","maxState","length","_a","from","chCode","to","states","_b","_states","_maxCharCode","nextState","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","CANNOT_END_WITH_CHARACTERS","LinkComputer","_createLink","classifier","line","lineNumber","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","chClass","charCodeBeforeLink","lastCharCodeInLink","range","startLineNumber","startColumn","endLineNumber","endColumn","url","substring","computeLinks","model","stateMachine","result","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","hasOpenCurlyBracket","resetStateMachine","push"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/modes/linkComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nvar Uint8Matrix = /** @class */ (function () {\r\n    function Uint8Matrix(rows, cols, defaultValue) {\r\n        var data = new Uint8Array(rows * cols);\r\n        for (var i = 0, len = rows * cols; i < len; i++) {\r\n            data[i] = defaultValue;\r\n        }\r\n        this._data = data;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n    }\r\n    Uint8Matrix.prototype.get = function (row, col) {\r\n        return this._data[row * this.cols + col];\r\n    };\r\n    Uint8Matrix.prototype.set = function (row, col, value) {\r\n        this._data[row * this.cols + col] = value;\r\n    };\r\n    return Uint8Matrix;\r\n}());\r\nexport { Uint8Matrix };\r\nvar StateMachine = /** @class */ (function () {\r\n    function StateMachine(edges) {\r\n        var maxCharCode = 0;\r\n        var maxState = 0 /* Invalid */;\r\n        for (var i = 0, len = edges.length; i < len; i++) {\r\n            var _a = edges[i], from = _a[0], chCode = _a[1], to = _a[2];\r\n            if (chCode > maxCharCode) {\r\n                maxCharCode = chCode;\r\n            }\r\n            if (from > maxState) {\r\n                maxState = from;\r\n            }\r\n            if (to > maxState) {\r\n                maxState = to;\r\n            }\r\n        }\r\n        maxCharCode++;\r\n        maxState++;\r\n        var states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\r\n        for (var i = 0, len = edges.length; i < len; i++) {\r\n            var _b = edges[i], from = _b[0], chCode = _b[1], to = _b[2];\r\n            states.set(from, chCode, to);\r\n        }\r\n        this._states = states;\r\n        this._maxCharCode = maxCharCode;\r\n    }\r\n    StateMachine.prototype.nextState = function (currentState, chCode) {\r\n        if (chCode < 0 || chCode >= this._maxCharCode) {\r\n            return 0 /* Invalid */;\r\n        }\r\n        return this._states.get(currentState, chCode);\r\n    };\r\n    return StateMachine;\r\n}());\r\nexport { StateMachine };\r\n// State machine for http:// or https:// or file://\r\nvar _stateMachine = null;\r\nfunction getStateMachine() {\r\n    if (_stateMachine === null) {\r\n        _stateMachine = new StateMachine([\r\n            [1 /* Start */, 104 /* h */, 2 /* H */],\r\n            [1 /* Start */, 72 /* H */, 2 /* H */],\r\n            [1 /* Start */, 102 /* f */, 6 /* F */],\r\n            [1 /* Start */, 70 /* F */, 6 /* F */],\r\n            [2 /* H */, 116 /* t */, 3 /* HT */],\r\n            [2 /* H */, 84 /* T */, 3 /* HT */],\r\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\r\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\r\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\r\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\r\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\r\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [6 /* F */, 105 /* i */, 7 /* FI */],\r\n            [6 /* F */, 73 /* I */, 7 /* FI */],\r\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\r\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\r\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\r\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\r\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\r\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\r\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\r\n        ]);\r\n    }\r\n    return _stateMachine;\r\n}\r\nvar _classifier = null;\r\nfunction getClassifier() {\r\n    if (_classifier === null) {\r\n        _classifier = new CharacterClassifier(0 /* None */);\r\n        var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';\r\n        for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\r\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\r\n        }\r\n        var CANNOT_END_WITH_CHARACTERS = '.,;';\r\n        for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\r\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\r\n        }\r\n    }\r\n    return _classifier;\r\n}\r\nvar LinkComputer = /** @class */ (function () {\r\n    function LinkComputer() {\r\n    }\r\n    LinkComputer._createLink = function (classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\r\n        // Do not allow to end link in certain characters...\r\n        var lastIncludedCharIndex = linkEndIndex - 1;\r\n        do {\r\n            var chCode = line.charCodeAt(lastIncludedCharIndex);\r\n            var chClass = classifier.get(chCode);\r\n            if (chClass !== 2 /* CannotEndIn */) {\r\n                break;\r\n            }\r\n            lastIncludedCharIndex--;\r\n        } while (lastIncludedCharIndex > linkBeginIndex);\r\n        // Handle links enclosed in parens, square brackets and curlys.\r\n        if (linkBeginIndex > 0) {\r\n            var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\r\n            var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\r\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\r\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\r\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\r\n                // Do not end in ) if ( is before the link start\r\n                // Do not end in ] if [ is before the link start\r\n                // Do not end in } if { is before the link start\r\n                lastIncludedCharIndex--;\r\n            }\r\n        }\r\n        return {\r\n            range: {\r\n                startLineNumber: lineNumber,\r\n                startColumn: linkBeginIndex + 1,\r\n                endLineNumber: lineNumber,\r\n                endColumn: lastIncludedCharIndex + 2\r\n            },\r\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\r\n        };\r\n    };\r\n    LinkComputer.computeLinks = function (model, stateMachine) {\r\n        if (stateMachine === void 0) { stateMachine = getStateMachine(); }\r\n        var classifier = getClassifier();\r\n        var result = [];\r\n        for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\r\n            var line = model.getLineContent(i);\r\n            var len = line.length;\r\n            var j = 0;\r\n            var linkBeginIndex = 0;\r\n            var linkBeginChCode = 0;\r\n            var state = 1 /* Start */;\r\n            var hasOpenParens = false;\r\n            var hasOpenSquareBracket = false;\r\n            var hasOpenCurlyBracket = false;\r\n            while (j < len) {\r\n                var resetStateMachine = false;\r\n                var chCode = line.charCodeAt(j);\r\n                if (state === 13 /* Accept */) {\r\n                    var chClass = void 0;\r\n                    switch (chCode) {\r\n                        case 40 /* OpenParen */:\r\n                            hasOpenParens = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 41 /* CloseParen */:\r\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 91 /* OpenSquareBracket */:\r\n                            hasOpenSquareBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 93 /* CloseSquareBracket */:\r\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        case 123 /* OpenCurlyBrace */:\r\n                            hasOpenCurlyBracket = true;\r\n                            chClass = 0 /* None */;\r\n                            break;\r\n                        case 125 /* CloseCurlyBrace */:\r\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\r\n                            break;\r\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\r\n                        case 39 /* SingleQuote */:\r\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 34 /* DoubleQuote */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 96 /* BackTick */:\r\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\r\n                            break;\r\n                        case 42 /* Asterisk */:\r\n                            // `*` terminates a link if the link began with `*`\r\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        case 124 /* Pipe */:\r\n                            // `|` terminates a link if the link began with `|`\r\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\r\n                            break;\r\n                        default:\r\n                            chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                else if (state === 12 /* End */) {\r\n                    var chClass = void 0;\r\n                    if (chCode === 91 /* OpenSquareBracket */) {\r\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\r\n                        hasOpenSquareBracket = true;\r\n                        chClass = 0 /* None */;\r\n                    }\r\n                    else {\r\n                        chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* ForceTermination */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                    else {\r\n                        state = 13 /* Accept */;\r\n                    }\r\n                }\r\n                else {\r\n                    state = stateMachine.nextState(state, chCode);\r\n                    if (state === 0 /* Invalid */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                if (resetStateMachine) {\r\n                    state = 1 /* Start */;\r\n                    hasOpenParens = false;\r\n                    hasOpenSquareBracket = false;\r\n                    hasOpenCurlyBracket = false;\r\n                    // Record where the link started\r\n                    linkBeginIndex = j + 1;\r\n                    linkBeginChCode = chCode;\r\n                }\r\n                j++;\r\n            }\r\n            if (state === 13 /* Accept */) {\r\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return LinkComputer;\r\n}());\r\nexport { LinkComputer };\r\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\r\nexport function computeLinks(model) {\r\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\r\n        // Unknown caller!\r\n        return [];\r\n    }\r\n    return LinkComputer.computeLinks(model);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}