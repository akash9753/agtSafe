{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _object = require(\"../../../../../helpers/object\");\nvar MIXIN_NAME = 'stickyRowsBottom';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {Object}\n */\n\nvar stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\n    var index = totalRows - fixedRowsBottom;\n    if (index < 0) {\n      return -1;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.wot.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {Number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\n(0, _object.defineGetter)(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nvar _default = stickyRowsBottom;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","_object","require","MIXIN_NAME","stickyRowsBottom","getFirstRenderedRow","totalRows","wot","getSetting","fixedRowsBottom","index","getFirstVisibleRow","getLastRenderedRow","getLastVisibleRow","getRenderedRowsCount","Math","min","getVisibleRowsCount","defineGetter","writable","enumerable","_default"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _object = require(\"../../../../../helpers/object\");\n\nvar MIXIN_NAME = 'stickyRowsBottom';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {Object}\n */\n\nvar stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1\n   *\n   * @returns {Number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\n    var index = totalRows - fixedRowsBottom;\n\n    if (index < 0) {\n      return -1;\n    }\n\n    return index;\n  },\n\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {Number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.wot.getSetting('totalRows') - 1;\n  },\n\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {Number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\n  },\n\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {Number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\n(0, _object.defineGetter)(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nvar _default = stickyRowsBottom;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,OAAO,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAEtD,IAAIC,UAAU,GAAG,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GAAG;EACrB;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAASA,mBAAmB,GAAG;IAClD,IAAIC,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAChD,IAAIC,eAAe,GAAG,IAAI,CAACF,GAAG,CAACC,UAAU,CAAC,iBAAiB,CAAC;IAC5D,IAAIE,KAAK,GAAGJ,SAAS,GAAGG,eAAe;IAEvC,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;IAChD,OAAO,IAAI,CAACN,mBAAmB,EAAE;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEO,kBAAkB,EAAE,SAASA,kBAAkB,GAAG;IAChD,OAAO,IAAI,CAACL,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEK,iBAAiB,EAAE,SAASA,iBAAiB,GAAG;IAC9C,OAAO,IAAI,CAACD,kBAAkB,EAAE;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,oBAAoB,EAAE,SAASA,oBAAoB,GAAG;IACpD,IAAIR,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAChD,OAAOO,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,GAAG,CAACC,UAAU,CAAC,iBAAiB,CAAC,EAAEF,SAAS,CAAC;EACpE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEW,mBAAmB,EAAE,SAASA,mBAAmB,GAAG;IAClD,OAAO,IAAI,CAACH,oBAAoB,EAAE;EACpC;AACF,CAAC;AACD,CAAC,CAAC,EAAEb,OAAO,CAACiB,YAAY,EAAEd,gBAAgB,EAAE,YAAY,EAAED,UAAU,EAAE;EACpEgB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,IAAIC,QAAQ,GAAGjB,gBAAgB;AAC/BN,OAAO,CAACE,OAAO,GAAGqB,QAAQ"},"metadata":{},"sourceType":"script"}