{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"\"\"',\n    close: '\"\"\"'\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  folding: {\n    offSide: true\n  }\n};\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.gql',\n  keywords: ['null', 'true', 'false', 'query', 'mutation', 'subscription', 'extend', 'schema', 'directive', 'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements', 'fragment', 'on'],\n  typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n  directiveLocations: ['SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION', 'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION', 'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION', 'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION'],\n  operators: ['=', '!', '?', ':', '&', '|'],\n  // we include these common regular expressions\n  symbols: /[=!?:&|]+/,\n  // https://facebook.github.io/graphql/draft/#sec-String-Value\n  escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n    // fields and argument names\n    [/[a-z_][\\w$]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'key.identifier'\n      }\n    }],\n    // identify typed input variables\n    [/[$][\\w$]*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'argument.identifier'\n      }\n    }],\n    // to show class names nicely\n    [/[A-Z][\\w\\$]*/, {\n      cases: {\n        '@typeKeywords': 'keyword',\n        '@default': 'type.identifier'\n      }\n    }],\n    // whitespace\n    {\n      include: '@whitespace'\n    },\n    // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, {\n      cases: {\n        '@operators': 'operator',\n        '@default': ''\n      }\n    }],\n    // @ annotations.\n    // As an example, we emit a debugging log message on these tokens.\n    // Note: message are supressed during the first load -- change some lines to see them.\n    [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, {\n      token: 'annotation',\n      log: 'annotation token: $0'\n    }],\n    // numbers\n    [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/0[xX][0-9a-fA-F]+/, 'number.hex'], [/\\d+/, 'number'],\n    // delimiter: after number because of .\\d floats\n    [/[;,.]/, 'delimiter'], [/\"\"\"/, {\n      token: 'string',\n      next: '@mlstring',\n      nextEmbedded: 'markdown'\n    }],\n    // strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@open',\n      next: '@string'\n    }]],\n    mlstring: [[/[^\"]+/, 'string'], ['\"\"\"', {\n      token: 'string',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }]],\n    string: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, {\n      token: 'string.quote',\n      bracket: '@close',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']]\n  }\n};","map":{"version":3,"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","language","defaultToken","tokenPostfix","keywords","typeKeywords","directiveLocations","operators","symbols","escapes","tokenizer","root","cases","include","token","log","next","nextEmbedded","bracket","mlstring","string","whitespace"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"\"\"', close: '\"\"\"' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    tokenPostfix: '.gql',\r\n    keywords: [\r\n        'null', 'true', 'false',\r\n        'query', 'mutation', 'subscription',\r\n        'extend', 'schema', 'directive',\r\n        'scalar', 'type', 'interface', 'union', 'enum', 'input', 'implements',\r\n        'fragment', 'on',\r\n    ],\r\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\r\n    directiveLocations: [\r\n        'SCHEMA', 'SCALAR', 'OBJECT', 'FIELD_DEFINITION', 'ARGUMENT_DEFINITION',\r\n        'INTERFACE', 'UNION', 'ENUM', 'ENUM_VALUE', 'INPUT_OBJECT', 'INPUT_FIELD_DEFINITION',\r\n        'QUERY', 'MUTATION', 'SUBSCRIPTION', 'FIELD', 'FRAGMENT_DEFINITION',\r\n        'FRAGMENT_SPREAD', 'INLINE_FRAGMENT', 'VARIABLE_DEFINITION',\r\n    ],\r\n    operators: ['=', '!', '?', ':', '&', '|'],\r\n    // we include these common regular expressions\r\n    symbols: /[=!?:&|]+/,\r\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\r\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // fields and argument names\r\n            [\r\n                /[a-z_][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'key.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // identify typed input variables\r\n            [\r\n                /[$][\\w$]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'argument.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // to show class names nicely\r\n            [\r\n                /[A-Z][\\w\\$]*/,\r\n                {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword',\r\n                        '@default': 'type.identifier',\r\n                    },\r\n                },\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                { cases: { '@operators': 'operator', '@default': '' } },\r\n            ],\r\n            // @ annotations.\r\n            // As an example, we emit a debugging log message on these tokens.\r\n            // Note: message are supressed during the first load -- change some lines to see them.\r\n            [\r\n                /@\\s*[a-zA-Z_\\$][\\w\\$]*/,\r\n                { token: 'annotation', log: 'annotation token: $0' },\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            [/\"\"\"/,\r\n                { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }\r\n            ],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n        ],\r\n        mlstring: [\r\n            [/[^\"]+/, 'string'],\r\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],\r\n        ],\r\n        whitespace: [[/[ \\t\\r\\n]+/, ''], [/#.*$/, 'comment']],\r\n    },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}