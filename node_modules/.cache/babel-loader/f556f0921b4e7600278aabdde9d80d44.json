{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport React, { Component } from 'react';\nimport * as monaco from 'monaco-editor';\nimport PropTypes from 'prop-types';\nfunction noop() {}\nvar MonacoEditor = /*#__PURE__*/function (_Component) {\n  _inherits(MonacoEditor, _Component);\n  var _super = _createSuper(MonacoEditor);\n  function MonacoEditor(props) {\n    var _this;\n    _classCallCheck(this, MonacoEditor);\n    _this = _super.call(this, props);\n    _this.editorRef = function (component) {\n      _this.containerElement = component;\n    };\n    _this.containerElement = undefined;\n    _this._currentValue = props.value;\n    return _this;\n  }\n  _createClass(MonacoEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initMonacoEditor();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.value !== this._currentValue) {\n        this._currentValue = this.props.value;\n        if (this.editor) {\n          this.editor.setValue(this._currentValue);\n        }\n      }\n      if (prevProps.language !== this.props.language) {\n        monaco.editor.setModelLanguage(this.editor.getModel(), this.props.language);\n      }\n      if (prevProps.theme !== this.props.theme) {\n        monaco.editor.setTheme(this.props.theme);\n      }\n      if (this.editor && (this.props.width !== prevProps.width || this.props.height !== prevProps.height)) {\n        this.editor.layout();\n      }\n    }\n  }, {\n    key: \"editorDidMount\",\n    value: function editorDidMount(editor) {\n      var _this2 = this;\n      this.props.editorDidMount(editor, monaco);\n      editor.onDidChangeModelContent(function (event) {\n        var value = editor.getValue(); // Always refer to the latest value\n\n        _this2._currentValue = value;\n        _this2.props.onChange(value, event);\n      });\n    }\n  }, {\n    key: \"initMonacoEditor\",\n    value: function initMonacoEditor() {\n      var value = this.props.value !== null ? this.props.value : this.props.defaultValue;\n      var _this$props = this.props,\n        language = _this$props.language,\n        theme = _this$props.theme,\n        options = _this$props.options;\n      if (this.containerElement) {\n        this.editor = monaco.editor.create(this.containerElement, _objectSpread({\n          value: value,\n          language: language\n        }, options));\n        if (theme) {\n          monaco.editor.setTheme(theme);\n        } // After initializing monaco editor\n\n        this.editorDidMount(this.editor);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        width = _this$props2.width,\n        height = _this$props2.height,\n        className = _this$props2.className;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: this.editorRef,\n        style: {\n          width: width,\n          height: height\n        }\n      });\n    }\n  }]);\n  return MonacoEditor;\n}(Component);\nexport { MonacoEditor as default };\nMonacoEditor.propTypes = {\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  language: PropTypes.string,\n  theme: PropTypes.string,\n  options: PropTypes.object,\n  editorDidMount: PropTypes.func,\n  onChange: PropTypes.func\n};\nMonacoEditor.defaultProps = {\n  width: '100%',\n  height: '100%',\n  value: null,\n  defaultValue: '',\n  language: 'javascript',\n  theme: null,\n  options: {},\n  editorDidMount: noop,\n  onChange: noop\n};","map":{"version":3,"sources":["../../src/Editor.js"],"names":["React","Component","monaco","PropTypes","noop","MonacoEditor","props","containerElement","undefined","_currentValue","value","initMonacoEditor","prevProps","editor","setValue","language","setModelLanguage","getModel","theme","setTheme","width","height","layout","editorDidMount","onDidChangeModelContent","event","getValue","onChange","defaultValue","options","create","editorRef","component","className","propTypes","oneOfType","string","number","object","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as monaco from 'monaco-editor';\nimport PropTypes from 'prop-types';\n\nfunction noop() {}\n\nexport default class MonacoEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.containerElement = undefined;\n    this._currentValue = props.value;\n  }\n  componentDidMount() {\n    this.initMonacoEditor();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.value !== this._currentValue) {\n      this._currentValue = this.props.value;\n      if (this.editor) {\n        this.editor.setValue(this._currentValue);\n      }\n    }\n    if (prevProps.language !== this.props.language) {\n      monaco.editor.setModelLanguage(this.editor.getModel(), this.props.language);\n    }\n    if (prevProps.theme !== this.props.theme) {\n      monaco.editor.setTheme(this.props.theme);\n    }\n    if (\n      this.editor &&\n      (this.props.width !== prevProps.width || this.props.height !== prevProps.height)\n    ) {\n      this.editor.layout();\n    }\n  }\n  editorDidMount(editor) {\n    this.props.editorDidMount(editor, monaco);\n    editor.onDidChangeModelContent((event) => {\n      const value = editor.getValue();\n      // Always refer to the latest value\n      this._currentValue = value;\n      this.props.onChange(value, event);\n    });\n  }\n  initMonacoEditor() {\n    const value = this.props.value !== null ? this.props.value : this.props.defaultValue;\n    const { language, theme, options } = this.props;\n    if (this.containerElement) {\n      this.editor = monaco.editor.create(this.containerElement, {\n        value,\n        language,\n        ...options,\n      });\n      if (theme) {\n        monaco.editor.setTheme(theme);\n      }\n      // After initializing monaco editor\n      this.editorDidMount(this.editor);\n    }\n  }\n  editorRef = (component) => {\n    this.containerElement = component;\n  };\n  render() {\n    const { width, height, className } = this.props;\n    return <div className={className} ref={this.editorRef} style={{ width, height }} />;\n  }\n}\n\nMonacoEditor.propTypes = {\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  language: PropTypes.string,\n  theme: PropTypes.string,\n  options: PropTypes.object,\n  editorDidMount: PropTypes.func,\n  onChange: PropTypes.func,\n};\n\nMonacoEditor.defaultProps = {\n  width: '100%',\n  height: '100%',\n  value: null,\n  defaultValue: '',\n  language: 'javascript',\n  theme: null,\n  options: {},\n  editorDidMount: noop,\n  onChange: noop,\n};\n"]},"metadata":{},"sourceType":"module"}