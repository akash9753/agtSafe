{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport * as strings from '../../../base/common/strings.js';\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n  var diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n  return diffAlgo.ComputeDiff(pretty);\n}\nvar LineSequence = /** @class */function () {\n  function LineSequence(lines) {\n    var startColumns = [];\n    var endColumns = [];\n    for (var i = 0, length_1 = lines.length; i < length_1; i++) {\n      startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n      endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n    }\n    this.lines = lines;\n    this._startColumns = startColumns;\n    this._endColumns = endColumns;\n  }\n  LineSequence.prototype.getElements = function () {\n    var elements = [];\n    for (var i = 0, len = this.lines.length; i < len; i++) {\n      elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n    }\n    return elements;\n  };\n  LineSequence.prototype.getStartLineNumber = function (i) {\n    return i + 1;\n  };\n  LineSequence.prototype.getEndLineNumber = function (i) {\n    return i + 1;\n  };\n  LineSequence.prototype.createCharSequence = function (shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n    var charCodes = [];\n    var lineNumbers = [];\n    var columns = [];\n    var len = 0;\n    for (var index = startIndex; index <= endIndex; index++) {\n      var lineContent = this.lines[index];\n      var startColumn = shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1;\n      var endColumn = shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1;\n      for (var col = startColumn; col < endColumn; col++) {\n        charCodes[len] = lineContent.charCodeAt(col - 1);\n        lineNumbers[len] = index + 1;\n        columns[len] = col;\n        len++;\n      }\n    }\n    return new CharSequence(charCodes, lineNumbers, columns);\n  };\n  return LineSequence;\n}();\nvar CharSequence = /** @class */function () {\n  function CharSequence(charCodes, lineNumbers, columns) {\n    this._charCodes = charCodes;\n    this._lineNumbers = lineNumbers;\n    this._columns = columns;\n  }\n  CharSequence.prototype.getElements = function () {\n    return this._charCodes;\n  };\n  CharSequence.prototype.getStartLineNumber = function (i) {\n    return this._lineNumbers[i];\n  };\n  CharSequence.prototype.getStartColumn = function (i) {\n    return this._columns[i];\n  };\n  CharSequence.prototype.getEndLineNumber = function (i) {\n    return this._lineNumbers[i];\n  };\n  CharSequence.prototype.getEndColumn = function (i) {\n    return this._columns[i] + 1;\n  };\n  return CharSequence;\n}();\nvar CharChange = /** @class */function () {\n  function CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalStartColumn = originalStartColumn;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.originalEndColumn = originalEndColumn;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedStartColumn = modifiedStartColumn;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.modifiedEndColumn = modifiedEndColumn;\n  }\n  CharChange.createFromDiffChange = function (diffChange, originalCharSequence, modifiedCharSequence) {\n    var originalStartLineNumber;\n    var originalStartColumn;\n    var originalEndLineNumber;\n    var originalEndColumn;\n    var modifiedStartLineNumber;\n    var modifiedStartColumn;\n    var modifiedEndLineNumber;\n    var modifiedEndColumn;\n    if (diffChange.originalLength === 0) {\n      originalStartLineNumber = 0;\n      originalStartColumn = 0;\n      originalEndLineNumber = 0;\n      originalEndColumn = 0;\n    } else {\n      originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n      originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n      originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n      originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n    }\n    if (diffChange.modifiedLength === 0) {\n      modifiedStartLineNumber = 0;\n      modifiedStartColumn = 0;\n      modifiedEndLineNumber = 0;\n      modifiedEndColumn = 0;\n    } else {\n      modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n      modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n      modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n      modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    }\n    return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n  };\n  return CharChange;\n}();\nfunction postProcessCharChanges(rawChanges) {\n  if (rawChanges.length <= 1) {\n    return rawChanges;\n  }\n  var result = [rawChanges[0]];\n  var prevChange = result[0];\n  for (var i = 1, len = rawChanges.length; i < len; i++) {\n    var currChange = rawChanges[i];\n    var originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n    var modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n    // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n    var matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n    if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n      // Merge the current change into the previous one\n      prevChange.originalLength = currChange.originalStart + currChange.originalLength - prevChange.originalStart;\n      prevChange.modifiedLength = currChange.modifiedStart + currChange.modifiedLength - prevChange.modifiedStart;\n    } else {\n      // Add the current change\n      result.push(currChange);\n      prevChange = currChange;\n    }\n  }\n  return result;\n}\nvar LineChange = /** @class */function () {\n  function LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n    this.originalStartLineNumber = originalStartLineNumber;\n    this.originalEndLineNumber = originalEndLineNumber;\n    this.modifiedStartLineNumber = modifiedStartLineNumber;\n    this.modifiedEndLineNumber = modifiedEndLineNumber;\n    this.charChanges = charChanges;\n  }\n  LineChange.createFromDiffResult = function (shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n    var originalStartLineNumber;\n    var originalEndLineNumber;\n    var modifiedStartLineNumber;\n    var modifiedEndLineNumber;\n    var charChanges = undefined;\n    if (diffChange.originalLength === 0) {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n      originalEndLineNumber = 0;\n    } else {\n      originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n      originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n    }\n    if (diffChange.modifiedLength === 0) {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n      modifiedEndLineNumber = 0;\n    } else {\n      modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n      modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n    }\n    if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n      // Compute character changes for diff chunks of at most 20 lines...\n      var originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n      var modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n      var rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n      if (shouldPostProcessCharChanges) {\n        rawChanges = postProcessCharChanges(rawChanges);\n      }\n      charChanges = [];\n      for (var i = 0, length_2 = rawChanges.length; i < length_2; i++) {\n        charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n      }\n    }\n    return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n  };\n  return LineChange;\n}();\nvar DiffComputer = /** @class */function () {\n  function DiffComputer(originalLines, modifiedLines, opts) {\n    this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n    this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n    this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n    this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n    this.originalLines = originalLines;\n    this.modifiedLines = modifiedLines;\n    this.original = new LineSequence(originalLines);\n    this.modified = new LineSequence(modifiedLines);\n    this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n    this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n  }\n\n  DiffComputer.prototype.computeDiff = function () {\n    if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n      // empty original => fast path\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: 1,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: this.modified.lines.length,\n          charChanges: [{\n            modifiedEndColumn: 0,\n            modifiedEndLineNumber: 0,\n            modifiedStartColumn: 0,\n            modifiedStartLineNumber: 0,\n            originalEndColumn: 0,\n            originalEndLineNumber: 0,\n            originalStartColumn: 0,\n            originalStartLineNumber: 0\n          }]\n        }]\n      };\n    }\n    if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n      // empty modified => fast path\n      return {\n        quitEarly: false,\n        changes: [{\n          originalStartLineNumber: 1,\n          originalEndLineNumber: this.original.lines.length,\n          modifiedStartLineNumber: 1,\n          modifiedEndLineNumber: 1,\n          charChanges: [{\n            modifiedEndColumn: 0,\n            modifiedEndLineNumber: 0,\n            modifiedStartColumn: 0,\n            modifiedStartLineNumber: 0,\n            originalEndColumn: 0,\n            originalEndLineNumber: 0,\n            originalStartColumn: 0,\n            originalStartLineNumber: 0\n          }]\n        }]\n      };\n    }\n    var diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n    var rawChanges = diffResult.changes;\n    var quitEarly = diffResult.quitEarly;\n    // The diff is always computed with ignoring trim whitespace\n    // This ensures we get the prettiest diff\n    if (this.shouldIgnoreTrimWhitespace) {\n      var lineChanges = [];\n      for (var i = 0, length_3 = rawChanges.length; i < length_3; i++) {\n        lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n      }\n      return {\n        quitEarly: quitEarly,\n        changes: lineChanges\n      };\n    }\n    // Need to post-process and introduce changes where the trim whitespace is different\n    // Note that we are looping starting at -1 to also cover the lines before the first change\n    var result = [];\n    var originalLineIndex = 0;\n    var modifiedLineIndex = 0;\n    for (var i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n      var nextChange = i + 1 < len ? rawChanges[i + 1] : null;\n      var originalStop = nextChange ? nextChange.originalStart : this.originalLines.length;\n      var modifiedStop = nextChange ? nextChange.modifiedStart : this.modifiedLines.length;\n      while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n        var originalLine = this.originalLines[originalLineIndex];\n        var modifiedLine = this.modifiedLines[modifiedLineIndex];\n        if (originalLine !== modifiedLine) {\n          // These lines differ only in trim whitespace\n          // Check the leading whitespace\n          {\n            var originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n            var modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n            while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n              var originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n              var modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n              originalStartColumn--;\n              modifiedStartColumn--;\n            }\n            if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n            }\n          }\n          // Check the trailing whitespace\n          {\n            var originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n            var modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n            var originalMaxColumn = originalLine.length + 1;\n            var modifiedMaxColumn = modifiedLine.length + 1;\n            while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n              var originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n              var modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n              if (originalChar !== modifiedChar) {\n                break;\n              }\n              originalEndColumn++;\n              modifiedEndColumn++;\n            }\n            if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n              this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n            }\n          }\n        }\n        originalLineIndex++;\n        modifiedLineIndex++;\n      }\n      if (nextChange) {\n        // Emit the actual change\n        result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n        originalLineIndex += nextChange.originalLength;\n        modifiedLineIndex += nextChange.modifiedLength;\n      }\n    }\n    return {\n      quitEarly: quitEarly,\n      changes: result\n    };\n  };\n  DiffComputer.prototype._pushTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n      // Merged into previous\n      return;\n    }\n    var charChanges = undefined;\n    if (this.shouldComputeCharChanges) {\n      charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n    }\n    result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n  };\n  DiffComputer.prototype._mergeTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n    var len = result.length;\n    if (len === 0) {\n      return false;\n    }\n    var prevChange = result[len - 1];\n    if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n      // Don't merge with inserts/deletes\n      return false;\n    }\n    if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n      prevChange.originalEndLineNumber = originalLineNumber;\n      prevChange.modifiedEndLineNumber = modifiedLineNumber;\n      if (this.shouldComputeCharChanges && prevChange.charChanges) {\n        prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n      }\n      return true;\n    }\n    return false;\n  };\n  return DiffComputer;\n}();\nexport { DiffComputer };\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n  var r = strings.firstNonWhitespaceIndex(txt);\n  if (r === -1) {\n    return defaultValue;\n  }\n  return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n  var r = strings.lastNonWhitespaceIndex(txt);\n  if (r === -1) {\n    return defaultValue;\n  }\n  return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n  if (maximumRuntime === 0) {\n    return function () {\n      return true;\n    };\n  }\n  var startTime = Date.now();\n  return function () {\n    return Date.now() - startTime < maximumRuntime;\n  };\n}","map":{"version":3,"names":["LcsDiff","strings","MINIMUM_MATCHING_CHARACTER_LENGTH","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","diffAlgo","ComputeDiff","LineSequence","lines","startColumns","endColumns","i","length_1","length","getFirstNonBlankColumn","getLastNonBlankColumn","_startColumns","_endColumns","prototype","getElements","elements","len","substring","getStartLineNumber","getEndLineNumber","createCharSequence","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","index","lineContent","startColumn","endColumn","col","charCodeAt","CharSequence","_charCodes","_lineNumbers","_columns","getStartColumn","getEndColumn","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","createFromDiffChange","diffChange","originalCharSequence","modifiedCharSequence","originalLength","originalStart","modifiedLength","modifiedStart","postProcessCharChanges","rawChanges","result","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","matchingLength","Math","min","push","LineChange","charChanges","createFromDiffResult","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","undefined","changes","length_2","DiffComputer","originalLines","modifiedLines","opts","shouldMakePrettyDiff","original","modified","continueLineDiff","createContinueProcessingPredicate","maxComputationTime","quitEarly","diffResult","lineChanges","length_3","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","originalChar","modifiedChar","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","defaultValue","r","firstNonWhitespaceIndex","lastNonWhitespaceIndex","maximumRuntime","startTime","Date","now"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\r\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\r\n    var diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\r\n    return diffAlgo.ComputeDiff(pretty);\r\n}\r\nvar LineSequence = /** @class */ (function () {\r\n    function LineSequence(lines) {\r\n        var startColumns = [];\r\n        var endColumns = [];\r\n        for (var i = 0, length_1 = lines.length; i < length_1; i++) {\r\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\r\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\r\n        }\r\n        this.lines = lines;\r\n        this._startColumns = startColumns;\r\n        this._endColumns = endColumns;\r\n    }\r\n    LineSequence.prototype.getElements = function () {\r\n        var elements = [];\r\n        for (var i = 0, len = this.lines.length; i < len; i++) {\r\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\r\n        }\r\n        return elements;\r\n    };\r\n    LineSequence.prototype.getStartLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.getEndLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.createCharSequence = function (shouldIgnoreTrimWhitespace, startIndex, endIndex) {\r\n        var charCodes = [];\r\n        var lineNumbers = [];\r\n        var columns = [];\r\n        var len = 0;\r\n        for (var index = startIndex; index <= endIndex; index++) {\r\n            var lineContent = this.lines[index];\r\n            var startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\r\n            var endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\r\n            for (var col = startColumn; col < endColumn; col++) {\r\n                charCodes[len] = lineContent.charCodeAt(col - 1);\r\n                lineNumbers[len] = index + 1;\r\n                columns[len] = col;\r\n                len++;\r\n            }\r\n        }\r\n        return new CharSequence(charCodes, lineNumbers, columns);\r\n    };\r\n    return LineSequence;\r\n}());\r\nvar CharSequence = /** @class */ (function () {\r\n    function CharSequence(charCodes, lineNumbers, columns) {\r\n        this._charCodes = charCodes;\r\n        this._lineNumbers = lineNumbers;\r\n        this._columns = columns;\r\n    }\r\n    CharSequence.prototype.getElements = function () {\r\n        return this._charCodes;\r\n    };\r\n    CharSequence.prototype.getStartLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getStartColumn = function (i) {\r\n        return this._columns[i];\r\n    };\r\n    CharSequence.prototype.getEndLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getEndColumn = function (i) {\r\n        return this._columns[i] + 1;\r\n    };\r\n    return CharSequence;\r\n}());\r\nvar CharChange = /** @class */ (function () {\r\n    function CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalStartColumn = originalStartColumn;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.originalEndColumn = originalEndColumn;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedStartColumn = modifiedStartColumn;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.modifiedEndColumn = modifiedEndColumn;\r\n    }\r\n    CharChange.createFromDiffChange = function (diffChange, originalCharSequence, modifiedCharSequence) {\r\n        var originalStartLineNumber;\r\n        var originalStartColumn;\r\n        var originalEndLineNumber;\r\n        var originalEndColumn;\r\n        var modifiedStartLineNumber;\r\n        var modifiedStartColumn;\r\n        var modifiedEndLineNumber;\r\n        var modifiedEndColumn;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = 0;\r\n            originalStartColumn = 0;\r\n            originalEndLineNumber = 0;\r\n            originalEndColumn = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\r\n            originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n            originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = 0;\r\n            modifiedStartColumn = 0;\r\n            modifiedEndLineNumber = 0;\r\n            modifiedEndColumn = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\r\n    };\r\n    return CharChange;\r\n}());\r\nfunction postProcessCharChanges(rawChanges) {\r\n    if (rawChanges.length <= 1) {\r\n        return rawChanges;\r\n    }\r\n    var result = [rawChanges[0]];\r\n    var prevChange = result[0];\r\n    for (var i = 1, len = rawChanges.length; i < len; i++) {\r\n        var currChange = rawChanges[i];\r\n        var originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\r\n        var modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\r\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\r\n        var matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\r\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\r\n            // Merge the current change into the previous one\r\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\r\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\r\n        }\r\n        else {\r\n            // Add the current change\r\n            result.push(currChange);\r\n            prevChange = currChange;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar LineChange = /** @class */ (function () {\r\n    function LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.charChanges = charChanges;\r\n    }\r\n    LineChange.createFromDiffResult = function (shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\r\n        var originalStartLineNumber;\r\n        var originalEndLineNumber;\r\n        var modifiedStartLineNumber;\r\n        var modifiedEndLineNumber;\r\n        var charChanges = undefined;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\r\n            originalEndLineNumber = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\r\n            modifiedEndLineNumber = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\r\n            // Compute character changes for diff chunks of at most 20 lines...\r\n            var originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\r\n            var modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            var rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\r\n            if (shouldPostProcessCharChanges) {\r\n                rawChanges = postProcessCharChanges(rawChanges);\r\n            }\r\n            charChanges = [];\r\n            for (var i = 0, length_2 = rawChanges.length; i < length_2; i++) {\r\n                charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\r\n            }\r\n        }\r\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\r\n    };\r\n    return LineChange;\r\n}());\r\nvar DiffComputer = /** @class */ (function () {\r\n    function DiffComputer(originalLines, modifiedLines, opts) {\r\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\r\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\r\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\r\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\r\n        this.originalLines = originalLines;\r\n        this.modifiedLines = modifiedLines;\r\n        this.original = new LineSequence(originalLines);\r\n        this.modified = new LineSequence(modifiedLines);\r\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\r\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\r\n    }\r\n    DiffComputer.prototype.computeDiff = function () {\r\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\r\n            // empty original => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: 1,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: this.modified.lines.length,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\r\n            // empty modified => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: this.original.lines.length,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: 1,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        var diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\r\n        var rawChanges = diffResult.changes;\r\n        var quitEarly = diffResult.quitEarly;\r\n        // The diff is always computed with ignoring trim whitespace\r\n        // This ensures we get the prettiest diff\r\n        if (this.shouldIgnoreTrimWhitespace) {\r\n            var lineChanges = [];\r\n            for (var i = 0, length_3 = rawChanges.length; i < length_3; i++) {\r\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n            }\r\n            return {\r\n                quitEarly: quitEarly,\r\n                changes: lineChanges\r\n            };\r\n        }\r\n        // Need to post-process and introduce changes where the trim whitespace is different\r\n        // Note that we are looping starting at -1 to also cover the lines before the first change\r\n        var result = [];\r\n        var originalLineIndex = 0;\r\n        var modifiedLineIndex = 0;\r\n        for (var i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\r\n            var nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\r\n            var originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\r\n            var modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\r\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\r\n                var originalLine = this.originalLines[originalLineIndex];\r\n                var modifiedLine = this.modifiedLines[modifiedLineIndex];\r\n                if (originalLine !== modifiedLine) {\r\n                    // These lines differ only in trim whitespace\r\n                    // Check the leading whitespace\r\n                    {\r\n                        var originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\r\n                        var modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\r\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\r\n                            var originalChar = originalLine.charCodeAt(originalStartColumn - 2);\r\n                            var modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalStartColumn--;\r\n                            modifiedStartColumn--;\r\n                        }\r\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\r\n                        }\r\n                    }\r\n                    // Check the trailing whitespace\r\n                    {\r\n                        var originalEndColumn = getLastNonBlankColumn(originalLine, 1);\r\n                        var modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\r\n                        var originalMaxColumn = originalLine.length + 1;\r\n                        var modifiedMaxColumn = modifiedLine.length + 1;\r\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\r\n                            var originalChar = originalLine.charCodeAt(originalEndColumn - 1);\r\n                            var modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalEndColumn++;\r\n                            modifiedEndColumn++;\r\n                        }\r\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\r\n                        }\r\n                    }\r\n                }\r\n                originalLineIndex++;\r\n                modifiedLineIndex++;\r\n            }\r\n            if (nextChange) {\r\n                // Emit the actual change\r\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n                originalLineIndex += nextChange.originalLength;\r\n                modifiedLineIndex += nextChange.modifiedLength;\r\n            }\r\n        }\r\n        return {\r\n            quitEarly: quitEarly,\r\n            changes: result\r\n        };\r\n    };\r\n    DiffComputer.prototype._pushTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\r\n            // Merged into previous\r\n            return;\r\n        }\r\n        var charChanges = undefined;\r\n        if (this.shouldComputeCharChanges) {\r\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\r\n        }\r\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\r\n    };\r\n    DiffComputer.prototype._mergeTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        var len = result.length;\r\n        if (len === 0) {\r\n            return false;\r\n        }\r\n        var prevChange = result[len - 1];\r\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\r\n            // Don't merge with inserts/deletes\r\n            return false;\r\n        }\r\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\r\n            prevChange.originalEndLineNumber = originalLineNumber;\r\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\r\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\r\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return DiffComputer;\r\n}());\r\nexport { DiffComputer };\r\nfunction getFirstNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.firstNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 1;\r\n}\r\nfunction getLastNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.lastNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 2;\r\n}\r\nfunction createContinueProcessingPredicate(maximumRuntime) {\r\n    if (maximumRuntime === 0) {\r\n        return function () { return true; };\r\n    }\r\n    var startTime = Date.now();\r\n    return function () {\r\n        return Date.now() - startTime < maximumRuntime;\r\n    };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}