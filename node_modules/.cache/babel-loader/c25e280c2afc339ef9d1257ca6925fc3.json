{"ast":null,"code":"import { startsWithIgnoreCase } from './strings.js';\nimport { sep, posix } from './path.js';\n/**\r\n * Takes a Windows OS path and changes backward slashes to forward slashes.\r\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\r\n * Using it on a Linux or MaxOS path might change it.\r\n */\nexport function toSlashes(osPath) {\n  return osPath.replace(/[\\\\/]/g, posix.sep);\n}\nexport function isEqualOrParent(path, candidate, ignoreCase, separator) {\n  if (separator === void 0) {\n    separator = sep;\n  }\n  if (path === candidate) {\n    return true;\n  }\n  if (!path || !candidate) {\n    return false;\n  }\n  if (candidate.length > path.length) {\n    return false;\n  }\n  if (ignoreCase) {\n    var beginsWith = startsWithIgnoreCase(path, candidate);\n    if (!beginsWith) {\n      return false;\n    }\n    if (candidate.length === path.length) {\n      return true; // same path, different casing\n    }\n\n    var sepOffset = candidate.length;\n    if (candidate.charAt(candidate.length - 1) === separator) {\n      sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n    }\n\n    return path.charAt(sepOffset) === separator;\n  }\n  if (candidate.charAt(candidate.length - 1) !== separator) {\n    candidate += separator;\n  }\n  return path.indexOf(candidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n  return char0 >= 65 /* A */ && char0 <= 90 /* Z */ || char0 >= 97 /* a */ && char0 <= 122 /* z */;\n}","map":{"version":3,"names":["startsWithIgnoreCase","sep","posix","toSlashes","osPath","replace","isEqualOrParent","path","candidate","ignoreCase","separator","length","beginsWith","sepOffset","charAt","indexOf","isWindowsDriveLetter","char0"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/base/common/extpath.js"],"sourcesContent":["import { startsWithIgnoreCase } from './strings.js';\r\nimport { sep, posix } from './path.js';\r\n/**\r\n * Takes a Windows OS path and changes backward slashes to forward slashes.\r\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\r\n * Using it on a Linux or MaxOS path might change it.\r\n */\r\nexport function toSlashes(osPath) {\r\n    return osPath.replace(/[\\\\/]/g, posix.sep);\r\n}\r\nexport function isEqualOrParent(path, candidate, ignoreCase, separator) {\r\n    if (separator === void 0) { separator = sep; }\r\n    if (path === candidate) {\r\n        return true;\r\n    }\r\n    if (!path || !candidate) {\r\n        return false;\r\n    }\r\n    if (candidate.length > path.length) {\r\n        return false;\r\n    }\r\n    if (ignoreCase) {\r\n        var beginsWith = startsWithIgnoreCase(path, candidate);\r\n        if (!beginsWith) {\r\n            return false;\r\n        }\r\n        if (candidate.length === path.length) {\r\n            return true; // same path, different casing\r\n        }\r\n        var sepOffset = candidate.length;\r\n        if (candidate.charAt(candidate.length - 1) === separator) {\r\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\r\n        }\r\n        return path.charAt(sepOffset) === separator;\r\n    }\r\n    if (candidate.charAt(candidate.length - 1) !== separator) {\r\n        candidate += separator;\r\n    }\r\n    return path.indexOf(candidate) === 0;\r\n}\r\nexport function isWindowsDriveLetter(char0) {\r\n    return char0 >= 65 /* A */ && char0 <= 90 /* Z */ || char0 >= 97 /* a */ && char0 <= 122 /* z */;\r\n}\r\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,cAAc;AACnD,SAASC,GAAG,EAAEC,KAAK,QAAQ,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAS,CAACC,MAAM,EAAE;EAC9B,OAAOA,MAAM,CAACC,OAAO,CAAC,QAAQ,EAAEH,KAAK,CAACD,GAAG,CAAC;AAC9C;AACA,OAAO,SAASK,eAAe,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAEC,SAAS,EAAE;EACpE,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAGT,GAAG;EAAE;EAC7C,IAAIM,IAAI,KAAKC,SAAS,EAAE;IACpB,OAAO,IAAI;EACf;EACA,IAAI,CAACD,IAAI,IAAI,CAACC,SAAS,EAAE;IACrB,OAAO,KAAK;EAChB;EACA,IAAIA,SAAS,CAACG,MAAM,GAAGJ,IAAI,CAACI,MAAM,EAAE;IAChC,OAAO,KAAK;EAChB;EACA,IAAIF,UAAU,EAAE;IACZ,IAAIG,UAAU,GAAGZ,oBAAoB,CAACO,IAAI,EAAEC,SAAS,CAAC;IACtD,IAAI,CAACI,UAAU,EAAE;MACb,OAAO,KAAK;IAChB;IACA,IAAIJ,SAAS,CAACG,MAAM,KAAKJ,IAAI,CAACI,MAAM,EAAE;MAClC,OAAO,IAAI,CAAC,CAAC;IACjB;;IACA,IAAIE,SAAS,GAAGL,SAAS,CAACG,MAAM;IAChC,IAAIH,SAAS,CAACM,MAAM,CAACN,SAAS,CAACG,MAAM,GAAG,CAAC,CAAC,KAAKD,SAAS,EAAE;MACtDG,SAAS,EAAE,CAAC,CAAC;IACjB;;IACA,OAAON,IAAI,CAACO,MAAM,CAACD,SAAS,CAAC,KAAKH,SAAS;EAC/C;EACA,IAAIF,SAAS,CAACM,MAAM,CAACN,SAAS,CAACG,MAAM,GAAG,CAAC,CAAC,KAAKD,SAAS,EAAE;IACtDF,SAAS,IAAIE,SAAS;EAC1B;EACA,OAAOH,IAAI,CAACQ,OAAO,CAACP,SAAS,CAAC,KAAK,CAAC;AACxC;AACA,OAAO,SAASQ,oBAAoB,CAACC,KAAK,EAAE;EACxC,OAAOA,KAAK,IAAI,EAAE,CAAC,WAAWA,KAAK,IAAI,EAAE,CAAC,WAAWA,KAAK,IAAI,EAAE,CAAC,WAAWA,KAAK,IAAI,GAAG,CAAC;AAC7F"},"metadata":{},"sourceType":"module"}