{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nvar CursorMoveCommands = /** @class */function () {\n  function CursorMoveCommands() {}\n  CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\n    var result = [],\n      resultLen = 0;\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n    return result;\n  };\n  CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\n    var result = [],\n      resultLen = 0;\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n    return result;\n  };\n  CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\n    var currentViewStateColumn = cursor.viewState.position.column;\n    var currentModelStateColumn = cursor.modelState.position.column;\n    var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n    var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n    var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n    var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n    if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n      return this._moveToLineStartByView(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineStartByModel(context, cursor, inSelectionMode);\n    }\n  };\n  CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n  CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n  CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\n    var viewStatePosition = cursor.viewState.position;\n    var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n    var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n    var modelStatePosition = cursor.modelState.position;\n    var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\n    var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n    if (isEndOfViewLine || isEndLineOfWrappedLine) {\n      return this._moveToLineEndByModel(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineEndByView(context, cursor, inSelectionMode);\n    }\n  };\n  CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n  CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n  CursorMoveCommands.expandLineSelection = function (context, cursors) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var startLineNumber = cursor.modelState.selection.startLineNumber;\n      var lineCount = context.model.getLineCount();\n      var endLineNumber = cursor.modelState.selection.endLineNumber;\n      var endColumn = void 0;\n      if (endLineNumber === lineCount) {\n        endColumn = context.model.getLineMaxColumn(lineCount);\n      } else {\n        endLineNumber++;\n        endColumn = 1;\n      }\n      result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n    }\n    return result;\n  };\n  CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n    return result;\n  };\n  CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n    return result;\n  };\n  CursorMoveCommands.selectAll = function (context, cursor) {\n    var lineCount = context.model.getLineCount();\n    var maxColumn = context.model.getLineMaxColumn(lineCount);\n    return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n  };\n  CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n    if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n      // Entering line selection for the first time\n      var lineCount = context.model.getLineCount();\n      var selectToLineNumber = position.lineNumber + 1;\n      var selectToColumn = 1;\n      if (selectToLineNumber > lineCount) {\n        selectToLineNumber = lineCount;\n        selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\n      }\n      return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n    }\n    // Continuing line selection\n    var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n    if (position.lineNumber < enteringLineNumber) {\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n    } else if (position.lineNumber > enteringLineNumber) {\n      var lineCount = context.viewModel.getLineCount();\n      var selectToViewLineNumber = viewPosition.lineNumber + 1;\n      var selectToViewColumn = 1;\n      if (selectToViewLineNumber > lineCount) {\n        selectToViewLineNumber = lineCount;\n        selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\n      }\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n    } else {\n      var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n      return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n    }\n  };\n  CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\n    var position = context.model.validatePosition(_position);\n    return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\n  };\n  CursorMoveCommands.cancelSelection = function (context, cursor) {\n    if (!cursor.modelState.hasSelection()) {\n      return new CursorState(cursor.modelState, cursor.viewState);\n    }\n    var lineNumber = cursor.viewState.position.lineNumber;\n    var column = cursor.viewState.position.column;\n    return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n  };\n  CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n  };\n  CursorMoveCommands.move = function (context, cursors, args) {\n    var inSelectionMode = args.select;\n    var value = args.value;\n    switch (args.direction) {\n      case 0 /* Left */:\n        {\n          if (args.unit === 4 /* HalfLine */) {\n            // Move left by half the current line length\n            return this._moveHalfLineLeft(context, cursors, inSelectionMode);\n          } else {\n            // Move left by `moveParams.value` columns\n            return this._moveLeft(context, cursors, inSelectionMode, value);\n          }\n        }\n      case 1 /* Right */:\n        {\n          if (args.unit === 4 /* HalfLine */) {\n            // Move right by half the current line length\n            return this._moveHalfLineRight(context, cursors, inSelectionMode);\n          } else {\n            // Move right by `moveParams.value` columns\n            return this._moveRight(context, cursors, inSelectionMode, value);\n          }\n        }\n      case 2 /* Up */:\n        {\n          if (args.unit === 2 /* WrappedLine */) {\n            // Move up by view lines\n            return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\n          } else {\n            // Move up by model lines\n            return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n      case 3 /* Down */:\n        {\n          if (args.unit === 2 /* WrappedLine */) {\n            // Move down by view lines\n            return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\n          } else {\n            // Move down by model lines\n            return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n      case 4 /* WrappedLineStart */:\n        {\n          // Move to the beginning of the current view line\n          return this._moveToViewMinColumn(context, cursors, inSelectionMode);\n        }\n      case 5 /* WrappedLineFirstNonWhitespaceCharacter */:\n        {\n          // Move to the first non-whitespace column of the current view line\n          return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n      case 6 /* WrappedLineColumnCenter */:\n        {\n          // Move to the \"center\" of the current view line\n          return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\n        }\n      case 7 /* WrappedLineEnd */:\n        {\n          // Move to the end of the current view line\n          return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\n        }\n      case 8 /* WrappedLineLastNonWhitespaceCharacter */:\n        {\n          // Move to the last non-whitespace column of the current view line\n          return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n      case 9 /* ViewPortTop */:\n        {\n          // Move to the nth line start in the viewport (from the top)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n      case 11 /* ViewPortBottom */:\n        {\n          // Move to the nth line start in the viewport (from the bottom)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n      case 10 /* ViewPortCenter */:\n        {\n          // Move to the line start in the viewport center\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n      case 12 /* ViewPortIfOutside */:\n        {\n          // Move to a position inside the viewport\n          var visibleViewRange = context.getCompletelyVisibleViewRange();\n          var result = [];\n          for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\n          }\n          return result;\n        }\n    }\n    return null;\n  };\n  CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\n    var viewLineNumber = cursor.viewState.position.lineNumber;\n    if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n      // Nothing to do, cursor is in viewport\n      return new CursorState(cursor.modelState, cursor.viewState);\n    } else {\n      if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n        viewLineNumber = visibleViewRange.endLineNumber - 1;\n      }\n      if (viewLineNumber < visibleViewRange.startLineNumber) {\n        viewLineNumber = visibleViewRange.startLineNumber;\n      }\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n  };\n  /**\r\n   * Find the nth line start included in the range (from the start).\r\n   */\n  CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n    return Math.min(range.endLineNumber, startLineNumber + count - 1);\n  };\n  /**\r\n   * Find the nth line start included in the range (from the end).\r\n   */\n  CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n    return Math.max(startLineNumber, range.endLineNumber - count + 1);\n  };\n  CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the previous view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the next view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n  };\n  CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n    return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n  };\n  CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n    return result;\n  };\n  CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n    return result;\n  };\n  return CursorMoveCommands;\n}();\nexport { CursorMoveCommands };\nexport var CursorMove;\n(function (CursorMove) {\n  var isCursorMoveArgs = function isCursorMoveArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    var cursorMoveArg = arg;\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n    return true;\n  };\n  CursorMove.description = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Positions in the view for cursor move command.\r\n   */\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\r\n   * Units for Cursor move 'by' argument\r\n   */\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n    var direction;\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0 /* Left */;\n        break;\n      case CursorMove.RawDirection.Right:\n        direction = 1 /* Right */;\n        break;\n      case CursorMove.RawDirection.Up:\n        direction = 2 /* Up */;\n        break;\n      case CursorMove.RawDirection.Down:\n        direction = 3 /* Down */;\n        break;\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 4 /* WrappedLineStart */;\n        break;\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 5 /* WrappedLineFirstNonWhitespaceCharacter */;\n        break;\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 6 /* WrappedLineColumnCenter */;\n        break;\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 7 /* WrappedLineEnd */;\n        break;\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 8 /* WrappedLineLastNonWhitespaceCharacter */;\n        break;\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 9 /* ViewPortTop */;\n        break;\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 11 /* ViewPortBottom */;\n        break;\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 10 /* ViewPortCenter */;\n        break;\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 12 /* ViewPortIfOutside */;\n        break;\n      default:\n        // illegal arguments\n        return null;\n    }\n    var unit = 0 /* None */;\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1 /* Line */;\n        break;\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2 /* WrappedLine */;\n        break;\n      case CursorMove.RawUnit.Character:\n        unit = 3 /* Character */;\n        break;\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4 /* HalfLine */;\n        break;\n    }\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":{"version":3,"names":["types","CursorState","SingleCursorState","MoveOperations","WordOperations","Position","Range","CursorMoveCommands","addCursorDown","context","cursors","useLogicalLine","result","resultLen","i","len","length","cursor","modelState","viewState","fromModelState","translateDown","config","model","fromViewState","viewModel","addCursorUp","translateUp","moveToBeginningOfLine","inSelectionMode","_moveToLineStart","currentViewStateColumn","position","column","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","lineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","isBeginningOfViewLine","_moveToLineStartByView","_moveToLineStartByModel","moveToEndOfLine","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","getLineMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","startLineNumber","selection","lineCount","getLineCount","endLineNumber","endColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","maxColumn","line","_position","_viewPosition","validatePosition","viewPosition","validateViewPosition","convertModelPositionToViewPosition","hasSelection","selectToLineNumber","selectToColumn","enteringLineNumber","selectionStart","getStartPosition","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","getEndPosition","word","cancelSelection","moveTo","args","select","value","direction","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","visibleModelRange","getCompletelyVisibleModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","Math","round","visibleViewRange","getCompletelyVisibleViewRange","findPositionInViewportIfOutside","viewLineNumber","viewColumn","_moveToViewPosition","range","count","startColumn","getLineMinColumn","min","max","noOfColumns","newViewState","moveLeft","newViewModelPosition","coordinatesConverter","convertViewPositionToModelPosition","halfLine","getLineContent","moveRight","linesCount","moveDown","moveUp","toViewLineNumber","toViewColumn","toModelLineNumber","toModelColumn","getLineLastNonWhitespaceColumn","CursorMove","isCursorMoveArgs","arg","isObject","cursorMoveArg","isString","to","isUndefined","isBoolean","by","isNumber","description","name","constraint","schema","RawDirection","Left","Right","Up","Down","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","parse"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as types from '../../../base/common/types.js';\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { WordOperations } from './cursorWordOperations.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar CursorMoveCommands = /** @class */ (function () {\r\n    function CursorMoveCommands() {\r\n    }\r\n    CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\r\n        var currentViewStateColumn = cursor.viewState.position.column;\r\n        var currentModelStateColumn = cursor.modelState.position.column;\r\n        var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\r\n        var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\r\n        var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\r\n        var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\r\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\r\n            return this._moveToLineStartByView(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineStartByModel(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\r\n        var viewStatePosition = cursor.viewState.position;\r\n        var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\r\n        var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\r\n        var modelStatePosition = cursor.modelState.position;\r\n        var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\r\n        var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\r\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\r\n            return this._moveToLineEndByModel(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineEndByView(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.expandLineSelection = function (context, cursors) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var startLineNumber = cursor.modelState.selection.startLineNumber;\r\n            var lineCount = context.model.getLineCount();\r\n            var endLineNumber = cursor.modelState.selection.endLineNumber;\r\n            var endColumn = void 0;\r\n            if (endLineNumber === lineCount) {\r\n                endColumn = context.model.getLineMaxColumn(lineCount);\r\n            }\r\n            else {\r\n                endLineNumber++;\r\n                endColumn = 1;\r\n            }\r\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.selectAll = function (context, cursor) {\r\n        var lineCount = context.model.getLineCount();\r\n        var maxColumn = context.model.getLineMaxColumn(lineCount);\r\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\r\n    };\r\n    CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\r\n            // Entering line selection for the first time\r\n            var lineCount = context.model.getLineCount();\r\n            var selectToLineNumber = position.lineNumber + 1;\r\n            var selectToColumn = 1;\r\n            if (selectToLineNumber > lineCount) {\r\n                selectToLineNumber = lineCount;\r\n                selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\r\n            }\r\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\r\n        }\r\n        // Continuing line selection\r\n        var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\r\n        if (position.lineNumber < enteringLineNumber) {\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\r\n        }\r\n        else if (position.lineNumber > enteringLineNumber) {\r\n            var lineCount = context.viewModel.getLineCount();\r\n            var selectToViewLineNumber = viewPosition.lineNumber + 1;\r\n            var selectToViewColumn = 1;\r\n            if (selectToViewLineNumber > lineCount) {\r\n                selectToViewLineNumber = lineCount;\r\n                selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\r\n            }\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\r\n        }\r\n        else {\r\n            var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\r\n            return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\r\n        }\r\n    };\r\n    CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\r\n        var position = context.model.validatePosition(_position);\r\n        return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\r\n    };\r\n    CursorMoveCommands.cancelSelection = function (context, cursor) {\r\n        if (!cursor.modelState.hasSelection()) {\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        var lineNumber = cursor.viewState.position.lineNumber;\r\n        var column = cursor.viewState.position.column;\r\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\r\n    };\r\n    CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\r\n    };\r\n    CursorMoveCommands.move = function (context, cursors, args) {\r\n        var inSelectionMode = args.select;\r\n        var value = args.value;\r\n        switch (args.direction) {\r\n            case 0 /* Left */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move left by half the current line length\r\n                    return this._moveHalfLineLeft(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move left by `moveParams.value` columns\r\n                    return this._moveLeft(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 1 /* Right */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move right by half the current line length\r\n                    return this._moveHalfLineRight(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move right by `moveParams.value` columns\r\n                    return this._moveRight(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 2 /* Up */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move up by view lines\r\n                    return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move up by model lines\r\n                    return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 3 /* Down */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move down by view lines\r\n                    return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move down by model lines\r\n                    return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 4 /* WrappedLineStart */: {\r\n                // Move to the beginning of the current view line\r\n                return this._moveToViewMinColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 5 /* WrappedLineFirstNonWhitespaceCharacter */: {\r\n                // Move to the first non-whitespace column of the current view line\r\n                return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 6 /* WrappedLineColumnCenter */: {\r\n                // Move to the \"center\" of the current view line\r\n                return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 7 /* WrappedLineEnd */: {\r\n                // Move to the end of the current view line\r\n                return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 8 /* WrappedLineLastNonWhitespaceCharacter */: {\r\n                // Move to the last non-whitespace column of the current view line\r\n                return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 9 /* ViewPortTop */: {\r\n                // Move to the nth line start in the viewport (from the top)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 11 /* ViewPortBottom */: {\r\n                // Move to the nth line start in the viewport (from the bottom)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 10 /* ViewPortCenter */: {\r\n                // Move to the line start in the viewport center\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 12 /* ViewPortIfOutside */: {\r\n                // Move to a position inside the viewport\r\n                var visibleViewRange = context.getCompletelyVisibleViewRange();\r\n                var result = [];\r\n                for (var i = 0, len = cursors.length; i < len; i++) {\r\n                    var cursor = cursors[i];\r\n                    result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\r\n        var viewLineNumber = cursor.viewState.position.lineNumber;\r\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\r\n            // Nothing to do, cursor is in viewport\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        else {\r\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\r\n                viewLineNumber = visibleViewRange.endLineNumber - 1;\r\n            }\r\n            if (viewLineNumber < visibleViewRange.startLineNumber) {\r\n                viewLineNumber = visibleViewRange.startLineNumber;\r\n            }\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the start).\r\n     */\r\n    CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the end).\r\n     */\r\n    CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\r\n    };\r\n    CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the previous view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the next view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\r\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    return CursorMoveCommands;\r\n}());\r\nexport { CursorMoveCommands };\r\nexport var CursorMove;\r\n(function (CursorMove) {\r\n    var isCursorMoveArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        var cursorMoveArg = arg;\r\n        if (!types.isString(cursorMoveArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    CursorMove.description = {\r\n        description: 'Move cursor to a logical position in the view',\r\n        args: [\r\n            {\r\n                name: 'Cursor move argument object',\r\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\r\n                constraint: isCursorMoveArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'select': {\r\n                            'type': 'boolean',\r\n                            'default': false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Positions in the view for cursor move command.\r\n     */\r\n    CursorMove.RawDirection = {\r\n        Left: 'left',\r\n        Right: 'right',\r\n        Up: 'up',\r\n        Down: 'down',\r\n        WrappedLineStart: 'wrappedLineStart',\r\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\r\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\r\n        WrappedLineEnd: 'wrappedLineEnd',\r\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\r\n        ViewPortTop: 'viewPortTop',\r\n        ViewPortCenter: 'viewPortCenter',\r\n        ViewPortBottom: 'viewPortBottom',\r\n        ViewPortIfOutside: 'viewPortIfOutside'\r\n    };\r\n    /**\r\n     * Units for Cursor move 'by' argument\r\n     */\r\n    CursorMove.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Character: 'character',\r\n        HalfLine: 'halfLine'\r\n    };\r\n    function parse(args) {\r\n        if (!args.to) {\r\n            // illegal arguments\r\n            return null;\r\n        }\r\n        var direction;\r\n        switch (args.to) {\r\n            case CursorMove.RawDirection.Left:\r\n                direction = 0 /* Left */;\r\n                break;\r\n            case CursorMove.RawDirection.Right:\r\n                direction = 1 /* Right */;\r\n                break;\r\n            case CursorMove.RawDirection.Up:\r\n                direction = 2 /* Up */;\r\n                break;\r\n            case CursorMove.RawDirection.Down:\r\n                direction = 3 /* Down */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineStart:\r\n                direction = 4 /* WrappedLineStart */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\r\n                direction = 5 /* WrappedLineFirstNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\r\n                direction = 6 /* WrappedLineColumnCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineEnd:\r\n                direction = 7 /* WrappedLineEnd */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\r\n                direction = 8 /* WrappedLineLastNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortTop:\r\n                direction = 9 /* ViewPortTop */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortBottom:\r\n                direction = 11 /* ViewPortBottom */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortCenter:\r\n                direction = 10 /* ViewPortCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortIfOutside:\r\n                direction = 12 /* ViewPortIfOutside */;\r\n                break;\r\n            default:\r\n                // illegal arguments\r\n                return null;\r\n        }\r\n        var unit = 0 /* None */;\r\n        switch (args.by) {\r\n            case CursorMove.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case CursorMove.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case CursorMove.RawUnit.Character:\r\n                unit = 3 /* Character */;\r\n                break;\r\n            case CursorMove.RawUnit.HalfLine:\r\n                unit = 4 /* HalfLine */;\r\n                break;\r\n        }\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            select: (!!args.select),\r\n            value: (args.value || 1)\r\n        };\r\n    }\r\n    CursorMove.parse = parse;\r\n})(CursorMove || (CursorMove = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}