{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Color } from '../../../base/common/color.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { TokenizationRegistry } from '../modes.js';\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport * as viewEvents from '../view/viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport * as platform from '../../../base/common/platform.js';\nvar USE_IDENTITY_LINES_COLLECTION = true;\nvar ViewModel = /** @class */function (_super) {\n  __extends(ViewModel, _super);\n  function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\n    var _this = _super.call(this) || this;\n    _this.editorId = editorId;\n    _this.configuration = configuration;\n    _this.model = model;\n    _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () {\n      return _this.tokenizeViewport();\n    }, 50));\n    _this.hasFocus = false;\n    _this.viewportStartLine = -1;\n    _this.viewportStartLineTrackedRange = null;\n    _this.viewportStartLineDelta = 0;\n    if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\n      _this.lines = new IdentityLinesCollection(_this.model);\n    } else {\n      var options = _this.configuration.options;\n      var fontInfo = options.get(34 /* fontInfo */);\n      var wrappingStrategy = options.get(103 /* wrappingStrategy */);\n      var wrappingInfo = options.get(108 /* wrappingInfo */);\n      var wrappingIndent = options.get(102 /* wrappingIndent */);\n      _this.lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\n    }\n    _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\n    _this.viewLayout = _this._register(new ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\n    _this._register(_this.viewLayout.onDidScroll(function (e) {\n      if (e.scrollTopChanged) {\n        _this._tokenizeViewportSoon.schedule();\n      }\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\n      } finally {\n        _this._endEmit();\n      }\n    }));\n    _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewContentSizeChangedEvent(e));\n      } finally {\n        _this._endEmit();\n      }\n    }));\n    _this.decorations = new ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\n    _this._registerModelEvents();\n    _this._register(_this.configuration.onDidChange(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n        _this._onConfigurationChanged(eventsCollector, e);\n      } finally {\n        _this._endEmit();\n      }\n    }));\n    _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n    return _this;\n  }\n  ViewModel.prototype.dispose = function () {\n    // First remove listeners, as disposing the lines might end up sending\n    // model decoration changed events ... and we no longer care about them ...\n    _super.prototype.dispose.call(this);\n    this.decorations.dispose();\n    this.lines.dispose();\n    this.invalidateMinimapColorCache();\n    this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, 1 /* NeverGrowsWhenTypingAtEdges */);\n  };\n\n  ViewModel.prototype.tokenizeViewport = function () {\n    var linesViewportData = this.viewLayout.getLinesViewportData();\n    var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\n    var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\n    this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\n  };\n  ViewModel.prototype.setHasFocus = function (hasFocus) {\n    this.hasFocus = hasFocus;\n  };\n  ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\n    // We might need to restore the current centered view range, so save it (if available)\n    var previousViewportStartModelPosition = null;\n    if (this.viewportStartLine !== -1) {\n      var previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\n      previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n    }\n    var restorePreviousViewportStart = false;\n    var options = this.configuration.options;\n    var fontInfo = options.get(34 /* fontInfo */);\n    var wrappingStrategy = options.get(103 /* wrappingStrategy */);\n    var wrappingInfo = options.get(108 /* wrappingInfo */);\n    var wrappingIndent = options.get(102 /* wrappingIndent */);\n    if (this.lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\n      eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n      eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n      eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n      this.decorations.onLineMappingChanged();\n      this.viewLayout.onFlushed(this.getLineCount());\n      if (this.viewLayout.getCurrentScrollTop() !== 0) {\n        // Never change the scroll position from 0 to something else...\n        restorePreviousViewportStart = true;\n      }\n    }\n    if (e.hasChanged(68 /* readOnly */)) {\n      // Must read again all decorations due to readOnly filtering\n      this.decorations.reset();\n      eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n    }\n    eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\n    this.viewLayout.onConfigurationChanged(e);\n    if (restorePreviousViewportStart && previousViewportStartModelPosition) {\n      var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n      var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      this.viewLayout.setScrollPositionNow({\n        scrollTop: viewPositionTop + this.viewportStartLineDelta\n      });\n    }\n  };\n  ViewModel.prototype._registerModelEvents = function () {\n    var _this = this;\n    this._register(this.model.onDidChangeRawContentFast(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n        var hadOtherModelChange = false;\n        var hadModelLineChangeThatChangedLineMapping = false;\n        var changes = e.changes;\n        var versionId = e.versionId;\n        // Do a first pass to compute line mappings, and a second pass to actually interpret them\n        var lineBreaksComputer = _this.lines.createLineBreaksComputer();\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n          var change = changes_1[_i];\n          switch (change.changeType) {\n            case 4 /* LinesInserted */:\n              {\n                for (var _a = 0, _b = change.detail; _a < _b.length; _a++) {\n                  var line = _b[_a];\n                  lineBreaksComputer.addRequest(line, null);\n                }\n                break;\n              }\n            case 2 /* LineChanged */:\n              {\n                lineBreaksComputer.addRequest(change.detail, null);\n                break;\n              }\n          }\n        }\n        var lineBreaks = lineBreaksComputer.finalize();\n        var lineBreaksOffset = 0;\n        for (var _c = 0, changes_2 = changes; _c < changes_2.length; _c++) {\n          var change = changes_2[_c];\n          switch (change.changeType) {\n            case 1 /* Flush */:\n              {\n                _this.lines.onModelFlushed();\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n                _this.decorations.reset();\n                _this.viewLayout.onFlushed(_this.getLineCount());\n                hadOtherModelChange = true;\n                break;\n              }\n            case 3 /* LinesDeleted */:\n              {\n                var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                if (linesDeletedEvent !== null) {\n                  eventsCollector.emit(linesDeletedEvent);\n                  _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n                hadOtherModelChange = true;\n                break;\n              }\n            case 4 /* LinesInserted */:\n              {\n                var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\n                lineBreaksOffset += change.detail.length;\n                var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                if (linesInsertedEvent !== null) {\n                  eventsCollector.emit(linesInsertedEvent);\n                  _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n                hadOtherModelChange = true;\n                break;\n              }\n            case 2 /* LineChanged */:\n              {\n                var changedLineBreakData = lineBreaks[lineBreaksOffset];\n                lineBreaksOffset++;\n                var _d = _this.lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData),\n                  lineMappingChanged = _d[0],\n                  linesChangedEvent = _d[1],\n                  linesInsertedEvent = _d[2],\n                  linesDeletedEvent = _d[3];\n                hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                if (linesChangedEvent) {\n                  eventsCollector.emit(linesChangedEvent);\n                }\n                if (linesInsertedEvent) {\n                  eventsCollector.emit(linesInsertedEvent);\n                  _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n                if (linesDeletedEvent) {\n                  eventsCollector.emit(linesDeletedEvent);\n                  _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n                break;\n              }\n            case 5 /* EOLChanged */:\n              {\n                // Nothing to do. The new version will be accepted below\n                break;\n              }\n          }\n        }\n        _this.lines.acceptVersionId(versionId);\n        _this.viewLayout.onHeightMaybeChanged();\n        if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n          eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n          _this.decorations.onLineMappingChanged();\n        }\n      } finally {\n        _this._endEmit();\n      }\n      // Update the configuration and reset the centered view line\n      _this.viewportStartLine = -1;\n      _this.configuration.setMaxLineNumber(_this.model.getLineCount());\n      // Recover viewport\n      if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\n        var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\n        if (modelRange) {\n          var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n          var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n          _this.viewLayout.setScrollPositionNow({\n            scrollTop: viewPositionTop + _this.viewportStartLineDelta\n          });\n        }\n      }\n    }));\n    this._register(this.model.onDidChangeTokens(function (e) {\n      var viewRanges = [];\n      for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n        var modelRange = e.ranges[j];\n        var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n        var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n        viewRanges[j] = {\n          fromLineNumber: viewStartLineNumber,\n          toLineNumber: viewEndLineNumber\n        };\n      }\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\n      } finally {\n        _this._endEmit();\n      }\n      if (e.tokenizationSupportChanged) {\n        _this._tokenizeViewportSoon.schedule();\n      }\n    }));\n    this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n    this._register(this.model.onDidChangeOptions(function (e) {\n      // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n      if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\n        _this.decorations.onLineMappingChanged();\n        _this.viewLayout.onFlushed(_this.getLineCount());\n        try {\n          var eventsCollector = _this._beginEmit();\n          eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n          eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n        } finally {\n          _this._endEmit();\n        }\n      }\n    }));\n    this._register(this.model.onDidChangeDecorations(function (e) {\n      _this.decorations.onModelDecorationsChanged();\n      try {\n        var eventsCollector = _this._beginEmit();\n        eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n      } finally {\n        _this._endEmit();\n      }\n    }));\n  };\n  ViewModel.prototype.setHiddenAreas = function (ranges) {\n    try {\n      var eventsCollector = this._beginEmit();\n      var lineMappingChanged = this.lines.setHiddenAreas(ranges);\n      if (lineMappingChanged) {\n        eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n        eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n        eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n        this.decorations.onLineMappingChanged();\n        this.viewLayout.onFlushed(this.getLineCount());\n        this.viewLayout.onHeightMaybeChanged();\n      }\n    } finally {\n      this._endEmit();\n    }\n  };\n  ViewModel.prototype.getVisibleRanges = function () {\n    var visibleViewRange = this.getCompletelyVisibleViewRange();\n    var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n    var hiddenAreas = this.lines.getHiddenAreas();\n    if (hiddenAreas.length === 0) {\n      return [visibleRange];\n    }\n    var result = [],\n      resultLen = 0;\n    var startLineNumber = visibleRange.startLineNumber;\n    var startColumn = visibleRange.startColumn;\n    var endLineNumber = visibleRange.endLineNumber;\n    var endColumn = visibleRange.endColumn;\n    for (var i = 0, len = hiddenAreas.length; i < len; i++) {\n      var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n      var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n      if (hiddenEndLineNumber < startLineNumber) {\n        continue;\n      }\n      if (hiddenStartLineNumber > endLineNumber) {\n        continue;\n      }\n      if (startLineNumber < hiddenStartLineNumber) {\n        result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n      }\n      startLineNumber = hiddenEndLineNumber + 1;\n      startColumn = 1;\n    }\n    if (startLineNumber < endLineNumber || startLineNumber === endLineNumber && startColumn < endColumn) {\n      result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    return result;\n  };\n  ViewModel.prototype.getCompletelyVisibleViewRange = function () {\n    var partialData = this.viewLayout.getLinesViewportData();\n    var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  };\n  ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n    var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n    var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  };\n  ViewModel.prototype.saveState = function () {\n    var compatViewState = this.viewLayout.saveState();\n    var scrollTop = compatViewState.scrollTop;\n    var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n    var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n    var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n    return {\n      scrollLeft: compatViewState.scrollLeft,\n      firstPosition: firstPosition,\n      firstPositionDeltaTop: firstPositionDeltaTop\n    };\n  };\n  ViewModel.prototype.reduceRestoreState = function (state) {\n    if (typeof state.firstPosition === 'undefined') {\n      // This is a view state serialized by an older version\n      return this._reduceRestoreStateCompatibility(state);\n    }\n    var modelPosition = this.model.validatePosition(state.firstPosition);\n    var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: scrollTop\n    };\n  };\n  ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: state.scrollTopWithoutViewZones\n    };\n  };\n  ViewModel.prototype.getTabSize = function () {\n    return this.model.getOptions().tabSize;\n  };\n  ViewModel.prototype.getOptions = function () {\n    return this.model.getOptions();\n  };\n  ViewModel.prototype.getLineCount = function () {\n    return this.lines.getViewLineCount();\n  };\n  /**\r\n   * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n   */\n  ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\n    this.viewportStartLine = startLineNumber;\n    var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\n    this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* NeverGrowsWhenTypingAtEdges */);\n    var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n    var scrollTop = this.viewLayout.getCurrentScrollTop();\n    this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\n  };\n  ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\n    return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n  };\n  ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\n    return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n  };\n  ViewModel.prototype.getLineContent = function (lineNumber) {\n    return this.lines.getViewLineContent(lineNumber);\n  };\n  ViewModel.prototype.getLineLength = function (lineNumber) {\n    return this.lines.getViewLineLength(lineNumber);\n  };\n  ViewModel.prototype.getLineMinColumn = function (lineNumber) {\n    return this.lines.getViewLineMinColumn(lineNumber);\n  };\n  ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\n    return this.lines.getViewLineMaxColumn(lineNumber);\n  };\n  ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\n    var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n    if (result === -1) {\n      return 0;\n    }\n    return result + 1;\n  };\n  ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\n    var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n    if (result === -1) {\n      return 0;\n    }\n    return result + 2;\n  };\n  ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\n    return this.decorations.getDecorationsViewportData(visibleRange).decorations;\n  };\n  ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\n    var mightContainRTL = this.model.mightContainRTL();\n    var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n    var tabSize = this.getTabSize();\n    var lineData = this.lines.getViewLineData(lineNumber);\n    var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n    var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n    return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n  };\n  ViewModel.prototype.getViewLineData = function (lineNumber) {\n    return this.lines.getViewLineData(lineNumber);\n  };\n  ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\n    var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n    return new MinimapLinesRenderingData(this.getTabSize(), result);\n  };\n  ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\n    return this.lines.getAllOverviewRulerDecorations(this.editorId, filterValidationDecorations(this.configuration.options), theme);\n  };\n  ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\n    var decorations = this.model.getOverviewRulerDecorations();\n    for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\n      var decoration = decorations_1[_i];\n      var opts = decoration.options.overviewRuler;\n      if (opts) {\n        opts.invalidateCachedColor();\n      }\n    }\n  };\n  ViewModel.prototype.invalidateMinimapColorCache = function () {\n    var decorations = this.model.getAllDecorations();\n    for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\n      var decoration = decorations_2[_i];\n      var opts = decoration.options.minimap;\n      if (opts) {\n        opts.invalidateCachedColor();\n      }\n    }\n  };\n  ViewModel.prototype.getValueInRange = function (range, eol) {\n    var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n    return this.model.getValueInRange(modelRange, eol);\n  };\n  ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\n    return this.model.getLineMaxColumn(modelLineNumber);\n  };\n  ViewModel.prototype.validateModelPosition = function (position) {\n    return this.model.validatePosition(position);\n  };\n  ViewModel.prototype.validateModelRange = function (range) {\n    return this.model.validateRange(range);\n  };\n  ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\n    var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n    if (this.model.getEOL().length === 2) {\n      // This model uses CRLF, so the delta must take that into account\n      if (deltaOffset < 0) {\n        deltaOffset -= lineFeedCnt;\n      } else {\n        deltaOffset += lineFeedCnt;\n      }\n    }\n    var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n    var resultOffset = modelAnchorOffset + deltaOffset;\n    return this.model.getPositionAt(resultOffset);\n  };\n  ViewModel.prototype.getEOL = function () {\n    return this.model.getEOL();\n  };\n  ViewModel.prototype.getPlainTextToCopy = function (modelRanges, emptySelectionClipboard, forceCRLF) {\n    var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n    modelRanges = modelRanges.slice(0);\n    modelRanges.sort(Range.compareRangesUsingStarts);\n    var hasEmptyRange = false;\n    var hasNonEmptyRange = false;\n    for (var _i = 0, modelRanges_1 = modelRanges; _i < modelRanges_1.length; _i++) {\n      var range = modelRanges_1[_i];\n      if (range.isEmpty()) {\n        hasEmptyRange = true;\n      } else {\n        hasNonEmptyRange = true;\n      }\n    }\n    if (!hasNonEmptyRange) {\n      // all ranges are empty\n      if (!emptySelectionClipboard) {\n        return '';\n      }\n      var modelLineNumbers = modelRanges.map(function (r) {\n        return r.startLineNumber;\n      });\n      var result_1 = '';\n      for (var i = 0; i < modelLineNumbers.length; i++) {\n        if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n          continue;\n        }\n        result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n      }\n      return result_1;\n    }\n    if (hasEmptyRange && emptySelectionClipboard) {\n      // mixed empty selections and non-empty selections\n      var result_2 = [];\n      var prevModelLineNumber = 0;\n      for (var _a = 0, modelRanges_2 = modelRanges; _a < modelRanges_2.length; _a++) {\n        var modelRange = modelRanges_2[_a];\n        var modelLineNumber = modelRange.startLineNumber;\n        if (modelRange.isEmpty()) {\n          if (modelLineNumber !== prevModelLineNumber) {\n            result_2.push(this.model.getLineContent(modelLineNumber));\n          }\n        } else {\n          result_2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\n        }\n\n        prevModelLineNumber = modelLineNumber;\n      }\n      return result_2.length === 1 ? result_2[0] : result_2;\n    }\n    var result = [];\n    for (var _b = 0, modelRanges_3 = modelRanges; _b < modelRanges_3.length; _b++) {\n      var modelRange = modelRanges_3[_b];\n      if (!modelRange.isEmpty()) {\n        result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\n      }\n    }\n\n    return result.length === 1 ? result[0] : result;\n  };\n  ViewModel.prototype.getRichTextToCopy = function (modelRanges, emptySelectionClipboard) {\n    var languageId = this.model.getLanguageIdentifier();\n    if (languageId.id === 1 /* PlainText */) {\n      return null;\n    }\n    if (modelRanges.length !== 1) {\n      // no multiple selection support at this time\n      return null;\n    }\n    var range = modelRanges[0];\n    if (range.isEmpty()) {\n      if (!emptySelectionClipboard) {\n        // nothing to copy\n        return null;\n      }\n      var lineNumber = range.startLineNumber;\n      range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n    }\n    var fontInfo = this.configuration.options.get(34 /* fontInfo */);\n    var colorMap = this._getColorMap();\n    var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\" + fontInfo.fontFamily + \"', \" + EDITOR_FONT_DEFAULTS.fontFamily;\n    return {\n      mode: languageId.language,\n      html: \"<div style=\\\"\" + (\"color: \" + colorMap[1 /* DefaultForeground */] + \";\") + (\"background-color: \" + colorMap[2 /* DefaultBackground */] + \";\") + (\"font-family: \" + fontFamily + \";\") + (\"font-weight: \" + fontInfo.fontWeight + \";\") + (\"font-size: \" + fontInfo.fontSize + \"px;\") + (\"line-height: \" + fontInfo.lineHeight + \"px;\") + \"white-space: pre;\" + \"\\\">\" + this._getHTMLToCopy(range, colorMap) + '</div>'\n    };\n  };\n  ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\n    var startLineNumber = modelRange.startLineNumber;\n    var startColumn = modelRange.startColumn;\n    var endLineNumber = modelRange.endLineNumber;\n    var endColumn = modelRange.endColumn;\n    var tabSize = this.getTabSize();\n    var result = '';\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var lineTokens = this.model.getLineTokens(lineNumber);\n      var lineContent = lineTokens.getLineContent();\n      var startOffset = lineNumber === startLineNumber ? startColumn - 1 : 0;\n      var endOffset = lineNumber === endLineNumber ? endColumn - 1 : lineContent.length;\n      if (lineContent === '') {\n        result += '<br>';\n      } else {\n        result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n      }\n    }\n    return result;\n  };\n  ViewModel.prototype._getColorMap = function () {\n    var colorMap = TokenizationRegistry.getColorMap();\n    var result = ['#000000'];\n    if (colorMap) {\n      for (var i = 1, len = colorMap.length; i < len; i++) {\n        result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n      }\n    }\n    return result;\n  };\n  return ViewModel;\n}(viewEvents.ViewEventEmitter);\nexport { ViewModel };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Color","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","Position","Range","TokenizationRegistry","tokenizeLineToHTML","MinimapTokensColorTracker","viewEvents","ViewLayout","IdentityLinesCollection","SplitLinesCollection","MinimapLinesRenderingData","ViewLineRenderingData","ViewModelDecorations","RunOnceScheduler","platform","USE_IDENTITY_LINES_COLLECTION","ViewModel","_super","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","_this","call","_tokenizeViewportSoon","_register","tokenizeViewport","hasFocus","viewportStartLine","viewportStartLineTrackedRange","viewportStartLineDelta","isTooLargeForTokenization","lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","getOptions","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","schedule","eventsCollector","_beginEmit","emit","ViewScrollChangedEvent","_endEmit","onDidContentSizeChange","ViewContentSizeChangedEvent","decorations","_registerModelEvents","onDidChange","_onConfigurationChanged","getInstance","ViewTokensColorsChangedEvent","dispose","invalidateMinimapColorCache","_setTrackedRange","linesViewportData","getLinesViewportData","startPosition","convertViewPositionToModelPosition","startLineNumber","endPosition","endLineNumber","lineNumber","setHasFocus","previousViewportStartModelPosition","previousViewportStartViewPosition","getLineMinColumn","restorePreviousViewportStart","setWrappingSettings","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","getCurrentScrollTop","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","viewPosition","convertModelPositionToViewPosition","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPositionNow","scrollTop","onDidChangeRawContentFast","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","versionId","lineBreaksComputer","createLineBreaksComputer","_i","changes_1","length","change","changeType","_a","_b","detail","line","addRequest","lineBreaks","finalize","lineBreaksOffset","_c","changes_2","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","slice","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","_d","onModelLineChanged","lineMappingChanged","linesChangedEvent","acceptVersionId","onHeightMaybeChanged","setMaxLineNumber","getAttachedEditorCount","modelRange","_getTrackedRange","getStartPosition","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","getLineMaxColumn","ViewTokensChangedEvent","tokenizationSupportChanged","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","visibleRange","convertViewRangeToModelRange","hiddenAreas","getHiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","completelyVisibleEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","getLinesViewportDataAtScrollTop","saveState","compatViewState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","scrollLeft","reduceRestoreState","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","getTabSize","getViewLineCount","setViewport","centeredLineNumber","position","column","viewportStartLineTop","getActiveIndentGuide","minLineNumber","maxLineNumber","getLinesIndentGuides","getViewLinesIndentGuides","getLineContent","getViewLineContent","getLineLength","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","getLineFirstNonWhitespaceColumn","firstNonWhitespaceIndex","getLineLastNonWhitespaceColumn","lastNonWhitespaceIndex","getDecorationsInViewport","getDecorationsViewportData","getViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","lineData","getViewLineData","allInlineDecorations","inlineDecorations","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","getMinimapLinesRenderingData","needed","getViewLinesData","getAllOverviewRulerDecorations","theme","invalidateOverviewRulerColorCache","getOverviewRulerDecorations","decorations_1","decoration","opts","overviewRuler","invalidateCachedColor","getAllDecorations","decorations_2","minimap","getValueInRange","range","eol","getModelLineMaxColumn","modelLineNumber","validateModelPosition","validateModelRange","validateRange","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","modelRanges_1","isEmpty","modelLineNumbers","map","r","result_1","result_2","prevModelLineNumber","modelRanges_2","push","modelRanges_3","getRichTextToCopy","languageId","getLanguageIdentifier","id","colorMap","_getColorMap","fontFamily","mode","language","html","fontWeight","fontSize","lineHeight","_getHTMLToCopy","lineTokens","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","ViewEventEmitter"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Color } from '../../../base/common/color.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\r\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\r\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\r\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\r\nimport { ViewModelDecorations } from './viewModelDecorations.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nvar USE_IDENTITY_LINES_COLLECTION = true;\r\nvar ViewModel = /** @class */ (function (_super) {\r\n    __extends(ViewModel, _super);\r\n    function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\r\n        var _this = _super.call(this) || this;\r\n        _this.editorId = editorId;\r\n        _this.configuration = configuration;\r\n        _this.model = model;\r\n        _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () { return _this.tokenizeViewport(); }, 50));\r\n        _this.hasFocus = false;\r\n        _this.viewportStartLine = -1;\r\n        _this.viewportStartLineTrackedRange = null;\r\n        _this.viewportStartLineDelta = 0;\r\n        if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\r\n            _this.lines = new IdentityLinesCollection(_this.model);\r\n        }\r\n        else {\r\n            var options = _this.configuration.options;\r\n            var fontInfo = options.get(34 /* fontInfo */);\r\n            var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n            var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n            var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n            _this.lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\r\n        }\r\n        _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\r\n        _this.viewLayout = _this._register(new ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\r\n        _this._register(_this.viewLayout.onDidScroll(function (e) {\r\n            if (e.scrollTopChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewContentSizeChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this.decorations = new ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\r\n        _this._registerModelEvents();\r\n        _this._register(_this.configuration.onDidChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                _this._onConfigurationChanged(eventsCollector, e);\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    ViewModel.prototype.dispose = function () {\r\n        // First remove listeners, as disposing the lines might end up sending\r\n        // model decoration changed events ... and we no longer care about them ...\r\n        _super.prototype.dispose.call(this);\r\n        this.decorations.dispose();\r\n        this.lines.dispose();\r\n        this.invalidateMinimapColorCache();\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, 1 /* NeverGrowsWhenTypingAtEdges */);\r\n    };\r\n    ViewModel.prototype.tokenizeViewport = function () {\r\n        var linesViewportData = this.viewLayout.getLinesViewportData();\r\n        var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\r\n        var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\r\n        this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\r\n    };\r\n    ViewModel.prototype.setHasFocus = function (hasFocus) {\r\n        this.hasFocus = hasFocus;\r\n    };\r\n    ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\r\n        // We might need to restore the current centered view range, so save it (if available)\r\n        var previousViewportStartModelPosition = null;\r\n        if (this.viewportStartLine !== -1) {\r\n            var previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\r\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\r\n        }\r\n        var restorePreviousViewportStart = false;\r\n        var options = this.configuration.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n        if (this.lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\r\n            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            this.decorations.onLineMappingChanged();\r\n            this.viewLayout.onFlushed(this.getLineCount());\r\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\r\n                // Never change the scroll position from 0 to something else...\r\n                restorePreviousViewportStart = true;\r\n            }\r\n        }\r\n        if (e.hasChanged(68 /* readOnly */)) {\r\n            // Must read again all decorations due to readOnly filtering\r\n            this.decorations.reset();\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n        }\r\n        eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\r\n        this.viewLayout.onConfigurationChanged(e);\r\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\r\n            var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\r\n            var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\r\n        }\r\n    };\r\n    ViewModel.prototype._registerModelEvents = function () {\r\n        var _this = this;\r\n        this._register(this.model.onDidChangeRawContentFast(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                var hadOtherModelChange = false;\r\n                var hadModelLineChangeThatChangedLineMapping = false;\r\n                var changes = e.changes;\r\n                var versionId = e.versionId;\r\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\r\n                var lineBreaksComputer = _this.lines.createLineBreaksComputer();\r\n                for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\r\n                    var change = changes_1[_i];\r\n                    switch (change.changeType) {\r\n                        case 4 /* LinesInserted */: {\r\n                            for (var _a = 0, _b = change.detail; _a < _b.length; _a++) {\r\n                                var line = _b[_a];\r\n                                lineBreaksComputer.addRequest(line, null);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            lineBreaksComputer.addRequest(change.detail, null);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var lineBreaks = lineBreaksComputer.finalize();\r\n                var lineBreaksOffset = 0;\r\n                for (var _c = 0, changes_2 = changes; _c < changes_2.length; _c++) {\r\n                    var change = changes_2[_c];\r\n                    switch (change.changeType) {\r\n                        case 1 /* Flush */: {\r\n                            _this.lines.onModelFlushed();\r\n                            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                            _this.decorations.reset();\r\n                            _this.viewLayout.onFlushed(_this.getLineCount());\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 3 /* LinesDeleted */: {\r\n                            var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\r\n                            if (linesDeletedEvent !== null) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 4 /* LinesInserted */: {\r\n                            var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\r\n                            lineBreaksOffset += change.detail.length;\r\n                            var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\r\n                            if (linesInsertedEvent !== null) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            var changedLineBreakData = lineBreaks[lineBreaksOffset];\r\n                            lineBreaksOffset++;\r\n                            var _d = _this.lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData), lineMappingChanged = _d[0], linesChangedEvent = _d[1], linesInsertedEvent = _d[2], linesDeletedEvent = _d[3];\r\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\r\n                            if (linesChangedEvent) {\r\n                                eventsCollector.emit(linesChangedEvent);\r\n                            }\r\n                            if (linesInsertedEvent) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            if (linesDeletedEvent) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 5 /* EOLChanged */: {\r\n                            // Nothing to do. The new version will be accepted below\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                _this.lines.acceptVersionId(versionId);\r\n                _this.viewLayout.onHeightMaybeChanged();\r\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                    _this.decorations.onLineMappingChanged();\r\n                }\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            // Update the configuration and reset the centered view line\r\n            _this.viewportStartLine = -1;\r\n            _this.configuration.setMaxLineNumber(_this.model.getLineCount());\r\n            // Recover viewport\r\n            if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\r\n                var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\r\n                if (modelRange) {\r\n                    var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\r\n                    var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n                    _this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + _this.viewportStartLineDelta });\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeTokens(function (e) {\r\n            var viewRanges = [];\r\n            for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\r\n                var modelRange = e.ranges[j];\r\n                var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\r\n                var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\r\n                viewRanges[j] = {\r\n                    fromLineNumber: viewStartLineNumber,\r\n                    toLineNumber: viewEndLineNumber\r\n                };\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            if (e.tokenizationSupportChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeOptions(function (e) {\r\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\r\n            if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\r\n                _this.decorations.onLineMappingChanged();\r\n                _this.viewLayout.onFlushed(_this.getLineCount());\r\n                try {\r\n                    var eventsCollector = _this._beginEmit();\r\n                    eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                }\r\n                finally {\r\n                    _this._endEmit();\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeDecorations(function (e) {\r\n            _this.decorations.onModelDecorationsChanged();\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n    };\r\n    ViewModel.prototype.setHiddenAreas = function (ranges) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            var lineMappingChanged = this.lines.setHiddenAreas(ranges);\r\n            if (lineMappingChanged) {\r\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                this.decorations.onLineMappingChanged();\r\n                this.viewLayout.onFlushed(this.getLineCount());\r\n                this.viewLayout.onHeightMaybeChanged();\r\n            }\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    ViewModel.prototype.getVisibleRanges = function () {\r\n        var visibleViewRange = this.getCompletelyVisibleViewRange();\r\n        var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n        var hiddenAreas = this.lines.getHiddenAreas();\r\n        if (hiddenAreas.length === 0) {\r\n            return [visibleRange];\r\n        }\r\n        var result = [], resultLen = 0;\r\n        var startLineNumber = visibleRange.startLineNumber;\r\n        var startColumn = visibleRange.startColumn;\r\n        var endLineNumber = visibleRange.endLineNumber;\r\n        var endColumn = visibleRange.endColumn;\r\n        for (var i = 0, len = hiddenAreas.length; i < len; i++) {\r\n            var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\r\n            var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\r\n            if (hiddenEndLineNumber < startLineNumber) {\r\n                continue;\r\n            }\r\n            if (hiddenStartLineNumber > endLineNumber) {\r\n                continue;\r\n            }\r\n            if (startLineNumber < hiddenStartLineNumber) {\r\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\r\n            }\r\n            startLineNumber = hiddenEndLineNumber + 1;\r\n            startColumn = 1;\r\n        }\r\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\r\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRange = function () {\r\n        var partialData = this.viewLayout.getLinesViewportData();\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.saveState = function () {\r\n        var compatViewState = this.viewLayout.saveState();\r\n        var scrollTop = compatViewState.scrollTop;\r\n        var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\r\n        var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\r\n        var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\r\n        return {\r\n            scrollLeft: compatViewState.scrollLeft,\r\n            firstPosition: firstPosition,\r\n            firstPositionDeltaTop: firstPositionDeltaTop\r\n        };\r\n    };\r\n    ViewModel.prototype.reduceRestoreState = function (state) {\r\n        if (typeof state.firstPosition === 'undefined') {\r\n            // This is a view state serialized by an older version\r\n            return this._reduceRestoreStateCompatibility(state);\r\n        }\r\n        var modelPosition = this.model.validatePosition(state.firstPosition);\r\n        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n        var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: scrollTop\r\n        };\r\n    };\r\n    ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: state.scrollTopWithoutViewZones\r\n        };\r\n    };\r\n    ViewModel.prototype.getTabSize = function () {\r\n        return this.model.getOptions().tabSize;\r\n    };\r\n    ViewModel.prototype.getOptions = function () {\r\n        return this.model.getOptions();\r\n    };\r\n    ViewModel.prototype.getLineCount = function () {\r\n        return this.lines.getViewLineCount();\r\n    };\r\n    /**\r\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n     */\r\n    ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\r\n        this.viewportStartLine = startLineNumber;\r\n        var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\r\n        var scrollTop = this.viewLayout.getCurrentScrollTop();\r\n        this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\r\n    };\r\n    ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\r\n        return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\r\n    };\r\n    ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\r\n        return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\r\n    };\r\n    ViewModel.prototype.getLineContent = function (lineNumber) {\r\n        return this.lines.getViewLineContent(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineLength = function (lineNumber) {\r\n        return this.lines.getViewLineLength(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMinColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMinColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMaxColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 1;\r\n    };\r\n    ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 2;\r\n    };\r\n    ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\r\n        return this.decorations.getDecorationsViewportData(visibleRange).decorations;\r\n    };\r\n    ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\r\n        var mightContainRTL = this.model.mightContainRTL();\r\n        var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\r\n        var tabSize = this.getTabSize();\r\n        var lineData = this.lines.getViewLineData(lineNumber);\r\n        var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\r\n        var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\r\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\r\n    };\r\n    ViewModel.prototype.getViewLineData = function (lineNumber) {\r\n        return this.lines.getViewLineData(lineNumber);\r\n    };\r\n    ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\r\n        var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\r\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\r\n    };\r\n    ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\r\n        return this.lines.getAllOverviewRulerDecorations(this.editorId, filterValidationDecorations(this.configuration.options), theme);\r\n    };\r\n    ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\r\n        var decorations = this.model.getOverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.invalidateMinimapColorCache = function () {\r\n        var decorations = this.model.getAllDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.minimap;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.getValueInRange = function (range, eol) {\r\n        var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\r\n        return this.model.getValueInRange(modelRange, eol);\r\n    };\r\n    ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\r\n        return this.model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    ViewModel.prototype.validateModelPosition = function (position) {\r\n        return this.model.validatePosition(position);\r\n    };\r\n    ViewModel.prototype.validateModelRange = function (range) {\r\n        return this.model.validateRange(range);\r\n    };\r\n    ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\r\n        var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\r\n        if (this.model.getEOL().length === 2) {\r\n            // This model uses CRLF, so the delta must take that into account\r\n            if (deltaOffset < 0) {\r\n                deltaOffset -= lineFeedCnt;\r\n            }\r\n            else {\r\n                deltaOffset += lineFeedCnt;\r\n            }\r\n        }\r\n        var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\r\n        var resultOffset = modelAnchorOffset + deltaOffset;\r\n        return this.model.getPositionAt(resultOffset);\r\n    };\r\n    ViewModel.prototype.getEOL = function () {\r\n        return this.model.getEOL();\r\n    };\r\n    ViewModel.prototype.getPlainTextToCopy = function (modelRanges, emptySelectionClipboard, forceCRLF) {\r\n        var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\r\n        modelRanges = modelRanges.slice(0);\r\n        modelRanges.sort(Range.compareRangesUsingStarts);\r\n        var hasEmptyRange = false;\r\n        var hasNonEmptyRange = false;\r\n        for (var _i = 0, modelRanges_1 = modelRanges; _i < modelRanges_1.length; _i++) {\r\n            var range = modelRanges_1[_i];\r\n            if (range.isEmpty()) {\r\n                hasEmptyRange = true;\r\n            }\r\n            else {\r\n                hasNonEmptyRange = true;\r\n            }\r\n        }\r\n        if (!hasNonEmptyRange) {\r\n            // all ranges are empty\r\n            if (!emptySelectionClipboard) {\r\n                return '';\r\n            }\r\n            var modelLineNumbers = modelRanges.map(function (r) { return r.startLineNumber; });\r\n            var result_1 = '';\r\n            for (var i = 0; i < modelLineNumbers.length; i++) {\r\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\r\n                    continue;\r\n                }\r\n                result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\r\n            }\r\n            return result_1;\r\n        }\r\n        if (hasEmptyRange && emptySelectionClipboard) {\r\n            // mixed empty selections and non-empty selections\r\n            var result_2 = [];\r\n            var prevModelLineNumber = 0;\r\n            for (var _a = 0, modelRanges_2 = modelRanges; _a < modelRanges_2.length; _a++) {\r\n                var modelRange = modelRanges_2[_a];\r\n                var modelLineNumber = modelRange.startLineNumber;\r\n                if (modelRange.isEmpty()) {\r\n                    if (modelLineNumber !== prevModelLineNumber) {\r\n                        result_2.push(this.model.getLineContent(modelLineNumber));\r\n                    }\r\n                }\r\n                else {\r\n                    result_2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n                }\r\n                prevModelLineNumber = modelLineNumber;\r\n            }\r\n            return result_2.length === 1 ? result_2[0] : result_2;\r\n        }\r\n        var result = [];\r\n        for (var _b = 0, modelRanges_3 = modelRanges; _b < modelRanges_3.length; _b++) {\r\n            var modelRange = modelRanges_3[_b];\r\n            if (!modelRange.isEmpty()) {\r\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n            }\r\n        }\r\n        return result.length === 1 ? result[0] : result;\r\n    };\r\n    ViewModel.prototype.getRichTextToCopy = function (modelRanges, emptySelectionClipboard) {\r\n        var languageId = this.model.getLanguageIdentifier();\r\n        if (languageId.id === 1 /* PlainText */) {\r\n            return null;\r\n        }\r\n        if (modelRanges.length !== 1) {\r\n            // no multiple selection support at this time\r\n            return null;\r\n        }\r\n        var range = modelRanges[0];\r\n        if (range.isEmpty()) {\r\n            if (!emptySelectionClipboard) {\r\n                // nothing to copy\r\n                return null;\r\n            }\r\n            var lineNumber = range.startLineNumber;\r\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\r\n        }\r\n        var fontInfo = this.configuration.options.get(34 /* fontInfo */);\r\n        var colorMap = this._getColorMap();\r\n        var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\" + fontInfo.fontFamily + \"', \" + EDITOR_FONT_DEFAULTS.fontFamily;\r\n        return {\r\n            mode: languageId.language,\r\n            html: (\"<div style=\\\"\"\r\n                + (\"color: \" + colorMap[1 /* DefaultForeground */] + \";\")\r\n                + (\"background-color: \" + colorMap[2 /* DefaultBackground */] + \";\")\r\n                + (\"font-family: \" + fontFamily + \";\")\r\n                + (\"font-weight: \" + fontInfo.fontWeight + \";\")\r\n                + (\"font-size: \" + fontInfo.fontSize + \"px;\")\r\n                + (\"line-height: \" + fontInfo.lineHeight + \"px;\")\r\n                + \"white-space: pre;\"\r\n                + \"\\\">\"\r\n                + this._getHTMLToCopy(range, colorMap)\r\n                + '</div>')\r\n        };\r\n    };\r\n    ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\r\n        var startLineNumber = modelRange.startLineNumber;\r\n        var startColumn = modelRange.startColumn;\r\n        var endLineNumber = modelRange.endLineNumber;\r\n        var endColumn = modelRange.endColumn;\r\n        var tabSize = this.getTabSize();\r\n        var result = '';\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var lineTokens = this.model.getLineTokens(lineNumber);\r\n            var lineContent = lineTokens.getLineContent();\r\n            var startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\r\n            var endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\r\n            if (lineContent === '') {\r\n                result += '<br>';\r\n            }\r\n            else {\r\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype._getColorMap = function () {\r\n        var colorMap = TokenizationRegistry.getColorMap();\r\n        var result = ['#000000'];\r\n        if (colorMap) {\r\n            for (var i = 1, len = colorMap.length; i < len; i++) {\r\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return ViewModel;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { ViewModel };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}