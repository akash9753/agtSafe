{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _viewSize = _interopRequireDefault(require(\"./viewSize\"));\nvar _constants = require(\"./constants\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nvar ViewSizeSet = /*#__PURE__*/\nfunction () {\n  function ViewSizeSet() {\n    _classCallCheck(this, ViewSizeSet);\n\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    this.size = new _viewSize.default();\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {Number}\n     */\n\n    this.workingSpace = _constants.WORKING_SPACE_ALL;\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n\n    this.sharedSize = null;\n  }\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {Number} size\n   */\n\n  _createClass(ViewSizeSet, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.size.setSize(size);\n    }\n    /**\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\n     * the first rendered element according to the scroll position.\n     *\n     * @param {Number} offset\n     */\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.size.setOffset(offset);\n    }\n    /**\n     * Returns ViewSize instance.\n     *\n     * @returns {ViewSize}\n     */\n  }, {\n    key: \"getViewSize\",\n    value: function getViewSize() {\n      return this.size;\n    }\n    /**\n     * Checks if this ViewSizeSet is sharing the size with another instance.\n     *\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isShared\",\n    value: function isShared() {\n      return this.sharedSize instanceof _viewSize.default;\n    }\n    /**\n     * Checks what working space describes this size instance.\n     *\n     * @param {Number} workingSpace The number which describes the type of the working space (see constants.js).\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isPlaceOn\",\n    value: function isPlaceOn(workingSpace) {\n      return this.workingSpace === workingSpace;\n    }\n    /**\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSizeSet\n     */\n  }, {\n    key: \"append\",\n    value: function append(viewSize) {\n      this.workingSpace = _constants.WORKING_SPACE_TOP;\n      viewSize.workingSpace = _constants.WORKING_SPACE_BOTTOM;\n      this.sharedSize = viewSize.getViewSize();\n    }\n    /**\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSizeSet\n     */\n  }, {\n    key: \"prepend\",\n    value: function prepend(viewSize) {\n      this.workingSpace = _constants.WORKING_SPACE_BOTTOM;\n      viewSize.workingSpace = _constants.WORKING_SPACE_TOP;\n      this.sharedSize = viewSize.getViewSize();\n    }\n  }]);\n  return ViewSizeSet;\n}();\nexports.default = ViewSizeSet;","map":{"version":3,"names":["exports","__esModule","default","_viewSize","_interopRequireDefault","require","_constants","obj","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","ViewSizeSet","size","workingSpace","WORKING_SPACE_ALL","sharedSize","value","setSize","setOffset","offset","getViewSize","isShared","isPlaceOn","append","viewSize","WORKING_SPACE_TOP","WORKING_SPACE_BOTTOM","prepend"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/handsontable/commonjs/3rdparty/walkontable/src/utils/orderView/viewSizeSet.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _viewSize = _interopRequireDefault(require(\"./viewSize\"));\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nvar ViewSizeSet =\n/*#__PURE__*/\nfunction () {\n  function ViewSizeSet() {\n    _classCallCheck(this, ViewSizeSet);\n\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    this.size = new _viewSize.default();\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {Number}\n     */\n\n    this.workingSpace = _constants.WORKING_SPACE_ALL;\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n\n    this.sharedSize = null;\n  }\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {Number} size\n   */\n\n\n  _createClass(ViewSizeSet, [{\n    key: \"setSize\",\n    value: function setSize(size) {\n      this.size.setSize(size);\n    }\n    /**\n     * Sets the offset for rendered elements. The offset describes the shift between 0 and\n     * the first rendered element according to the scroll position.\n     *\n     * @param {Number} offset\n     */\n\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this.size.setOffset(offset);\n    }\n    /**\n     * Returns ViewSize instance.\n     *\n     * @returns {ViewSize}\n     */\n\n  }, {\n    key: \"getViewSize\",\n    value: function getViewSize() {\n      return this.size;\n    }\n    /**\n     * Checks if this ViewSizeSet is sharing the size with another instance.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isShared\",\n    value: function isShared() {\n      return this.sharedSize instanceof _viewSize.default;\n    }\n    /**\n     * Checks what working space describes this size instance.\n     *\n     * @param {Number} workingSpace The number which describes the type of the working space (see constants.js).\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isPlaceOn\",\n    value: function isPlaceOn(workingSpace) {\n      return this.workingSpace === workingSpace;\n    }\n    /**\n     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSizeSet\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(viewSize) {\n      this.workingSpace = _constants.WORKING_SPACE_TOP;\n      viewSize.workingSpace = _constants.WORKING_SPACE_BOTTOM;\n      this.sharedSize = viewSize.getViewSize();\n    }\n    /**\n     * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n     *\n     * @param {ViewSizeSet} viewSizeSet\n     */\n\n  }, {\n    key: \"prepend\",\n    value: function prepend(viewSize) {\n      this.workingSpace = _constants.WORKING_SPACE_BOTTOM;\n      viewSize.workingSpace = _constants.WORKING_SPACE_TOP;\n      this.sharedSize = viewSize.getViewSize();\n    }\n  }]);\n\n  return ViewSizeSet;\n}();\n\nexports.default = ViewSizeSet;"],"mappings":"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"},"metadata":{},"sourceType":"script"}