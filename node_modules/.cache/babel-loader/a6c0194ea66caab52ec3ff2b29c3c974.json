{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\akash\\\\Desktop\\\\agat project\\\\CLientapp\\\\src\\\\containers\\\\Page\\\\securityQuestions.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '../../components/uielements/button';\nimport IntlMessages from '../../components/utility/intlMessages';\nimport ForgotPasswordStyleWrapper from './securityQuestions.style';\nimport Select, { SelectOption } from '../../components/uielements/select';\nimport { Form, message } from 'antd';\nimport { checkSelect } from '../Utility/validator';\nimport { Modal, Spin, Col, Input, Row, Icon } from 'antd';\nimport { rowStyle } from '../../styles/JsStyles/CommonStyles';\nimport { CallServerPost, showProgress, hideProgress, errorModal, resetPasswordSuccessModal, getSaveButtonText, PASS_KEY_UI, SEC_ANS_UI, encryptSensitiveData } from '../Utility/sharedUtility';\nimport SingleForm from '../Utility/SingleForm';\nimport { checkPassword, dynamicValidation } from '../Utility/validator';\nimport { errorMessageTooltip } from '../Utility/errorMessageUtility.js';\nvar FormItem = Form.Item;\nvar Option = SelectOption;\nvar antIcon = /*#__PURE__*/React.createElement(Icon, {\n  type: \"loading\",\n  style: {\n    fontSize: 24,\n    color: '#17242c'\n  },\n  spin: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 17\n  }\n});\nvar currentObj;\nvar userID;\nvar thisObj = {};\nvar DropList = \"\";\nvar validateStatus = \"\";\nvar SecurityQuestions = /*#__PURE__*/function (_Component) {\n  _inherits(SecurityQuestions, _Component);\n  var _super = _createSuper(SecurityQuestions);\n  function SecurityQuestions(props) {\n    var _this;\n    _classCallCheck(this, SecurityQuestions);\n    _this = _super.call(this, props);\n    _this.getQuestionDDL = function (nextProps) {\n      if (nextProps.visible) {\n        showProgress();\n        CallServerPost('PasswordSecurityQuestions/GetAllActivePasswordSecurityQuestions', {}).then(function (response) {\n          hideProgress();\n          if (response.value != null) {\n            thisObj.setState({\n              questions: response.value\n            });\n          }\n        });\n      }\n    };\n    _this.FormList = function (value) {\n      var temp = {\n        options1: [],\n        options2: [],\n        options3: []\n      };\n      value.forEach(function (key, index) {\n        temp.options1.push({\n          attributeName: \"\",\n          keyValue: key.passwordSecurityQuestionID,\n          literal: key.questionText\n        });\n        temp.options2.push({\n          attributeName: \"\",\n          keyValue: key.passwordSecurityQuestionID,\n          literal: key.questionText\n        });\n        temp.options3.push({\n          attributeName: \"\",\n          keyValue: key.passwordSecurityQuestionID,\n          literal: key.questionText\n        });\n      });\n      return temp;\n    };\n    _this.selectDependencyChange = function (value, id) {\n      var tempvalue = JSON.parse(DropList);\n      var temp = {\n        \"question1\": [],\n        \"question2\": [],\n        \"question3\": []\n      };\n      var ids = {\n        \"Question1\": thisObj.props.form.getFieldValue(\"Question1\"),\n        \"Question2\": thisObj.props.form.getFieldValue(\"Question2\"),\n        \"Question3\": thisObj.props.form.getFieldValue(\"Question3\")\n      };\n      ids[id] = value;\n      tempvalue.forEach(function (key, index) {\n        if (key.passwordSecurityQuestionID == value) {\n          temp[id.toLowerCase()].push({\n            attributeName: \"\",\n            keyValue: key.passwordSecurityQuestionID,\n            literal: key.questionText\n          });\n        } else {\n          if (key.passwordSecurityQuestionID != ids.Question2 && key.passwordSecurityQuestionID != ids.Question3) {\n            temp.question1.push({\n              attributeName: \"\",\n              keyValue: key.passwordSecurityQuestionID,\n              literal: key.questionText\n            });\n          }\n          if (key.passwordSecurityQuestionID != ids.Question1 && key.passwordSecurityQuestionID != ids.Question3) {\n            temp.question2.push({\n              attributeName: \"\",\n              keyValue: key.passwordSecurityQuestionID,\n              literal: key.questionText\n            });\n          }\n          if (key.passwordSecurityQuestionID != ids.Question1 && key.passwordSecurityQuestionID != ids.Question2) {\n            temp.question3.push({\n              attributeName: \"\",\n              keyValue: key.passwordSecurityQuestionID,\n              literal: key.questionText\n            });\n          }\n        }\n      });\n    };\n    _this.getOptions = function (otherValue1, otherValue2) {\n      var questions = _this.state.questions;\n      var ops = [];\n      if (questions !== null) {\n        questions.map(function (qstn) {\n          if (qstn.passwordSecurityQuestionID != otherValue1 && qstn.passwordSecurityQuestionID != otherValue2) {\n            ops.push( /*#__PURE__*/React.createElement(Option, {\n              title: qstn.questionText,\n              key: qstn.passwordSecurityQuestionID,\n              value: qstn.passwordSecurityQuestionID,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 30\n              }\n            }, qstn.questionText));\n          }\n        });\n      }\n      return ops;\n    };\n    _this.getValueFromForm = function (getFieldsValue, key) {\n      return getFieldsValue([key])[key] !== undefined ? getFieldsValue([key])[key] : \"\";\n    };\n    _this.checkNewPassword = function (rule, value, callback) {\n      if (value && value == _this.props.userProfile.userPassword) {\n        callback('New Password should not be same as Current Password');\n      } else {\n        var regex = /(?=.{8,16})((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$ %^&*()_+ {} | \":?><,.\\/;'\\=`-])).*/;\n        if (value && !regex.test(value)) {\n          callback('Enter valid password');\n        } else {\n          callback();\n        }\n      }\n    };\n    _this.checkConfirmPassword = function (rule, value, callback) {\n      if (value && value !== _this.props.form.getFieldValue('New Password')) {\n        callback('Confirm Password should be same as New Password');\n      } else {\n        callback();\n      }\n    };\n    _this.onTogglePassword = function () {\n      return _this.setState(function (prevState) {\n        return {\n          showPassword: !prevState.showPassword\n        };\n      });\n    };\n    _this.onConfirmPassword = function () {\n      return _this.setState(function (prevState) {\n        return {\n          confirmPassword: !prevState.confirmPassword\n        };\n      });\n    };\n    _this.handleKeyDown = function (e) {\n      if (e.key === \" \") {\n        e.preventDefault();\n      }\n    };\n    _this.checkPassword = function (rule, value, callback) {\n      var password = value;\n      if (password) {\n        var score = 0;\n        var regexPositive = [\"[A-Z]\", \"[a-z]\", \"[0-9]\", \"[$@$!%*#?&\\S]\"];\n        regexPositive.forEach(function (regex, index) {\n          if (new RegExp(regex).test(password)) {\n            score += 1;\n          }\n        });\n        score = score >= 3 ? password.length >= 8 && password.length <= 15 ? 3 : 0 : score;\n        validateStatus = \"\";\n        switch (score) {\n          case 0:\n          case 1:\n          case 2:\n            {\n              validateStatus = \"error\";\n              callback(\"Enter valid password\");\n              return;\n            }\n          default:\n            callback();\n            return;\n        }\n      }\n      validateStatus = \"error\";\n      callback('');\n      return;\n    };\n    _this.handlerCopy = function (e) {\n      e.preventDefault();\n    };\n    _this.onQuestionChange = function (questionText) {\n      var form = _this.props.form;\n      if (questionText === \"Question1\") {\n        form.setFieldsValue({\n          'Answer1': \"\"\n        });\n      } else if (questionText === \"Question2\") {\n        form.setFieldsValue({\n          'Answer2': \"\"\n        });\n      } else if (questionText === \"Question3\") {\n        form.setFieldsValue({\n          'Answer3': \"\"\n        });\n      }\n    };\n    _this.handleForgotPassword = _this.handleForgotPassword.bind(_assertThisInitialized(_this));\n    _this.state = {\n      passwordSecurityQuestionList: {},\n      loading: false,\n      disableBtn: false,\n      //current page field list\n      responseData: {\n        formData: {},\n        selectOptions: {}\n      },\n      questions: null,\n      showPassword: false,\n      confirmPassword: false,\n      password: ''\n    };\n    thisObj = _assertThisInitialized(_this);\n    _this.getQuestionDDL(_this.props);\n    validateStatus = \"\";\n    return _this;\n  }\n  _createClass(SecurityQuestions, [{\n    key: \"handleForgotPassword\",\n    value: function handleForgotPassword(e) {\n      var _this2 = this;\n      e.preventDefault();\n      var thisObj = this;\n      thisObj.props.form.validateFields(function (err, values) {\n        if (!err) {\n          thisObj.setState({\n            disableBtn: true,\n            loading: true\n          });\n          userID = _this2.props.userProfile.userID;\n          var array = [];\n          array[0] = {\n            Question: values[\"Question1\"],\n            Answer: encryptSensitiveData(values[\"Answer1\"], SEC_ANS_UI),\n            TimeZone: \"IST\",\n            UserID: userID,\n            UpdatedBy: userID\n          };\n          array[1] = {\n            Question: values[\"Question2\"],\n            Answer: encryptSensitiveData(values[\"Answer2\"], SEC_ANS_UI),\n            TimeZone: \"IST\",\n            UserID: userID,\n            UpdatedBy: userID\n          };\n          array[2] = {\n            Question: values[\"Question3\"],\n            Answer: encryptSensitiveData(values[\"Answer3\"], SEC_ANS_UI),\n            TimeZone: \"IST\",\n            UserID: userID,\n            UpdatedBy: userID\n          };\n          values[\"PasswordQuestionAnswer\"] = array;\n          values[\"TimeZone\"] = \"IST\";\n          values[\"UserID\"] = userID;\n          values[\"UserPassword\"] = encryptSensitiveData(values[\"NewPassword\"], PASS_KEY_UI);\n          values[\"ChangeReason\"] = \"Manually updated by the user\";\n          values[\"UpdatedBy\"] = userID;\n          showProgress();\n          CallServerPost('PasswordSecurityQuestions/CreatePasswordSecurityQuestion ', values).then(function (response) {\n            hideProgress();\n            if (response.status == 1) {\n              resetPasswordSuccessModal(response.message, thisObj.props, \"/\");\n            } else {\n              errorModal(response.message);\n            }\n            thisObj.setState({\n              disableBtn: false,\n              loading: false\n            });\n          }).catch(function (error) {\n            return function () {\n              hideProgress();\n              errorModal(\"Unable to update password security question!\");\n            };\n          });\n        }\n      });\n    }\n  }, {\n    key: \"splCharacter\",\n    value: function splCharacter(e) {\n      var re = /[0-9A-Za-z!,@,#,$,%,^,&,*,(,)]+/g;\n      if (!re.test(e.key)) {\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      errorMessageTooltip(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var _this$state = this.state,\n        showPassword = _this$state.showPassword,\n        confirmPassword = _this$state.confirmPassword;\n      var _this$props$form = this.props.form,\n        getFieldDecorator = _this$props$form.getFieldDecorator,\n        getFieldsValue = _this$props$form.getFieldsValue;\n      var visible = this.props.visible;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var val1 = this.getValueFromForm(getFieldsValue, \"Question1\");\n      var val2 = this.getValueFromForm(getFieldsValue, \"Question2\");\n      var val3 = this.getValueFromForm(getFieldsValue, \"Question3\");\n      var options1 = this.getOptions(val2, val3);\n      var options2 = this.getOptions(val1, val3);\n      var options3 = this.getOptions(val1, val2);\n      var newPassword = this.getValueFromForm(getFieldsValue, \"NewPassword\");\n      return /*#__PURE__*/React.createElement(Modal, {\n        visible: visible,\n        maskClosable: false,\n        title: \"Password Security Question\",\n        width: \"85%\",\n        style: {\n          top: 5\n        },\n        onCancel: this.state.disableBtn ? null : this.props.cancelCallback,\n        footer: [/*#__PURE__*/React.createElement(Button, {\n          key: \"back\",\n          disabled: this.state.disableBtn,\n          className: \"ant-btn-danger\",\n          onClick: this.props.cancelCallback,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 25\n          }\n        }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n          key: \"submit\",\n          disabled: this.state.disableBtn,\n          className: \"saveBtn\",\n          onClick: this.handleForgotPassword,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }\n        }, getSaveButtonText())],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: '#fff',\n          textAlign: '-webkit-center',\n          paddingBottom: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          padding: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"isoResetPassForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        layout: \"vertical\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: rowStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 10,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormItem, {\n        label: \"Security Question1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Question1\", {\n        rules: [{\n          required: true,\n          message: \"Security Question1 should be selected\"\n        }],\n        initialValue: null\n      })( /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        style: {\n          width: '100%'\n        },\n        onChange: function onChange() {\n          return _this3.onQuestionChange(\"Question1\");\n        },\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 57\n        }\n      }, \"--Select--\"), options1))), /*#__PURE__*/React.createElement(FormItem, {\n        key: \"Answer1\",\n        label: \"Answer1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Answer1\", {\n        rules: [{\n          required: true,\n          message: \"Answer1 is mandatory\"\n        }, {\n          min: 2,\n          message: 'Answer1 should be between 2-255 characters.'\n        }, {\n          max: 255,\n          message: 'Answer1 should be between 2-255 characters.'\n        }, {\n          validator: dynamicValidation,\n          message: \"Answer1 should contain only alphanumeric and special characters(-_;,(). )\",\n          regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\n        }]\n      })( /*#__PURE__*/React.createElement(Input, {\n        style: {\n          \"-webkit-text-security\": \"disc\"\n        },\n        size: \"large\",\n        placeholder: \"Answer1\",\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 49\n        }\n      }))), /*#__PURE__*/React.createElement(FormItem, {\n        label: \"Security Question2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Question2\", {\n        rules: [{\n          required: true,\n          message: \"Security Question2 should be selected\"\n        }],\n        initialValue: null\n      })( /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        style: {\n          width: '100%'\n        },\n        onChange: function onChange() {\n          return _this3.onQuestionChange(\"Question2\");\n        },\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 57\n        }\n      }, \"--Select--\"), options2))), /*#__PURE__*/React.createElement(FormItem, {\n        key: \"Answer2\",\n        label: \"Answer2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Answer2\", {\n        rules: [{\n          required: true,\n          message: \"Answer2 is mandatory\"\n        }, {\n          min: 2,\n          message: 'Answer2 should be between 2-255 characters.'\n        }, {\n          max: 255,\n          message: 'Answer2 should be between 2-255 characters.'\n        }, {\n          validator: dynamicValidation,\n          message: \"Answer2 should contain only alphanumeric and special characters(-_;,(). )\",\n          regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\n        }]\n      })( /*#__PURE__*/React.createElement(Input, {\n        style: {\n          \"-webkit-text-security\": \"disc\"\n        },\n        size: \"large\",\n        placeholder: \"Answer2\",\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 53\n        }\n      }))), /*#__PURE__*/React.createElement(FormItem, {\n        label: \" Security Question3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Question3\", {\n        rules: [{\n          required: true,\n          message: \"Security Question3 should be selected\"\n        }],\n        initialValue: null\n      })( /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        style: {\n          width: '100%'\n        },\n        onChange: function onChange() {\n          return _this3.onQuestionChange(\"Question3\");\n        },\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 57\n        }\n      }, \"--Select--\"), options3))), /*#__PURE__*/React.createElement(FormItem, {\n        key: \"Answer3\",\n        label: \"Answer3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 41\n        }\n      }, getFieldDecorator(\"Answer3\", {\n        rules: [{\n          required: true,\n          message: \"Answer3 is mandatory\"\n        }, {\n          min: 2,\n          message: 'Answer3 should be between 2-255 characters.'\n        }, {\n          max: 255,\n          message: 'Answer3 should be between 2-255 characters.'\n        }, {\n          validator: dynamicValidation,\n          message: \"Answer3 should contain only alphanumeric and special characters(-_;,(). )\",\n          regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\n        }]\n      })( /*#__PURE__*/React.createElement(Input, {\n        style: {\n          \"-webkit-text-security\": \"disc\"\n        },\n        size: \"large\",\n        placeholder: \"Answer3\",\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 53\n        }\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 10,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormItem, Object.assign({\n        key: \"New Password\",\n        label: \"New Password\"\n      }, validateStatus ? {\n        validateStatus: validateStatus\n      } : {}, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 45\n        }\n      }, getFieldDecorator(\"NewPassword\", {\n        rules: [{\n          validator: this.checkPassword\n        }, {\n          required: true,\n          message: \"New Password is mandatory\"\n        }]\n      })( /*#__PURE__*/React.createElement(Input, {\n        size: \"large\",\n        onKeyDown: this.handleKeyDown,\n        onKeyPress: function onKeyPress(e) {\n          return _this3.splCharacter(e);\n        },\n        onPaste: function onPaste(e) {\n          e.preventDefault();\n          return false;\n        },\n        autoComplete: \"off\",\n        onCopy: this.handlerCopy,\n        maxlength: \"15\",\n        type: \"text\",\n        style: {\n          \"-webkit-text-security\": \"disc\"\n        },\n        placeholder: \"New Password\",\n        onKeyUp: function onKeyUp(e) {\n          return _this3.props.form.resetFields([\"ConfirmPassword\"]);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 53\n        }\n      })))), /*#__PURE__*/React.createElement(FormItem, {\n        key: \"Confirm Password\",\n        label: \"Confirm Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 45\n        }\n      }, getFieldDecorator(\"ConfirmPassword\", {\n        rules: [{\n          required: true,\n          message: \"Confirm Password is mandatory\"\n        }, {\n          validator: checkPassword,\n          message: \"Password is not the same\",\n          props: this,\n          regExPattern: \"/^(?=.{7,})((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*\\\\d)(?=.*[a-zA-Z])(?=.*[\\\\W_])|(?=.*[a-z])(?=.*[A-Z])(?=.*[a-z]))(?!.*[\\\\s]).*/\"\n        }]\n      })( /*#__PURE__*/React.createElement(Input, {\n        onKeyDown: this.handleKeyDown,\n        onKeyPress: function onKeyPress(e) {\n          return _this3.splCharacter(e);\n        },\n        onCopy: this.handlerCopy,\n        onPaste: function onPaste(e) {\n          e.preventDefault();\n          return false;\n        },\n        autoComplete: \"off\",\n        size: \"large\",\n        maxlength: \"15\",\n        type: \"text\",\n        style: {\n          \"-webkit-text-security\": \"disc\"\n        },\n        placeholder: \"Confirm Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 57\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'justify',\n          paddingLeft: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 45\n        }\n      }, \"Password Policy\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"PasswordRules\",\n        style: {\n          marginLeft: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: {\n          color: newPassword.length >= 8 && newPassword.length <= 15 ? \"green\" : \"red\",\n          fontSize: \"10px\"\n        },\n        className: \"fa fa-check-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 53\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 53\n        }\n      }, \"Password should be between 8-15 characters.\")), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 49\n        }\n      }, \"Should contain characters from  three of the following four categories:\", /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"PasswordRules\",\n        style: {\n          marginTop: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 54\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\",\n          marginLeft: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: {\n          color: newPassword.match(/[A-Z]/) ? \"green\" : \"red\",\n          fontSize: \"10px\"\n        },\n        className: \"fa fa-check-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 58\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 61\n        }\n      }, \"Must have at least one upper case character [A-Z]\")), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\",\n          marginLeft: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: {\n          color: newPassword.match(/[a-z]/) ? \"green\" : \"red\",\n          fontSize: \"10px\"\n        },\n        className: \"fa fa-check-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 61\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 61\n        }\n      }, \"Must have at least one lower case character [a-z]\")), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\",\n          marginLeft: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: {\n          color: newPassword.match(/[0-9]/) ? \"green\" : \"red\",\n          fontSize: \"10px\"\n        },\n        className: \"fa fa-check-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 61\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 61\n        }\n      }, \"Must have at least one numeric digit [0-9]\")), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"forgotlimargin\",\n        style: {\n          textAlign: \"left\",\n          marginBottom: \"10px\",\n          marginLeft: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: {\n          color: newPassword.match(/[`~!@#$%\\^&*()+=|;:'\",.<>\\/?{}_[\\]\\\\\\-]/) ? \"green\" : \"red\",\n          fontSize: \"10px\"\n        },\n        className: \"fa fa-check-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 61\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 61\n        }\n      }, \"Must have at least one special character. Allowed special characters are [!,@,#,$,%,^,&,*,(,)]\")))))))))))));\n    }\n  }]);\n  return SecurityQuestions;\n}(Component);\nexport default Form.create()(SecurityQuestions);","map":{"version":3,"names":["React","Component","Link","Button","IntlMessages","ForgotPasswordStyleWrapper","Select","SelectOption","Form","message","checkSelect","Modal","Spin","Col","Input","Row","Icon","rowStyle","CallServerPost","showProgress","hideProgress","errorModal","resetPasswordSuccessModal","getSaveButtonText","PASS_KEY_UI","SEC_ANS_UI","encryptSensitiveData","SingleForm","checkPassword","dynamicValidation","errorMessageTooltip","FormItem","Item","Option","antIcon","fontSize","color","currentObj","userID","thisObj","DropList","validateStatus","SecurityQuestions","props","getQuestionDDL","nextProps","visible","then","response","value","setState","questions","FormList","temp","options1","options2","options3","forEach","key","index","push","attributeName","keyValue","passwordSecurityQuestionID","literal","questionText","selectDependencyChange","id","tempvalue","JSON","parse","ids","form","getFieldValue","toLowerCase","Question2","Question3","question1","Question1","question2","question3","getOptions","otherValue1","otherValue2","state","ops","map","qstn","getValueFromForm","getFieldsValue","undefined","checkNewPassword","rule","callback","userProfile","userPassword","regex","test","checkConfirmPassword","onTogglePassword","prevState","showPassword","onConfirmPassword","confirmPassword","handleKeyDown","e","preventDefault","password","score","regexPositive","RegExp","length","handlerCopy","onQuestionChange","setFieldsValue","handleForgotPassword","bind","passwordSecurityQuestionList","loading","disableBtn","responseData","formData","selectOptions","validateFields","err","values","array","Question","Answer","TimeZone","UserID","UpdatedBy","status","catch","error","re","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","val1","val2","val3","newPassword","top","cancelCallback","backgroundColor","textAlign","paddingBottom","padding","rules","required","initialValue","width","input","option","children","indexOf","min","max","validator","regExPattern","splCharacter","resetFields","paddingLeft","marginLeft","marginBottom","marginTop","match","create"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/src/containers/Page/securityQuestions.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../../components/uielements/button';\r\nimport IntlMessages from '../../components/utility/intlMessages';\r\nimport ForgotPasswordStyleWrapper from './securityQuestions.style';\r\nimport Select, { SelectOption } from '../../components/uielements/select';\r\nimport { Form, message } from 'antd';\r\nimport { checkSelect } from '../Utility/validator';\r\nimport { Modal, Spin, Col, Input, Row, Icon } from 'antd';\r\nimport { rowStyle } from '../../styles/JsStyles/CommonStyles';\r\nimport { CallServerPost, showProgress, hideProgress, errorModal, resetPasswordSuccessModal, getSaveButtonText, PASS_KEY_UI, SEC_ANS_UI, encryptSensitiveData } from '../Utility/sharedUtility';\r\nimport SingleForm from '../Utility/SingleForm';\r\nimport { checkPassword, dynamicValidation } from '../Utility/validator';\r\nimport { errorMessageTooltip } from '../Utility/errorMessageUtility.js';\r\n\r\nconst FormItem = Form.Item;\r\nconst Option = SelectOption;\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24, color: '#17242c' }} spin />;\r\n\r\nvar currentObj;\r\nvar userID;\r\nvar thisObj = {};\r\nvar DropList = \"\";\r\nlet validateStatus = \"\";\r\nclass SecurityQuestions extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleForgotPassword = this.handleForgotPassword.bind(this);\r\n        this.state = {\r\n            passwordSecurityQuestionList: {},\r\n            loading: false,\r\n            disableBtn: false,\r\n            //current page field list\r\n            responseData: {\r\n                formData: {},\r\n                selectOptions: {}\r\n\r\n            },\r\n            questions: null,\r\n            showPassword: false,\r\n            confirmPassword: false,\r\n            password: '',\r\n        }\r\n        thisObj = this;\r\n        this.getQuestionDDL(this.props)\r\n        validateStatus = \"\";\r\n    }\r\n\r\n    getQuestionDDL = (nextProps) =>\r\n    {\r\n        if (nextProps.visible)\r\n        {\r\n                showProgress();\r\n                CallServerPost('PasswordSecurityQuestions/GetAllActivePasswordSecurityQuestions', {})\r\n                    .then(function (response)\r\n                    {\r\n                        hideProgress();\r\n                        if (response.value != null)\r\n                        {\r\n                           \r\n                            thisObj.setState({ questions: response.value });\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    \r\n\r\n    FormList = (value) =>\r\n    {\r\n        let temp = { options1: [], options2: [], options3: [] };\r\n\r\n        value.forEach(function (key, index)\r\n        {\r\n            temp.options1.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n            temp.options2.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n            temp.options3.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n        });\r\n        return temp;\r\n    }\r\n\r\n    \r\n\r\n    handleForgotPassword(e)\r\n    {\r\n        e.preventDefault();\r\n        const thisObj = this;\r\n        thisObj.props.form.validateFields((err, values) =>\r\n        {\r\n            if (!err) \r\n            {\r\n                thisObj.setState({ disableBtn: true, loading: true });\r\n                userID = this.props.userProfile.userID\r\n                var array = [];\r\n                array[0] = { Question: values[\"Question1\"], Answer: encryptSensitiveData(values[\"Answer1\"], SEC_ANS_UI), TimeZone: \"IST\", UserID: userID, UpdatedBy: userID }\r\n                array[1] = { Question: values[\"Question2\"], Answer: encryptSensitiveData(values[\"Answer2\"], SEC_ANS_UI), TimeZone: \"IST\", UserID: userID, UpdatedBy: userID }\r\n                array[2] = { Question: values[\"Question3\"], Answer: encryptSensitiveData(values[\"Answer3\"], SEC_ANS_UI), TimeZone: \"IST\", UserID: userID, UpdatedBy: userID }\r\n                              \r\n                values[\"PasswordQuestionAnswer\"] = array;                                \r\n                values[\"TimeZone\"] = \"IST\";\r\n                values[\"UserID\"] = userID;\r\n                values[\"UserPassword\"] = encryptSensitiveData(values[\"NewPassword\"], PASS_KEY_UI);\r\n                values[\"ChangeReason\"] = \"Manually updated by the user\";\r\n                values[\"UpdatedBy\"] = userID;\r\n\r\n                showProgress();\r\n                CallServerPost('PasswordSecurityQuestions/CreatePasswordSecurityQuestion ', values).then(\r\n                    function (response)\r\n                    {\r\n                        hideProgress();\r\n                        if (response.status == 1) {\r\n                            resetPasswordSuccessModal(response.message, thisObj.props, \"/\");\r\n                        } else {\r\n\r\n                            errorModal(response.message);\r\n                        }\r\n                        thisObj.setState({ disableBtn: false, loading: false });\r\n                    }\r\n                ).catch(error => () => {\r\n                    hideProgress();\r\n                    errorModal(\"Unable to update password security question!\");\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    selectDependencyChange = (value, id) =>\r\n    {\r\n        let tempvalue = JSON.parse(DropList);\r\n        let temp = { \"question1\": [], \"question2\": [], \"question3\": [] };\r\n        let ids = {\r\n            \"Question1\": thisObj.props.form.getFieldValue(\"Question1\"),\r\n            \"Question2\": thisObj.props.form.getFieldValue(\"Question2\"),\r\n            \"Question3\": thisObj.props.form.getFieldValue(\"Question3\")\r\n        };\r\n\r\n        ids[id] = value;\r\n        \r\n        tempvalue.forEach(function (key, index)\r\n        {\r\n            if (key.passwordSecurityQuestionID == value)\r\n            {\r\n                temp[id.toLowerCase()].push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n            }\r\n            else\r\n            {\r\n                if (key.passwordSecurityQuestionID != ids.Question2 && key.passwordSecurityQuestionID != ids.Question3){\r\n                    temp.question1.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n                }\r\n                if (key.passwordSecurityQuestionID != ids.Question1 && key.passwordSecurityQuestionID != ids.Question3) {\r\n                    temp.question2.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n                }\r\n                if (key.passwordSecurityQuestionID != ids.Question1 && key.passwordSecurityQuestionID != ids.Question2) {\r\n                    temp.question3.push({ attributeName: \"\", keyValue: key.passwordSecurityQuestionID, literal: key.questionText });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getOptions = (otherValue1, otherValue2) => {\r\n        const { questions } = this.state;\r\n        let ops = [];\r\n        if (questions !== null) {\r\n            questions.map(function (qstn) {\r\n                if (qstn.passwordSecurityQuestionID != otherValue1 && qstn.passwordSecurityQuestionID != otherValue2) {\r\n                    ops.push(<Option title={qstn.questionText} key={qstn.passwordSecurityQuestionID} value={qstn.passwordSecurityQuestionID}>{qstn.questionText}</Option>);\r\n                }\r\n            });\r\n        }\r\n\r\n        return ops;\r\n    }\r\n    getValueFromForm = (getFieldsValue, key) => {\r\n        return getFieldsValue([key])[key] !== undefined\r\n            ? getFieldsValue([key])[key]\r\n            : \"\";\r\n    }\r\n\r\n    checkNewPassword = (rule, value, callback) =>\r\n    {\r\n        if (value && value == this.props.userProfile.userPassword)\r\n        {\r\n            callback('New Password should not be same as Current Password');\r\n        } else\r\n        {\r\n            var regex = /(?=.{8,16})((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$ %^&*()_+ {} | \":?><,.\\/;'\\=`-])).*/;\r\n            if (value && !regex.test(value))\r\n            {\r\n                callback('Enter valid password');\r\n\r\n            } else\r\n            {\r\n                callback();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    checkConfirmPassword = (rule, value, callback) => {\r\n        if (value && value !== this.props.form.getFieldValue('New Password')) {\r\n            callback('Confirm Password should be same as New Password');\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n    onTogglePassword = () =>\r\n        this.setState(prevState => ({\r\n            showPassword: !prevState.showPassword,\r\n        }));\r\n\r\n    onConfirmPassword = () =>\r\n        this.setState(prevState => ({\r\n            confirmPassword: !prevState.confirmPassword,\r\n        }));\r\n\r\n    handleKeyDown = e => {\r\n        if (e.key === \" \") {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    //when save password validation\r\n    checkPassword = (rule, value, callback) =>\r\n    {\r\n        let password = value\r\n        if (password) {\r\n            let score = 0\r\n            let regexPositive = [\r\n                \"[A-Z]\",\r\n                \"[a-z]\",\r\n                \"[0-9]\",\r\n                \"[$@$!%*#?&\\S]\",\r\n            ]\r\n\r\n            regexPositive.forEach((regex, index) => {\r\n                if (new RegExp(regex).test(password)) {\r\n                    score += 1\r\n                }\r\n\r\n            })\r\n            score = (score >= 3) ? (password.length >= 8 && password.length <= 15) ? 3 : 0 : score;\r\n            validateStatus = \"\";\r\n            switch (score) {\r\n                case 0:\r\n                case 1:\r\n                case 2:\r\n                    {\r\n                        validateStatus = \"error\";\r\n                        callback(\"Enter valid password\");\r\n                        return;\r\n                    }\r\n                default:\r\n                    callback();\r\n                    return;\r\n            }\r\n        }\r\n        validateStatus = \"error\";\r\n        callback('');\r\n        return;\r\n    }\r\n\r\n    handlerCopy = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    splCharacter(e) {\r\n        const re = /[0-9A-Za-z!,@,#,$,%,^,&,*,(,)]+/g;\r\n        if (!re.test(e.key)) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        errorMessageTooltip(this.props);\r\n    }\r\n\r\n    onQuestionChange = (questionText) => {\r\n\r\n        let { form } = this.props;\r\n        if (questionText === \"Question1\") {\r\n            form.setFieldsValue({ 'Answer1': \"\" });\r\n        } else if (questionText === \"Question2\") {\r\n            form.setFieldsValue({ 'Answer2': \"\" });\r\n        } else if (questionText === \"Question3\") {\r\n            form.setFieldsValue({ 'Answer3': \"\" });\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const{\r\n            showPassword,\r\n            confirmPassword\r\n        } = this.state;\r\n        const { getFieldDecorator, getFieldsValue } = this.props.form;\r\n        const { visible } = this.props;\r\n        \r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n\r\n        const val1 = this.getValueFromForm(getFieldsValue, \"Question1\");\r\n        const val2 = this.getValueFromForm(getFieldsValue, \"Question2\");\r\n        const val3 = this.getValueFromForm(getFieldsValue, \"Question3\");\r\n\r\n        const options1 = this.getOptions(val2, val3);\r\n        const options2 = this.getOptions(val1, val3);\r\n        const options3 = this.getOptions(val1, val2);\r\n\r\n        let newPassword = this.getValueFromForm(getFieldsValue,\"NewPassword\");\r\n        \r\n        return (           \r\n                <Modal\r\n                    visible={ visible }\r\n                    maskClosable={false}\r\n                    title=\"Password Security Question\"\r\n                    width=\"85%\"\r\n                    style={{ top: 5 }}\r\n                    onCancel={this.state.disableBtn ? null : this.props.cancelCallback}\r\n                    footer={[\r\n                        <Button key=\"back\" disabled={this.state.disableBtn} className=\"ant-btn-danger\" onClick={this.props.cancelCallback}>Cancel</Button>,\r\n                        <Button key=\"submit\" disabled={this.state.disableBtn} className=\"saveBtn\"  onClick={this.handleForgotPassword}>\r\n                            {getSaveButtonText()}\r\n                       </Button>,\r\n                    ]}\r\n                >\r\n                      <div\r\n                        style={{\r\n                            backgroundColor: '#fff',\r\n                            textAlign: '-webkit-center',\r\n                            paddingBottom: 20\r\n                        }}>\r\n\r\n                    <div style={{ padding: 5 }}>\r\n                            <div\r\n                                className=\"isoResetPassForm\"\r\n                                \r\n                        >\r\n                            <Form layout=\"vertical\">\r\n                                <Row style={rowStyle} >\r\n                                    <Col md={10} sm={12} xs={12} >\r\n                                        <FormItem\r\n                                            label=\"Security Question1\"\r\n                                        >\r\n                                            {\r\n                                                getFieldDecorator(\"Question1\", {\r\n                                                    rules: [{\r\n                                                        required: true,\r\n                                                        message: \"Security Question1 should be selected\"\r\n                                                    }],\r\n                                                    initialValue: null\r\n                                                })(\r\n                                                    <Select\r\n                                                        showSearch\r\n                                                        style={{ width: '100%' }}\r\n                                                        onChange={() => this.onQuestionChange(\"Question1\")}\r\n                                                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                                    >\r\n                                                        <option value={null}>--Select--</option>\r\n                                                        {options1}\r\n                                                    </Select>\r\n                                                )}\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            key={\"Answer1\"}\r\n                                            label={\"Answer1\"}\r\n                                        >\r\n                                            {\r\n                                                getFieldDecorator(\"Answer1\",\r\n                                                    {\r\n                                                        rules:\r\n                                                            [\r\n                                                            {\r\n                                                                  required: true, message: \"Answer1 is mandatory\"\r\n                                                           },\r\n                                                            { min: 2, message: 'Answer1 should be between 2-255 characters.' },\r\n\r\n                                                            { max: 255, message: 'Answer1 should be between 2-255 characters.' },\r\n\r\n                                                            {\r\n                                                                validator: dynamicValidation,\r\n                                                                message: \"Answer1 should contain only alphanumeric and special characters(-_;,(). )\", regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\r\n                                                            }\r\n                                                        ]\r\n                                                    }\r\n                                            )(\r\n                                                <Input style={{ \"-webkit-text-security\": \"disc\" }} size=\"large\" placeholder=\"Answer1\" autoComplete=\"off\" />\r\n                                                )}\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label=\"Security Question2\"\r\n                                        >{\r\n                                                getFieldDecorator(\"Question2\",\r\n                                                    {\r\n                                                        rules: [{\r\n                                                            required: true,\r\n                                                            message: \"Security Question2 should be selected\"\r\n                                                        }],\r\n                                                        initialValue: null\r\n                                                    }\r\n                                                )(\r\n                                                    <Select\r\n                                                        showSearch\r\n                                                        style={{ width: '100%' }}\r\n                                                        onChange={() => this.onQuestionChange(\"Question2\")}\r\n                                                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                                    >\r\n                                                        <option value={null}>--Select--</option>\r\n                                                        {options2}\r\n                                                    </Select>\r\n                                                )}\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            key={\"Answer2\"}\r\n                                            label={\"Answer2\"}\r\n                                        >\r\n                                        {\r\n                                                getFieldDecorator(\"Answer2\",\r\n                                                    {\r\n                                                        rules: [{ required: true, message: \"Answer2 is mandatory\" },\r\n                                                            { min: 2, message: 'Answer2 should be between 2-255 characters.' },\r\n                                                            { max: 255, message: 'Answer2 should be between 2-255 characters.' },\r\n                                                            {\r\n                                                                validator: dynamicValidation, message: \"Answer2 should contain only alphanumeric and special characters(-_;,(). )\", regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\r\n                                                            }]\r\n                                                    }\r\n                                                )(\r\n                                                    <Input style={{ \"-webkit-text-security\": \"disc\" }} size=\"large\" placeholder=\"Answer2\" autoComplete=\"off\" />\r\n                                                )}\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            label=\" Security Question3\"\r\n                                        >{\r\n                                                getFieldDecorator(\"Question3\",\r\n                                                    {\r\n                                                        rules: [{\r\n                                                            required: true,\r\n                                                            message: \"Security Question3 should be selected\"\r\n                                                        }],\r\n                                                        initialValue: null\r\n                                                    }\r\n                                                )(\r\n                                                    <Select\r\n                                                        showSearch\r\n                                                        style={{ width: '100%' }}\r\n                                                        onChange={() => this.onQuestionChange(\"Question3\")}\r\n                                                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                                    >\r\n                                                        <option value={null}>--Select--</option>\r\n                                                        {options3}\r\n                                                    </Select>\r\n                                                )}\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            key={\"Answer3\"}\r\n                                            label={\"Answer3\"}\r\n                                        >\r\n                                            {\r\n                                                getFieldDecorator(\"Answer3\",\r\n                                                    {\r\n                                                        rules: [{ required: true, message: \"Answer3 is mandatory\" },\r\n                                                            { min: 2, message: 'Answer3 should be between 2-255 characters.' },\r\n                                                            { max: 255, message: 'Answer3 should be between 2-255 characters.' },\r\n                                                            {\r\n                                                                validator: dynamicValidation, message: \"Answer3 should contain only alphanumeric and special characters(-_;,(). )\", regExPattern: \"/^(?!.*  )[ a-zA-Z0-9-_;,()\\.]+$/\"\r\n                                                            }]\r\n                                                    }\r\n                                                )(\r\n                                                    <Input style={{ \"-webkit-text-security\": \"disc\" }} size=\"large\" placeholder=\"Answer3\" autoComplete=\"off\" />\r\n                                                )}\r\n                                        </FormItem>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                    </Col>\r\n                                    <Col md={10} sm={12} xs={12} >\r\n                                        <FormItem\r\n                                            key={\"New Password\"}\r\n                                            label={\"New Password\"}\r\n                                            {...validateStatus ? { validateStatus: validateStatus } : {}}\r\n                                        >\r\n                                            <Form>\r\n                                            {\r\n                                                getFieldDecorator(\"NewPassword\", \r\n                                                    {\r\n                                                    rules:\r\n                                                        [\r\n                                                            {\r\n                                                                validator: this.checkPassword,\r\n                                                            },\r\n                                                                { required: true, message: \"New Password is mandatory\" },\r\n\r\n                                                        ]\r\n                                                    }\r\n                                                )(\r\n                                                    <Input\r\n                                                        size=\"large\"\r\n                                                        onKeyDown={this.handleKeyDown}\r\n                                                        onKeyPress={(e) => this.splCharacter(e)}\r\n                                                        onPaste={(e) => {\r\n                                                            e.preventDefault()\r\n                                                            return false;\r\n                                                        }}\r\n                                                        autoComplete=\"off\"\r\n                                                        onCopy={this.handlerCopy}\r\n                                                        maxlength=\"15\" type=\"text\"\r\n                                                        style={{ \"-webkit-text-security\": \"disc\" }}\r\n                                                        placeholder=\"New Password\"  onKeyUp={(e) => this.props.form.resetFields([\"ConfirmPassword\"])} />\r\n                                                )}\r\n                                            </Form>\r\n                                        </FormItem>\r\n                                        <FormItem\r\n                                            key={\"Confirm Password\"}\r\n                                            label={\"Confirm Password\"}\r\n                                        >\r\n                                            <Form>\r\n                                                {\r\n                                                    getFieldDecorator(\"ConfirmPassword\",\r\n                                                        {\r\n                                                            rules:\r\n                                                                [\r\n                                                                    { required: true, message: \"Confirm Password is mandatory\" },\r\n                                                                    {\r\n                                                                        validator: checkPassword, message: \"Password is not the same\", props: this,\r\n                                                                        regExPattern: \"/^(?=.{7,})((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*\\\\d)(?=.*[a-zA-Z])(?=.*[\\\\W_])|(?=.*[a-z])(?=.*[A-Z])(?=.*[a-z]))(?!.*[\\\\s]).*/\",\r\n                                                                    }\r\n                                                                ]\r\n                                                        }\r\n                                                    )(\r\n                                                        <Input\r\n                                                            onKeyDown={this.handleKeyDown}\r\n                                                            onKeyPress={(e) => this.splCharacter(e)}\r\n                                                            onCopy={this.handlerCopy}\r\n                                                            onPaste={(e) => {\r\n                                                                e.preventDefault()\r\n                                                                return false;\r\n                                                            }}\r\n                                                            autoComplete=\"off\"\r\n                                                            size=\"large\" maxlength=\"15\"\r\n                                                            type=\"text\"\r\n                                                            style={{ \"-webkit-text-security\": \"disc\" }}\r\n                                                            placeholder=\"Confirm Password\"\r\n                                                        />\r\n                                                    )}\r\n                                            </Form>\r\n                                        </FormItem>\r\n                                        <div\r\n                                            style={{ textAlign: 'justify', paddingLeft: 10 }}>\r\n                                            <h2>Password Policy</h2>\r\n                                            <ul\r\n                                                className=\"PasswordRules\"\r\n                                                style={{marginLeft:15}}\r\n                                            >\r\n                                               {/* <li*/}\r\n                                               {/*     className=\"forgotlimargin\"*/}\r\n                                               {/*     style={{ textAlign: \"left\", marginBottom: \"10px\" }}*/}\r\n                                               {/* >*/}\r\n                                               {/*     <i*/}\r\n                                               {/*         style={{*/}\r\n                                               {/*             color: newPassword.length >= \"8\" ? \"green\" : \"red\",*/}\r\n                                               {/*             fontSize: \"10px\"*/}\r\n                                               {/*         }}*/}\r\n                                               {/*         className=\"fa fa-check-circle\" aria-hidden=\"true\">*/}\r\n                                               {/*     </i>*/}\r\n                                               {/*     Should be atleast EIGHT characters in length*/}\r\n                                               {/*</li>*/}\r\n                                                <li\r\n                                                    className=\"forgotlimargin\"\r\n                                                    style={{ textAlign: \"left\", marginBottom: \"10px\" }}\r\n                                                >\r\n                                                    <i\r\n                                                        style={{\r\n                                                            color: (newPassword.length >= 8 && newPassword.length <= 15) ? \"green\" : \"red\",\r\n                                                            fontSize: \"10px\"\r\n                                                        }}\r\n                                                        className=\"fa fa-check-circle\" aria-hidden=\"true\">\r\n                                                    </i>\r\n                                                    <span>Password should be between 8-15 characters.</span>\r\n                                               </li>\r\n\r\n                                                {/*<li*/}\r\n                                                {/*    classNameName=\"forgotlimargin\"*/}\r\n                                                {/*    style={{ textAlign: \"left\", marginBottom: \"10px\" }}*/}\r\n                                                {/*>*/}\r\n                                                {/*    <i*/}\r\n                                                {/*        style={{*/}\r\n                                                {/*            color: newPassword.match(/^\\S*$/) ? \"green\" : \"red\",*/}\r\n                                                {/*            fontSize: \"10px\"*/}\r\n                                                {/*        }}*/}\r\n                                                {/*        className=\"fa fa-check-circle\"*/}\r\n                                                {/*        aria-hidden=\"true\">*/}\r\n                                                {/*    </i>*/}\r\n                                                {/*    Space is not allowed*/}\r\n                                                {/*</li>*/}\r\n\r\n\r\n                                                <li\r\n                                                    className=\"forgotlimargin\"\r\n                                                    style={{ textAlign: \"left\", marginBottom: \"10px\"}}\r\n                                                > \r\n                                                    Should contain characters from  three of the following four categories:\r\n                                                     <ul\r\n                                                        className=\"PasswordRules\"\r\n                                                        style={{ marginTop: \"10px\" }}\r\n                                                    >\r\n\r\n                                                        <li className=\"forgotlimargin\"\r\n                                                            style={{ textAlign: \"left\", marginBottom: \"10px\", marginLeft: 20 }}\r\n                                                        >\r\n                                                         <i\r\n                                                            style={{\r\n                                                                  color: newPassword.match(/[A-Z]/) ? \"green\" : \"red\",\r\n                                                                  fontSize: \"10px\"\r\n                                                            }}\r\n                                                            className=\"fa fa-check-circle\" aria-hidden=\"true\"\r\n                                                        >\r\n                                                            </i>\r\n                                                            <span>Must have at least one upper case character [A-Z]</span>\r\n                                                     </li>\r\n                                                        <li className=\"forgotlimargin\"\r\n                                                            style={{ textAlign: \"left\", marginBottom: \"10px\", marginLeft: 20 }}\r\n                                                        >\r\n                                                            <i\r\n                                                                style={{\r\n                                                                    color: newPassword.match(/[a-z]/) ? \"green\" : \"red\",\r\n                                                                    fontSize: \"10px\"\r\n                                                                }}\r\n                                                                className=\"fa fa-check-circle\"\r\n                                                                aria-hidden=\"true\">\r\n                                                            </i>\r\n                                                            <span>Must have at least one lower case character [a-z]</span>\r\n                                                        </li>\r\n                                                        <li\r\n                                                            className=\"forgotlimargin\"\r\n                                                            style={{ textAlign: \"left\", marginBottom: \"10px\", marginLeft: 20 }}\r\n                                                        >\r\n                                                            <i\r\n                                                                style={{\r\n                                                                    color: newPassword.match(/[0-9]/) ? \"green\" :\"red\",\r\n                                                                    fontSize: \"10px\"\r\n                                                                }}\r\n                                                                className=\"fa fa-check-circle\"\r\n                                                                aria-hidden=\"true\"\r\n                                                            >\r\n                                                            </i>\r\n                                                            <span>Must have at least one numeric digit [0-9]</span>\r\n                                                        </li>\r\n                                                        <li\r\n                                                            className=\"forgotlimargin\"\r\n                                                            style={{ textAlign: \"left\", marginBottom: \"10px\", marginLeft: 20 }}\r\n                                                        >\r\n                                                            <i\r\n                                                                style={{\r\n                                                                    color: newPassword.match(/[`~!@#$%\\^&*()+=|;:'\",.<>\\/?{}_[\\]\\\\\\-]/) ? \"green\" :\"red\",\r\n                                                                    fontSize: \"10px\"\r\n                                                                }}\r\n                                                                className=\"fa fa-check-circle\"\r\n                                                                aria-hidden=\"true\"\r\n                                                            >\r\n                                                            </i>\r\n                                                            <span>Must have at least one special character. Allowed special characters are [!,@,#,$,%,^,&,*,(,)]</span>\r\n\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n} \r\n\r\n\r\n\r\nexport default Form.create()(SecurityQuestions);\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}