{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\nimport { PLAINTEXT_MODE_ID } from '../modes/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nexport function getIconClasses(modelService, modeService, resource, fileKind) {\n  // we always set these base classes even if we do not have a path\n  var classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n  if (resource) {\n    // Get the path and name of the resource. For data-URIs, we need to parse specially\n    var name_1;\n    if (resource.scheme === Schemas.data) {\n      var metadata = DataUri.parseMetaData(resource);\n      name_1 = metadata.get(DataUri.META_DATA_LABEL);\n    } else {\n      name_1 = cssEscape(basenameOrAuthority(resource).toLowerCase());\n    }\n    // Folders\n    if (fileKind === FileKind.FOLDER) {\n      classes.push(name_1 + \"-name-folder-icon\");\n    }\n    // Files\n    else {\n      // Name & Extension(s)\n      if (name_1) {\n        classes.push(name_1 + \"-name-file-icon\");\n        var dotSegments = name_1.split('.');\n        for (var i = 1; i < dotSegments.length; i++) {\n          classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\n        }\n\n        classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\n      }\n      // Detected Mode\n      var detectedModeId = detectModeId(modelService, modeService, resource);\n      if (detectedModeId) {\n        classes.push(cssEscape(detectedModeId) + \"-lang-file-icon\");\n      }\n    }\n  }\n  return classes;\n}\nexport function detectModeId(modelService, modeService, resource) {\n  if (!resource) {\n    return null; // we need a resource at least\n  }\n\n  var modeId = null;\n  // Data URI: check for encoded metadata\n  if (resource.scheme === Schemas.data) {\n    var metadata = DataUri.parseMetaData(resource);\n    var mime = metadata.get(DataUri.META_DATA_MIME);\n    if (mime) {\n      modeId = modeService.getModeId(mime);\n    }\n  }\n  // Any other URI: check for model if existing\n  else {\n    var model = modelService.getModel(resource);\n    if (model) {\n      modeId = model.getModeId();\n    }\n  }\n  // only take if the mode is specific (aka no just plain text)\n  if (modeId && modeId !== PLAINTEXT_MODE_ID) {\n    return modeId;\n  }\n  // otherwise fallback to path based detection\n  return modeService.getModeIdByFilepathOrFirstLine(resource);\n}\nexport function cssEscape(val) {\n  return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n}","map":{"version":3,"names":["Schemas","DataUri","basenameOrAuthority","PLAINTEXT_MODE_ID","FileKind","getIconClasses","modelService","modeService","resource","fileKind","classes","ROOT_FOLDER","FOLDER","name_1","scheme","data","metadata","parseMetaData","get","META_DATA_LABEL","cssEscape","toLowerCase","push","dotSegments","split","i","length","slice","join","detectedModeId","detectModeId","modeId","mime","META_DATA_MIME","getModeId","model","getModel","getModeIdByFilepathOrFirstLine","val","replace"],"sources":["C:/Users/akash/Desktop/agat project/CLientapp/node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Schemas } from '../../../base/common/network.js';\r\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\r\nimport { PLAINTEXT_MODE_ID } from '../modes/modesRegistry.js';\r\nimport { FileKind } from '../../../platform/files/common/files.js';\r\nexport function getIconClasses(modelService, modeService, resource, fileKind) {\r\n    // we always set these base classes even if we do not have a path\r\n    var classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\r\n    if (resource) {\r\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\r\n        var name_1;\r\n        if (resource.scheme === Schemas.data) {\r\n            var metadata = DataUri.parseMetaData(resource);\r\n            name_1 = metadata.get(DataUri.META_DATA_LABEL);\r\n        }\r\n        else {\r\n            name_1 = cssEscape(basenameOrAuthority(resource).toLowerCase());\r\n        }\r\n        // Folders\r\n        if (fileKind === FileKind.FOLDER) {\r\n            classes.push(name_1 + \"-name-folder-icon\");\r\n        }\r\n        // Files\r\n        else {\r\n            // Name & Extension(s)\r\n            if (name_1) {\r\n                classes.push(name_1 + \"-name-file-icon\");\r\n                var dotSegments = name_1.split('.');\r\n                for (var i = 1; i < dotSegments.length; i++) {\r\n                    classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\r\n                }\r\n                classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\r\n            }\r\n            // Detected Mode\r\n            var detectedModeId = detectModeId(modelService, modeService, resource);\r\n            if (detectedModeId) {\r\n                classes.push(cssEscape(detectedModeId) + \"-lang-file-icon\");\r\n            }\r\n        }\r\n    }\r\n    return classes;\r\n}\r\nexport function detectModeId(modelService, modeService, resource) {\r\n    if (!resource) {\r\n        return null; // we need a resource at least\r\n    }\r\n    var modeId = null;\r\n    // Data URI: check for encoded metadata\r\n    if (resource.scheme === Schemas.data) {\r\n        var metadata = DataUri.parseMetaData(resource);\r\n        var mime = metadata.get(DataUri.META_DATA_MIME);\r\n        if (mime) {\r\n            modeId = modeService.getModeId(mime);\r\n        }\r\n    }\r\n    // Any other URI: check for model if existing\r\n    else {\r\n        var model = modelService.getModel(resource);\r\n        if (model) {\r\n            modeId = model.getModeId();\r\n        }\r\n    }\r\n    // only take if the mode is specific (aka no just plain text)\r\n    if (modeId && modeId !== PLAINTEXT_MODE_ID) {\r\n        return modeId;\r\n    }\r\n    // otherwise fallback to path based detection\r\n    return modeService.getModeIdByFilepathOrFirstLine(resource);\r\n}\r\nexport function cssEscape(val) {\r\n    return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}